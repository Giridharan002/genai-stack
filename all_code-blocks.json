[
    {
        "file": "pinMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/message-pin/server/pinMessage.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });",
            "room": "\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "CsvImporter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer-csv/server/CsvImporter.ts",
        "code": {
            "totalEntries": "\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });",
            "folderName": "\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {",
            "msgGroupData": "\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {",
            "newMessage": "\t\t\t\t\tconst rid = getRoomId(folderName);\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });"
        },
        "depth_rank": 9
    },
    {
        "file": "msTranslate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/server/msTranslate.ts",
        "code": {
            "result": "\t\tconst result = await request.json();\n\t\tconst result = await request.json();\n\n\t\tif (request.status === 200 && result.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},",
            "msgs": "\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));"
        },
        "depth_rank": 9
    },
    {
        "file": "autotranslate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/server/autotranslate.ts",
        "code": {
            "attachmentMessage": "\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };\n\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };"
        },
        "depth_rank": 9
    },
    {
        "file": "googleTranslate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/server/googleTranslate.ts",
        "code": {
            "params": "\t\tconst params = {\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t\t...(target && { target }),",
            "request": "\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });",
            "txt": "\t\t\t\tconst body = await result.json();\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));",
            "body": "\t\t\t\tconst body = await result.json();\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (err) {"
        },
        "depth_rank": 9
    },
    {
        "file": "deeplTranslate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/server/deeplTranslate.ts",
        "code": {
            "result": "\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: { target_lang: language, text: msgs },"
        },
        "depth_rank": 9
    },
    {
        "file": "saveSettings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/server/methods/saveSettings.ts",
        "code": {
            "room": "\t\t\t\tconst room = await Rooms.findE2ERoomById(rid, { projection: { _id: 1 } });\n\t\t\t\tconst room = await Rooms.findE2ERoomById(rid, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "actionButton.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/autotranslate/client/lib/actionButton.ts",
        "code": {
            "hasLanguage": "\t\t\t\t\tconst autoTranslateEnabled = subscription?.autoTranslate || isLivechatRoom;\n\t\t\t\t\tconst autoTranslateEnabled = subscription?.autoTranslate || isLivechatRoom;\n\t\t\t\t\tconst hasLanguage =\n\t\t\t\t\tconst hasLanguage =\n\t\t\t\t\t\thasTranslationLanguageInMessage(message, language) || hasTranslationLanguageInAttachments(message.attachments, language);\n\n\t\t\t\t\treturn Boolean(\n\t\t\t\t\t\t(message as { autoTranslateShowInverse?: boolean }).autoTranslateShowInverse ||"
        },
        "depth_rank": 10
    },
    {
        "file": "starMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/message-star/server/starMessage.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, uid, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, uid, {\n\t\t\tprojection: { _id: 1 },",
            "room": "\t\tconst room = await Rooms.findOneById(message.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tconst room = await Rooms.findOneById(message.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "getWebdavCredentials.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/lib/getWebdavCredentials.ts",
        "code": {
            "cred": "\tconst cred = account.token\n\tconst cred = account.token\n\t\t? { token: account.token }"
        },
        "depth_rank": 10
    },
    {
        "file": "getFileFromWebdav.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/methods/getFileFromWebdav.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});",
            "data": "\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst fileContent = await client.getFileContents(file.filename);\n\t\t\tconst fileContent = await client.getFileContents(file.filename);\n\t\t\tconst data = new Uint8Array(fileContent);\n\t\t\tconst data = new Uint8Array(fileContent);\n\t\t\treturn { success: true, data };"
        },
        "depth_rank": 10
    },
    {
        "file": "removeWebdavAccount.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/methods/removeWebdavAccount.ts",
        "code": {
            "removed": "\t\tconst removed = await WebdavAccounts.removeByUserAndId(accountId, userId);\n\t\tconst removed = await WebdavAccounts.removeByUserAndId(accountId, userId);\n\t\tif (removed) {\n\t\t\tvoid api.broadcast('notify.webdav', userId, {\n\t\t\t\ttype: 'removed',\n\t\t\t\taccount: { _id: accountId },"
        },
        "depth_rank": 10
    },
    {
        "file": "getWebdavFileList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/methods/getWebdavFileList.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});",
            "data": "\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst cred = getWebdavCredentials(account);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst client = new WebdavClientAdapter(account.serverURL, cred);\n\t\t\tconst data = (await client.getDirectoryContents(path)) as IWebdavNode[];\n\t\t\tconst data = (await client.getDirectoryContents(path)) as IWebdavNode[];\n\t\t\treturn { success: true, data };"
        },
        "depth_rank": 10
    },
    {
        "file": "getWebdavFilePreview.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/methods/getWebdavFilePreview.ts",
        "code": {
            "account": "\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});\n\t\tconst account = await WebdavAccounts.findOneByIdAndUserId(accountId, userId, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "addWebdavAccount.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/server/methods/addWebdavAccount.ts",
        "code": {
            "client": "\t\tconst client = new WebdavClientAdapter(data.serverURL, { token: data.token });\n\t\tconst client = new WebdavClientAdapter(data.serverURL, { token: data.token });",
            "duplicateAccount": "\t\tconst duplicateAccount = await WebdavAccounts.findOneByUserIdServerUrlAndUsername(\n\t\tconst duplicateAccount = await WebdavAccounts.findOneByUserIdServerUrlAndUsername(\n\t\t\t{ userId, serverURL: formData.serverURL, username: formData.username },",
            "accountData": "\t\t\tconst client = new WebdavClientAdapter(formData.serverURL, {\n\t\t\tconst client = new WebdavClientAdapter(formData.serverURL, {\n\t\t\t\tusername: formData.username,\n\t\t\t\tpassword: formData.password,\n\t\t\t});\n\n\t\t\tconst accountData = {\n\t\t\tconst accountData = {\n\t\t\t\tuserId,\n\t\t\t\tserverURL: formData.serverURL,\n\t\t\t\tusername: formData.username,\n\t\t\t\tpassword: formData.password,\n\t\t\t\tname: formData.name ?? '',\n\t\t\t};\n\n\t\t\tawait client.stat('/');\n\t\t\tawait WebdavAccounts.insertOne(accountData);\n\n\t\t\tvoid api.broadcast('notify.webdav', userId, {\n\t\t\t\ttype: 'changed',\n\t\t\t\taccount: accountData,\n\t\t\t});\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "actionButton.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/client/actionButton.ts",
        "code": {
            "url": "\t\t\tconst [attachment] = message.attachments || [];\n\t\t\tconst [attachment] = message.attachments || [];\n\t\t\tconst url = getURL(attachment.title_link as string, { full: true });\n\t\t\tconst url = getURL(attachment.title_link as string, { full: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "sync.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webdav/client/startup/sync.ts",
        "code": {
            "events": "const events = {\nconst events = {\n\tchanged: (account: IWebdavAccount) => WebdavAccounts.upsert({ _id: account._id }, account),"
        },
        "depth_rank": 10
    },
    {
        "file": "leave.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-leave/server/leave.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId);\n\t\tconst user = await Users.findOneById(userId);\n\t\tvoid api.broadcast('notify.ephemeralMessage', userId, message.rid, {\n\t\t\tmsg: i18n.t(error, { lng: user?.language || settings.get('Language') || 'en' }),"
        },
        "depth_rank": 9
    },
    {
        "file": "getNewUpdates.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/version-check/server/functions/getNewUpdates.ts",
        "code": {
            "data": "\t\tconst url = 'https://releases.rocket.chat/updates/check';\n\t\tconst url = 'https://releases.rocket.chat/updates/check';\n\t\tconst response = await fetch(url, {\n\t\tconst response = await fetch(url, {\n\t\t\theaders,\n\t\t\tparams,\n\t\t});\n\n\t\tconst data = await response.json();\n\t\tconst data = await response.json();\n\n\t\tcheck(\n\t\t\tdata,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tversions: [\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tversion: String,\n\t\t\t\t\t\tsecurity: Match.Optional(Boolean),\n\t\t\t\t\t\tinfoUrl: String,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t\talerts: Match.Optional([\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tid: String,\n\t\t\t\t\t\ttitle: String,\n\t\t\t\t\t\ttext: String,\n\t\t\t\t\t\ttextArguments: [Match.Any],\n\t\t\t\t\t\tmodifiers: [String] as [StringConstructor],\n\t\t\t\t\t\tinfoUrl: String,\n\t\t\t\t\t}),\n\t\t\t\t]),\n\t\t\t}),\n\t\t);\n\n\t\treturn data as {\n\t\t\tversions: {\n\t\t\t\tversion: string;\n\t\t\t\tsecurity: boolean;\n\t\t\t\tinfoUrl: string;\n\t\t\t}[];\n\n\t\t\talerts: {\n\t\t\t\tid: string;\n\t\t\t\tpriority: number;\n\t\t\t\ttitle: string;\n\t\t\t\ttext: string;\n\t\t\t\ttextArguments?: string[];\n\t\t\t\tmodifiers: string[];\n\t\t\t\tinfoUrl: string;\n\t\t\t}[];\n\t\t};\n\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "file.server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file/server/file.server.ts",
        "code": {
            "name": "\tconstructor({ name = 'file' } = {}) {\n\tconstructor({ name = 'file' } = {}) {\n\t\tthis.name = name;\n\n\t\tthis.bucket = new GridFSBucket(db, { bucketName: this.name });",
            "file": "\t\tconst file = await this.bucket.find({ filename }).limit(1).toArray();\n\t\tconst file = await this.bucket.find({ filename }).limit(1).toArray();",
            "rs": "\t\tconst ws = fs.createWriteStream(path.join(this.absolutePath, fileName));\n\t\tconst ws = fs.createWriteStream(path.join(this.absolutePath, fileName));\n\t\tws.on('close', () => {\n\t\t\treturn ws.emit('end');\n\t\t});\n\t\treturn ws;\n\t}\n\n\tcreateReadStream(fileName: string) {\n\t\treturn fs.createReadStream(path.join(this.absolutePath, fileName));\n\t}\n\n\tstat(fileName: string) {\n\t\treturn fsp.stat(path.join(this.absolutePath, fileName));\n\t}\n\n\tasync remove(fileName: string) {\n\t\treturn fsp.unlink(path.join(this.absolutePath, fileName));\n\t}\n\n\tasync getFileWithReadStream(fileName: string) {\n\t\ttry {\n\t\t\tconst stat = await this.stat(fileName);\n\t\t\tconst stat = await this.stat(fileName);\n\t\t\tconst rs = this.createReadStream(fileName);\n\t\t\tconst rs = this.createReadStream(fileName);\n\t\t\treturn {\n\t\t\t\treadStream: rs,\n\t\t\t\t// contentType: file.contentType\n\t\t\t\tlength: stat.size,\n\t\t\t};\n\t\t} catch (error1) {"
        },
        "depth_rank": 9
    },
    {
        "file": "MentionsParser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/mentions/lib/MentionsParser.ts",
        "code": {
            "userTemplateDefault": "const userTemplateDefault = ({\nconst userTemplateDefault = ({\n\tprefix,\n\tclassName,\n\tmention,\n\ttitle = '',\n\tlabel,\n\ttype = 'username',\n}: {",
            "roomTemplateDefault": "const roomTemplateDefault = ({ prefix, reference, mention }: { prefix: string; reference: string; mention: string }) =>\nconst roomTemplateDefault = ({ prefix, reference, mention }: { prefix: string; reference: string; mention: string }) =>",
            "className": "\t\t\tconst className = classNames.join(' ');\n\t\t\tconst className = classNames.join(' ');\n\n\t\t\tif (mention === 'all' || mention === 'here') {\n\t\t\t\treturn this.userTemplate({ prefix, className, mention, label: mention, type: 'group' });",
            "filterTeam": "\t\t\tconst filterTeam = ({ name, type }: { name?: string; type?: string }) => type === 'team' && name === mention;\n\t\t\tconst filterTeam = ({ name, type }: { name?: string; type?: string }) => type === 'team' && name === mention;",
            "reference": "\t\t\tconst channel = channels?.find(({ name }) => {\n\t\t\tconst channel = channels?.find(({ name }) => {\n\t\t\t\treturn name === mention;\n\t\t\t});\n\t\t\tconst reference = channel ? channel._id : mention;\n\t\t\tconst reference = channel ? channel._id : mention;\n\t\t\treturn this.roomTemplate({ prefix, reference, channel, mention });"
        },
        "depth_rank": 9
    },
    {
        "file": "Mentions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/mentions/server/Mentions.ts",
        "code": {
            "mentions": "\t\tconst mentions = this.getUserMentions(msg);\n\t\tconst mentions = this.getUserMentions(msg);\n\t\tconst mentionsAll: { _id: string; username: string }[] = [];\n\t\tconst mentionsAll: { _id: string; username: string }[] = [];"
        },
        "depth_rank": 9
    },
    {
        "file": "getMentionedTeamMembers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/mentions/server/getMentionedTeamMembers.ts",
        "code": {
            "beforeGetMentions": "const beforeGetMentions = async (mentionIds: string[], extra?: IExtraDataForNotification) => {\nconst beforeGetMentions = async (mentionIds: string[], extra?: IExtraDataForNotification) => {\n\tconst { otherMentions } = extra ?? {};\n\tconst { otherMentions } = extra ?? {};",
            "teamIds": "\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);\n\tconst teamIds = otherMentions?.filter(({ type }) => type === 'team').map(({ _id }) => _id);",
            "members": "\tconst members = await Team.getMembersByTeamIds(teamIds, { projection: { userId: 1 } });\n\tconst members = await Team.getMembersByTeamIds(teamIds, { projection: { userId: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "push.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/push/server/push.ts",
        "code": {
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\t...(token && this.options.getAuthorization && { headers: { Authorization: await this.options.getAuthorization() } }),"
        },
        "depth_rank": 9
    },
    {
        "file": "gcm.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/push/server/gcm.ts",
        "code": {
            "userToken": "\tconst userToken = userTokens.length === 1 ? userTokens[0] : null;\n\tconst userToken = userTokens.length === 1 ? userTokens[0] : null;\n\n\tsender.send(message, userTokens, 5, (err, result) => {\n\t\tif (err) {\n\t\t\tlogger.debug({ msg: 'ANDROID ERROR: result of sender', result });"
        },
        "depth_rank": 9
    },
    {
        "file": "methods.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/push/server/methods.ts",
        "code": {
            "hashedToken": "\t\tconst hashedToken = Accounts._hashLoginToken(options.authToken);\n\t\tconst hashedToken = Accounts._hashLoginToken(options.authToken);\n\n\t\tlet doc;\n\n\t\t// lookup app by id if one was included\n\t\tif (options.id) {\n\t\t\tdoc = await AppsTokens.findOne({ _id: options.id });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChatSubscription.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/models/client/models/ChatSubscription.ts",
        "code": {
            "subscription": "\t\t\tconst query = {\n\t\t\tconst query = {\n\t\t\t\trid,\n\t\t\t};\n\n\t\t\tconst subscription = this.findOne(query, { fields: { roles: 1 } });\n\t\t\tconst subscription = this.findOne(query, { fields: { roles: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "CachedChatRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/models/client/models/CachedChatRoom.ts",
        "code": {
            "sub": "\t\tconst sub = CachedChatSubscription.collection.findOne({ rid: room._id });\n\t\tconst sub = CachedChatSubscription.collection.findOne({ rid: room._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "CachedChatSubscription.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/models/client/models/CachedChatSubscription.ts",
        "code": {
            "room": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tfields: {\n\t\t\t\tlm: 1,\n\t\t\t\tlastMessage: 1,\n\t\t\t\tuids: 1,\n\t\t\t\tstreamingOptions: 1,\n\t\t\t\tusernames: 1,\n\t\t\t\tusersCount: 1,\n\t\t\t\ttopic: 1,\n\t\t\t\tencrypted: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tannouncement: 1,\n\t\t\t\tbroadcast: 1,\n\t\t\t\tarchived: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t\tretention: 1,\n\t\t\t\tteamId: 1,\n\t\t\t\tteamMain: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tonHold: 1,\n\t\t\t\tmetrics: 1,\n\t\t\t\tmuted: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tts: 1,\n\t\t\t\twaitingResponse: 1,\n\t\t\t\tv: 1,\n\t\t\t\ttranscriptRequest: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tresponseBy: 1,\n\t\t\t\tpriorityId: 1,\n\t\t\t\tpriorityWeight: 1,\n\t\t\t\tslaId: 1,\n\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\tlivechatData: 1,\n\t\t\t\tdepartmentId: 1,\n\t\t\t\tsource: 1,\n\t\t\t\tqueuedAt: 1,\n\t\t\t\tfederated: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst room = CachedChatRoom.collection.findOne({ _id: subscription.rid }, options);\n\t\tconst room = CachedChatRoom.collection.findOne({ _id: subscription.rid }, options);",
            "lastRoomUpdate": "\t\tconst lastRoomUpdate = room?.lm || subscription.ts || room?.ts;\n\t\tconst lastRoomUpdate = room?.lm || subscription.ts || room?.ts;\n\n\t\treturn {\n\t\t\t...subscription,\n\t\t\t...(() => {\n\t\t\t\tconst { name } = subscription;\n\t\t\t\tconst { name } = subscription;"
        },
        "depth_rank": 10
    },
    {
        "file": "Users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/models/client/models/Users.ts",
        "code": {
            "user": "\tconstructor() {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneById<TOptions extends Omit<Mongo.Options<IUser>, 'limit'>>(uid: IUser['_id'], options?: TOptions) {\n\t\tconst query: Mongo.Selector<IUser> = {\n\t\tconst query: Mongo.Selector<IUser> = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tisUserInRole(uid: IUser['_id'], roleId: IRole['_id']) {\n\t\tconst user = this.findOneById(uid, { fields: { roles: 1 } });\n\t\tconst user = this.findOneById(uid, { fields: { roles: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/models/client/models/ChatMessage.ts",
        "code": {
            "query": "\tconstructor() {\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: IRoom['_id'], messageId: IMessage['_id'], options?: Mongo.Options<IMessage>) {\n\t\tconst query = {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IMessage & { ignored?: boolean }>['_collection'];"
        },
        "depth_rank": 10
    },
    {
        "file": "PushNotification.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/push-notifications/server/lib/PushNotification.ts",
        "code": {
            "config": "\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });",
            "sender": "\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });\n\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "saveNotificationSettings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/push-notifications/server/methods/saveNotificationSettings.ts",
        "code": {
            "userPref": "\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\treturn userPref?.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };"
        },
        "depth_rank": 10
    },
    {
        "file": "saveRoomTopic.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomTopic.ts",
        "code": {
            "update": "\t\t\tfunction: 'RocketChat.saveRoomTopic',\n\t\t\tfunction: 'RocketChat.saveRoomTopic',\n\t\t});\n\t}\n\n\tconst update = await Rooms.setTopicById(rid, roomTopic);\n\tconst update = await Rooms.setTopicById(rid, roomTopic);\n\tif (update && sendMessage) {\n\t\tawait Message.saveSystemMessage('room_changed_topic', rid, roomTopic || '', user);\n\t}\n\tawait callbacks.run('afterRoomTopicChange', { rid, topic: roomTopic });"
        },
        "depth_rank": 10
    },
    {
        "file": "saveRoomName.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomName.ts",
        "code": {
            "isDiscussion": "\tconst slugifiedRoomName = await getValidRoomName(displayName, rid);\n\tconst slugifiedRoomName = await getValidRoomName(displayName, rid);\n\tconst isDiscussion = Boolean(room?.prid);\n\tconst isDiscussion = Boolean(room?.prid);\n\n\tlet update;\n\n\tif (isDiscussion || isRoomFederated(room)) {\n\t\tupdate = await updateFName(rid, displayName);\n\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "saveRoomSettings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/channel-settings/server/methods/saveRoomSettings.ts",
        "code": {
            "hasRetentionPolicy": "const hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>\nconst hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>",
            "type": "\t\t\tconst type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n\t\t\tconst type = value === 'c' ? TEAM_TYPE.PUBLIC : TEAM_TYPE.PRIVATE;\n\t\t\tvoid Team.update(user._id, room.teamId, { type, updateRoom: false });",
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "twoFactorRequired.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/2fa/server/twoFactorRequired.ts",
        "code": {
            "twoFactor": "\t\tconst twoFactor = args.pop();\n\t\tconst twoFactor = args.pop();\n\t\tif (twoFactor) {\n\t\t\tif (twoFactor.twoFactorCode && twoFactor.twoFactorMethod) {\n\t\t\t\tawait checkCodeForUser({\n\t\t\t\t\tuser: this.userId,\n\t\t\t\t\tconnection: this.connection || undefined,\n\t\t\t\t\tcode: twoFactor.twoFactorCode,\n\t\t\t\t\tmethod: twoFactor.twoFactorMethod,\n\t\t\t\t\toptions,\n\t\t\t\t});\n\t\t\t\tthis.twoFactorChecked = true;\n\t\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "EmailCheck.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/2fa/server/code/EmailCheck.ts",
        "code": {
            "t": "\t\tconst language = user.language || settings.get('Language') || 'en';\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\t\tconst t = (s: string): string => i18n.t(s, { lng: language });"
        },
        "depth_rank": 10
    },
    {
        "file": "totp.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/2fa/server/lib/totp.ts",
        "code": {
            "code": "\t\t\tconst code = Random.id(8);\n\t\t\tconst code = Random.id(8);\n\t\t\tcodes.push(code);\n\t\t\thashedCodes.push(SHA256(code));\n\t\t}\n\n\t\treturn { codes, hashedCodes };"
        },
        "depth_rank": 10
    },
    {
        "file": "resetTOTP.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/2fa/server/functions/resetTOTP.ts",
        "code": {
            "user": "const sendResetNotification = async function (uid: string): Promise<void> {\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'emails'>>(uid, {\n\t\tprojection: { language: 1, emails: 1 },",
            "addresses": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }) => Boolean(verified)).map((e) => e.address);\n\tconst addresses = user.emails?.filter(({ verified }) => Boolean(verified)).map((e) => e.address);",
            "t": "\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "await": "\tconst from = settings.get('From_Email');\n\tconst from = settings.get('From_Email');\n\tconst subject = t('TOTP_reset_email');\n\tconst subject = t('TOTP_reset_email');\n\n\tfor await (const address of addresses) {\n\tfor await (const address of addresses) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: address,\n\t\t\t\tfrom,\n\t\t\t\tsubject,\n\t\t\t\ttext,\n\t\t\t\thtml,\n\t\t\t} as any);\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "regenerateCodes.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/2fa/server/methods/regenerateCodes.ts",
        "code": {
            "verified": "\t\tconst verified = await TOTP.verify({\n\t\tconst verified = await TOTP.verify({\n\t\t\tsecret: user.services.totp.secret,\n\t\t\ttoken: userToken,\n\t\t\tuserId,\n\t\t\tbackupTokens: user.services.totp.hashedBackup,\n\t\t});\n\n\t\tif (verified) {\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();\n\t\t\tconst { codes, hashedCodes } = TOTP.generateCodes();"
        },
        "depth_rank": 10
    },
    {
        "file": "addOAuthApp.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/oauth2-server-config/server/admin/functions/addOAuthApp.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });"
        },
        "depth_rank": 11
    },
    {
        "file": "oauth2-server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/oauth2-server-config/server/oauth/oauth2-server.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(accessToken.userId);\n\tconst user = await Users.findOneById(accessToken.userId);\n\n\tif (user == null) {\n\t\treturn;\n\t}\n\n\treturn { user };"
        },
        "depth_rank": 10
    },
    {
        "file": "ScriptEngine.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/ScriptEngine.ts",
        "code": {
            "scriptResult": "\t\tconst sandbox = {\n\t\tconst sandbox = {\n\t\t\trequest,\n\t\t\tresponse: {\n\t\t\t\terror: null,\n\t\t\t\tstatus_code: response.status,\n\t\t\t\tcontent,\n\t\t\t\tcontent_raw: content,\n\t\t\t\theaders: Object.fromEntries(response.headers),\n\t\t\t},\n\t\t};\n\n\t\tconst scriptResult = await this.executeOutgoingScript(integration, 'process_outgoing_response', sandbox, historyId);\n\t\tconst scriptResult = await this.executeOutgoingScript(integration, 'process_outgoing_response', sandbox, historyId);\n\n\t\tif (scriptResult === false) {\n\t\t\treturn scriptResult;\n\t\t}\n\n\t\tif (scriptResult?.content) {\n\t\t\treturn scriptResult.content;\n\t\t}\n\t}\n\n\tpublic async processIncomingRequest({\n\t\tintegration,\n\t\trequest,\n\t}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "updateHistory.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/updateHistory.ts",
        "code": {
            "_id": "\tconst _id = Random.id();\n\tconst _id = Random.id();\n\n\tawait IntegrationHistory.insertOne({ _id, ...history } as IIntegrationHistory);"
        },
        "depth_rank": 10
    },
    {
        "file": "triggerHandler.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/triggerHandler.js",
        "code": {
            "argObject": "\t\tconst argObject = this.eventNameArgumentsToObject(...args);\n\t\tconst argObject = this.eventNameArgumentsToObject(...args);\n\t\tconst { event, message, room } = argObject;\n\t\tconst { event, message, room } = argObject;",
            "data": "\t\tconst data = {\n\t\tconst data = {\n\t\t\ttoken: trigger.token,\n\t\t\tbot: false,\n\t\t};\n\n\t\tif (word) {\n\t\t\tdata.trigger_word = word;\n\t\t}\n\n\t\tthis.mapEventArgsToData(data, { trigger, event, message, room, owner, user });",
            "prepareMessage": "\t\t\tconst prepareMessage = await this.sendMessage({ trigger, room, message: opts.message, data });\n\t\t\tconst prepareMessage = await this.sendMessage({ trigger, room, message: opts.message, data });",
            "resultMsg": "\t\t\t\t\t\tconst resultMsg = await this.sendMessage({ trigger, room, message: data, data });\n\t\t\t\t\t\tconst resultMsg = await this.sendMessage({ trigger, room, message: data, data });",
            "user": "\t\tconst message = await Messages.findOneById(history.data.message_id);\n\t\tconst message = await Messages.findOneById(history.data.message_id);\n\t\tconst room = await Rooms.findOneById(history.data.channel_id);\n\t\tconst room = await Rooms.findOneById(history.data.channel_id);\n\t\tconst user = await Users.findOneById(history.data.user_id);\n\t\tconst user = await Users.findOneById(history.data.user_id);\n\t\tlet owner;\n\n\t\tif (history.data.owner && history.data.owner._id) {\n\t\t\towner = await Users.findOneById(history.data.owner._id);\n\t\t}\n\n\t\treturn this.executeTriggerUrl(history.url, integration, { event, message, room, owner, user });"
        },
        "depth_rank": 10
    },
    {
        "file": "validateOutgoingIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/validateOutgoingIntegration.ts",
        "code": {
            "user": "\t\t\tfunction: 'validateOutgoing',\n\t\t\tfunction: 'validateOutgoing',\n\t\t});\n\t}\n\n\tconst user = await Users.findOne({ username: integration.username });\n\tconst user = await Users.findOne({ username: integration.username });",
            "babelOptions": "\t\t\tconst babelOptions = Object.assign(Babel.getDefaultOptions({ runtime: false }), {\n\t\t\tconst babelOptions = Object.assign(Babel.getDefaultOptions({ runtime: false }), {\n\t\t\t\tcompact: true,\n\t\t\t\tminified: true,\n\t\t\t\tcomments: false,\n\t\t\t});\n\n\t\t\tintegrationData.scriptCompiled = Babel.compile(integration.script, babelOptions).code;\n\t\t\tintegrationData.scriptError = undefined;\n\t\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "vm2.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/vm2/vm2.ts",
        "code": {
            "vm": "\t\tconst vm = new VM({\n\t\tconst vm = new VM({\n\t\t\ttimeout: 3000,\n\t\t\tsandbox: {\n\t\t\t\t...sandbox,\n\t\t\t\tscript,\n\t\t\t\tmethod,\n\t\t\t\tparams,\n\t\t\t\t...(this.incoming && 'request' in params ? { request: params.request } : {}),",
            "scriptResult": "\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\tconst scriptResult = await vm.run(`\n\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\tscriptTimeout(reject);\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresolve(script[method](params))\n\t\t\t\t\t\t\t} catch(e) {",
            "script": "\t\tconst script = integration.scriptCompiled;\n\t\tconst script = integration.scriptCompiled;\n\t\tconst { store, sandbox } = this.buildSandbox();\n\t\tconst { store, sandbox } = this.buildSandbox();",
            "ScriptClass": "\t\t\tconst vm = new VM({\n\t\t\tconst vm = new VM({\n\t\t\t\tsandbox,\n\t\t\t});\n\n\t\t\tconst ScriptClass = vm.run(vmScript);\n\t\t\tconst ScriptClass = vm.run(vmScript);\n\n\t\t\tif (ScriptClass) {\n\t\t\t\tthis.compiledScripts[integration._id] = {\n\t\t\t\t\tscript: new ScriptClass(),\n\t\t\t\t\tstore,\n\t\t\t\t\t_updatedAt: integration._updatedAt,\n\t\t\t\t};\n\n\t\t\t\treturn this.compiledScripts[integration._id].script;\n\t\t\t}\n\t\t} catch (err) {"
        },
        "depth_rank": 11
    },
    {
        "file": "isolated-vm.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/isolated-vm/isolated-vm.ts",
        "code": {
            "script": "\t\tconst script = integration.scriptCompiled;\n\t\tconst script = integration.scriptCompiled;\n\t\ttry {\n\t\t\tthis.logger.info({ msg: 'Will evaluate the integration script', integration: pick(integration, 'name', '_id') });",
            "isolate": "\t\t\tconst isolate = new ivm.Isolate({ memoryLimit: 8 });\n\t\t\tconst isolate = new ivm.Isolate({ memoryLimit: 8 });",
            "availableFunctions": "\t\t\tconst ivmScript = await isolate.compileScript(getCompatibilityScript(script));\n\t\t\tconst ivmScript = await isolate.compileScript(getCompatibilityScript(script));\n\n\t\t\tconst ivmContext = isolate.createContextSync();\n\t\t\tconst ivmContext = isolate.createContextSync();\n\t\t\tbuildSandbox(ivmContext);\n\n\t\t\tconst ivmResult: Reference<CompatibilityScriptResult> = await ivmScript.run(ivmContext, {\n\t\t\tconst ivmResult: Reference<CompatibilityScriptResult> = await ivmScript.run(ivmContext, {\n\t\t\t\treference: true,\n\t\t\t\ttimeout: 3000,\n\t\t\t});\n\n\t\t\tconst availableFunctions = await ivmResult.get('availableFunctions', { copy: true });\n\t\t\tconst availableFunctions = await ivmResult.get('availableFunctions', { copy: true });",
            "fnReference": "\t\t\tconst scriptFunctions = Object.fromEntries(\n\t\t\tconst scriptFunctions = Object.fromEntries(\n\t\t\t\tavailableFunctions.map((functionName) => {\n\t\t\t\tavailableFunctions.map((functionName) => {\n\t\t\t\t\tconst fnReference = ivmResult.getSync(functionName, { reference: true });\n\t\t\t\t\tconst fnReference = ivmResult.getSync(functionName, { reference: true });"
        },
        "depth_rank": 11
    },
    {
        "file": "getCompatibilityScript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/lib/isolated-vm/getCompatibilityScript.ts",
        "code": {
            "store": "\tconst Store = (function() {\n\tconst Store = (function() {\n\t\tconst store = {};\n\t\tconst store = {};",
            "result": "\tconst fetch = async (...args) => {\n\tconst fetch = async (...args) => {\n\t\tconst result = await serverFetch.apply(undefined, args, { arguments: { copy: true }, result: { promise: true } });\n\t\tconst result = await serverFetch.apply(undefined, args, { arguments: { copy: true }, result: { promise: true } });",
            "functions": "\t(function() {\n\t(function() {\n\t\tconst instance = new Script();\n\t\tconst instance = new Script();\n\n\t\tconst functions = {\n\t\tconst functions = {\n\t\t\t...(typeof instance['prepare_outgoing_request'] === 'function' ? { prepare_outgoing_request : (...args) => instance.prepare_outgoing_request(...args) } : {}),\n\t\t\t...(typeof instance['prepare_outgoing_request'] === 'function' ? { prepare_outgoing_request : (...args) => instance.prepare_outgoing_request(...args) } : {}),"
        },
        "depth_rank": 11
    },
    {
        "file": "api.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/api/api.js",
        "code": {
            "function": "async function executeIntegrationRest() {\nasync function executeIntegrationRest() {\n\tincomingLogger.info({ msg: 'Post integration:', integration: this.integration.name });",
            "user": "\t\t\tconst user = await Users.findOne({\n\t\t\tconst user = await Users.findOne({\n\t\t\t\t_id: this.integration.userId,\n\t\t\t});\n\n\t\t\treturn { user };"
        },
        "depth_rank": 10
    },
    {
        "file": "addIncomingIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/methods/incoming/addIncomingIntegration.ts",
        "code": {
            "user": "\tconst user = await Users.findOne({ username: integration.username });\n\tconst user = await Users.findOne({ username: integration.username });",
            "result": "\tconst result = await Integrations.insertOne(integrationData);\n\tconst result = await Integrations.insertOne(integrationData);\n\n\tintegrationData._id = result.insertedId;\n\n\treturn integrationData;\n};\n\nMeteor.methods<ServerMethods>({\n\tasync addIncomingIntegration(integration: INewIncomingIntegration): Promise<IIncomingIntegration> {\n\t\tconst { userId } = this;\n\t\tconst { userId } = this;"
        },
        "depth_rank": 11
    },
    {
        "file": "updateIncomingIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/methods/incoming/updateIncomingIntegration.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ username: currentIntegration.username });\n\t\tconst user = await Users.findOne({ username: currentIntegration.username });"
        },
        "depth_rank": 11
    },
    {
        "file": "addOutgoingIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/methods/outgoing/addOutgoingIntegration.ts",
        "code": {
            "result": "\tconst integrationData = await validateOutgoingIntegration(integration, userId);\n\tconst integrationData = await validateOutgoingIntegration(integration, userId);\n\n\tconst result = await Integrations.insertOne(integrationData);\n\tconst result = await Integrations.insertOne(integrationData);\n\tintegrationData._id = result.insertedId;\n\n\treturn integrationData;\n};\n\nMeteor.methods<ServerMethods>({\n\tasync addOutgoingIntegration(integration: INewOutgoingIntegration): Promise<IOutgoingIntegration> {\n\t\tconst { userId } = this;\n\t\tconst { userId } = this;"
        },
        "depth_rank": 11
    },
    {
        "file": "updateOutgoingIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/integrations/server/methods/outgoing/updateOutgoingIntegration.ts",
        "code": {
            "isFrozen": "\t\tconst isFrozen = isScriptEngineFrozen(scriptEngine);\n\t\tconst isFrozen = isScriptEngineFrozen(scriptEngine);\n\n\t\tawait Integrations.updateOne(\n\t\t\t{ _id: integrationId },"
        },
        "depth_rank": 11
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-join/server/server.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "cronPruneMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/retention-policy/server/cronPruneMessages.ts",
        "code": {
            "await": "\tfor await (const { _id: rid, retention } of rooms) {\n\tfor await (const { _id: rid, retention } of rooms) {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;"
        },
        "depth_rank": 9
    },
    {
        "file": "CustomSounds.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/custom-sounds/client/lib/CustomSounds.ts",
        "code": {
            "defaultSounds": "const getAssetUrl = (asset: string, params?: Record<string, any>) => getURL(asset, params, undefined, true);\nconst getAssetUrl = (asset: string, params?: Record<string, any>) => getURL(asset, params, undefined, true);\n\nconst defaultSounds = [\nconst defaultSounds = [\n\t{ _id: 'chime', name: 'Chime', extension: 'mp3', src: getAssetUrl('sounds/chime.mp3') },",
            "sourceEl": "\t\t\tconst sourceEl = audio.querySelector('source');\n\t\t\tconst sourceEl = audio.querySelector('source');\n\t\t\tif (sourceEl) {\n\t\t\t\tsourceEl.src = sound.src;\n\t\t\t}\n\t\t\taudio.load();\n\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/index.ts",
        "code": {
            "licenseCronName": "const licenseCronName = 'Cloud Workspace Sync';\nconst licenseCronName = 'Cloud Workspace Sync';\n\nMeteor.startup(async () => {\n\tconst { workspaceRegistered } = await retrieveRegistrationStatus();\n\tconst { workspaceRegistered } = await retrieveRegistrationStatus();"
        },
        "depth_rank": 9
    },
    {
        "file": "connectWorkspace.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/connectWorkspace.ts",
        "code": {
            "fetchRegistrationDataPayload": "const fetchRegistrationDataPayload = async ({\nconst fetchRegistrationDataPayload = async ({\n\ttoken,\n\tbody,\n}: {",
            "payload": "\t\tconst redirectUri = getRedirectUri();\n\t\tconst redirectUri = getRedirectUri();\n\n\t\tconst body = {\n\t\tconst body = {\n\t\t\temail: settings.get<string>('Organization_Email'),\n\t\t\tclient_name: settings.get<string>('Site_Name'),\n\t\t\tredirect_uris: [redirectUri],\n\t\t};\n\n\t\tconst payload = await fetchRegistrationDataPayload({ token, body });\n\t\tconst payload = await fetchRegistrationDataPayload({ token, body });"
        },
        "depth_rank": 10
    },
    {
        "file": "saveRegistrationData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/saveRegistrationData.ts",
        "code": {
            "saveRegistrationDataBase": "function saveRegistrationDataBase({\nfunction saveRegistrationDataBase({\n\tworkspaceId,\n\tclient_name,\n\tclient_id,\n\tclient_secret,\n\tclient_secret_expires_at,\n\tpublicKey,\n\tregistration_client_uri,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "getWorkspaceLicense.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/getWorkspaceLicense.ts",
        "code": {
            "payload": "\t\tconst payload = await fetchCloudWorkspaceLicensePayload({ token });\n\t\tconst payload = await fetchCloudWorkspaceLicensePayload({ token });"
        },
        "depth_rank": 10
    },
    {
        "file": "getWorkspaceAccessTokenWithScope.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/getWorkspaceAccessTokenWithScope.ts",
        "code": {
            "tokenResponse": "\tconst tokenResponse = { token: '', expiresAt: new Date() };\n\tconst tokenResponse = { token: '', expiresAt: new Date() };"
        },
        "depth_rank": 10
    },
    {
        "file": "userLogout.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/userLogout.ts",
        "code": {
            "clientSecret": "\t\t\tconst clientSecret = settings.get('Cloud_Workspace_Client_Secret');\n\t\t\tconst clientSecret = settings.get('Cloud_Workspace_Client_Secret');\n\n\t\t\tconst { refreshToken } = user.services.cloud;\n\t\t\tconst { refreshToken } = user.services.cloud;"
        },
        "depth_rank": 10
    },
    {
        "file": "retrieveRegistrationStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/retrieveRegistrationStatus.ts",
        "code": {
            "firstUser": "\t\tconst firstUser = await Users.getOldest({ projection: { emails: 1 } });\n\t\tconst firstUser = await Users.getOldest({ projection: { emails: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "userLoggedOut.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/userLoggedOut.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId);\n\tconst user = await Users.findOneById(userId);\n\n\tif (user?.services?.cloud) {\n\t\tawait Users.updateOne(\n\t\t\t{ _id: user._id },"
        },
        "depth_rank": 10
    },
    {
        "file": "registerPreIntentWorkspaceWizard.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/registerPreIntentWorkspaceWizard.ts",
        "code": {
            "firstUser": "\tconst firstUser = (await Users.getOldest({ projection: { name: 1, emails: 1 } })) as IUser | undefined;\n\tconst firstUser = (await Users.getOldest({ projection: { name: 1, emails: 1 } })) as IUser | undefined;"
        },
        "depth_rank": 10
    },
    {
        "file": "supportedVersionsToken.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/supportedVersionsToken/supportedVersionsToken.ts",
        "code": {
            "cacheValueInSettings": "const cacheValueInSettings = <T extends SettingValue>(\nconst cacheValueInSettings = <T extends SettingValue>(\n\tkey: string,\n\tfn: () => Promise<T>,\n): (() => Promise<T>) & {\n\treset: () => Promise<T>;\n} => {"
        },
        "depth_rank": 11
    },
    {
        "file": "announcementSync.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/syncWorkspace/announcementSync.ts",
        "code": {
            "fetchCloudAnnouncementsSync": "const assertWorkspaceCommPayload = compile(workspaceCommPayloadSchema);\nconst assertWorkspaceCommPayload = compile(workspaceCommPayloadSchema);\n\nconst fetchCloudAnnouncementsSync = async ({\nconst fetchCloudAnnouncementsSync = async ({\n\ttoken,\n\tdata,\n}: {",
            "workspaceRegistrationData": "\t\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\t\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\n\t\tconst { nps, announcements } = await fetchCloudAnnouncementsSync({\n\t\tconst { nps, announcements } = await fetchCloudAnnouncementsSync({\n\t\t\ttoken,\n\t\t\tdata: workspaceRegistrationData,\n\t\t});\n\n\t\tif (nps) {\n\t\t\tawait handleNpsOnWorkspaceSync(nps);\n\t\t}\n\n\t\tif (announcements) {\n\t\t\tawait handleAnnouncementsOnWorkspaceSync(announcements);\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {"
        },
        "depth_rank": 11
    },
    {
        "file": "handleCommsSync.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/syncWorkspace/handleCommsSync.ts",
        "code": {
            "await": "\tfor await (const banner of banners) {\n\tfor await (const banner of banners) {\n\t\tconst { createdAt, expireAt, startAt, inactivedAt, _updatedAt, ...rest } = banner;\n\t\tconst { createdAt, expireAt, startAt, inactivedAt, _updatedAt, ...rest } = banner;",
            "deserializeAnnouncement": "const deserializeAnnouncement = (announcement: Serialized<Cloud.Announcement>): Cloud.Announcement => {\nconst deserializeAnnouncement = (announcement: Serialized<Cloud.Announcement>): Cloud.Announcement => {\n\tconst { inactivedAt, _updatedAt, expireAt, startAt, createdAt } = announcement;\n\tconst { inactivedAt, _updatedAt, expireAt, startAt, createdAt } = announcement;"
        },
        "depth_rank": 11
    },
    {
        "file": "syncCloudData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/syncWorkspace/syncCloudData.ts",
        "code": {
            "fetchWorkspaceSyncPayload": "const assertWorkspaceSyncPayload = compile(workspaceSyncPayloadSchema);\nconst assertWorkspaceSyncPayload = compile(workspaceSyncPayloadSchema);\n\nconst fetchWorkspaceSyncPayload = async ({\nconst fetchWorkspaceSyncPayload = async ({\n\ttoken,\n\tdata,\n}: {",
            "workspaceRegistrationData": "\t\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\t\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\n\t\tconst { license, removeLicense = false } = await fetchWorkspaceSyncPayload({\n\t\tconst { license, removeLicense = false } = await fetchWorkspaceSyncPayload({\n\t\t\ttoken,\n\t\t\tdata: workspaceRegistrationData,\n\t\t});\n\n\t\tif (removeLicense) {\n\t\t\tawait callbacks.run('workspaceLicenseRemoved');\n\t\t} else {"
        },
        "depth_rank": 11
    },
    {
        "file": "legacySyncWorkspace.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cloud/server/functions/syncWorkspace/legacySyncWorkspace.ts",
        "code": {
            "fetchWorkspaceClientPayload": "const fetchWorkspaceClientPayload = async ({\nconst fetchWorkspaceClientPayload = async ({\n\ttoken,\n\tworkspaceRegistrationData,\n}: {",
            "payload": "\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\tconst workspaceRegistrationData = await buildWorkspaceRegistrationData(undefined);\n\n\tconst payload = await fetchWorkspaceClientPayload({ token, workspaceRegistrationData });\n\tconst payload = await fetchWorkspaceClientPayload({ token, workspaceRegistrationData });"
        },
        "depth_rank": 11
    },
    {
        "file": "NotificationQueue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/notification-queue/server/NotificationQueue.ts",
        "code": {
            "await": "\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\t\tconst flush = await NotificationQueue.clearScheduleByUserId(notification.uid);\n\n\t\t// start worker again it queue flushed\n\t\tif (flush.modifiedCount) {\n\t\t\tawait NotificationQueue.unsetSendingById(notification._id);\n\t\t\treturn this.worker(counter);\n\t\t}\n\n\t\ttry {\n\t\t\tfor await (const item of notification.items) {\n\t\t\tfor await (const item of notification.items) {\n\t\t\t\tswitch (item.type) {\n\t\t\t\t\tcase 'push':\n\t\t\t\t\t\tawait this.push(notification, item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tawait this.email(item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait NotificationQueue.removeById(notification._id);\n\t\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "OTRRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/otr/client/OTRRoom.ts",
        "code": {
            "bits": "\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });",
            "encryptedData": "\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });",
            "output": "\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });",
            "enc": "\t\t\tconst enc = await this.encryptText(data);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "deleteCustomUserStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/user-status/server/methods/deleteCustomUserStatus.ts",
        "code": {
            "userStatus": "\t\tconst userStatus = await CustomUserStatus.findOneById(userStatusID);\n\t\tconst userStatus = await CustomUserStatus.findOneById(userStatusID);\n\t\tif (userStatus == null) {\n\t\t\tthrow new Meteor.Error('Custom_User_Status_Error_Invalid_User_Status', 'Invalid user status', { method: 'deleteCustomUserStatus' });"
        },
        "depth_rank": 10
    },
    {
        "file": "insertOrUpdateUserStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/user-status/server/methods/insertOrUpdateUserStatus.ts",
        "code": {
            "_id": "\t\t\tconst createUserStatus: InsertionModel<ICustomUserStatus> = {\n\t\t\tconst createUserStatus: InsertionModel<ICustomUserStatus> = {\n\t\t\t\tname: userStatusData.name,\n\t\t\t\tstatusType: userStatusData.statusType,\n\t\t\t};\n\n\t\t\tconst _id = (await CustomUserStatus.create(createUserStatus)).insertedId;\n\t\t\tconst _id = (await CustomUserStatus.create(createUserStatus)).insertedId;\n\n\t\t\tvoid api.broadcast('user.updateCustomStatus', { ...createUserStatus, _id });"
        },
        "depth_rank": 10
    },
    {
        "file": "code.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/code.js",
        "code": {
            "result": "\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\n\t\t\t\tconst result = (() => {\n\t\t\t\tconst result = (() => {\n\t\t\t\t\tif (lang) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tregister(lang);\n\t\t\t\t\t\t\treturn hljs.highlight(lang, code);\n\t\t\t\t\t\t} catch (error) {"
        },
        "depth_rank": 11
    },
    {
        "file": "token.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/token.ts",
        "code": {
            "tokensFound": "\tconst tokensFound = message.tokens?.filter(({ token }) => tokens.includes(token)) || [];\n\tconst tokensFound = message.tokens?.filter(({ token }) => tokens.includes(token)) || [];"
        },
        "depth_rank": 11
    },
    {
        "file": "markdown.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/markdown.js",
        "code": {
            "validateUrl": "const validateUrl = (url, message) => {\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {"
        },
        "depth_rank": 11
    },
    {
        "file": "upsertPermissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/authorization/server/functions/upsertPermissions.ts",
        "code": {
            "defaultRoles": "\tfor await (const permission of permissions) {\n\tfor await (const permission of permissions) {\n\t\tawait Permissions.create(permission._id, permission.roles);\n\t}\n\n\tconst defaultRoles = [\n\tconst defaultRoles = [\n\t\t{ name: 'admin', scope: 'Users', description: 'Admin' },",
            "existent": "\t\tconst existent = await Permissions.findOne(\n\t\tconst existent = await Permissions.findOne(\n\t\t\t{\n\t\t\t\t_id: permissionId,\n\t\t\t\t...permission,\n\t\t\t},\n\t\t\t{ projection: { _id: 1 } },",
            "await": "\t\tfor await (const obsoletePermission of Object.keys(previousSettingPermissions)) {\n\t\tfor await (const obsoletePermission of Object.keys(previousSettingPermissions)) {\n\t\t\tif (previousSettingPermissions.hasOwnProperty(obsoletePermission)) {\n\t\t\t\tawait Permissions.deleteOne({ _id: obsoletePermission });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUsersInRole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/authorization/server/functions/getUsersInRole.ts",
        "code": {
            "role": "\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'scope'>>(roleId, { projection: { scope: 1 } });\n\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'scope'>>(roleId, { projection: { scope: 1 } });",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRolesAndRoomId({ roles: role._id, rid: scope }, { projection: { 'u._id': 1 } })\n\t\t\tconst subscriptions = await Subscriptions.findByRolesAndRoomId({ roles: role._id, rid: scope }, { projection: { 'u._id': 1 } })"
        },
        "depth_rank": 10
    },
    {
        "file": "canDeleteMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/authorization/server/functions/canDeleteMessage.ts",
        "code": {
            "room": "\t\tconst blockDeleteInMinutes = await getValue('Message_AllowDeleting_BlockDeleteInMinutes');\n\t\tconst blockDeleteInMinutes = await getValue('Message_AllowDeleting_BlockDeleteInMinutes');\n\n\t\tif (blockDeleteInMinutes) {\n\t\t\tconst timeElapsedForMessage = elapsedTime(ts);\n\t\t\tconst timeElapsedForMessage = elapsedTime(ts);\n\t\t\treturn timeElapsedForMessage <= blockDeleteInMinutes;\n\t\t}\n\t}\n\n\tconst room = await Rooms.findOneById(rid, { projection: { ro: 1, unmuted: 1 } });\n\tconst room = await Rooms.findOneById(rid, { projection: { ro: 1, unmuted: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "removeUserFromRole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/authorization/server/methods/removeUserFromRole.ts",
        "code": {
            "as": "\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: role._id,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername,\n\t\t\t},\n\t\t\tscope,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: userId });"
        },
        "depth_rank": 10
    },
    {
        "file": "hasPermission.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/authorization/client/hasPermission.ts",
        "code": {
            "user": "const createPermissionValidator =\nconst createPermissionValidator =\n\t(quantifier: (predicate: (permissionId: IPermission['_id']) => boolean) => boolean) =>\n\t(permissionIds: IPermission['_id'][], scope: string | undefined, userId: IUser['_id'], scopedRoles?: IPermission['_id'][]): boolean => {\n\t\tconst user = Models.Users.findOneById(userId, { fields: { roles: 1 } });\n\t\tconst user = Models.Users.findOneById(userId, { fields: { roles: 1 } });",
            "permission": "\t\t\tconst permission = Models.ChatPermissions.findOne(permissionId, {\n\t\t\tconst permission = Models.ChatPermissions.findOne(permissionId, {\n\t\t\t\tfields: { roles: 1 },",
            "role": "\t\t\tconst roles = permission?.roles ?? [];\n\t\t\tconst roles = permission?.roles ?? [];\n\n\t\t\treturn roles.some((roleId) => {\n\t\t\t\tconst role = Models.Roles.findOne(roleId, { fields: { scope: 1 } });\n\t\t\t\tconst role = Models.Roles.findOne(roleId, { fields: { scope: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-archiveroom/server/server.ts",
        "code": {
            "async": "\tcallback: async function Archive({ params, message, userId }: SlashCommandCallbackParams<'archive'>): Promise<void> {\n\tcallback: async function Archive({ params, message, userId }: SlashCommandCallbackParams<'archive'>): Promise<void> {\n\t\tlet channel = params.trim();\n\n\t\tlet room;\n\n\t\tif (channel === '') {\n\t\t\troom = await Rooms.findOneById(message.rid);\n\t\t\tif (room?.name) {\n\t\t\t\tchannel = room.name;\n\t\t\t}\n\t\t} else {",
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/oembed/server/server.ts",
        "code": {
            "parseUrl": "const parseUrl = async function (url: string): Promise<{ urlPreview: MessageUrl; foundMeta: boolean }> {\nconst parseUrl = async function (url: string): Promise<{ urlPreview: MessageUrl; foundMeta: boolean }> {\n\tconst parsedUrlObject: MessageUrl = { url, meta: {} };\n\tconst parsedUrlObject: MessageUrl = { url, meta: {} };",
            "urlObj": "const getUrlMeta = async function (\nconst getUrlMeta = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined> {\n\tlog.debug('Obtaining metadata for URL', url);\n\tconst urlObj = new URL(url);\n\tconst urlObj = new URL(url);\n\n\tif (withFragment) {\n\t\turlObj.searchParams.set('_escaped_fragment_', '');\n\t}\n\n\tlog.debug('Fetching url content', urlObj.toString());\n\tlet content: OEmbedUrlContentResult | undefined;\n\ttry {\n\t\tcontent = await getUrlContent(urlObj, 5);\n\t} catch (err) {",
            "getRelevantMetaTags": "const getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\nconst getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\n\tconst tags: Record<string, string> = {};\n\tconst tags: Record<string, string> = {};",
            "await": "\tconst attachments: MessageAttachment[] = [];\n\tconst attachments: MessageAttachment[] = [];\n\n\tlet changed = false;\n\tfor await (const item of message.urls) {\n\tfor await (const item of message.urls) {\n\t\tif (item.ignoreParse === true) {\n\t\t\tlog.debug('URL ignored', item.url);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { urlPreview, foundMeta } = await parseUrl(item.url);\n\t\tconst { urlPreview, foundMeta } = await parseUrl(item.url);"
        },
        "depth_rank": 9
    },
    {
        "file": "providers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/oembed/server/providers.ts",
        "code": {
            "consumerUrl": "\t\tconst consumerUrl = Providers.getConsumerUrl(provider, url);\n\t\tconst consumerUrl = Providers.getConsumerUrl(provider, url);\n\n\t\treturn { ...data, urlObj: new URL(consumerUrl) };",
            "cleanupOembed": "const cleanupOembed = (data: {\nconst cleanupOembed = (data: {\n\turl: string;\n\tmeta: OEmbedMeta;\n\theaders: { [k: string]: string };"
        },
        "depth_rank": 9
    },
    {
        "file": "propagateDiscussionMetadata.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/discussion/server/hooks/propagateDiscussionMetadata.ts",
        "code": {
            "updateAndNotifyParentRoomWithParentMessage": "const updateAndNotifyParentRoomWithParentMessage = async (room: IRoom): Promise<void> => {\nconst updateAndNotifyParentRoomWithParentMessage = async (room: IRoom): Promise<void> => {\n\tconst { value: parentMessage } = await Messages.refreshDiscussionMetadata(room);\n\tconst { value: parentMessage } = await Messages.refreshDiscussionMetadata(room);",
            "await": "\t\t\tconst room = await Rooms.findOneById(_id, {\n\t\t\tconst room = await Rooms.findOneById(_id, {\n\t\t\t\tprojection: {\n\t\t\t\t\tmsgs: 1,\n\t\t\t\t\tlm: 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (room) {\n\t\t\t\tawait updateAndNotifyParentRoomWithParentMessage(room);\n\t\t\t}\n\t\t}\n\t\tif (message.drid) {\n\t\t\tawait deleteRoom(message.drid);\n\t\t}\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'PropagateDiscussionMetadata',\n);\n\ncallbacks.add(\n\t'afterDeleteRoom',\n\tasync (rid) => {\n\t\tfor await (const { _id } of Rooms.find({ prid: rid }, { projection: { _id: 1 } })) {\n\t\tfor await (const { _id } of Rooms.find({ prid: rid }, { projection: { _id: 1 } })) {\n\t\t\tawait deleteRoom(_id);\n\t\t}\n\n\t\treturn rid;\n\t},\n\tcallbacks.priority.LOW,\n\t'DeleteDiscussionChain',\n);\n\n// TODO discussions define new fields\ncallbacks.add(\n\t'afterRoomNameChange',\n\tasync (roomConfig) => {\n\t\tconst { rid, name, oldName } = roomConfig;\n\t\tconst { rid, name, oldName } = roomConfig;"
        },
        "depth_rank": 10
    },
    {
        "file": "createDiscussion.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/discussion/server/methods/createDiscussion.ts",
        "code": {
            "room": "const getParentRoom = async (rid: IRoom['_id']) => {\nconst getParentRoom = async (rid: IRoom['_id']) => {\n\tconst room = await Rooms.findOne(rid);\n\tconst room = await Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { projection: { _id: 1 } }) : room);",
            "function": "async function mentionMessage(\nasync function mentionMessage(\n\trid: IRoom['_id'],\n\t{ _id, username, name }: Pick<IUser, '_id' | 'username' | 'name'>,",
            "create": "const create = async ({\nconst create = async ({\n\tprid,\n\tpmid,\n\tt_name: discussionName,\n\treply,\n\tusers,\n\tuser,\n\tencrypted,\n}: CreateDiscussionProperties): Promise<IRoom & { rid: string }> => {",
            "discussionAlreadyExists": "\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "listeners.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/listeners.js",
        "code": {
            "room": "\t\tconst msg = await this.orch.getConverters().get('messages').convertMessage(message);\n\t\tconst msg = await this.orch.getConverters().get('messages').convertMessage(message);\n\n\t\tconst params = (() => {\n\t\tconst params = (() => {\n\t\t\tswitch (inte) {\n\t\t\t\tcase AppInterface.IPostMessageDeleted:\n\t\t\t\t\tconst [userDeleted] = payload;\n\t\t\t\t\tconst [userDeleted] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userDeleted),\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageReacted:\n\t\t\t\t\tconst [userReacted, reaction, isReacted] = payload;\n\t\t\t\t\tconst [userReacted, reaction, isReacted] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userReacted),\n\t\t\t\t\t\treaction,\n\t\t\t\t\t\tisReacted,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageFollowed:\n\t\t\t\t\tconst [userFollowed, isUnfollow] = payload;\n\t\t\t\t\tconst [userFollowed, isUnfollow] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userFollowed),\n\t\t\t\t\t\tisUnfollow,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessagePinned:\n\t\t\t\t\tconst [userPinned, isUnpinned] = payload;\n\t\t\t\t\tconst [userPinned, isUnpinned] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userPinned),\n\t\t\t\t\t\tisUnpinned,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageStarred:\n\t\t\t\t\tconst [userStarred, isStarred] = payload;\n\t\t\t\t\tconst [userStarred, isStarred] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userStarred),\n\t\t\t\t\t\tisStarred,\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPostMessageReported:\n\t\t\t\t\tconst [userReported, reason] = payload;\n\t\t\t\t\tconst [userReported, reason] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\tuser: this.orch.getConverters().get('users').convertToApp(userReported),\n\t\t\t\t\t\treason,\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn msg;\n\t\t\t}\n\t\t})();\n\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\n\t\tif (typeof result === 'boolean') {\n\t\t\treturn result;\n\t\t}\n\t\treturn this.orch.getConverters().get('messages').convertAppMessage(result);\n\t}\n\n\tasync roomEvent(inte, room, ...payload) {\n\t\tconst rm = await this.orch.getConverters().get('rooms').convertRoom(room);\n\t\tconst rm = await this.orch.getConverters().get('rooms').convertRoom(room);\n\n\t\tconst params = (() => {\n\t\tconst params = (() => {\n\t\t\tswitch (inte) {\n\t\t\t\tcase AppInterface.IPreRoomUserJoined:\n\t\t\t\tcase AppInterface.IPostRoomUserJoined:\n\t\t\t\t\tconst [joiningUser, invitingUser] = payload;\n\t\t\t\t\tconst [joiningUser, invitingUser] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom: rm,\n\t\t\t\t\t\tjoiningUser: this.orch.getConverters().get('users').convertToApp(joiningUser),\n\t\t\t\t\t\tinvitingUser: this.orch.getConverters().get('users').convertToApp(invitingUser),\n\t\t\t\t\t};\n\t\t\t\tcase AppInterface.IPreRoomUserLeave:\n\t\t\t\tcase AppInterface.IPostRoomUserLeave:\n\t\t\t\t\tconst [leavingUser] = payload;\n\t\t\t\t\tconst [leavingUser] = payload;\n\t\t\t\t\treturn {\n\t\t\t\t\t\troom: rm,\n\t\t\t\t\t\tleavingUser: this.orch.getConverters().get('users').convertToApp(leavingUser),\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn rm;\n\t\t\t}\n\t\t})();\n\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\t\tconst result = await this.orch.getManager().getListenerManager().executeListener(inte, params);\n\n\t\tif (typeof result === 'boolean') {\n\t\t\treturn result;\n\t\t}\n\t\treturn this.orch.getConverters().get('rooms').convertAppRoom(result);\n\t}\n\n\tasync livechatEvent(inte, data) {\n\t\tswitch (inte) {\n\t\t\tcase AppInterface.IPostLivechatAgentAssigned:\n\t\t\tcase AppInterface.IPostLivechatAgentUnassigned:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, {\n\t\t\t\t\t\troom: await this.orch.getConverters().get('rooms').convertRoom(data.room),\n\t\t\t\t\t\tagent: this.orch.getConverters().get('users').convertToApp(data.user),\n\t\t\t\t\t});\n\t\t\tcase AppInterface.IPostLivechatRoomTransferred:\n\t\t\t\tconst converter = data.type === LivechatTransferEventType.AGENT ? 'users' : 'departments';\n\t\t\t\tconst converter = data.type === LivechatTransferEventType.AGENT ? 'users' : 'departments';\n\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, {\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\troom: await this.orch.getConverters().get('rooms').convertById(data.room),\n\t\t\t\t\t\tfrom: await this.orch.getConverters().get(converter).convertById(data.from),\n\t\t\t\t\t\tto: await this.orch.getConverters().get(converter).convertById(data.to),\n\t\t\t\t\t});\n\t\t\tcase AppInterface.IPostLivechatGuestSaved:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, await this.orch.getConverters().get('visitors').convertById(data));\n\t\t\tcase AppInterface.IPostLivechatRoomSaved:\n\t\t\t\treturn this.orch\n\t\t\t\t\t.getManager()\n\t\t\t\t\t.getListenerManager()\n\t\t\t\t\t.executeListener(inte, await this.orch.getConverters().get('rooms').convertById(data));\n\t\t\tdefault:\n\t\t\t\tconst room = await this.orch.getConverters().get('rooms').convertRoom(data);\n\t\t\t\tconst room = await this.orch.getConverters().get('rooms').convertRoom(data);\n\n\t\t\t\treturn this.orch.getManager().getListenerManager().executeListener(inte, room);\n\t\t}\n\t}\n\n\tasync userEvent(inte, data) {\n\t\tlet context;\n\t\tswitch (inte) {\n\t\t\tcase AppInterface.IPostUserLoggedIn:\n\t\t\tcase AppInterface.IPostUserLogout:\n\t\t\t\tcontext = this.orch.getConverters().get('users').convertToApp(data.user);\n\t\t\t\treturn this.orch.getManager().getListenerManager().executeListener(inte, context);\n\t\t\tcase AppInterface.IPostUserStatusChanged:\n\t\t\t\tconst { currentStatus, previousStatus } = data;\n\t\t\t\tconst { currentStatus, previousStatus } = data;"
        },
        "depth_rank": 10
    },
    {
        "file": "http.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/http.ts",
        "code": {
            "url": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async call(info: IHttpBridgeRequestInfo): Promise<IHttpResponse> {\n\t\t// begin comptability with old HTTP.call API\n\t\tconst url = new URL(info.url);\n\t\tconst url = new URL(info.url);\n\n\t\tconst { request, method } = info;\n\t\tconst { request, method } = info;"
        },
        "depth_rank": 10
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/users.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByAppId(appId, {});\n\t\tconst user = await Users.findOneByAppId(appId, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "persistence.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/persistence.ts",
        "code": {
            "record": "\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/settings.ts",
        "code": {
            "settings": "\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\tconst settings = await Settings.find({ secret: false }).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "scheduler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/scheduler.ts",
        "code": {
            "data": "function _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\nfunction _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\n\treturn (job) => {\n\t\tconst data = job?.attrs?.data || {};\n\t\tconst data = job?.attrs?.data || {};",
            "readonly": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: 'rocketchat_apps_scheduler' },",
            "job": "\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\t\tskipImmediate,\n\t\t\t});\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {",
            "scheduledJobs": "\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);\n\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);"
        },
        "depth_rank": 10
    },
    {
        "file": "oauthApps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/oauthApps.ts",
        "code": {
            "botUser": "\t\tconst botUser = await Users.findOne({ appId });\n\t\tconst botUser = await Users.findOne({ appId });",
            "data": "\t\tconst data = await OAuthApps.findOne({ _id: id, appId });\n\t\tconst data = await OAuthApps.findOne({ _id: id, appId });"
        },
        "depth_rank": 10
    },
    {
        "file": "details.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/details.ts",
        "code": {
            "readonly": "\tconstructor(private readonly orch: AppServerOrchestrator) {\n\tconstructor(private readonly orch: AppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected onAppSettingsChange(appId: string, setting: ISetting): void {\n\t\ttry {\n\t\t\tthis.orch.getNotifier().appSettingsChange(appId, setting);\n\t\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "livechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/livechat.ts",
        "code": {
            "visitor": "\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\tconst closeData: any = {\n\t\t\troom: await this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),",
            "registerData": "\t\tconst registerData = {\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),",
            "appUser": "\t\tconst appUser = await Users.findOneByAppId(appId, {});\n\t\tconst appUser = await Users.findOneByAppId(appId, {});",
            "transferredBy": "\t\tconst transferredBy = {\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t};\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = await Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },",
            "livechatMessages": "\t\tconst livechatMessages = await LivechatTyped.getRoomMessages({ rid: roomId });\n\t\tconst livechatMessages = await LivechatTyped.getRoomMessages({ rid: roomId });"
        },
        "depth_rank": 10
    },
    {
        "file": "uploads.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/uploads.ts",
        "code": {
            "getUploadDetails": "const getUploadDetails = (details: IUploadDetails): Partial<IUploadDetails> => {\nconst getUploadDetails = (details: IUploadDetails): Partial<IUploadDetails> => {\n\tif (details.visitorToken) {\n\t\tconst { userId, ...result } = details;\n\t\tconst { userId, ...result } = details;"
        },
        "depth_rank": 10
    },
    {
        "file": "messages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/messages.ts",
        "code": {
            "users": "\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);"
        },
        "depth_rank": 10
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/bridges/rooms.ts",
        "code": {
            "extraData": "\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\treturn this.createChannel(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\treturn this.createPrivateGroup(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\treturn this.createDirectMessage(room.creator.id, members);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\t}\n\n\tprivate prepareExtraData(room: Record<string, any>): Record<string, unknown> {\n\t\tconst extraData = Object.assign({}, room);\n\t\tconst extraData = Object.assign({}, room);",
            "room": "\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});",
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});",
            "member": "\t\tfor await (const username of members) {\n\t\tfor await (const username of members) {\n\t\t\tconst member = await Users.findOneByUsername(username, {});\n\t\t\tconst member = await Users.findOneByUsername(username, {});",
            "users": "\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();\n\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "rooms.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/converters/rooms.js",
        "code": {
            "visitor": "\t\t\tconst creator = await Users.findOneById(room.creator.id);\n\t\t\tconst creator = await Users.findOneById(room.creator.id);\n\t\t\tu = {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t\tname: creator.name,\n\t\t\t};\n\t\t}\n\n\t\tlet v;\n\t\tif (room.visitor) {\n\t\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.visitor.id);\n\t\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.visitor.id);\n\n\t\t\tconst { lastMessageTs, phone } = room.visitorChannelInfo;\n\t\t\tconst { lastMessageTs, phone } = room.visitorChannelInfo;",
            "department": "\t\t\tconst department = await LivechatDepartment.findOneById(room.department.id, { projection: { _id: 1 } });\n\t\t\tconst department = await LivechatDepartment.findOneById(room.department.id, { projection: { _id: 1 } });",
            "newRoom": "\t\t\tconst user = await Users.findOneById(room.servedBy.id);\n\t\t\tconst user = await Users.findOneById(room.servedBy.id);\n\t\t\tservedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tlet closedBy;\n\t\tif (room.closedBy) {\n\t\t\tconst user = await Users.findOneById(room.closedBy.id);\n\t\t\tconst user = await Users.findOneById(room.closedBy.id);\n\t\t\tclosedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tconst newRoom = {\n\t\tconst newRoom = {\n\t\t\t...(room.id && { _id: room.id }),",
            "result": "\t\t\t\tconst result = this._convertTypeToApp(room.t);\n\t\t\t\tconst result = this._convertTypeToApp(room.t);\n\t\t\t\tdelete room.t;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tcreator: async (room) => {\n\t\t\t\tconst { u } = room;\n\t\t\t\tconst { u } = room;"
        },
        "depth_rank": 10
    },
    {
        "file": "users.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/converters/users.js",
        "code": {
            "statusConnection": "\t\tconst type = this._convertUserTypeToEnum(user.type);\n\t\tconst type = this._convertUserTypeToEnum(user.type);\n\t\tconst statusConnection = this._convertStatusConnectionToEnum(user.username, user._id, user.statusConnection);\n\t\tconst statusConnection = this._convertStatusConnectionToEnum(user.username, user._id, user.statusConnection);\n\n\t\treturn {\n\t\t\tid: user._id,\n\t\t\tusername: user.username,\n\t\t\temails: user.emails,\n\t\t\ttype,\n\t\t\tisEnabled: user.active,\n\t\t\tname: user.name,\n\t\t\troles: user.roles,\n\t\t\tstatus: user.status,\n\t\t\tstatusConnection,\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tcreatedAt: user.createdAt,\n\t\t\tupdatedAt: user._updatedAt,\n\t\t\tlastLoginAt: user.lastLogin,\n\t\t\tappId: user.appId,\n\t\t\tcustomFields: user.customFields,\n\t\t\tsettings: {\n\t\t\t\tpreferences: {\n\t\t\t\t\t...(user?.settings?.preferences?.language && { language: user.settings.preferences.language }),"
        },
        "depth_rank": 10
    },
    {
        "file": "messages.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/converters/messages.js",
        "code": {
            "result": "\t\tconst map = {\n\t\tconst map = {\n\t\t\tid: '_id',\n\t\t\tthreadId: 'tmid',\n\t\t\treactions: 'reactions',\n\t\t\tparseUrls: 'parseUrls',\n\t\t\ttext: 'msg',\n\t\t\tcreatedAt: 'ts',\n\t\t\tupdatedAt: '_updatedAt',\n\t\t\teditedAt: 'editedAt',\n\t\t\temoji: 'emoji',\n\t\t\tavatarUrl: 'avatar',\n\t\t\talias: 'alias',\n\t\t\tfile: 'file',\n\t\t\tcustomFields: 'customFields',\n\t\t\tgroupable: 'groupable',\n\t\t\ttoken: 'token',\n\t\t\tblocks: 'blocks',\n\t\t\troom: async (message) => {\n\t\t\t\tconst result = await this.orch.getConverters().get('rooms').convertById(message.rid);\n\t\t\t\tconst result = await this.orch.getConverters().get('rooms').convertById(message.rid);\n\t\t\t\tdelete message.rid;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\teditor: async (message) => {\n\t\t\t\tconst { editedBy } = message;\n\t\t\t\tconst { editedBy } = message;",
            "user": "\t\t\tconst user = await Users.findOneById(message.sender.id);\n\t\t\tconst user = await Users.findOneById(message.sender.id);\n\n\t\t\tif (user) {\n\t\t\t\tu = {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t};\n\t\t\t} else {",
            "newMessage": "\t\t\tconst editor = await Users.findOneById(message.editor.id);\n\t\t\tconst editor = await Users.findOneById(message.editor.id);\n\t\t\teditedBy = {\n\t\t\t\t_id: editor._id,\n\t\t\t\tusername: editor.username,\n\t\t\t};\n\t\t}\n\n\t\tconst attachments = this._convertAppAttachments(message.attachments);\n\t\tconst attachments = this._convertAppAttachments(message.attachments);\n\n\t\tconst newMessage = {\n\t\tconst newMessage = {\n\t\t\t_id: message.id || Random.id(),\n\t\t\t...('threadId' in message && { tmid: message.threadId }),",
            "map": "\t\tconst map = {\n\t\tconst map = {\n\t\t\tcollapsed: 'collapsed',\n\t\t\tcolor: 'color',\n\t\t\ttext: 'text',\n\t\t\ttimestampLink: 'message_link',\n\t\t\tthumbnailUrl: 'thumb_url',\n\t\t\timageDimensions: 'image_dimensions',\n\t\t\timagePreview: 'image_preview',\n\t\t\timageUrl: 'image_url',\n\t\t\timageType: 'image_type',\n\t\t\timageSize: 'image_size',\n\t\t\taudioUrl: 'audio_url',\n\t\t\taudioType: 'audio_type',\n\t\t\taudioSize: 'audio_size',\n\t\t\tvideoUrl: 'video_url',\n\t\t\tvideoType: 'video_type',\n\t\t\tvideoSize: 'video_size',\n\t\t\tfields: 'fields',\n\t\t\tactionButtonsAlignment: 'button_alignment',\n\t\t\tactions: 'actions',\n\t\t\ttype: 'type',\n\t\t\tdescription: 'description',\n\t\t\tauthor: (attachment) => {\n\t\t\t\tconst { author_name: name, author_link: link, author_icon: icon } = attachment;\n\t\t\t\tconst { author_name: name, author_link: link, author_icon: icon } = attachment;"
        },
        "depth_rank": 10
    },
    {
        "file": "visitors.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apps/server/converters/visitors.js",
        "code": {
            "newVisitor": "\t\tconst newVisitor = {\n\t\tconst newVisitor = {\n\t\t\t_id: visitor.id,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\tphone: visitor.phone,\n\t\t\tlivechatData: visitor.livechatData,\n\t\t\tstatus: visitor.status || 'online',\n\t\t\t...(visitor.visitorEmails && { visitorEmails: visitor.visitorEmails }),"
        },
        "depth_rank": 10
    },
    {
        "file": "setReaction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/reactions/server/setReaction.ts",
        "code": {
            "oldMessage": "\t\tconst oldMessage = JSON.parse(JSON.stringify(message));\n\t\tconst oldMessage = JSON.parse(JSON.stringify(message));\n\t\tremoveUserReaction(message, reaction, user.username as string);\n\t\tif (_.isEmpty(message.reactions)) {\n\t\t\tdelete message.reactions;\n\t\t\tif (isTheLastMessage(room, message)) {\n\t\t\t\tawait Rooms.unsetReactionsInLastMessage(room._id);\n\t\t\t}\n\t\t\tawait Messages.unsetReactions(message._id);\n\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "helpers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/emoji/client/helpers.ts",
        "code": {
            "emojiObject": "\t\t\tconst emojiObject = emoji.list[current];\n\t\t\tconst emojiObject = emoji.list[current];\n\t\t\tconst { emojiPackage, shortnames = [] } = emojiObject;\n\t\t\tconst { emojiPackage, shortnames = [] } = emojiObject;"
        },
        "depth_rank": 9
    },
    {
        "file": "README.md",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/README.md",
        "code": {
            "function": "settingsRegistry.addGroup('Settings_Group', function() {\nsettingsRegistry.addGroup('Settings_Group', function() {\n    this.add('SettingInGroup', 'default_value', { type: 'boolean', public: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "deprecationWarningLogger.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/deprecationWarningLogger.ts",
        "code": {
            "deprecationLogger": "const deprecationLogger = new Logger('DeprecationWarning');\nconst deprecationLogger = new Logger('DeprecationWarning');\n\ntype MessageFn<T> = (params: { parameter: string; version: string } & T) => string;"
        },
        "depth_rank": 10
    },
    {
        "file": "notifyUsersOnMessage.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyUsersOnMessage.js",
        "code": {
            "toAll": "\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');",
            "toHere": "\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');",
            "highlightOptions": "\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };",
            "unreadCount": "\t\tconst userIds = new Set(mentionIds);\n\t\tconst userIds = new Set(mentionIds);\n\n\t\tconst unreadCount = getUnreadSettingCount(room.t);\n\t\tconst unreadCount = getUnreadSettingCount(room.t);\n\n\t\t(await getUserIdsFromHighlights(room._id, message)).forEach((uid) => userIds.add(uid));\n\n\t\t// give priority to user mentions over group mentions\n\t\tif (userIds.size > 0) {\n\t\t\tawait incUserMentions(room._id, room.t, [...userIds], unreadCount);\n\t\t} else if (toAll || toHere) {"
        },
        "depth_rank": 10
    },
    {
        "file": "debug.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/debug.js",
        "code": {
            "end": "\t\tconst end = metrics.meteorSubscriptions.startTimer({ subscription: name });\n\t\tconst end = metrics.meteorSubscriptions.startTimer({ subscription: name });"
        },
        "depth_rank": 10
    },
    {
        "file": "generatePassword.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/generatePassword.ts",
        "code": {
            "password": "\t\t\tconst password = generator.generate({\n\t\t\tconst password = generator.generate({\n\t\t\t\tlength,\n\t\t\t\t...(policies.policy && { numbers: true }),"
        },
        "depth_rank": 10
    },
    {
        "file": "RateLimiter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/RateLimiter.js",
        "code": {
            "match": "\t\treturn async function (...args) {\n\t\treturn async function (...args) {\n\t\t\tconst match = {};\n\t\t\tconst match = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "bugsnag.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/bugsnag.ts",
        "code": {
            "_bugsnagDebug": "const logger = new Logger('bugsnag');\nconst logger = new Logger('bugsnag');\n\nconst originalMeteorDebug = Meteor._debug;\nconst originalMeteorDebug = Meteor._debug;\n\nfunction _bugsnagDebug(message: any, stack: any, ...args: any): void {\nfunction _bugsnagDebug(message: any, stack: any, ...args: any): void {\n\tif (stack instanceof Error) {\n\t\tBugsnag.notify(stack, (event) => {\n\t\t\tevent.context = message;\n\t\t});\n\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "sendNotificationsOnMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/lib/sendNotificationsOnMessage.ts",
        "code": {
            "isHighlighted": "\tconst isVideoConf = message.t === 'videoconf';\n\tconst isVideoConf = message.t === 'videoconf';\n\n\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;",
            "await": "\tconst queueItems: NotificationItem[] = [];\n\tconst queueItems: NotificationItem[] = [];\n\n\tif (\n\t\tshouldNotifyMobile({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tmobilePushNotifications,\n\t\t\thasMentionToAll,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t\tisVideoConf,\n\t\t\tuserPreferences: receiver.settings?.preferences,\n\t\t\troomUids: room.uids,\n\t\t})\n\t) {\n\t\tqueueItems.push({\n\t\t\ttype: 'push',\n\t\t\tdata: await getPushData({\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: subscription.u._id,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\treceiver,\n\t\t\t}),\n\t\t});\n\t}\n\n\tif (\n\t\treceiver.emails &&\n\t\tshouldNotifyEmail({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\temailNotifications,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasMentionToAll,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tconst messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n\t\tconst messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n\t\tconst firstAttachment = message.attachments?.length && message.attachments.shift();\n\t\tconst firstAttachment = message.attachments?.length && message.attachments.shift();\n\n\t\tif (firstAttachment) {\n\t\t\tfirstAttachment.description =\n\t\t\t\ttypeof firstAttachment.description === 'string' ? emojione.shortnameToUnicode(firstAttachment.description) : undefined;\n\t\t\tfirstAttachment.text = typeof firstAttachment.text === 'string' ? emojione.shortnameToUnicode(firstAttachment.text) : undefined;\n\t\t}\n\n\t\tconst attachments = firstAttachment ? [firstAttachment, ...(message.attachments ?? [])].filter(Boolean) : [];\n\t\tconst attachments = firstAttachment ? [firstAttachment, ...(message.attachments ?? [])].filter(Boolean) : [];\n\t\tfor await (const email of receiver.emails) {\n\t\tfor await (const email of receiver.emails) {\n\t\t\tif (email.verified) {\n\t\t\t\tqueueItems.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tdata: await getEmailData({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\tmsg: messageWithUnicode,\n\t\t\t\t\t\t\t...(attachments.length > 0 ? { attachments } : {}),"
        },
        "depth_rank": 10
    },
    {
        "file": "mentionUserNotInChannel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/startup/mentionUserNotInChannel.ts",
        "code": {
            "subs": "\t\tconst subs = await Subscriptions.findByRoomIdAndUserIds(\n\t\tconst subs = await Subscriptions.findByRoomIdAndUserIds(\n\t\t\tmessage.rid,\n\t\t\tmentions.map(({ _id }) => _id),",
            "canAddUsers": "\t\tconst canAddUsers = canAddUsersToThisRoom || canAddToAnyRoom;\n\t\tconst canAddUsers = canAddUsersToThisRoom || canAddToAnyRoom;\n\n\t\tconst { language } = (await Users.findOneById(message.u._id)) || {};\n\t\tconst { language } = (await Users.findOneById(message.u._id)) || {};",
            "mentionsText": "\t\tconst mentionsText = usernamesOrNames.join(', ');\n\t\tconst mentionsText = usernamesOrNames.join(', ');\n\n\t\t// TODO: Mentions style\n\t\tvoid api.broadcast('notify.ephemeralMessage', message.u._id, message.rid, {\n\t\t\tmsg: '',\n\t\t\tmentions: mentionsUsersNotInChannel,\n\t\t\ttmid: message.tmid,\n\t\t\tblocks: [\n\t\t\t\t{\n\t\t\t\t\tappId: APP_ID,\n\t\t\t\t\ttype: 'section',\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: i18n.t(messageLabel, { mentions: mentionsText }, language),"
        },
        "depth_rank": 10
    },
    {
        "file": "rateLimiter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/startup/rateLimiter.js",
        "code": {
            "rateLimiterConsoleLog": "const logger = new Logger('RateLimiter');\nconst logger = new Logger('RateLimiter');\n\nconst slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\nconst slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\n\nconst rateLimiterConsoleLog = ({ msg, reply, input }) => {\nconst rateLimiterConsoleLog = ({ msg, reply, input }) => {\n\tconsole.warn('DDP RATE LIMIT:', msg);\n\tconsole.warn(JSON.stringify({ reply, input }, null, 2));",
            "rateLimiterLogger": "const rateLimiterLogger = ({ msg, reply, input }) => logger.info({ msg, reply, input });\nconst rateLimiterLogger = ({ msg, reply, input }) => logger.info({ msg, reply, input });",
            "names": "const rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\nconst rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\n\n// Get initial set of names already registered for rules\nconst names = new Set(\nconst names = new Set(\n\tObject.values(DDPRateLimiter.printRules())\n\t\t.map((rule) => rule._matchers)\n\t\t.filter((match) => typeof match.name === 'string')\n\t\t.map((match) => match.name),\n);\n\n// Override the addRule to save new names added after this point\nconst { addRule } = DDPRateLimiter;\nconst { addRule } = DDPRateLimiter;",
            "ruleIds": "const ruleIds = {};\nconst ruleIds = {};",
            "callback": "const callback = (msg, name) => async (reply, input) => {\nconst callback = (msg, name) => async (reply, input) => {\n\tif (reply.allowed === false) {\n\t\trateLimiterLog({ msg, reply, input });"
        },
        "depth_rank": 10
    },
    {
        "file": "closeOmnichannelConversations.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/closeOmnichannelConversations.ts",
        "code": {
            "roomsInfo": "\tconst roomsInfo = await LivechatRooms.findByIds(\n\tconst roomsInfo = await LivechatRooms.findByIds(\n\t\tsubscribedRooms.map(({ rid }) => rid),",
            "comment": "\tconst language = settings.get<string>('Language') || 'en';\n\tconst language = settings.get<string>('Language') || 'en';\n\tconst comment = i18n.t('Agent_deactivated', { lng: language });\n\tconst comment = i18n.t('Agent_deactivated', { lng: language });"
        },
        "depth_rank": 10
    },
    {
        "file": "setEmail.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/setEmail.ts",
        "code": {
            "email": "const _sendEmailChangeNotification = async function (to: string, newEmail: string) {\nconst _sendEmailChangeNotification = async function (to: string, newEmail: string) {\n\tconst subject = String(settings.get('Email_Changed_Email_Subject'));\n\tconst subject = String(settings.get('Email_Changed_Email_Subject'));\n\tconst email = {\n\tconst email = {\n\t\tto,\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject,\n\t\thtml,\n\t\tdata: {\n\t\t\temail: escapeHTML(newEmail),\n\t\t},\n\t};\n\n\ttry {\n\t\tawait Mailer.send(email);\n\t} catch (error: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "updateGroupDMsName.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/updateGroupDMsName.ts",
        "code": {
            "getFname": "const getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');",
            "getName": "const getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(',');",
            "rooms": "\tconst rooms = Rooms.findGroupDMsByUids([userThatChangedName._id], { projection: { uids: 1 } });\n\tconst rooms = Rooms.findGroupDMsByUids([userThatChangedName._id], { projection: { uids: 1 } });",
            "subs": "\t\tconst members = getMembers(room.uids);\n\t\tconst members = getMembers(room.uids);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\t\tconst sortedMembers = members.sort(sortUsersAlphabetically);\n\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { projection: { '_id': 1, 'u._id': 1 } });\n\t\tconst subs = Subscriptions.findByRoomId(room._id, { projection: { '_id': 1, 'u._id': 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "checkUsernameAvailability.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/checkUsernameAvailability.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });",
            "existingUser": "\tconst existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n\tconst existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n\t\tprojection: { _id: 1 },",
            "existingTeam": "\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });\n\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "relinquishRoomOwnerships.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/relinquishRoomOwnerships.ts",
        "code": {
            "changeOwner": "\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);\n\tconst changeOwner = subscribedRooms.filter(({ shouldChangeOwner }) => shouldChangeOwner);",
            "await": "\tfor await (const { newOwner, rid } of changeOwner) {\n\tfor await (const { newOwner, rid } of changeOwner) {\n\t\tnewOwner && (await Roles.addUserRoles(newOwner, ['owner'], rid));\n\t}\n\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);\n\tconst roomIdsToRemove: string[] = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }) => rid);"
        },
        "depth_rank": 10
    },
    {
        "file": "processWebhookMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/processWebhookMessage.ts",
        "code": {
            "attachment": "\t\t\t\tconst attachment = message.attachments[i] as MessageAttachment & { msg?: string };\n\t\t\t\tconst attachment = message.attachments[i] as MessageAttachment & { msg?: string };",
            "messageReturn": "\t\tconst messageReturn = await sendMessage(user, message, room);\n\t\tconst messageReturn = await sendMessage(user, message, room);\n\t\tsentData.push({ channel, message: messageReturn });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUsernameSuggestion.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getUsernameSuggestion.ts",
        "code": {
            "services": "\t\tconst services = [\n\t\tconst services = [\n\t\t\t...new Set(user.services.flatMap(({ name, username, firstName, lastName }) => [name, username, firstName, lastName])),"
        },
        "depth_rank": 10
    },
    {
        "file": "deleteMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/deleteMessage.ts",
        "code": {
            "files": "\tconst files = (message.files || [message.file]).filter(Boolean); // Keep compatibility with old messages\n\tconst files = (message.files || [message.file]).filter(Boolean); // Keep compatibility with old messages\n\n\tif (keepHistory) {\n\t\tif (showDeletedStatus) {\n\t\t\t// TODO is there a better way to tell TS \"IUser[username]\" is not undefined?\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(message._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t\t} else {",
            "await": "\t\tfor await (const file of files) {\n\t\tfor await (const file of files) {\n\t\t\tfile?._id && (await FileUpload.getStore('Uploads').deleteById(file._id));\n\t\t}\n\t}\n\tif (showDeletedStatus) {\n\t\t// TODO is there a better way to tell TS \"IUser[username]\" is not undefined?\n\t\tawait Messages.setAsDeletedByIdAndUser(message._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t} else {",
            "room": "\tconst room = await Rooms.findOneById(message.rid, { projection: { lastMessage: 1, prid: 1, mid: 1, federated: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { lastMessage: 1, prid: 1, mid: 1, federated: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "setUsername.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/setUsername.ts",
        "code": {
            "avatarSuggestions": "\t\tconst avatarSuggestions = (await getAvatarSuggestionForUser(user)) as {};\n\t\tconst avatarSuggestions = (await getAvatarSuggestionForUser(user)) as {};"
        },
        "depth_rank": 10
    },
    {
        "file": "deleteUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/deleteUser.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, {\n\tconst user = await Users.findOneById(userId, {\n\t\tprojection: { username: 1, avatarOrigin: 1, roles: 1, federated: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "sendMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/sendMessage.ts",
        "code": {
            "result": "\t\tconst listenerBridge = Apps.getBridges()?.getListenerBridge();\n\t\tconst listenerBridge = Apps.getBridges()?.getListenerBridge();\n\n\t\tconst prevent = await listenerBridge?.messageEvent('IPreMessageSentPrevent', message);\n\t\tconst prevent = await listenerBridge?.messageEvent('IPreMessageSentPrevent', message);\n\t\tif (prevent) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await listenerBridge?.messageEvent(\n\t\tconst result = await listenerBridge?.messageEvent(\n\t\t\t'IPreMessageSentModify',\n\t\t\tawait listenerBridge?.messageEvent('IPreMessageSentExtend', message),\n\t\t);\n\n\t\tif (typeof result === 'object') {\n\t\t\tmessage = Object.assign(message, result);\n\n\t\t\t// Some app may have inserted malicious/invalid values in the message, let's check it again\n\t\t\tawait validateMessage(message, room, user);\n\t\t}\n\t}\n\n\tparseUrlsInMessage(message, previewUrls);\n\n\tmessage = await Message.beforeSave({ message, room, user });",
            "messageAlreadyExists": "\t\tconst messageAlreadyExists = message._id && (await Messages.findOneById(message._id, { projection: { _id: 1 } }));\n\t\tconst messageAlreadyExists = message._id && (await Messages.findOneById(message._id, { projection: { _id: 1 } }));"
        },
        "depth_rank": 10
    },
    {
        "file": "saveUser.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/saveUser.js",
        "code": {
            "gravatarUrl": "\t\tconst gravatarUrl = Gravatar.url(userData.email, {\n\t\tconst gravatarUrl = Gravatar.url(userData.email, {\n\t\t\tdefault: '404',\n\t\t\tsize: '200',\n\t\t\tprotocol: 'https',\n\t\t});\n\n\t\ttry {\n\t\t\tawait setUserAvatar(userData, gravatarUrl, '', 'url');\n\t\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "addUserToDefaultChannels.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/addUserToDefaultChannels.ts",
        "code": {
            "defaultRooms": "\tconst defaultRooms = await Rooms.findByDefaultAndTypes(true, ['c', 'p'], {\n\tconst defaultRooms = await Rooms.findByDefaultAndTypes(true, ['c', 'p'], {\n\t\tprojection: { usernames: 0 },",
            "autoTranslateConfig": "\t\t\tconst autoTranslateConfig = getSubscriptionAutotranslateDefaultConfig(user);\n\t\t\tconst autoTranslateConfig = getSubscriptionAutotranslateDefaultConfig(user);\n\t\t\t// Add a subscription to this user\n\t\t\tawait Subscriptions.createWithRoomAndUser(room, user, {\n\t\t\t\tts: new Date(),\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tunread: 1,\n\t\t\t\tuserMentions: 1,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\t...(room.favorite && { f: true }),"
        },
        "depth_rank": 10
    },
    {
        "file": "updateMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/updateMessage.ts",
        "code": {
            "appMessage": "\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps && Apps.isLoaded()) {\n\t\tconst appMessage = Object.assign({}, originalMessage, message);\n\t\tconst appMessage = Object.assign({}, originalMessage, message);"
        },
        "depth_rank": 10
    },
    {
        "file": "getRoomsWithSingleOwner.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getRoomsWithSingleOwner.ts",
        "code": {
            "options": "\tconst subscribedRooms: SubscribedRoomsForUserWithDetails[] = [];\n\tconst subscribedRooms: SubscribedRoomsForUserWithDetails[] = [];\n\n\tconst cursor =\n\tconst cursor =\n\t\troomIds.length > 0 ? Subscriptions.findByUserIdAndRoomIds(userId, roomIds) : Subscriptions.findByUserIdExceptType(userId, 'd');\n\n\t// Iterate through all the rooms the user is subscribed to, to check if he is the last owner of any of them.\n\tfor await (const subscription of cursor) {\n\tfor await (const subscription of cursor) {\n\t\tconst roomData: SubscribedRoomsForUserWithDetails = {\n\t\tconst roomData: SubscribedRoomsForUserWithDetails = {\n\t\t\trid: subscription.rid,\n\t\t\tt: subscription.t,\n\t\t\tshouldBeRemoved: false,\n\t\t\tshouldChangeOwner: false,\n\t\t\tuserIsLastOwner: false,\n\t\t\tnewOwner: null,\n\t\t};\n\n\t\tif (subscriptionHasRole(subscription, 'owner')) {\n\t\t\t// Fetch the number of owners\n\t\t\tconst numOwners = await Subscriptions.countByRoomIdAndRoles(subscription.rid, ['owner']);\n\t\t\tconst numOwners = await Subscriptions.countByRoomIdAndRoles(subscription.rid, ['owner']);\n\t\t\t// If it's only one, then this user is the only owner.\n\t\t\troomData.userIsLastOwner = numOwners === 1;\n\t\t\tif (numOwners === 1 && assignNewOwner) {\n\t\t\t\t// Let's check how many subscribers the room has.\n\t\t\t\tconst options = { projection: { 'u._id': 1 }, sort: { ts: 1 as const } };\n\t\t\t\tconst options = { projection: { 'u._id': 1 }, sort: { ts: 1 as const } };",
            "await": "\t\t\t\tconst subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n\t\t\t\tconst subscribersCursor = Subscriptions.findByRoomId(subscription.rid, options);\n\n\t\t\t\tfor await (const {\n\t\t\t\tfor await (const {\n\t\t\t\t\tu: { _id: uid },",
            "newOwner": "\t\t\t\t\tconst newOwner = await Users.findOneActiveById(uid, { projection: { _id: 1 } });\n\t\t\t\t\tconst newOwner = await Users.findOneActiveById(uid, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUserSingleOwnedRooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getUserSingleOwnedRooms.ts",
        "code": {
            "roomsThatWillChangeOwner": "\tconst roomsThatWillChangeOwner = subscribedRooms\n\tconst roomsThatWillChangeOwner = subscribedRooms\n\t\t.filter(({ shouldChangeOwner }) => shouldChangeOwner)",
            "roomsThatWillBeRemoved": "\tconst roomsThatWillBeRemoved = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }: { rid: string }) => rid);\n\tconst roomsThatWillBeRemoved = subscribedRooms.filter(({ shouldBeRemoved }) => shouldBeRemoved).map(({ rid }: { rid: string }) => rid);",
            "rooms": "\tconst roomIds = roomsThatWillBeRemoved.concat(roomsThatWillChangeOwner);\n\tconst roomIds = roomsThatWillBeRemoved.concat(roomsThatWillChangeOwner);\n\tconst rooms = Rooms.findByIds(roomIds, { projection: { _id: 1, name: 1, fname: 1 } });\n\tconst rooms = Rooms.findByIds(roomIds, { projection: { _id: 1, name: 1, fname: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "createRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/createRoom.ts",
        "code": {
            "function": "const isValidName = (name: unknown): name is string => {\nconst isValidName = (name: unknown): name is string => {\n\treturn typeof name === 'string' && name.trim().length > 0;\n};\n\nconst onlyUsernames = (members: unknown): members is string[] =>\nconst onlyUsernames = (members: unknown): members is string[] =>\n\tArray.isArray(members) && members.every((member) => typeof member === 'string');\n\nasync function createUsersSubscriptions({\nasync function createUsersSubscriptions({\n\troom,\n\tshouldBeHandledByFederation,\n\tmembers,\n\tnow,\n\towner,\n\toptions,\n}: {",
            "membersCursor": "\tconst subs = [];\n\tconst subs = [];\n\n\tconst memberIds = [];\n\tconst memberIds = [];\n\n\tconst membersCursor = Users.findUsersByUsernames<Pick<IUser, '_id' | 'username' | 'settings' | 'federated' | 'roles'>>(members, {\n\tconst membersCursor = Users.findUsersByUsernames<Pick<IUser, '_id' | 'username' | 'settings' | 'federated' | 'roles'>>(members, {\n\t\tprojection: { 'username': 1, 'settings.preferences': 1, 'federated': 1, 'roles': 1 },",
            "await": "\tfor await (const member of membersCursor) {\n\tfor await (const member of membersCursor) {\n\t\ttry {\n\t\t\tawait callbacks.run('federation.beforeAddUserToARoom', { user: member, inviter: owner }, room);",
            "now": "\tconst now = new Date();\n\tconst now = new Date();\n\n\tconst roomProps: Omit<IRoom, '_id' | '_updatedAt'> = {\n\tconst roomProps: Omit<IRoom, '_id' | '_updatedAt'> = {\n\t\tfname: name,\n\t\t_updatedAt: now,\n\t\t...extraData,\n\t\tname: await getValidRoomName(name.trim(), undefined, {\n\t\t\t...(options?.nameValidationRegex && { nameValidationRegex: options.nameValidationRegex }),",
            "team": "\t\tconst team = await Team.getOneById(teamId, { projection: { _id: 1 } });\n\t\tconst team = await Team.getOneById(teamId, { projection: { _id: 1 } });",
            "shouldBeHandledByFederation": "\tconst eventResult = await Apps.triggerEvent('IPreRoomCreateModify', await Apps.triggerEvent('IPreRoomCreateExtend', tmp));\n\tconst eventResult = await Apps.triggerEvent('IPreRoomCreateModify', await Apps.triggerEvent('IPreRoomCreateExtend', tmp));\n\n\tif (eventResult && typeof eventResult === 'object' && delete eventResult._USERNAMES) {\n\t\tObject.assign(roomProps, eventResult);\n\t}\n\n\tif (type === 'c') {\n\t\tawait callbacks.run('beforeCreateChannel', owner, roomProps);\n\t}\n\n\tconst room = await Rooms.createWithFullRoomData(roomProps);\n\tconst room = await Rooms.createWithFullRoomData(roomProps);\n\n\tconst shouldBeHandledByFederation = room.federated === true || owner.username.includes(':');\n\tconst shouldBeHandledByFederation = room.federated === true || owner.username.includes(':');\n\n\tawait createUsersSubscriptions({ room, members, now, owner, options, shouldBeHandledByFederation });"
        },
        "depth_rank": 10
    },
    {
        "file": "getFullUserData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getFullUserData.ts",
        "code": {
            "as": "} as const;\n} as const;\n\nlet publicCustomFields: Record<string, 0 | 1> = {};",
            "options": "\tconst fields = getFields(canViewAllInfo);\n\tconst fields = getFields(canViewAllInfo);\n\n\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\t...fields,\n\t\t\t...(myself && { services: 1 }),"
        },
        "depth_rank": 10
    },
    {
        "file": "attachMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/attachMessage.ts",
        "code": {
            "useRealName": "\tconst useRealName = Boolean(settings.get('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(settings.get('UI_Use_Real_Name'));\n\tconst {\n\tconst {\n\t\tmsg,\n\t\tu: { username, name },"
        },
        "depth_rank": 10
    },
    {
        "file": "validateCustomFields.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/validateCustomFields.js",
        "code": {
            "customFields": "\tconst customFields = {};\n\tconst customFields = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "removeUserFromRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/removeUserFromRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "parseUrlsInMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/parseUrlsInMessage.ts",
        "code": {
            "urls": "\tconst urls = message.html?.match(getMessageUrlRegex()) || [];\n\tconst urls = message.html?.match(getMessageUrlRegex()) || [];\n\tif (urls) {\n\t\tmessage.urls = [...new Set(urls)].map((url) => ({\n\t\t\turl,\n\t\t\tmeta: {},"
        },
        "depth_rank": 10
    },
    {
        "file": "createDirectRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/createDirectRoom.ts",
        "code": {
            "generateSubscription": "const generateSubscription = (\nconst generateSubscription = (\n\tfname: string,\n\tname: string,\n\tuser: IUser,\n\textra: MatchKeysAndValues<ISubscription>,\n): MatchKeysAndValues<ISubscription> => ({\n\t_id: Random.id(),\n\tts: new Date(),\n\talert: false,\n\tunread: 0,\n\tuserMentions: 0,\n\tgroupMentions: 0,\n\t...(user.customFields && { customFields: user.customFields }),",
            "getFname": "const getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');\nconst getFname = (members: IUser[]): string => members.map(({ name, username }) => name || username).join(', ');",
            "getName": "const getName = (members: IUser[]): string => members.map(({ username }) => username).join(', ');\nconst getName = (members: IUser[]): string => members.map(({ username }) => username).join(', ');",
            "uids": "\tconst uids = roomMembers.map(({ _id }) => _id).sort();\n\tconst uids = roomMembers.map(({ _id }) => _id).sort();",
            "roomInfo": "\tconst roomInfo = {\n\tconst roomInfo = {\n\t\t...(uids.length === 2 && { _id: uids.join('') }), // Deprecated: using users' _id to compose the room _id is deprecated",
            "rid": "\tconst rid = room?._id || (await Rooms.insertOne(roomInfo)).insertedId;\n\tconst rid = room?._id || (await Rooms.insertOne(roomInfo)).insertedId;\n\n\tif (roomMembers.length === 1) {\n\t\t// dm to yourself\n\t\tawait Subscriptions.updateOne(\n\t\t\t{ rid, 'u._id': roomMembers[0]._id },",
            "insertedRoom": "\t\tconst insertedRoom = await Rooms.findOneById(rid);\n\t\tconst insertedRoom = await Rooms.findOneById(rid);\n\n\t\tawait callbacks.run('afterCreateDirectRoom', insertedRoom, { members: roomMembers, creatorId: options?.creator });"
        },
        "depth_rank": 10
    },
    {
        "file": "cleanRoomHistory.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/cleanRoomHistory.ts",
        "code": {
            "ts": "\tconst ts = { [gt]: oldest, [lt]: latest };\n\tconst ts = { [gt]: oldest, [lt]: latest };",
            "cursor": "\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\t\tprojection: { pinned: 1, files: 1 },",
            "discussionsCursor": "\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\t\tprojection: { drid: 1 },",
            "threads": "\t\tconst threads = new Set<string>();\n\t\tconst threads = new Set<string>();\n\t\tawait Messages.findThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t\t{ rid, pinned: excludePinned, ignoreDiscussion, ts, users: fromUsers },",
            "uids": "\t\tconst uids = await Users.findByUsernames(fromUsers, { projection: { _id: 1 } })\n\t\tconst uids = await Users.findByUsernames(fromUsers, { projection: { _id: 1 } })"
        },
        "depth_rank": 10
    },
    {
        "file": "getAvatarSuggestionForUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getAvatarSuggestionForUser.ts",
        "code": {
            "services": "\t\t\t\t\tconst services = await ServiceConfiguration.configurations.find({ service }, { fields: { secret: 0 } }).fetchAsync();\n\t\t\t\t\tconst services = await ServiceConfiguration.configurations.find({ service }, { fields: { secret: 0 } }).fetchAsync();",
            "avatar": "\tconst avatars = [];\n\tconst avatars = [];\n\n\tfor await (const avatarProvider of Object.values(avatarProviders)) {\n\tfor await (const avatarProvider of Object.values(avatarProviders)) {\n\t\tconst avatar = await avatarProvider(user);\n\t\tconst avatar = await avatarProvider(user);\n\t\tif (avatar) {\n\t\t\tif (Array.isArray(avatar)) {\n\t\t\t\tavatars.push(...avatar);\n\t\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "loadMessageHistory.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/loadMessageHistory.ts",
        "code": {
            "room": "\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });\n\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUserCreatedByApp.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/getUserCreatedByApp.ts",
        "code": {
            "users": "\tconst users = await Users.find({ appId, type }, options).toArray();\n\tconst users = await Users.find({ appId, type }, options).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "setStatusText.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/setStatusText.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'roles' | 'statusText'>>(userId, {\n\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'roles' | 'statusText'>>(userId, {\n\t\tprojection: { username: 1, name: 1, status: 1, roles: 1, statusText: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "saveUserIdentity.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/saveUserIdentity.ts",
        "code": {
            "handleUpdateParams": "\t\tconst handleUpdateParams = {\n\t\tconst handleUpdateParams = {\n\t\t\tusername,\n\t\t\tpreviousUsername,\n\t\t\trawUsername,\n\t\t\tusernameChanged,\n\t\t\tuser,\n\t\t\tname,\n\t\t\tpreviousName,\n\t\t\trawName,\n\t\t\tnameChanged,\n\t\t};\n\t\tif (updateUsernameInBackground) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t\t\t} catch (err) {",
            "function": "async function updateUsernameReferences({\nasync function updateUsernameReferences({\n\tusername,\n\tpreviousUsername,\n\trawUsername,\n\tusernameChanged,\n\tuser,\n\tname,\n\tpreviousName,\n\trawName,\n\tnameChanged,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "setRoomAvatar.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/setRoomAvatar.ts",
        "code": {
            "result": "\tconst fileData = RocketChatFile.dataURIParse(dataURI);\n\tconst fileData = RocketChatFile.dataURIParse(dataURI);\n\n\tconst buffer = Buffer.from(fileData.image, 'base64');\n\tconst buffer = Buffer.from(fileData.image, 'base64');\n\n\tconst file = {\n\tconst file = {\n\t\trid,\n\t\ttype: fileData.contentType,\n\t\tsize: buffer.length,\n\t\tuid: user._id,\n\t};\n\n\tif (current) {\n\t\tawait fileStore.deleteById(current._id);\n\t}\n\n\tconst result = await fileStore.insert(file, buffer);\n\tconst result = await fileStore.insert(file, buffer);\n\n\tsetTimeout(async () => {\n\t\tresult.etag && (await Rooms.setAvatarData(rid, 'upload', result.etag));\n\t\tawait Message.saveSystemMessage('room_changed_avatar', rid, '', user);\n\t\tvoid api.broadcast('room.avatarUpdate', { _id: rid, avatarETag: result.etag });"
        },
        "depth_rank": 10
    },
    {
        "file": "setUserActiveStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/setUserActiveStatus.ts",
        "code": {
            "directConversations": "async function reactivateDirectConversations(userId: string) {\nasync function reactivateDirectConversations(userId: string) {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1, t: 1 },",
            "activeUsers": "\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\t\tif (isDirectMessageRoom(r)) {\n\t\t\tacc.push(...r.uids);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();",
            "livechatSubscribedRooms": "\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');",
            "email": "\tconst email = {\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),"
        },
        "depth_rank": 10
    },
    {
        "file": "mobile.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/notifications/mobile.js",
        "code": {
            "lng": "\tconst username = settings.get('Push_show_username_room') ? (settings.get('UI_Use_Real_Name') && senderName) || senderUsername : '';\n\tconst username = settings.get('Push_show_username_room') ? (settings.get('UI_Use_Real_Name') && senderName) || senderUsername : '';\n\n\tconst lng = receiver.language || settings.get('Language') || 'en';\n\tconst lng = receiver.language || settings.get('Language') || 'en';\n\n\tlet messageText;\n\tif (shouldOmitMessage && settings.get('Push_request_content_from_server')) {\n\t\tmessageText = i18n.t('You_have_a_new_message', { lng });"
        },
        "depth_rank": 11
    },
    {
        "file": "desktop.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/functions/notifications/desktop.ts",
        "code": {
            "payload": "\tconst payload = {\n\tconst payload = {\n\t\ttitle: title || '',\n\t\ttext,\n\t\tduration,\n\t\tpayload: {\n\t\t\t_id: '',\n\t\t\trid: '',\n\t\t\ttmid: '',\n\t\t\t...('_id' in message && {\n\t\t\t\t// TODO: omnichannel is not sending _id, rid, tmid\n\t\t\t\t_id: message._id,\n\t\t\t\trid: message.rid,\n\t\t\t\ttmid: message.tmid,\n\t\t\t}),\n\t\t\tsender: message.u,\n\t\t\ttype: room.t,\n\t\t\tmessage: {\n\t\t\t\tmsg: 'msg' in message ? message.msg : '',\n\t\t\t\t...('t' in message && {\n\t\t\t\t\tt: message.t,\n\t\t\t\t}),\n\t\t\t},\n\t\t\tname,\n\t\t},\n\t};\n\n\tmetrics.notificationsSent.inc({ notification_type: 'desktop' });"
        },
        "depth_rank": 11
    },
    {
        "file": "twitter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/oauth/twitter.js",
        "code": {
            "result": "const whitelistedFields = ['id', 'name', 'description', 'profile_image_url', 'profile_image_url_https', 'lang', 'email'];\nconst whitelistedFields = ['id', 'name', 'description', 'profile_image_url', 'profile_image_url_https', 'lang', 'email'];\n\nconst getIdentity = async function (accessToken, appId, appSecret, accessTokenSecret) {\nconst getIdentity = async function (accessToken, appId, appSecret, accessTokenSecret) {\n\tconst Twitter = new Twit({\n\tconst Twitter = new Twit({\n\t\tconsumer_key: appId,\n\t\tconsumer_secret: appSecret,\n\t\taccess_token: accessToken,\n\t\taccess_token_secret: accessTokenSecret,\n\t});\n\ttry {\n\t\tconst result = await Twitter.get('account/verify_credentials.json?include_email=true');\n\t\tconst result = await Twitter.get('account/verify_credentials.json?include_email=true');\n\n\t\treturn result.data;\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "oauth.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/oauth/oauth.js",
        "code": {
            "AccessTokenServices": "const AccessTokenServices = {};\nconst AccessTokenServices = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "google.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/oauth/google.js",
        "code": {
            "request": "async function getScopes(accessToken) {\nasync function getScopes(accessToken) {\n\ttry {\n\t\tconst request = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo', {\n\t\tconst request = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo', {\n\t\t\tparams: { access_token: accessToken },"
        },
        "depth_rank": 10
    },
    {
        "file": "setAdminStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/setAdminStatus.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ _id: userId }, { projection: { username: 1, federated: 1 } });\n\t\tconst user = await Users.findOne({ _id: userId }, { projection: { username: 1, federated: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "addUsersToRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/addUsersToRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, userId, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, userId, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "archiveRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/archiveRoom.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "sendMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/sendMessage.ts",
        "code": {
            "parentMessage": "\t\tconst parentMessage = await Messages.findOneById(message.tmid, { projection: { rid: 1, tmid: 1 } });\n\t\tconst parentMessage = await Messages.findOneById(message.tmid, { projection: { rid: 1, tmid: 1 } });",
            "room": "\t\tconst room = await canSendMessageAsync(rid, { uid, username: user.username, type: user.type });\n\t\tconst room = await canSendMessageAsync(rid, { uid, username: user.username, type: user.type });",
            "errorMessage": "\t\tconst errorMessage = typeof err === 'string' ? err : err.error || err.message;\n\t\tconst errorMessage = typeof err === 'string' ? err : err.error || err.message;\n\t\tvoid api.broadcast('notify.ephemeralMessage', uid, message.rid, {\n\t\t\tmsg: i18n.t(errorMessage, { lng: user.language }),"
        },
        "depth_rank": 10
    },
    {
        "file": "saveSettings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/saveSettings.ts",
        "code": {
            "validJSON": "const validJSON = Match.Where((value: string) => {\nconst validJSON = Match.Where((value: string) => {\n\ttry {\n\t\tvalue === '' || JSON.parse(value);\n\t\treturn true;\n\t} catch (_) {",
            "orgName": "\t\t\tconst orgName = params.find(({ _id }) => _id === 'Organization_Name');\n\t\t\tconst orgName = params.find(({ _id }) => _id === 'Organization_Name');"
        },
        "depth_rank": 10
    },
    {
        "file": "unarchiveRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/unarchiveRoom.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "blockUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/blockUser.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOne({ _id: rid });\n\t\tconst room = await Rooms.findOne({ _id: rid });"
        },
        "depth_rank": 10
    },
    {
        "file": "leaveRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/server/methods/leaveRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "sendMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/lib/client/methods/sendMessage.ts",
        "code": {
            "messageAlreadyExists": "\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });\n\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });",
            "room": "\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });\n\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "Message.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/server/Message.ts",
        "code": {
            "data": "\t\t\t\tconst data = (typeof messageType.data === 'function' && messageType.data(msg)) || {};\n\t\t\t\tconst data = (typeof messageType.data === 'function' && messageType.data(msg)) || {};"
        },
        "depth_rank": 9
    },
    {
        "file": "IframeLogin.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/IframeLogin.ts",
        "code": {
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tbeforeSend: (xhr: XMLHttpRequest) => {\n\t\t\t\txhr.withCredentials = true;\n\t\t\t},\n\t\t};\n\n\t\tlet { iframeUrl } = this;"
        },
        "depth_rank": 10
    },
    {
        "file": "messageActionDefault.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/messageActionDefault.ts",
        "code": {
            "newMessage": "const getMainMessageText = (message: IMessage): IMessage => {\nconst getMainMessageText = (message: IMessage): IMessage => {\n\tconst newMessage = { ...message };\n\tconst newMessage = { ...message };",
            "dmRoom": "\t\t\t\tconst dmRoom = ChatRoom.findOne({ _id: [user._id, message.u._id].sort().join('') });\n\t\t\t\tconst dmRoom = ChatRoom.findOne({ _id: [user._id, message.u._id].sort().join('') });",
            "permalink": "\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tawait navigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });",
            "msgText": "\t\t\tconst msgText = getMainMessageText(message).msg;\n\t\t\tconst msgText = getMainMessageText(message).msg;\n\t\t\tawait navigator.clipboard.writeText(msgText);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomHistoryManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/RoomHistoryManager.ts",
        "code": {
            "waitAfterFlush": "const defaultLimit = parseInt(getConfig('roomListLimit') ?? '50') || 50;\nconst defaultLimit = parseInt(getConfig('roomListLimit') ?? '50') || 50;\n\nconst waitAfterFlush = (fn: () => void) => setTimeout(() => Tracker.afterFlush(fn), 10);\nconst waitAfterFlush = (fn: () => void) => setTimeout(() => Tracker.afterFlush(fn), 10);\n\nclass RoomHistoryManagerClass extends Emitter {\n\tprivate lastRequest?: Date;\n\n\tprivate histories: Record<\n\t\tIRoom['_id'],\n\t\t{\n\t\t\thasMore: ReactiveVar<boolean>;\n\t\t\thasMoreNext: ReactiveVar<boolean>;\n\t\t\tisLoading: ReactiveVar<boolean>;\n\t\t\tunreadNotLoaded: ReactiveVar<number>;\n\t\t\tfirstUnread: ReactiveVar<IMessage | undefined>;\n\t\t\tloaded: number | undefined;\n\t\t\toldestTs?: Date;\n\t\t}\n\t> = {};",
            "subscription": "\t\tconst room = this.getRoom(message.rid);\n\t\tconst room = this.getRoom(message.rid);\n\t\tvoid this.clear(message.rid);\n\n\t\tconst subscription = ChatSubscription.findOne({ rid: message.rid });\n\t\tconst subscription = ChatSubscription.findOne({ rid: message.rid });",
            "room": "\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.hasMore.get();\n\t}\n\n\tpublic hasMoreNext(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.hasMoreNext.get();\n\t}\n\n\tpublic getMoreIfIsEmpty(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\n\t\tif (room.loaded === undefined) {\n\t\t\treturn this.getMore(rid);\n\t\t}\n\t}\n\n\tpublic isLoading(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\treturn room.isLoading.get();\n\t}\n\n\tpublic async clear(rid: IRoom['_id']) {\n\t\tconst room = this.getRoom(rid);\n\t\tconst room = this.getRoom(rid);\n\t\tChatMessage.remove({ rid });"
        },
        "depth_rank": 10
    },
    {
        "file": "LegacyRoomManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/LegacyRoomManager.ts",
        "code": {
            "maxRoomsOpen": "const maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\n\nconst openedRooms: Record<\nconst openedRooms: Record<\n\tstring,\n\t{\n\t\ttypeName: string;\n\t\trid: IRoom['_id'];\n\t\tready: boolean;\n\t\tactive: boolean;\n\t\tdom?: Node;\n\t\tstreamActive?: boolean;\n\t\tunreadSince: ReactiveVar<Date | undefined>;\n\t\tlastSeen: Date;\n\t\tunreadFirstId?: string;\n\t}\n> = {};",
            "subscription": "\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });"
        },
        "depth_rank": 10
    },
    {
        "file": "messageBox.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/messageBox.ts",
        "code": {
            "actionExists": "\t\tconst actionExists = this.actions.get(group)?.find((action) => action.label === label);\n\t\tconst actionExists = this.actions.get(group)?.find((action) => action.label === label);\n\n\t\tif (actionExists) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.actions.get(group)?.push({ ...config, label });"
        },
        "depth_rank": 10
    },
    {
        "file": "KonchatNotification.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/KonchatNotification.ts",
        "code": {
            "sub": "\t\tconst sub = ChatSubscription.findOne({ rid }, { fields: { audioNotificationValue: 1 } });\n\t\tconst sub = ChatSubscription.findOne({ rid }, { fields: { audioNotificationValue: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/ChatMessages.ts",
        "code": {
            "currentMessage": "\t\t\tconst currentMessage = await this.data.findMessageByID(this.currentEditing.mid);\n\t\t\tconst currentMessage = await this.data.findMessageByID(this.currentEditing.mid);\n\t\t\tlet nextMessage = currentMessage ? await this.data.findNextOwnMessage(currentMessage) : undefined;\n\n\t\t\t// Videoconf messages should not be edited\n\t\t\tif (nextMessage && isVideoConfMessage(nextMessage)) {\n\t\t\t\tnextMessage = await this.data.findNextOwnMessage(nextMessage);\n\t\t\t}\n\n\t\t\tif (nextMessage) {\n\t\t\t\tawait this.messageEditing.editMessage(nextMessage, { cursorAtStart: true });",
            "constructor": "\tpublic constructor(\n\tpublic constructor(\n\t\tprivate params: {\n\t\t\trid: IRoom['_id'];\n\t\t\ttmid?: IMessage['_id'];\n\t\t\tuid: IUser['_id'] | null;\n\t\t\tactionManager: IActionManager;\n\t\t},\n\t) {\n\t\tconst { rid, tmid } = params;\n\t\tconst { rid, tmid } = params;",
            "draft": "\t\t\t\tconst message = await this.data.findMessageByID(this.currentEditingMID);\n\t\t\t\tconst message = await this.data.findMessageByID(this.currentEditingMID);\n\t\t\t\tconst draft = this.composer.text;\n\t\t\t\tconst draft = this.composer.text;\n\n\t\t\t\tif (draft === message?.msg) {\n\t\t\t\t\tawait this.data.discardDraft(this.currentEditingMID);\n\t\t\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "UserAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/UserAction.ts",
        "code": {
            "roomActivities": "function handleStreamAction(rid: string, username: string, activityTypes: string[], extras?: IExtras): void {\nfunction handleStreamAction(rid: string, username: string, activityTypes: string[], extras?: IExtras): void {\n\trid = extras?.tmid || rid;\n\tconst roomActivities = performingUsers.get(rid) || {};\n\tconst roomActivities = performingUsers.get(rid) || {};",
            "timeout": "\tfor (const [, activity] of Object.entries(USER_ACTIVITIES)) {\n\tfor (const [, activity] of Object.entries(USER_ACTIVITIES)) {\n\t\troomActivities[activity] = roomActivities[activity] || new Map();\n\t\tconst users = roomActivities[activity];\n\t\tconst users = roomActivities[activity];\n\t\tconst timeout = users[username];\n\t\tconst timeout = users[username];\n\n\t\tif (timeout) {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\n\t\tif (activityTypes.includes(activity)) {\n\t\t\tactivityTypes.splice(activityTypes.indexOf(activity), 1);\n\t\t\tusers[username] = setTimeout(() => handleStreamAction(rid, username, activityTypes, extras), TIMEOUT);\n\t\t} else {",
            "user": "\t\tconst handler = function (username: string, activityType: string[], extras?: object): void {\n\t\tconst handler = function (username: string, activityType: string[], extras?: object): void {\n\t\t\tconst user = Meteor.users.findOne(Meteor.userId() || undefined, {\n\t\t\tconst user = Meteor.users.findOne(Meteor.userId() || undefined, {\n\t\t\t\tfields: { name: 1, username: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "userCard.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/userCard.ts",
        "code": {
            "updateProps": "const subscribers = new Set<() => void>();\nconst subscribers = new Set<() => void>();\n\nconst updateProps = (newProps: Partial<UserCardProps>) => {\nconst updateProps = (newProps: Partial<UserCardProps>) => {\n\tprops = { ...props, ...newProps };",
            "children": "\t\tconst children = createElement(UserCardHolder, { getProps, subscribeToProps });\n\t\tconst children = createElement(UserCardHolder, { getProps, subscribeToProps });"
        },
        "depth_rank": 10
    },
    {
        "file": "AudioEncoder.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/AudioEncoder.ts",
        "code": {
            "blob": "\t\t\t\tconst magicNoPrefix = new Int8Array([73, 68, 51, 3, 0, 0, 0, 0, 0, 0]);\n\t\t\t\tconst magicNoPrefix = new Int8Array([73, 68, 51, 3, 0, 0, 0, 0, 0, 0]);\n\t\t\t\tconst bufferWithMagicNo = [magicNoPrefix, ...event.data.buffer];\n\t\t\t\tconst bufferWithMagicNo = [magicNoPrefix, ...event.data.buffer];\n\t\t\t\tconst blob = new Blob(bufferWithMagicNo, { type: 'audio/mpeg' });\n\t\t\t\tconst blob = new Blob(bufferWithMagicNo, { type: 'audio/mpeg' });"
        },
        "depth_rank": 11
    },
    {
        "file": "AudioRecorder.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/AudioRecorder.ts",
        "code": {
            "input": "\t\tconst input = this.audioContext?.createMediaStreamSource(this.stream);\n\t\tconst input = this.audioContext?.createMediaStreamSource(this.stream);\n\t\tthis.encoder = new AudioEncoder(input, { bitRate: settings.get('Message_Audio_bitRate') || 32 });"
        },
        "depth_rank": 11
    },
    {
        "file": "videoRecorder.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui/client/lib/recorderjs/videoRecorder.ts",
        "code": {
            "handleError": "\t\tconst handleSuccess = (stream: MediaStream) => {\n\t\tconst handleSuccess = (stream: MediaStream) => {\n\t\t\tthis.startUserMedia(stream);\n\t\t\tcb?.call(this, true);\n\t\t};\n\n\t\tconst handleError = (error: any) => {\n\t\tconst handleError = (error: any) => {\n\t\t\tconsole.error(error);\n\t\t\tcb?.call(this, false);\n\t\t};\n\n\t\tif (navigator.mediaDevices) {\n\t\t\tnavigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(handleSuccess, handleError);",
            "oldGetUserMedia": "\t\tconst oldGetUserMedia = navigator.getUserMedia ?? navigator.webkitGetUserMedia ?? navigator.mozGetUserMedia ?? navigator.msGetUserMedia;\n\t\tconst oldGetUserMedia = navigator.getUserMedia ?? navigator.webkitGetUserMedia ?? navigator.mozGetUserMedia ?? navigator.msGetUserMedia;\n\n\t\tif (oldGetUserMedia) {\n\t\t\toldGetUserMedia.call(navigator, { audio: true, video: true }, handleSuccess, handleError);"
        },
        "depth_rank": 11
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-kick/server/server.ts",
        "code": {
            "kickedUser": "\t\tconst username = params.trim().replace('@', '');\n\t\tconst username = params.trim().replace('@', '');\n\t\tif (username === '') {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById(userId);\n\t\tconst user = await Users.findOneById(userId);\n\t\tconst lng = user?.language || settings.get('Language') || 'en';\n\t\tconst lng = user?.language || settings.get('Language') || 'en';\n\n\t\tconst kickedUser = await Users.findOneByUsernameIgnoringCase(username);\n\t\tconst kickedUser = await Users.findOneByUsernameIgnoringCase(username);\n\n\t\tif (kickedUser == null) {\n\t\t\tvoid api.broadcast('notify.ephemeralMessage', userId, message.rid, {\n\t\t\t\tmsg: i18n.t('Username_doesnt_exist', {\n\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\tsprintf: [username],\n\t\t\t\t\tlng,\n\t\t\t\t}),\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst { rid } = message;\n\t\tconst { rid } = message;"
        },
        "depth_rank": 9
    },
    {
        "file": "cors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/cors/server/cors.ts",
        "code": {
            "categorizeRequest": "\t\tfunction categorizeRequest(\n\t\tfunction categorizeRequest(\n\t\t\treq: http.IncomingMessage,\n\t\t): { arch: string; path: string; url: UrlWithParsedQuery } & Record<string, unknown>;"
        },
        "depth_rank": 9
    },
    {
        "file": "SlackImporter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer-slack/server/SlackImporter.ts",
        "code": {
            "totalEntries": "\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet userCount = 0;\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });",
            "await": "\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tawait this.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {",
            "replies": "\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.replies.forEach((item: { user: string }) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-message/client/ActionManager.ts",
        "code": {
            "constructor": "\tpublic constructor(protected router: ContextType<typeof RouterContext>) {}\n\tpublic constructor(protected router: ContextType<typeof RouterContext>) {}",
            "appId": "\t\tconst appId = this.triggersId.get(id);\n\t\tconst appId = this.triggersId.get(id);\n\t\tthis.triggersId.delete(id);\n\t\treturn appId;\n\t}\n\n\tpublic on(viewId: string, listener: (data: any) => void): void;\n\n\tpublic on(eventName: 'busy', listener: ({ busy }: { busy: boolean }) => void): void;",
            "triggerId": "\t\tconst triggerId = Random.id();\n\t\tconst triggerId = Random.id();\n\t\tthis.triggersId.set(triggerId, appId);\n\t\tsetTimeout(() => this.invalidateTriggerId(triggerId), ActionManager.TRIGGER_TIMEOUT);\n\t\treturn triggerId;\n\t}\n\n\tpublic async emitInteraction(appId: string, userInteraction: DistributiveOmit<UiKit.UserInteraction, 'triggerId'>) {\n\t\tthis.notifyBusy();\n\n\t\tconst triggerId = this.generateTriggerId(appId);\n\t\tconst triggerId = this.generateTriggerId(appId);\n\n\t\tlet timeout: ReturnType<typeof setTimeout> | undefined;\n\n\t\tawait Promise.race([\n\t\t\tnew Promise((_, reject) => {\n\t\t\t\ttimeout = setTimeout(() => reject(new UiKitTriggerTimeoutError('Timeout', { triggerId, appId })), ActionManager.TRIGGER_TIMEOUT);"
        },
        "depth_rank": 9
    },
    {
        "file": "findParentMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-message/client/findParentMessage.ts",
        "code": {
            "messages": "\tconst waiting: string[] = [];\n\tconst waiting: string[] = [];\n\tlet resolve: (resolved: IMessage[] | PromiseLike<IMessage[]>) => void;\n\tlet pending = new Promise<IMessage[]>((r) => {\n\t\tresolve = r;\n\t});\n\n\tconst getMessages = withDebouncing({ wait: 500 })(async () => {\n\tconst getMessages = withDebouncing({ wait: 500 })(async () => {\n\t\tconst _tmp = [...waiting];\n\t\tconst _tmp = [...waiting];\n\t\twaiting.length = 0;\n\t\tresolve(callWithErrorHandling('getMessages', _tmp));\n\t\tpending = new Promise<IMessage[]>((r) => {\n\t\t\tresolve = r;\n\t\t});\n\t});\n\n\tconst get = async (tmid: IMessage['_id']) => {\n\tconst get = async (tmid: IMessage['_id']) => {\n\t\tvoid getMessages();\n\t\tconst messages = await pending;\n\t\tconst messages = await pending;\n\t\treturn messages.find(({ _id }) => _id === tmid);",
            "message": "\t\tconst message = ChatMessage.findOne({ _id: tmid });\n\t\tconst message = ChatMessage.findOne({ _id: tmid });"
        },
        "depth_rank": 9
    },
    {
        "file": "createComposerAPI.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-message/client/messageBox/createComposerAPI.ts",
        "code": {
            "event": "\tconst triggerEvent = (input: HTMLTextAreaElement, evt: string): void => {\n\tconst triggerEvent = (input: HTMLTextAreaElement, evt: string): void => {\n\t\tconst event = new Event(evt, { bubbles: true });\n\t\tconst event = new Event(evt, { bubbles: true });",
            "setText": "\t\tconst tracker = (input as any)._valueTracker;\n\t\tconst tracker = (input as any)._valueTracker;\n\t\tif (tracker) {\n\t\t\ttracker.setValue(new Date().toString());\n\t\t}\n\t\tinput.dispatchEvent(event);\n\t};\n\n\tconst emitter = new Emitter<{\n\tconst emitter = new Emitter<{\n\t\tquotedMessagesUpdate: void;\n\t\tediting: void;\n\t\trecording: void;\n\t\trecordingVideo: void;\n\t\tformatting: void;\n\t\tmircophoneDenied: void;\n\t}>();\n\n\tlet _quotedMessages: IMessage[] = [];\n\n\tconst persist = withDebouncing({ wait: 300 })(() => {\n\tconst persist = withDebouncing({ wait: 300 })(() => {\n\t\tif (input.value) {\n\t\t\tMeteor._localStorage.setItem(storageID, input.value);\n\t\t\treturn;\n\t\t}\n\n\t\tMeteor._localStorage.removeItem(storageID);\n\t});\n\n\tconst notifyQuotedMessagesUpdate = (): void => {\n\tconst notifyQuotedMessagesUpdate = (): void => {\n\t\temitter.emit('quotedMessagesUpdate');\n\t};\n\n\tinput.addEventListener('input', persist);\n\n\tconst setText = (\n\tconst setText = (\n\t\ttext: string,\n\t\t{\n\t\t\tselection,\n\t\t\tskipFocus,\n\t\t}: {",
            "wrapSelection": "\tconst release = (): void => {\n\tconst release = (): void => {\n\t\tinput.removeEventListener('input', persist);\n\t\tstopFormatterTracker.stop();\n\t};\n\n\tconst wrapSelection = (pattern: string): void => {\n\tconst wrapSelection = (pattern: string): void => {\n\t\tconst { selectionEnd = input.value.length, selectionStart = 0 } = input;\n\t\tconst { selectionEnd = input.value.length, selectionStart = 0 } = input;",
            "startPattern": "\t\tconst initText = input.value.slice(0, selectionStart);\n\t\tconst initText = input.value.slice(0, selectionStart);\n\t\tconst selectedText = input.value.slice(selectionStart, selectionEnd);\n\t\tconst selectedText = input.value.slice(selectionStart, selectionEnd);\n\t\tconst finalText = input.value.slice(selectionEnd, input.value.length);\n\t\tconst finalText = input.value.slice(selectionEnd, input.value.length);\n\n\t\tfocus();\n\n\t\tconst startPattern = pattern.slice(0, pattern.indexOf('{{text}}'));\n\t\tconst startPattern = pattern.slice(0, pattern.indexOf('{{text}}'));",
            "replaceText": "\tconst insertNewLine = (): void => insertText('\\n');\n\tconst insertNewLine = (): void => insertText('\\n');\n\n\tsetText(Meteor._localStorage.getItem(storageID) ?? '', {\n\t\tskipFocus: true,\n\t});\n\n\t// Gets the text that is connected to the cursor and replaces it with the given text\n\tconst replaceText = (text: string, selection: { readonly start: number; readonly end: number }): void => {\n\tconst replaceText = (text: string, selection: { readonly start: number; readonly end: number }): void => {\n\t\tconst { selectionStart, selectionEnd } = input;\n\t\tconst { selectionStart, selectionEnd } = input;"
        },
        "depth_rank": 10
    },
    {
        "file": "messagePopupConfig.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-message/client/popup/messagePopupConfig.ts",
        "code": {
            "user": "\t\tconst uid = Meteor.userId();\n\t\tconst uid = Meteor.userId();\n\t\tconst rid = asReactiveSource(\n\t\tconst rid = asReactiveSource(\n\t\t\t(cb) => RoomManager.on('changed', cb),\n\t\t\t() => RoomManager.opened,\n\t\t);\n\t\tconst user = uid ? (Meteor.users.findOne(uid, { fields: { username: 1 } }) as IUser | undefined) : undefined;\n\t\tconst user = uid ? (Meteor.users.findOne(uid, { fields: { username: 1 } }) as IUser | undefined) : undefined;"
        },
        "depth_rank": 10
    },
    {
        "file": "generateEmojiIndex.mjs",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/emoji-emojione/lib/generateEmojiIndex.mjs",
        "code": {
            "emojiCategoriesMapping": "\tconst emojiCategoriesMapping = [\n\tconst emojiCategoriesMapping = [\n\t\t{ key: 'people', i18n: 'Smileys_and_People' },"
        },
        "depth_rank": 9
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-msg/server/server.ts",
        "code": {
            "user": "\t\tconst targetUsernameOrig = trimmedParams.slice(0, separator);\n\t\tconst targetUsernameOrig = trimmedParams.slice(0, separator);\n\t\tconst targetUsername = targetUsernameOrig.replace('@', '');\n\t\tconst targetUsername = targetUsernameOrig.replace('@', '');\n\t\tconst targetUser = await Users.findOneByUsernameIgnoringCase(targetUsername);\n\t\tconst targetUser = await Users.findOneByUsernameIgnoringCase(targetUsername);\n\t\tif (targetUser == null) {\n\t\t\tconst user = await Users.findOneById(userId, { projection: { language: 1 } });\n\t\t\tconst user = await Users.findOneById(userId, { projection: { language: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "PendingFileImporter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer-pending-files/server/PendingFileImporter.ts",
        "code": {
            "fileCount": "\t\tconst fileCount = await Messages.countAllImportedMessagesWithFilesToDownload();\n\t\tconst fileCount = await Messages.countAllImportedMessagesWithFilesToDownload();\n\t\tif (fileCount === 0) {\n\t\t\tawait super.updateProgress(ProgressStep.DONE);\n\t\t\treturn 0;\n\t\t}\n\n\t\tawait this.updateRecord({ 'count.messages': fileCount, 'messagesstatus': null });",
            "fileData": "\t\tconst fileData = new Selection(this.info.name, [], [], fileCount);\n\t\tconst fileData = new Selection(this.info.name, [], [], fileCount);\n\t\tawait this.updateRecord({ fileData });"
        },
        "depth_rank": 9
    },
    {
        "file": "WebRTCClass.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webrtc/client/WebRTCClass.js",
        "code": {
            "serverConfig": "\t\t\t\tconst serverConfig = {\n\t\t\t\tconst serverConfig = {\n\t\t\t\t\turls: server.pop(),\n\t\t\t\t};\n\t\t\t\tif (server.length === 1) {\n\t\t\t\t\tserver = server[0].split(':');\n\t\t\t\t\tserverConfig.username = decodeURIComponent(server[0]);\n\t\t\t\t\tserverConfig.credential = decodeURIComponent(server[1]);\n\t\t\t\t}\n\t\t\t\tthis.config.iceServers.push(serverConfig);\n\t\t\t});\n\t\t}\n\t\tthis.peerConnections = {};",
            "itemsById": "\t\tconst items = [];\n\t\tconst items = [];\n\t\tconst itemsById = {};\n\t\tconst itemsById = {};",
            "remoteConnections": "\t\tconst remoteConnections = [];\n\t\tconst remoteConnections = [];\n\t\tconst { peerConnections } = this;\n\t\tconst { peerConnections } = this;",
            "peerConnection": "\t\tconst peerConnection = this.getPeerConnection(data.from);\n\t\tconst peerConnection = this.getPeerConnection(data.from);\n\t\tif (data.type === 'offer') {\n\t\t\tpeerConnection.remoteMedia = data.media;\n\t\t\tthis.onRemoteOffer({\n\t\t\t\tfrom: data.from,\n\t\t\t\tts: data.ts,\n\t\t\t\tdescription: data.description,\n\t\t\t});\n\t\t} else {",
            "subscription": "\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });",
            "onLocalDescription": "\t\tconst onOffer = (offer) => {\n\t\tconst onOffer = (offer) => {\n\t\t\tconst onLocalDescription = () => {\n\t\t\tconst onLocalDescription = () => {\n\t\t\t\tthis.transport.sendDescription({\n\t\t\t\t\tto: data.from,\n\t\t\t\t\ttype: 'offer',\n\t\t\t\t\tts: peerConnection.createdAt,\n\t\t\t\t\tmedia: this.media,\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\tsdp: offer.sdp,\n\t\t\t\t\t\ttype: offer.type,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tpeerConnection.setLocalDescription(new RTCSessionDescription(offer), onLocalDescription, this.onError);\n\t\t};\n\n\t\tif (data.monitor === true) {\n\t\t\tpeerConnection.createOffer(onOffer, this.onError, {\n\t\t\t\tmandatory: {\n\t\t\t\t\tOfferToReceiveAudio: data.media.audio,\n\t\t\t\t\tOfferToReceiveVideo: data.media.video,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {",
            "WebRTC": "const WebRTC = new (class {\nconst WebRTC = new (class {\n\tconstructor() {\n\tconstructor() {\n\t\tthis.instancesByRoomId = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "actionLink.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/webrtc/client/actionLink.tsx",
        "code": {
            "room": "\tconst room = ChatRoom.findOne({ _id: message.rid });\n\tconst room = ChatRoom.findOne({ _id: message.rid });"
        },
        "depth_rank": 9
    },
    {
        "file": "setRoomKeyID.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/e2e/server/methods/setRoomKeyID.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 'e2eKeyId'>>(rid, { projection: { e2eKeyId: 1 } });\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 'e2eKeyId'>>(rid, { projection: { e2eKeyId: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUsersOfRoomWithoutKey.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/e2e/server/methods/getUsersOfRoomWithoutKey.ts",
        "code": {
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.findByRidWithoutE2EKey(rid, {\n\t\tconst subscriptions = await Subscriptions.findByRidWithoutE2EKey(rid, {\n\t\t\tprojection: { 'u._id': 1 },",
            "options": "\t\tconst userIds = subscriptions.map((s) => s.u._id);\n\t\tconst userIds = subscriptions.map((s) => s.u._id);\n\t\tconst options = { projection: { 'e2e.public_key': 1 } };\n\t\tconst options = { projection: { 'e2e.public_key': 1 } };"
        },
        "depth_rank": 10
    },
    {
        "file": "rocketchat.e2e.room.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js",
        "code": {
            "subscription": "\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });",
            "groupKey": "\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;",
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });",
            "decryptedKey": "\t\t// const keyID = groupKey.slice(0, 12);\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {",
            "vector": "\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAES(vector, this.groupSessionKey, data);\n\t\t} catch (error) {"
        },
        "depth_rank": 9
    },
    {
        "file": "rocketchat.e2e.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.ts",
        "code": {
            "room": "\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\n\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));",
            "encodedPrivateKey": "\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tMeteor._localStorage.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(privateKey: string, password: string): Promise<string | void> {\n\t\tconst masterKey = await this.getMasterKey(password);\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {",
            "showAlert": "\t\t\tconst showModal = () => {\n\t\t\tconst showModal = () => {\n\t\t\t\timperativeModal.open({\n\t\t\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\t\t\tresolve(password);\n\t\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst showAlert = () => {\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: () => t('Enter_your_E2E_password'),\n\t\t\t\t\thtml: () => t('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {",
            "privKey": "\t\tconst password = await this.requestPassword();\n\t\tconst password = await this.requestPassword();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {",
            "decryptedMessageWithQuote": "\t\tconst decryptedMessage: IE2EEMessage = {\n\t\tconst decryptedMessage: IE2EEMessage = {\n\t\t\t...message,\n\t\t\tmsg: data.text,\n\t\t\te2e: 'done',\n\t\t};\n\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\n\t\treturn decryptedMessageWithQuote;\n\t}\n\n\tasync decryptPendingMessages(): Promise<void> {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));",
            "getQuotedMessage": "\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });"
        },
        "depth_rank": 9
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-unarchiveroom/server/server.ts",
        "code": {
            "async": "\tcallback: async function Unarchive({ params, message, userId }: SlashCommandCallbackParams<'unarchive'>): Promise<void> {\n\tcallback: async function Unarchive({ params, message, userId }: SlashCommandCallbackParams<'unarchive'>): Promise<void> {\n\t\tlet channel = params.trim();\n\t\tlet room;\n\n\t\tif (channel === '') {\n\t\t\troom = await Rooms.findOneById(message.rid);\n\t\t\tif (room?.name) {\n\t\t\t\tchannel = room.name;\n\t\t\t}\n\t\t} else {",
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "slackbridge_import.server.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge_import.server.js",
        "code": {
            "user": "\tconst room = await Rooms.findOneById(message.rid);\n\tconst room = await Rooms.findOneById(message.rid);\n\tconst channel = room.name;\n\tconst channel = room.name;\n\tconst user = await Users.findOneById(userId);\n\tconst user = await Users.findOneById(userId);\n\n\tmsgStream.emit(message.rid, {\n\t\t_id: Random.id(),\n\t\trid: message.rid,\n\t\tu: { username: 'rocket.cat' },"
        },
        "depth_rank": 9
    },
    {
        "file": "SlackAPI.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAPI.js",
        "code": {
            "response": "\t\tconst response = await request.json();\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.channel;\n\t}\n\n\tasync getMembers(channelId) {\n\t\tconst { num_members } = this.getRoomInfo(channelId);\n\t\tconst { num_members } = this.getRoomInfo(channelId);"
        },
        "depth_rank": 9
    },
    {
        "file": "RocketAdapter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slackbridge/server/RocketAdapter.js",
        "code": {
            "slackTS": "\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tawait slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {",
            "rocketRoom": "\t\t\t\tconst rocketRoom = await Rooms.findOneByName(slackChannel.name);\n\t\t\t\tconst rocketRoom = await Rooms.findOneByName(slackChannel.name);\n\n\t\t\t\tif (rocketRoom || slackChannel.is_general) {\n\t\t\t\t\tslackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n\t\t\t\t\tawait Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t} else {",
            "rocketChannel": "\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator, rocketUsers);\n\t\t\t\t\t\tconst rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator, rocketUsers);\n\t\t\t\t\t\tslackChannel.rocketId = rocketChannel.rid;\n\t\t\t\t\t} catch (e) {",
            "user": "\t\t\t\t\tconst user = await Users.findOneById(rocketUserData.rocketId);\n\t\t\t\t\tconst user = await Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\t\tlet url = null;\n\t\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t\t} else if (rocketUserData.profile.image_512) {",
            "tmessage": "\t\t\t\tconst tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tconst tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tif (tmessage) {\n\t\t\t\t\trocketMsgObj.tmid = tmessage._id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "result": "\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tpromises.push(slackMsgTxt.replace(userTags.slack, userTags.rocket));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst result = await Promise.all(promises);\n\t\t\tconst result = await Promise.all(promises);\n\t\t\tslackMsgTxt = slackMsgTxt.replace(regex, () => result.shift());\n\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "SlackAdapter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAdapter.js",
        "code": {
            "connectResult": "\t\t\tconst connectResult = await (appCredential ? this.connectApp(appCredential) : this.connectLegacy(apiToken));\n\t\t\tconst connectResult = await (appCredential ? this.connectApp(appCredential) : this.connectLegacy(apiToken));\n\n\t\t\tif (connectResult) {\n\t\t\t\tslackLogger.info('Connected to Slack');\n\t\t\t\tslackLogger.debug('Slack connection result: ', connectResult);\n\t\t\t\tMeteor.startup(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t\t\t} catch (err) {",
            "theReaction": "\t\t\t\tconst theReaction = (rocketMsg.reactions || {})[rocketReaction];\n\t\t\t\tconst theReaction = (rocketMsg.reactions || {})[rocketReaction];",
            "isAFileShare": "\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tif (isAFileShare) {\n\t\t\tawait this.processFileShare(slackMessage);\n\t\t\treturn;\n\t\t}\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tawait this.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tawait this.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tawait this.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// Keeping backwards compatability for now, refactor later\n\t\t\t\t\tawait this.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {",
            "ch": "\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (ch == null) {\n\t\t\tslackLogger.debug('Added channel', { rocketChID, slackChID });",
            "rocketchat_room": "\t\tfor await (const slackGroup of groups) {\n\t\tfor await (const slackGroup of groups) {\n\t\t\tconst rocketchat_room =\n\t\t\tconst rocketchat_room =\n\t\t\t\t(await Rooms.findOneByName(slackGroup.name, { projection: { _id: 1 } })) ||",
            "rocketCh": "\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true,\n\t\t\t};\n\t\t\tslackLogger.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = await this.slackAPI.updateMessage(data);\n\t\t\tconst postResult = await this.slackAPI.updateMessage(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processMemberJoinChannel(event, context) {\n\t\tslackLogger.debug('Member join channel', event.channel);\n\t\tconst rocketCh = await this.rocket.getChannel({ channel: event.channel });\n\t\tconst rocketCh = await this.rocket.getChannel({ channel: event.channel });",
            "rocketUser": "\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\t\tconst rocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "rocketChannel": "\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });",
            "user": "\t\tconst channel = await this.slackAPI.getRoomInfo(channelMap.id);\n\t\tconst channel = await this.slackAPI.getRoomInfo(channelMap.id);\n\t\tif (channel) {\n\t\t\tconst members = await this.slackAPI.getMembers(channelMap.id);\n\t\t\tconst members = await this.slackAPI.getMembers(channelMap.id);\n\t\t\tif (members && Array.isArray(members) && members.length) {\n\t\t\t\tfor await (const member of members) {\n\t\t\t\tfor await (const member of members) {\n\t\t\t\t\tconst user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n\t\t\t\t\tconst user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tslackLogger.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tawait addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (channel && channel.topic && channel.topic.value) {\n\t\t\t\ttopic = channel.topic.value;\n\t\t\t\ttopic_last_set = channel.topic.last_set;\n\t\t\t\ttopic_creator = channel.topic.creator;\n\t\t\t}\n\n\t\t\tif (channel && channel.purpose && channel.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < channel.purpose.last_set) {\n\t\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "slackbridge.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge.js",
        "code": {
            "slack": "\t\t\t\tconst appCredentials = botTokenList.map((botToken, i) => ({\n\t\t\t\tconst appCredentials = botTokenList.map((botToken, i) => ({\n\t\t\t\t\tbotToken,\n\t\t\t\t\tappToken: appTokenList[i],\n\t\t\t\t\tsigningSecret: signingSecretList[i],\n\t\t\t\t}));\n\n\t\t\t\tappCredentials.forEach((appCredential) => {\n\t\t\t\t\tconst slack = new SlackAdapter(this);\n\t\t\t\t\tconst slack = new SlackAdapter(this);\n\t\t\t\t\tslack.setRocket(this.rocket);\n\t\t\t\t\tthis.rocket.addSlack(slack);\n\t\t\t\t\tthis.slackAdapters.push(slack);\n\n\t\t\t\t\tslack.connect({ appCredential }).catch((err) => connLogger.error('error connecting to slack', err));"
        },
        "depth_rank": 9
    },
    {
        "file": "proxy.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/lib/proxy.ts",
        "code": {
            "file": "\tconst fileId = match[2];\n\tconst fileId = match[2];\n\tconst file = await store.getCollection().findOne({ _id: fileId });\n\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 10
    },
    {
        "file": "ranges.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/lib/ranges.ts",
        "code": {
            "size": "\tconst size = file.size || 0;\n\tconst size = file.size || 0;\n\tif (range.start > size || range.stop <= range.start || range.stop > size) {\n\t\treturn { outOfRange: true, start: range.start, stop: range.stop };"
        },
        "depth_rank": 10
    },
    {
        "file": "FileUpload.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/lib/FileUpload.ts",
        "code": {
            "cookie": "const cookie = new Cookies();\nconst cookie = new Cookies();\nlet maxFileSize = 0;\n\nsettings.watch('FileUpload_MaxFileSize', async (value: string) => {\n\ttry {\n\t\tmaxFileSize = parseInt(value);\n\t} catch (e) {",
            "reason": "\t\t\tconst reason = i18n.t('File_type_is_not_accepted', { lng: language });\n\t\t\tconst reason = i18n.t('File_type_is_not_accepted', { lng: language });",
            "user": "\t\tconst user = uid && authToken && (await Users.findOneByIdAndLoginToken(uid, hashLoginToken(authToken), { projection: { _id: 1 } }));\n\t\tconst user = uid && authToken && (await Users.findOneByIdAndLoginToken(uid, hashLoginToken(authToken), { projection: { _id: 1 } }));",
            "transformer": "\t\tconst store = FileUpload.getStore('Uploads');\n\t\tconst store = FileUpload.getStore('Uploads');\n\t\tconst image = await store._store.getReadStream(file._id, file);\n\t\tconst image = await store._store.getReadStream(file._id, file);\n\n\t\tconst transformer = sharp().resize({ width, height, fit: 'inside' });\n\t\tconst transformer = sharp().resize({ width, height, fit: 'inside' });",
            "result": "\t\tconst result = transformer.toBuffer({ resolveWithObject: true }).then(({ data, info: { width, height } }) => ({ data, width, height }));\n\t\tconst result = transformer.toBuffer({ resolveWithObject: true }).then(({ data, info: { width, height } }) => ({ data, width, height }));",
            "isAuthorizedByRoom": "\t\tconst isAuthorizedByRoom = async () =>\n\t\tconst isAuthorizedByRoom = async () =>\n\t\t\trc_room_type &&\n\t\t\troomCoordinator\n\t\t\t\t.getRoomDirectives(rc_room_type)\n\t\t\t\t.canAccessUploadedFile({ rc_uid: rc_uid || '', rc_rid: rc_rid || '', rc_token: rc_token || '' });",
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(file.rid, user._id, { projection: { _id: 1 } });\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(file.rid, user._id, { projection: { _id: 1 } });",
            "tmpFile": "\t\tconst store = FileUpload.getStoreByName(file.store);\n\t\tconst store = FileUpload.getStoreByName(file.store);\n\n\t\treturn store.delete(file._id);\n\t}\n\n\tasync _doInsert(fileData: OptionalId<IUpload>, streamOrBuffer: ReadableStream | stream | Buffer): Promise<IUpload> {\n\t\tconst fileId = await this.store.create(fileData);\n\t\tconst fileId = await this.store.create(fileData);\n\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\t\tconst tmpFile = UploadFS.getTempFilePath(fileId);\n\n\t\ttry {\n\t\t\tif (streamOrBuffer instanceof stream) {\n\t\t\t\tstreamOrBuffer.pipe(fs.createWriteStream(tmpFile));\n\t\t\t} else if (streamOrBuffer instanceof Buffer) {",
            "file": "\t\t\tconst file = await ufsComplete(fileId, this.name);\n\t\t\tconst file = await ufsComplete(fileId, this.name);\n\n\t\t\treturn file;\n\t\t} catch (e: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "sendFileMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/methods/sendFileMessage.ts",
        "code": {
            "thumbResult": "\t\tconst attachment: FileAttachmentProps = {\n\t\tconst attachment: FileAttachmentProps = {\n\t\t\ttitle: file.name,\n\t\t\ttype: 'file',\n\t\t\tdescription: file?.description,\n\t\t\ttitle_link: fileUrl,\n\t\t\ttitle_link_download: true,\n\t\t\timage_url: fileUrl,\n\t\t\timage_type: file.type as string,\n\t\t\timage_size: file.size,\n\t\t};\n\n\t\tif (file.identify?.size) {\n\t\t\tattachment.image_dimensions = file.identify.size;\n\t\t}\n\n\t\ttry {\n\t\t\tattachment.image_preview = await FileUpload.resizeImagePreview(file);\n\t\t\tconst thumbResult = await FileUpload.createImageThumbnail(file);\n\t\t\tconst thumbResult = await FileUpload.createImageThumbnail(file);\n\t\t\tif (thumbResult) {\n\t\t\t\tconst { data: thumbBuffer, width, height } = thumbResult;\n\t\t\t\tconst { data: thumbBuffer, width, height } = thumbResult;",
            "attachment": "\t\tconst attachment = {\n\t\tconst attachment = {\n\t\t\ttitle: file.name,\n\t\t\ttype: 'file',\n\t\t\tformat: getFileExtension(file.name),\n\t\t\tdescription: file.description,\n\t\t\ttitle_link: fileUrl,\n\t\t\ttitle_link_download: true,\n\t\t\tsize: file.size as number,\n\t\t};\n\t\tattachments.push(attachment);\n\t}\n\treturn { files, attachments };",
            "msg": "\tconst msg = await executeSendMessage(userId, {\n\tconst msg = await executeSendMessage(userId, {\n\t\trid: roomId,\n\t\tts: new Date(),\n\t\tfile: files[0],\n\t\tfiles,\n\t\tattachments,\n\t\t...msgData,\n\t\tmsg: msgData?.msg ?? '',\n\t\tgroupable: msgData?.groupable ?? false,\n\t});\n\n\tcallbacks.runAsync('afterFileUpload', { user, room, message: msg });"
        },
        "depth_rank": 10
    },
    {
        "file": "GridFS.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/config/GridFS.ts",
        "code": {
            "range": "\tconst store = UploadFS.getStore(storeName);\n\tconst store = UploadFS.getStore(storeName);\n\tconst rs = await store.getReadStream(fileId, file);\n\tconst rs = await store.getReadStream(fileId, file);\n\tconst ws = new stream.PassThrough();\n\tconst ws = new stream.PassThrough();\n\n\t[rs, ws].forEach((stream) =>\n\t\tstream.on('error', (err) => {\n\t\t\tstore.onReadError.call(store, err, fileId, file);\n\t\t\tres.end();\n\t\t}),\n\t);\n\n\tws.on('close', () => {\n\t\t// Close output stream at the end\n\t\tws.emit('end');\n\t});\n\n\t// Transform stream\n\tstore.transformRead(rs, ws, fileId, file, req);\n\n\tconst range = getFileRange(file, req);\n\tconst range = getFileRange(file, req);\n\tif (range) {\n\t\tsetRangeHeaders(range, file, res);\n\n\t\tif (range.outOfRange) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('File upload extracting range');\n\t\tws.pipe(new ExtractRange({ start: range.start, stop: range.stop })).pipe(res);"
        },
        "depth_rank": 10
    },
    {
        "file": "FileSystem.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/server/config/FileSystem.ts",
        "code": {
            "filePath": "\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\n\t\tconst options: { start?: number; end?: number } = {};\n\t\tconst options: { start?: number; end?: number } = {};",
            "stat": "\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\t\tconst filePath = await this.store.getFilePath(file._id, file);\n\n\t\ttry {\n\t\t\tconst stat = await fsp.stat(filePath);\n\t\t\tconst stat = await fsp.stat(filePath);\n\n\t\t\tif (stat?.isFile()) {\n\t\t\t\tfile = FileUpload.addExtensionTo(file);\n\n\t\t\t\t(await this.store.getReadStream(file._id, file)).pipe(res);\n\t\t\t}\n\t\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/ufs/GoogleStorage/server.ts",
        "code": {
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\t// TODO\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 10
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/ufs/Webdav/server.ts",
        "code": {
            "client": "\t\tconst client = new WebdavClientAdapter(server, { username, password });\n\t\tconst client = new WebdavClientAdapter(server, { username, password });",
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 10
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/file-upload/ufs/AmazonS3/server.ts",
        "code": {
            "file": "\t\tthis.delete = async function (fileId) {\n\t\tthis.delete = async function (fileId) {\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await this.getCollection().findOne({ _id: fileId });",
            "params": "\t\t\tconst params = {\n\t\t\tconst params = {\n\t\t\t\tKey: this.getPath(file),\n\t\t\t\tBucket: classOptions.connection.params.Bucket,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\treturn s3.deleteObject(params).promise();\n\t\t\t} catch (err: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "crowd.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/crowd/server/crowd.ts",
        "code": {
            "projection": "\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };\n\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };",
            "email": "\t\t\tconst email = username;\n\t\t\tconst email = username;\n\n\t\t\tuser = await Users.findOne<CrowdUser>({ 'emails.address': email }, { projection });",
            "user": "\t\tconst user = {\n\t\tconst user = {\n\t\t\tusername: this.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tawait Accounts.setPasswordAsync(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tawait Users.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\tawait _setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{ _id: id },",
            "users": "\t\tconst users =\n\t\tconst users =\n\t\t\t((await Users.findCrowdUsers().toArray()) as unknown as (IUser & { crowd: Record<string, any>; crowd_username: string })[]) || [];",
            "userQuery": "\t\tconst username = crowdUser.crowd_username || crowdUser.username;\n\t\tconst username = crowdUser.crowd_username || crowdUser.username;\n\t\tconst mail = crowdUser.email;\n\t\tconst mail = crowdUser.email;\n\n\t\t// If id is not provided, user is linked by crowd_username or email address\n\t\tconst userQuery = {\n\t\tconst userQuery = {\n\t\t\t...(crowdUser._id && { _id: crowdUser._id }),",
            "stampedToken": "\t\tconst user = await Users.findOne(userQuery);\n\t\tconst user = await Users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tawait Users.updateOne(\n\t\t\t\t{ _id: user._id },",
            "result": "\t\tconst result = await crowd.updateUserCollection(user);\n\t\tconst result = await crowd.updateUserCollection(user);\n\n\t\treturn result;\n\t} catch (err: any) {"
        },
        "depth_rank": 9
    },
    {
        "file": "methods.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/crowd/server/methods.ts",
        "code": {
            "crowd": "\t\t\tconst crowd = new CROWD();\n\t\t\tconst crowd = new CROWD();\n\t\t\tawait crowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Crowd_Connection_successful' as const,\n\t\t\t\tmessage: 'Crowd_Connection_successful' as const,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {"
        },
        "depth_rank": 9
    },
    {
        "file": "handleIdentityToken.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apple/lib/handleIdentityToken.ts",
        "code": {
            "request": "async function isValidAppleJWT(identityToken: string, header: any): Promise<boolean> {\nasync function isValidAppleJWT(identityToken: string, header: any): Promise<boolean> {\n\tconst request = await fetch('https://appleid.apple.com/auth/keys', { method: 'GET' });\n\tconst request = await fetch('https://appleid.apple.com/auth/keys', { method: 'GET' });",
            "applePublicKeys": "\tconst applePublicKeys = ((await request.json()) as { keys: { kid: string; e: string; n: string }[] }).keys;\n\tconst applePublicKeys = ((await request.json()) as { keys: { kid: string; e: string; n: string }[] }).keys;"
        },
        "depth_rank": 9
    },
    {
        "file": "loginHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/apple/server/loginHandler.ts",
        "code": {
            "result": "\t\tconst result = Accounts.updateOrCreateUserFromExternalService('apple', serviceData, { profile });\n\t\tconst result = Accounts.updateOrCreateUserFromExternalService('apple', serviceData, { profile });"
        },
        "depth_rank": 9
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-invite/server/server.ts",
        "code": {
            "subscription": "\t\tconst usersFiltered: IUser[] = [];\n\t\tconst usersFiltered: IUser[] = [];\n\n\t\tfor await (const user of users) {\n\t\tfor await (const user of users) {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id, {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "api.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/api.ts",
        "code": {
            "logger": "const logger = new Logger('API');\nconst logger = new Logger('API');\n\ninterface IAPIProperties {\n\tuseDefaultAuth: boolean;\n\tprettyJson: boolean;\n\tauth: { token: string; user: () => Promise<{ userId: string; token: string }> };",
            "generateConnection": "const generateConnection = (\nconst generateConnection = (\n\tipAddress: string,\n\thttpHeaders: Record<string, any>,\n): {\n\tid: string;\n\tclose: () => void;\n\tclientAddress: string;\n\thttpHeaders: Record<string, any>;\n} => ({",
            "finalResult": "\t\tconst finalResult = {\n\t\tconst finalResult = {\n\t\t\tstatusCode: 200,\n\t\t\tbody: result,\n\t\t} as SuccessResult<T>;\n\n\t\treturn finalResult as SuccessResult<T>;\n\t}\n\n\tpublic failure<T>(result?: T): FailureResult<T>;\n\n\tpublic failure<T, TErrorType extends string, TStack extends string, TErrorDetails>(\n\t\tresult?: T,\n\t\terrorType?: TErrorType,\n\t\tstack?: TStack,\n\t\terror?: { details: TErrorDetails },",
            "rateLimitRule": "\t\tconst addRateLimitRuleToEveryRoute = (routes: string[]) => {\n\t\tconst addRateLimitRuleToEveryRoute = (routes: string[]) => {\n\t\t\troutes.forEach((route) => {\n\t\t\t\trateLimiterDictionary[route] = {\n\t\t\t\t\trateLimiter: new RateLimiter(),\n\t\t\t\t\toptions: rateLimiterOptions,\n\t\t\t\t};\n\t\t\t\tconst rateLimitRule = {\n\t\t\t\tconst rateLimitRule = {\n\t\t\t\t\tIPAddr: (input: any) => input,\n\t\t\t\t\troute,\n\t\t\t\t};\n\t\t\t\trateLimiterDictionary[route].rateLimiter.addRule(\n\t\t\t\t\trateLimitRule,\n\t\t\t\t\trateLimiterOptions.numRequestsAllowed as number,\n\t\t\t\t\trateLimiterOptions.intervalTimeInMS as number,\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\t\troutes.map((route) => this.namedRoutes(route, endpoints, apiVersion)).map(addRateLimitRuleToEveryRoute);\n\t}\n\n\tpublic async processTwoFactor({\n\t\tuserId,\n\t\trequest,\n\t\tinvocation,\n\t\toptions,\n\t\tconnection,\n\t}: {",
            "_options": "\t\t\t\tconst _options = { ...options };\n\t\t\t\tconst _options = { ...options };",
            "connection": "\t\t\t\t\t\tconst connection = { ...generateConnection(this.requestIp, this.request.headers), token: this.token };\n\t\t\t\t\t\tconst connection = { ...generateConnection(this.requestIp, this.request.headers), token: this.token };",
            "loginCompatibility": "\t\tconst loginCompatibility = (bodyParams: Record<string, any>, request: Request): Record<string, any> => {\n\t\tconst loginCompatibility = (bodyParams: Record<string, any>, request: Request): Record<string, any> => {\n\t\t\t// Grab the username or email that the user is logging in with\n\t\t\tconst { user, username, email, password, code: bodyCode } = bodyParams;\n\t\t\tconst { user, username, email, password, code: bodyCode } = bodyParams;",
            "objectToLDAPLogin": "\t\t\tconst objectToLDAPLogin = {\n\t\t\tconst objectToLDAPLogin = {\n\t\t\t\tldap: true,\n\t\t\t\tusername: usernameToLDAPLogin,\n\t\t\t\tldapPass: auth.password,\n\t\t\t\tldapOptions: {},",
            "self": "\t\tconst self = this;\n\t\tconst self = this;\n\n\t\t(this as APIClass<'/v1'>).addRoute<'/v1/login', { authRequired: false }>(",
            "invocation": "\t\t\t\t\tconst request = this.request as unknown as Request;\n\t\t\t\t\tconst request = this.request as unknown as Request;\n\t\t\t\t\tconst args = loginCompatibility(this.bodyParams, request);\n\t\t\t\t\tconst args = loginCompatibility(this.bodyParams, request);\n\n\t\t\t\t\tconst invocation = new DDPCommon.MethodInvocation({\n\t\t\t\t\tconst invocation = new DDPCommon.MethodInvocation({\n\t\t\t\t\t\tconnection: generateConnection(getRequestIP(request) || '', this.request.headers),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet auth;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tauth = await DDP._CurrentInvocation.withValue(invocation as any, async () => Meteor.callAsync('login', args));\n\t\t\t\t\t} catch (error: any) {",
            "response": "\t\t\t\t\tconst response = {\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\t\tauthToken: auth.token,\n\t\t\t\t\t\t\tme: await getUserInfo(this.user || ({} as IUser)),",
            "getUserAuth": "const getUserAuth = function _getUserAuth(...args: any[]): {\nconst getUserAuth = function _getUserAuth(...args: any[]): {\n\ttoken: string;\n\tuser: (this: Restivus) => Promise<{ userId: string; token: string }>;"
        },
        "depth_rank": 9
    },
    {
        "file": "addUserToFileObj.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/helpers/addUserToFileObj.ts",
        "code": {
            "uids": "\tconst uids = files.map(({ userId }) => userId).filter(Boolean);\n\tconst uids = files.map(({ userId }) => userId).filter(Boolean);",
            "users": "\tconst users = await Users.findByIds(uids, { projection: { name: 1, username: 1 } }).toArray();\n\tconst users = await Users.findByIds(uids, { projection: { name: 1, username: 1 } }).toArray();",
            "user": "\t\tconst user = users.find(({ _id: userId }) => file.userId && userId === file.userId);\n\t\tconst user = users.find(({ _id: userId }) => file.userId && userId === file.userId);"
        },
        "depth_rank": 10
    },
    {
        "file": "getUserFromParams.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/helpers/getUserFromParams.ts",
        "code": {
            "projection": "\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };\n\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };"
        },
        "depth_rank": 10
    },
    {
        "file": "getUserInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/helpers/getUserInfo.ts",
        "code": {
            "userPreferences": "\tconst verifiedEmail = isVerifiedEmail(me);\n\tconst verifiedEmail = isVerifiedEmail(me);\n\n\tconst userPreferences = me.settings?.preferences ?? {};\n\tconst userPreferences = me.settings?.preferences ?? {};"
        },
        "depth_rank": 10
    },
    {
        "file": "info.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/default/info.ts",
        "code": {
            "user": "\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\treturn API.v1.success(await getServerInfo(user?._id));\n\t\t},\n\t},\n);\n\nAPI.default.addRoute(\n\t'ecdh_proxy/initEncryptedSession',\n\t{ authRequired: false },"
        },
        "depth_rank": 10
    },
    {
        "file": "getServerInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/getServerInfo.ts",
        "code": {
            "supportedVersionsToken": "\tconst supportedVersionsToken = await wrapPromise(getCachedSupportedVersionsToken());\n\tconst supportedVersionsToken = await wrapPromise(getCachedSupportedVersionsToken());\n\n\treturn {\n\t\tversion: removePatchInfo(Info.version),\n\n\t\t...(hasPermissionToViewStatistics && {\n\t\t\tinfo: {\n\t\t\t\t...Info,\n\t\t\t},\n\t\t\tversion: Info.version,\n\t\t}),\n\n\t\tminimumClientVersions,\n\t\t...(supportedVersionsToken.success &&\n\t\t\tsupportedVersionsToken.result && {\n\t\t\t\tsupportedVersions: { signed: supportedVersionsToken.result },"
        },
        "depth_rank": 10
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/users.ts",
        "code": {
            "conditions": "\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst exceptions = selector.exceptions || [];\n\tconst exceptions = selector.exceptions || [];\n\tconst conditions = selector.conditions || {};\n\tconst conditions = selector.conditions || {};",
            "contacts": "\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\tname: 1,\n\t\t\tusername: 1,\n\t\t\tnickname: 1,\n\t\t\tstatus: 1,\n\t\t\tavatarETag: 1,\n\t\t},\n\t\tsort: {\n\t\t\tusername: 1,\n\t\t},\n\t\tlimit: 10,\n\t};\n\n\t// Search on DMs first, to list known users before others.\n\tconst contacts = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10, 'd');\n\tconst contacts = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10, 'd');\n\tif (contacts.length >= options.limit) {\n\t\treturn { items: contacts as UserAutoComplete[] };",
            "users": "\t\tconst users = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10);\n\t\tconst users = await Subscriptions.findConnectedUsersExcept(uid, selector.term, exceptions, searchFields, conditions, 10);\n\t\treturn { items: contacts.concat(users) as UserAutoComplete[] };"
        },
        "depth_rank": 10
    },
    {
        "file": "getServerInfo.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/getServerInfo.spec.ts",
        "code": {
            "signedJwt": "\t\tconst signedJwt = 'signedJwt';\n\t\tconst signedJwt = 'signedJwt';\n\t\thasAllPermissionAsyncMock.resolves(true);\n\t\tgetCachedSupportedVersionsTokenMock.resolves(signedJwt);\n\t\texpect(await getServerInfo('userId')).to.be.eql({ info: { version: '3.0.1', supportedVersions: signedJwt } });"
        },
        "depth_rank": 10
    },
    {
        "file": "emailInbox.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/emailInbox.ts",
        "code": {
            "obj": "\tconst obj = {\n\tconst obj = {\n\t\t...emailInboxParams,\n\t\t_createdAt: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t_createdBy: await Users.findOneById(userId, { projection: { username: 1 } }),",
            "emailInbox": "\tconst emailInbox = await findOneEmailInbox({ _id });\n\tconst emailInbox = await findOneEmailInbox({ _id });"
        },
        "depth_rank": 10
    },
    {
        "file": "getUploadFormData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/getUploadFormData.ts",
        "code": {
            "bb": "\tconst bb = busboy({ headers: request.headers, defParamCharset: 'utf8', limits });\n\tconst bb = busboy({ headers: request.headers, defParamCharset: 'utf8', limits });",
            "onFile": "\tfunction onFile(\n\tfunction onFile(\n\t\tfieldname: string,\n\t\tfile: Readable & { truncated: boolean },"
        },
        "depth_rank": 10
    },
    {
        "file": "messages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/messages.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById<Pick<IUser, 'username'>>(uid, { projection: { username: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/lib/rooms.ts",
        "code": {
            "result": "\tconst options: FindOptions<IRoom> = {\n\tconst options: FindOptions<IRoom> = {\n\t\tprojection: adminFields,\n\t\tskip: offset,\n\t\tlimit: count,\n\t};\n\n\tconst result = Rooms.findByNameOrFnameContainingAndTypes(name, showTypes, discussion, includeTeams, options);\n\tconst result = Rooms.findByNameOrFnameContainingAndTypes(name, showTypes, discussion, includeTeams, options);\n\n\tconst { cursor, totalCount } = result;\n\tconst { cursor, totalCount } = result;",
            "userRoomsIds": "\tconst userRoomsIds = (await Subscriptions.findByUserId(uid, { projection: { rid: 1 } }).toArray()).map(\n\tconst userRoomsIds = (await Subscriptions.findByUserId(uid, { projection: { rid: 1 } }).toArray()).map(",
            "userRooms": "\tconst options: FindOptions<IRoom> = {\n\tconst options: FindOptions<IRoom> = {\n\t\tprojection: {\n\t\t\t_id: 1,\n\t\t\tfname: 1,\n\t\t\tname: 1,\n\t\t\tt: 1,\n\t\t\tavatarETag: 1,\n\t\t},\n\t\tlimit: 10,\n\t\tsort: {\n\t\t\tname: 1,\n\t\t},\n\t};\n\n\tconst userRooms = (\n\tconst userRooms = (\n\t\t(await Subscriptions.findByUserIdAndRoles(uid, ['owner'], { projection: { rid: 1 } }).toArray()) as Pick<ISubscription, 'rid'>[]"
        },
        "depth_rank": 10
    },
    {
        "file": "emoji-custom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/emoji-custom.ts",
        "code": {
            "emoji": "\t\t\tconst emoji = await getUploadFormData(\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },"
        },
        "depth_rank": 10
    },
    {
        "file": "moderation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/moderation.ts",
        "code": {
            "user": "\t\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(userId, {\n\t\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(userId, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },",
            "sanitizedReason": "\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\n\t\t\tconst { user: moderator } = this;\n\t\t\tconst { user: moderator } = this;",
            "escapedSelector": "\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });",
            "reportedUser": "\t\t\tconst reportedUser = await Users.findOneById(userId, { projection: { _id: 1, name: 1, username: 1, emails: 1, createdAt: 1 } });\n\t\t\tconst reportedUser = await Users.findOneById(userId, { projection: { _id: 1, name: 1, username: 1, emails: 1, createdAt: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "oauthapps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/oauthapps.ts",
        "code": {
            "application": "\t\t\tconst application = await addOAuthApp(this.bodyParams, this.userId);\n\t\t\tconst application = await addOAuthApp(this.bodyParams, this.userId);\n\n\t\t\treturn API.v1.success({ application });"
        },
        "depth_rank": 10
    },
    {
        "file": "autotranslate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/autotranslate.ts",
        "code": {
            "languages": "\t\t\tconst languages = await Meteor.callAsync('autoTranslate.getSupportedLanguages', targetLanguage);\n\t\t\tconst languages = await Meteor.callAsync('autoTranslate.getSupportedLanguages', targetLanguage);\n\n\t\t\treturn API.v1.success({ languages: languages || [] });",
            "translatedMessage": "\t\t\tconst translatedMessage = await Meteor.callAsync('autoTranslate.translateMessage', message, targetLanguage);\n\t\t\tconst translatedMessage = await Meteor.callAsync('autoTranslate.translateMessage', message, targetLanguage);\n\n\t\t\treturn API.v1.success({ message: translatedMessage });"
        },
        "depth_rank": 10
    },
    {
        "file": "integrations.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/integrations.ts",
        "code": {
            "incomingId": "\t\t\t\t\tconst incomingId = integration._id;\n\t\t\t\t\tconst incomingId = integration._id;\n\t\t\t\t\tawait deleteIncomingIntegration(incomingId, this.userId);\n\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tintegration,\n\t\t\t\t\t});\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.failure('Invalid integration type.');\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'integrations.get',\n\t{ authRequired: true, validateParams: isIntegrationsGetProps },"
        },
        "depth_rank": 10
    },
    {
        "file": "instances.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/instances.ts",
        "code": {
            "getMatrixInstances": "const getMatrixInstances = (() => {\nconst getMatrixInstances = (() => {\n\tif (isRunningMs()) {\n\t\treturn () => [];\n\t}\n\n\treturn () => InstanceService.getInstances();\n})();\n\nAPI.v1.addRoute(\n\t'instances.get',\n\t{ authRequired: true },"
        },
        "depth_rank": 10
    },
    {
        "file": "misc.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/misc.ts",
        "code": {
            "fields": "\t\t\tconst fields = getDefaultUserFields();\n\t\t\tconst fields = getDefaultUserFields();\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: fields })) as IUser;\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: fields })) as IUser;",
            "cacheInvalid": "const cacheInvalid = 60000; // 1 minute\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 60,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t\tvalidateParams: isShieldSvgProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tconst { type, icon } = this.queryParams;",
            "result": "\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));",
            "user": "\t\t\tconst user = await Users.findOneByResetToken(token, { projection: { _id: 1 } });\n\t\t\tconst user = await Users.findOneByResetToken(token, { projection: { _id: 1 } });",
            "mountResult": "const mountResult = ({\nconst mountResult = ({\n\tid,\n\terror,\n\tresult,\n}: {",
            "isSMTPConfigured": "\t\t\tconst isSMTPConfigured = Boolean(settings.get('SMTP_Host')) || isMailURLSet;\n\t\t\tconst isSMTPConfigured = Boolean(settings.get('SMTP_Host')) || isMailURLSet;\n\t\t\treturn API.v1.success({ isSMTPConfigured });"
        },
        "depth_rank": 10
    },
    {
        "file": "banners.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/banners.ts",
        "code": {
            "banners": "\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });"
        },
        "depth_rank": 10
    },
    {
        "file": "permissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/permissions.ts",
        "code": {
            "result": "\t\t\tconst result = (await Meteor.callAsync('permissions/get', updatedSinceDate)) as {\n\t\t\tconst result = (await Meteor.callAsync('permissions/get', updatedSinceDate)) as {\n\t\t\t\tupdate: IPermission[];\n\t\t\t\tremove: IPermission[];\n\t\t\t};\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'permissions.update',\n\t{ authRequired: true },",
            "permissionKeys": "\t\t\tconst permissionKeys = bodyParams.permissions.map(({ _id }) => _id);\n\t\t\tconst permissionKeys = bodyParams.permissions.map(({ _id }) => _id);"
        },
        "depth_rank": 10
    },
    {
        "file": "subscriptions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/subscriptions.ts",
        "code": {
            "result": "\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tArray.isArray(result)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tupdate: result,\n\t\t\t\t\t\t\tremove: [],\n\t\t\t\t\t  }\n\t\t\t\t\t: result,\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetOneProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { roomId } = this.queryParams;"
        },
        "depth_rank": 10
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/users.ts",
        "code": {
            "suggestions": "\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\n\t\t\treturn API.v1.success({ suggestions });",
            "userData": "\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };\n\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };",
            "user": "\t\t\tconst user = await getUserFromParams(this.queryParams);\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpresence: user.status || ('offline' as UserStatus),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setStatus',\n\t{ authRequired: true },",
            "image": "\t\t\tconst image = await getUploadFormData(\n\t\t\tconst image = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'image', sizeLimit: settings.get('FileUpload_MaxFileSize') },",
            "sentTheUserByFormData": "\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tif (sentTheUserByFormData) {\n\t\t\t\tif (fields.userId) {\n\t\t\t\t\tuser = await Users.findOneById(fields.userId, { projection: { username: 1 } });",
            "count": "\t\t\tconst count = (await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false)).modifiedCount;\n\t\t\tconst count = (await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false)).modifiedCount;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.info',\n\t{ authRequired: true, validateParams: isUsersInfoParamsGetProps },",
            "actualSort": "\t\t\tconst actualSort = sort || { username: 1 };\n\t\t\tconst actualSort = sort || { username: 1 };",
            "result": "\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\n\t\t\treturn API.v1.success({ result });",
            "userId": "\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;",
            "data": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst data = await Meteor.callAsync('createToken', user._id);\n\t\t\tconst data = await Meteor.callAsync('createToken', user._id);\n\t\t\treturn data ? API.v1.success({ data }) : API.v1.unauthorized();",
            "token": "\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });",
            "isPersonalAccessToken": "\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\t\t'type' in loginToken && loginToken.type === 'personalAccessToken';\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttokens:\n\t\t\t\t\tuser?.services?.resume?.loginTokens?.filter(isPersonalAccessToken).map((loginToken) => ({\n\t\t\t\t\t\tname: loginToken.name,\n\t\t\t\t\t\tcreatedAt: loginToken.createdAt.toISOString(),\n\t\t\t\t\t\tlastTokenPart: loginToken.lastTokenPart,\n\t\t\t\t\t\tbypassTwoFactor: Boolean(loginToken.bypassTwoFactor),\n\t\t\t\t\t})) || [],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },",
            "me": "\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;\n\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;",
            "teams": "\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logout',\n\t{ authRequired: true, validateParams: isUserLogoutParamsPOST },",
            "validStatus": "\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tif (validStatus.includes(this.bodyParams.status)) {\n\t\t\t\t\tconst { status } = this.bodyParams;\n\t\t\t\t\tconst { status } = this.bodyParams;"
        },
        "depth_rank": 10
    },
    {
        "file": "commands.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/commands.ts",
        "code": {
            "processQueryOptionsOnResult": "const processQueryOptionsOnResult = <T extends { _id?: string } & Record<string, any>, F extends keyof T>(\nconst processQueryOptionsOnResult = <T extends { _id?: string } & Record<string, any>, F extends keyof T>(",
            "pickFields": "\tconst pickFields = <F extends keyof T>(obj: T, fields: F[]): Pick<T, F> => {\n\tconst pickFields = <F extends keyof T>(obj: T, fields: F[]): Pick<T, F> => {\n\t\tconst picked: Partial<T> = {};\n\t\tconst picked: Partial<T> = {};",
            "params": "\t\t\tconst params = this.queryParams as Record<string, any>;\n\t\t\tconst params = this.queryParams as Record<string, any>;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "totalCount": "\t\t\tconst totalCount = commands.length;\n\t\t\tconst totalCount = commands.length;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcommands: processQueryOptionsOnResult(commands, {\n\t\t\t\t\tsort: sort || { name: 1 },",
            "result": "\t\t\tconst result = await slashCommands.run({ command: cmd, params, message, triggerId, userId: this.userId });\n\t\t\tconst result = await slashCommands.run({ command: cmd, params, message, triggerId, userId: this.userId });",
            "preview": "\t\t\tconst params = query.params ? query.params : '';\n\t\t\tconst params = query.params ? query.params : '';\n\n\t\t\tconst preview = await Meteor.callAsync('getSlashCommandPreviews', {\n\t\t\tconst preview = await Meteor.callAsync('getSlashCommandPreviews', {\n\t\t\t\tcmd,\n\t\t\t\tparams,\n\t\t\t\tmsg: { rid: query.roomId },",
            "msg": "\t\t\tconst msg = {\n\t\t\tconst msg = {\n\t\t\t\trid: body.roomId,\n\t\t\t\t...(body.tmid && { tmid: body.tmid }),"
        },
        "depth_rank": 10
    },
    {
        "file": "roles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/roles.ts",
        "code": {
            "roles": "\t\t\tconst roles = await Roles.find({}, { projection: { _updatedAt: 0 } }).toArray();\n\t\t\tconst roles = await Roles.find({}, { projection: { _updatedAt: 0 } }).toArray();",
            "user": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst { roleId, roleName, roomId } = this.bodyParams;\n\t\t\tconst { roleId, roleName, roomId } = this.bodyParams;",
            "options": "\t\t\tconst options = { projection: { _id: 1 } };\n\t\t\tconst options = { projection: { _id: 1 } };"
        },
        "depth_rank": 10
    },
    {
        "file": "invites.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/invites.ts",
        "code": {
            "result": "\t\t\tconst result = await listInvites(this.userId);\n\t\t\tconst result = await listInvites(this.userId);\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'findOrCreateInvite',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFindOrCreateInviteParams,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, days, maxUses } = this.bodyParams;\n\t\t\tconst { rid, days, maxUses } = this.bodyParams;"
        },
        "depth_rank": 10
    },
    {
        "file": "channels.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/channels.ts",
        "code": {
            "function": "\t\t\tconst room = await findChannelByIdOrName({\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t});\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nasync function createChannelValidator(params: {\nasync function createChannelValidator(params: {\n\tuser: { value: string };",
            "projection": "\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\tconst projection = { ...API.v1.defaultFieldsToExclude };",
            "findResult": "\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);",
            "roles": "\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsJoinProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { joinCode, ...params } = this.bodyParams;\n\t\t\tconst { joinCode, ...params } = this.bodyParams;",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });",
            "mentions": "\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {\n\t\t\t\t\tsort: sort || { ts: 1 },",
            "allMentions": "\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {},",
            "moderators": "\t\t\tconst moderators = (\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "team": "\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name ?? '',\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });",
            "user": "\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },",
            "id": "\tconst id = await createChannelMethod(\n\tconst id = await createChannelMethod(\n\t\tuserId,\n\t\tparams.name || '',\n\t\tparams.members ? params.members : [],\n\t\treadOnly,\n\t\tparams.customFields,\n\t\tparams.extraData,\n\t\tparams.excludeSelf,\n\t);\n\n\treturn {\n\t\tchannel: await findChannelByIdOrName({ params: { roomId: id.rid }, userId }),",
            "teams": "\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });\n\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });",
            "membersToAdd": "\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t});\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tbodyParams.members = [...membersToAdd].filter(Boolean) as string[];\n\t\t\t}\n\n\t\t\treturn API.v1.success(await API.channels?.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true },",
            "room": "\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });",
            "params": "\t\t\tconst params = this.queryParams;\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "roomIds": "\t\t\t\tconst roomIds = (\n\t\t\t\tconst roomIds = (\n\t\t\t\t\tawait Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tprojection: { rid: 1 },",
            "ids": "\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(\n\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(",
            "subs": "\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();",
            "rids": "\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);",
            "subscription": "\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "mailer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/mailer.ts",
        "code": {
            "result": "\t\t\tconst result = await Meteor.callAsync('Mailer.sendMail', from, subject, body, Boolean(dryrun), query);\n\t\t\tconst result = await Meteor.callAsync('Mailer.sendMail', from, subject, body, Boolean(dryrun), query);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'mailer.unsubscribe',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isMailerUnsubscribeProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { _id, createdAt } = this.bodyParams;\n\t\t\tconst { _id, createdAt } = this.bodyParams;"
        },
        "depth_rank": 10
    },
    {
        "file": "cloud.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/cloud.ts",
        "code": {
            "settingsData": "\t\t\tconst registrationInfo = await retrieveRegistrationStatus();\n\t\t\tconst registrationInfo = await retrieveRegistrationStatus();\n\n\t\t\tif (registrationInfo.workspaceRegistered) {\n\t\t\t\treturn API.v1.failure('Workspace is already registered');\n\t\t\t}\n\n\t\t\tconst settingsData = JSON.parse(Buffer.from(this.bodyParams.cloudBlob, 'base64').toString());\n\t\t\tconst settingsData = JSON.parse(Buffer.from(this.bodyParams.cloudBlob, 'base64').toString());\n\n\t\t\tawait saveRegistrationDataManual(settingsData);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'cloud.createRegistrationIntent',\n\t{ authRequired: true },",
            "intentData": "\t\t\tconst intentData = await startRegisterWorkspaceSetupWizard(this.bodyParams.resend, this.bodyParams.email);\n\t\t\tconst intentData = await startRegisterWorkspaceSetupWizard(this.bodyParams.resend, this.bodyParams.email);\n\n\t\t\tif (intentData) {\n\t\t\t\treturn API.v1.success({ intentData });",
            "pollData": "\t\t\tconst pollData = await getConfirmationPoll(deviceCode);\n\t\t\tconst pollData = await getConfirmationPoll(deviceCode);\n\t\t\tif (pollData) {\n\t\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\t\tawait saveRegistrationData(pollData.payload);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success({ pollData });",
            "registrationStatus": "\t\t\tconst registrationStatus = await retrieveRegistrationStatus();\n\t\t\tconst registrationStatus = await retrieveRegistrationStatus();\n\n\t\t\treturn API.v1.success({ registrationStatus });"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/settings.ts",
        "code": {
            "function": "async function fetchSettings(\nasync function fetchSettings(\n\tquery: Parameters<typeof Settings.find>[0],\n\tsort: FindOptions<ISetting>['sort'],\n\toffset: FindOptions<ISetting>['skip'],\n\tcount: FindOptions<ISetting>['limit'],\n\tfields: FindOptions<ISetting>['projection'],\n): Promise<{ settings: ISetting[]; totalCount: number }> {\n\tconst { cursor, totalCount } = Settings.findPaginated(query || {}, {\n\tconst { cursor, totalCount } = Settings.findPaginated(query || {}, {\n\t\tsort: sort || { _id: 1 },",
            "oAuthServicesEnabled": "\t\t\tconst oAuthServicesEnabled = await LoginServiceConfigurationModel.find({}, { projection: { secret: 0 } }).toArray();\n\t\t\tconst oAuthServicesEnabled = await LoginServiceConfigurationModel.find({}, { projection: { secret: 0 } }).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "dns.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/dns.ts",
        "code": {
            "resolved": "\t\t\tconst resolved = await resolveTXT(url);\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });"
        },
        "depth_rank": 10
    },
    {
        "file": "email-inbox.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/email-inbox.ts",
        "code": {
            "emailInboxes": "\t\t\tconst emailInboxes = await findEmailInboxes({ query, pagination: { offset, count, sort } });\n\t\t\tconst emailInboxes = await findEmailInboxes({ query, pagination: { offset, count, sort } });",
            "emailInbox": "\t\t\tconst emailInbox = await findOneEmailInbox({ _id });\n\t\t\tconst emailInbox = await findOneEmailInbox({ _id });"
        },
        "depth_rank": 10
    },
    {
        "file": "federation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/federation.ts",
        "code": {
            "results": "\t\t\tconst federationService = License.hasValidLicense() ? FederationEE : Federation;\n\t\t\tconst federationService = License.hasValidLicense() ? FederationEE : Federation;\n\n\t\t\tconst results = await federationService.verifyMatrixIds(matrixIds);\n\t\t\tconst results = await federationService.verifyMatrixIds(matrixIds);\n\n\t\t\treturn API.v1.success({ results: Object.fromEntries(results) });"
        },
        "depth_rank": 10
    },
    {
        "file": "videoConference.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/videoConference.ts",
        "code": {
            "data": "\t\t\tconst data = await VideoConf.listProviders();\n\t\t\tconst data = await VideoConf.listProviders();\n\n\t\t\treturn API.v1.success({ data });"
        },
        "depth_rank": 10
    },
    {
        "file": "chat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/chat.ts",
        "code": {
            "msg": "\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });",
            "user": "\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });",
            "result": "\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },",
            "pinnedMessage": "\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },",
            "sent": "\t\t\tconst sent = await executeSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>, this.bodyParams.previewUrls);\n\t\t\tconst sent = await executeSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>, this.bodyParams.previewUrls);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },",
            "updatedMessage": "\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },",
            "emoji": "\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;\n\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;",
            "room": "\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });",
            "thread": "\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });",
            "messages": "\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext: text || '',\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.otr',\n\t{ authRequired: true },"
        },
        "depth_rank": 10
    },
    {
        "file": "im.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/im.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });",
            "subscription": "\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });\n\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });",
            "room": "\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });",
            "options": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1, status: 1, statusText: 1, utcOffset: 1, federated: 1 },",
            "searchFields": "\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })\n\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })"
        },
        "depth_rank": 10
    },
    {
        "file": "stats.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/stats.ts",
        "code": {
            "events": "\t\t\tconst events = this.bodyParams;\n\t\t\tconst events = this.bodyParams;\n\n\t\t\tevents?.params?.forEach((event) => {\n\t\t\t\tconst { eventName, ...params } = event;\n\t\t\t\tconst { eventName, ...params } = event;"
        },
        "depth_rank": 10
    },
    {
        "file": "webdav.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/webdav.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "isPOSTRemoveWebdavAccount": "const isPOSTRemoveWebdavAccount = ajv.compile<POSTRemoveWebdavAccount>(POSTRemoveWebdavAccountSchema);\nconst isPOSTRemoveWebdavAccount = ajv.compile<POSTRemoveWebdavAccount>(POSTRemoveWebdavAccountSchema);\n\nAPI.v1.addRoute(\n\t'webdav.getMyAccounts',\n\t{ authRequired: true },",
            "result": "\t\t\tconst result = await Meteor.callAsync('removeWebdavAccount', accountId);\n\t\t\tconst result = await Meteor.callAsync('removeWebdavAccount', accountId);\n\n\t\t\treturn API.v1.success({ result });"
        },
        "depth_rank": 10
    },
    {
        "file": "groups.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/groups.ts",
        "code": {
            "function": "async function findPrivateGroupByIdOrName({\nasync function findPrivateGroupByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {",
            "user": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });",
            "room": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });",
            "findResult": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },",
            "lm": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' });",
            "subs": "\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();",
            "rids": "\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);",
            "subscription": "\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },",
            "roles": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },",
            "moderators": "\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = (\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },",
            "subscriptions": "\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "team": "\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });"
        },
        "depth_rank": 10
    },
    {
        "file": "push.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/push.ts",
        "code": {
            "data": "\t\t\tconst data = await PushNotification.getNotificationForMessageId({ receiver, room, message });\n\t\t\tconst data = await PushNotification.getNotificationForMessageId({ receiver, room, message });",
            "defaultGateway": "\t\t\tconst defaultGateway = (await Settings.findOneById('Push_gateway', { projection: { packageValue: 1 } }))?.packageValue;\n\t\t\tconst defaultGateway = (await Settings.findOneById('Push_gateway', { projection: { packageValue: 1 } }))?.packageValue;",
            "tokensCount": "\t\t\tconst tokensCount = await executePushTest(this.userId, this.user.username);\n\t\t\tconst tokensCount = await executePushTest(this.userId, this.user.username);\n\t\t\treturn API.v1.success({ tokensCount });"
        },
        "depth_rank": 10
    },
    {
        "file": "teams.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/teams.ts",
        "code": {
            "team": "\t\t\tconst team = await Team.create(this.userId, {\n\t\t\tconst team = await Team.create(this.userId, {\n\t\t\t\tteam: {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\tmembers,\n\t\t\t\towner,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ team });",
            "getTeamByIdOrName": "const getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\nconst getTeamByIdOrName = async (params: { teamId: string } | { teamName: string }): Promise<ITeam | null> => {\n\tif ('teamId' in params && params.teamId) {\n\t\treturn Team.getOneById<ITeam>(params.teamId);\n\t}\n\n\tif ('teamName' in params && params.teamName) {\n\t\treturn Team.getOneByName(params.teamName);\n\t}\n\n\treturn null;\n};\n\nAPI.v1.addRoute(\n\t'teams.convertToChannel',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isTeamsConvertToChannelProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;\n\t\t\tconst { roomsToRemove = [] } = this.bodyParams;",
            "await": "\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\t\t\tconst rooms: string[] = await Team.getMatchingTeamRooms(team._id, roomsToRemove);\n\n\t\t\t// If we got a list of rooms to delete along with the team, remove them first\n\t\t\tif (rooms.length) {\n\t\t\t\tfor await (const room of rooms) {\n\t\t\t\tfor await (const room of rooms) {\n\t\t\t\t\tawait Meteor.callAsync('eraseRoom', room);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Move every other room back to the workspace\n\t\t\tawait Team.unsetTeamIdOfRooms(this.userId, team._id);\n\n\t\t\t// Remove the team's main room\n\t\t\tawait Meteor.callAsync('eraseRoom', team.roomId);\n\n\t\t\t// Delete all team memberships\n\t\t\tawait Team.removeAllMembersFromTeam(team._id);\n\n\t\t\t// And finally delete the team itself\n\t\t\tawait Team.deleteById(team._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.autocomplete',\n\t{ authRequired: true },",
            "validRooms": "\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\t\t\tconst validRooms = await Team.addRooms(this.userId, rooms, team._id);\n\n\t\t\treturn API.v1.success({ rooms: validRooms });",
            "room": "\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\t\t\tconst room = await Team.updateRoom(this.userId, roomId, isDefault, canUpdateAny);\n\n\t\t\treturn API.v1.success({ room });",
            "listFilter": "\t\t\tconst listFilter = {\n\t\t\tconst listFilter = {\n\t\t\t\tname: filter ?? undefined,\n\t\t\t\tisDefault: type === 'autoJoin',\n\t\t\t\tgetAllRooms,\n\t\t\t\tallowPrivateTeam,\n\t\t\t};\n\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\tconst { records, total } = await Team.listRooms(this.userId, team._id, listFilter, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.listRoomsOfUser',\n\t{ authRequired: true },",
            "booleanCanUserDelete": "\t\t\tconst booleanCanUserDelete = canUserDelete === 'true';\n\t\t\tconst booleanCanUserDelete = canUserDelete === 'true';\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, booleanCanUserDelete, {\n\t\t\tconst { records, total } = await Team.listRoomsOfUser(this.userId, team._id, userId, allowPrivateTeam, booleanCanUserDelete, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\trooms: records,\n\t\t\t\ttotal,\n\t\t\t\tcount: records.length,\n\t\t\t\toffset: 0,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'teams.members',\n\t{ authRequired: true },",
            "user": "\t\t\tconst user = await Users.findOneActiveById(userId, {});\n\t\t\tconst user = await Users.findOneActiveById(userId, {});",
            "teams": "\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\t\t\tconst teams = await Team.autocomplete(this.userId, name);\n\n\t\t\treturn API.v1.success({ teams });"
        },
        "depth_rank": 10
    },
    {
        "file": "import.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/import.ts",
        "code": {
            "operation": "\t\t\tconst operation = await Import.newOperation(this.userId, 'api', 'api');\n\t\t\tconst operation = await Import.newOperation(this.userId, 'api', 'api');\n\n\t\t\treturn API.v1.success({ operation });"
        },
        "depth_rank": 10
    },
    {
        "file": "calendar.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/calendar.ts",
        "code": {
            "data": "\t\t\tconst data = await Calendar.list(userId, new Date(date));\n\t\t\tconst data = await Calendar.list(userId, new Date(date));\n\n\t\t\treturn API.v1.success({ data });",
            "id": "\t\t\tconst id = await Calendar.create({\n\t\t\tconst id = await Calendar.create({\n\t\t\t\tuid,\n\t\t\t\tstartTime: new Date(startTime),\n\t\t\t\texternalId,\n\t\t\t\tsubject,\n\t\t\t\tdescription,\n\t\t\t\tmeetingUrl,\n\t\t\t\treminderMinutesBeforeStart,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ id });"
        },
        "depth_rank": 10
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/rooms.ts",
        "code": {
            "function": "async function findRoomByIdOrName({\nasync function findRoomByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n}: {",
            "projection": "\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\tconst projection = { ...API.v1.defaultFieldsToExclude };",
            "file": "\t\t\tconst file = await getUploadFormData(\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },",
            "uploadedFile": "\t\t\tconst details = {\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tawait sendFileMessage(this.userId, { roomId: this.urlParams.rid, file: uploadedFile, msgData: fields });",
            "message": "\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },",
            "room": "\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });",
            "count": "\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\t\troomId: _id,\n\t\t\t\tlatest: new Date(latest),\n\t\t\t\toldest: new Date(oldest),\n\t\t\t\tinclusive,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned ?? false),\n\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly ?? false),\n\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads ?? false),\n\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion ?? false),\n\t\t\t\tfromUsers: users,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ _id, count });",
            "discussion": "\t\t\tconst discussion = await createDiscussion(this.userId, {\n\t\t\tconst discussion = await createDiscussion(this.userId, {\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t\tt_name,\n\t\t\t\treply,\n\t\t\t\tusers: users?.filter(isTruthy) || [],\n\t\t\t\tencrypted,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ discussion });",
            "ourQuery": "\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });",
            "result": "\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\n\t\t\treturn API.v1.success({ rid: result.rid });"
        },
        "depth_rank": 10
    },
    {
        "file": "omnichannel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/voip/omnichannel.ts",
        "code": {
            "filter": "function filter(\nfunction filter(\n\tarray: IVoipExtensionWithAgentInfo[],\n\t{ queues, extension, agentId, status }: { queues?: string[]; extension?: string; agentId?: string; status?: string },",
            "isUserAndExtensionParams": "const isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;",
            "isUserIdndTypeParams": "const isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;",
            "user": "\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },",
            "extensions": "\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });"
        },
        "depth_rank": 11
    },
    {
        "file": "extensions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/voip/extensions.ts",
        "code": {
            "result": "\t\t\tconst result = generateJWT(endpointDetails.result, encKey);\n\t\t\tconst result = generateJWT(endpointDetails.result, encKey);\n\t\t\treturn API.v1.success({ result });",
            "endpointDetails": "\t\t\tconst endpointDetails = await Voip.getRegistrationInfo({ extension });\n\t\t\tconst endpointDetails = await Voip.getRegistrationInfo({ extension });"
        },
        "depth_rank": 11
    },
    {
        "file": "queues.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/voip/queues.ts",
        "code": {
            "queueSummary": "\t\t\tconst queueSummary = await Voip.getQueueSummary();\n\t\t\tconst queueSummary = await Voip.getQueueSummary();\n\t\t\treturn API.v1.success({ summary: queueSummary.result as IQueueSummary[] });"
        },
        "depth_rank": 11
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/api/server/v1/voip/rooms.ts",
        "code": {
            "parseDateParams": "const parseDateParams = (date?: string): DateParam => {\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};",
            "isRoomCreationProps": "const isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\nconst isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\n\treturn 'rid' in props && 'token' in props;\n};\n\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\n\treturn 'agentId' in props && 'direction' in props;\n};\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 },",
            "guest": "\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});",
            "room": "\t\t\t\tconst rid = Random.id();\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(\n\t\t\t\t\tawait LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n\t\t\t\t\t\tprojection: API.v1.defaultFieldsToExclude,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });",
            "agent": "\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst agent = { agentId: _id, username };",
            "closedAt": "\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\tdirection,\n\t\t\t\t\troomName,\n\t\t\t\t\toptions: { sort, offset, count, fields },",
            "visitor": "\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});"
        },
        "depth_rank": 11
    },
    {
        "file": "CachedCollection.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/ui-cached-collection/client/models/CachedCollection.ts",
        "code": {
            "hasUpdatedAt": "const hasUpdatedAt = <T>(record: T): record is T & { _updatedAt: Date } =>\nconst hasUpdatedAt = <T>(record: T): record is T & { _updatedAt: Date } =>",
            "hasDeletedAt": "const hasDeletedAt = <T>(record: T): record is T & { _deletedAt: Date } =>\nconst hasDeletedAt = <T>(record: T): record is T & { _deletedAt: Date } =>",
            "hasUnserializedUpdatedAt": "const hasUnserializedUpdatedAt = <T>(record: T): record is T & { _updatedAt: ConstructorParameters<typeof Date>[0] } =>\nconst hasUnserializedUpdatedAt = <T>(record: T): record is T & { _updatedAt: ConstructorParameters<typeof Date>[0] } =>",
            "data": "\t\tconst data = this.collection.find().fetch();\n\t\tconst data = this.collection.find().fetch();\n\t\tawait localforage.setItem(this.name, {\n\t\t\tupdatedAt: this.updatedAt,\n\t\t\tversion: this.version,\n\t\t\ttoken: this.getToken(),\n\t\t\trecords: data,\n\t\t});\n\t\tthis.log('saving cache (done)');\n\t});\n\n\tclearCacheOnLogout() {\n\t\tif (this.userRelated === true) {\n\t\t\tvoid this.clearCache();\n\t\t}\n\t}\n\n\tasync clearCache() {\n\t\tthis.log('clearing cache');\n\t\tawait localforage.removeItem(this.name);\n\t\tthis.collection.remove({});",
            "actionTime": "\t\t\t\tconst actionTime = newRecord._deletedAt;\n\t\t\t\tconst actionTime = newRecord._deletedAt;\n\t\t\t\tchanges.push({\n\t\t\t\t\taction: () => {\n\t\t\t\t\t\tconst { _id } = newRecord;\n\t\t\t\t\t\tconst { _id } = newRecord;"
        },
        "depth_rank": 10
    },
    {
        "file": "Presence.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/notifications/server/lib/Presence.ts",
        "code": {
            "payload": "\t\tconst payload = this.streamer.changedPayload(this.streamer.subscriptionName, args.uid, { ...args, eventName: args.uid }); // there is no good explanation to keep eventName, I just want to save one 'DDPCommon.parseDDP' on the client side, so I'm trying to fit the Meteor Streamer's payload\n\t\tconst payload = this.streamer.changedPayload(this.streamer.subscriptionName, args.uid, { ...args, eventName: args.uid }); // there is no good explanation to keep eventName, I just want to save one 'DDPCommon.parseDDP' on the client side, so I'm trying to fit the Meteor Streamer's payload"
        },
        "depth_rank": 10
    },
    {
        "file": "HipChatEnterpriseImporter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer-hipchat-enterprise/server/HipChatEnterpriseImporter.js",
        "code": {
            "dataString": "\t\tconst dataString = data.toString();\n\t\tconst dataString = data.toString();\n\t\ttry {\n\t\t\tthis.logger.debug('parsing file contents');\n\t\t\treturn JSON.parse(dataString);\n\t\t} catch (e) {",
            "gunzip": "\t\t\tconst rs = fs.createReadStream(fullFilePath);\n\t\t\tconst rs = fs.createReadStream(fullFilePath);\n\t\t\tconst gunzip = this.zlib.createGunzip();\n\t\t\tconst gunzip = this.zlib.createGunzip();\n\n\t\t\tgunzip.on('error', (err) => {\n\t\t\t\tthis.logger.error({ msg: 'extract error:', err });"
        },
        "depth_rank": 9
    },
    {
        "file": "search.internalService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/search/server/search.internalService.ts",
        "code": {
            "service": "\tconstructor() {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.onEvent('watch.users', async ({ clientAction, id, ...rest }) => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tsearchEventService.promoteEvent('user.delete', id, undefined);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst user = ('data' in rest && rest.data) || (await Users.findOneById(id));\n\t\t\tconst user = ('data' in rest && rest.data) || (await Users.findOneById(id));\n\t\t\tsearchEventService.promoteEvent('user.save', id, user);\n\t\t});\n\n\t\tthis.onEvent('watch.rooms', async ({ clientAction, room }) => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\tsearchEventService.promoteEvent('room.delete', room._id, undefined);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsearchEventService.promoteEvent('room.save', room._id, room);\n\t\t});\n\t}\n}\n\nconst service = new Search();\nconst service = new Search();\n\nsettings.watch('Search.Provider', () => {\n\tif (searchProviderService.activeProvider?.on) {\n\t\tapi.registerService(service);\n\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "SearchResultValidationService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/search/server/service/SearchResultValidationService.ts",
        "code": {
            "uid": "\t\tconst uid = Meteor.userId() ?? undefined;\n\t\tconst uid = Meteor.userId() ?? undefined;\n\n\t\tconst validatedResult: ISearchResult = {};\n\t\tconst validatedResult: ISearchResult = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "UAParserCustom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/statistics/server/lib/UAParserCustom.js",
        "code": {
            "subProps": "\t\t\tconst subProps = {};\n\t\t\tconst subProps = {};",
            "prop": "\t\t\t\t\tconst propName = props.list[idx];\n\t\t\t\t\tconst propName = props.list[idx];\n\t\t\t\t\tsubProps[propName] = props.get ? props.get(propName, value) : value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst prop = {};\n\t\t\tconst prop = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/statistics/server/lib/statistics.ts",
        "code": {
            "statistics": "\t\tconst readPreference = readSecondaryPreferred(db);\n\t\tconst readPreference = readSecondaryPreferred(db);\n\n\t\tconst statistics = {} as IStats;\n\t\tconst statistics = {} as IStats;",
            "uniqueID": "\t\tconst statsPms = [];\n\t\tconst statsPms = [];\n\n\t\tconst fetchWizardSettingValue = async <T>(settingName: string): Promise<T | undefined> => {\n\t\tconst fetchWizardSettingValue = async <T>(settingName: string): Promise<T | undefined> => {\n\t\t\treturn ((await Settings.findOne(settingName))?.value as T | undefined) ?? undefined;\n\t\t};\n\n\t\t// Setup Wizard\n\t\tconst [organizationType, industry, size, country, language, serverType, registerServer] = await Promise.all([\n\t\tconst [organizationType, industry, size, country, language, serverType, registerServer] = await Promise.all([\n\t\t\tfetchWizardSettingValue<string>('Organization_Type'),\n\t\t\tfetchWizardSettingValue<string>('Industry'),\n\t\t\tfetchWizardSettingValue<string>('Size'),\n\t\t\tfetchWizardSettingValue<string>('Country'),\n\t\t\tfetchWizardSettingValue<string>('Language'),\n\t\t\tfetchWizardSettingValue<string>('Server_Type'),\n\t\t\tfetchWizardSettingValue<boolean>('Register_Server'),\n\t\t]);\n\t\tstatistics.wizard = {\n\t\t\torganizationType,\n\t\t\tindustry,\n\t\t\tsize,\n\t\t\tcountry,\n\t\t\tlanguage,\n\t\t\tserverType,\n\t\t\tregisterServer,\n\t\t};\n\n\t\t// Version\n\t\tconst uniqueID = await Settings.findOne('uniqueID');\n\t\tconst uniqueID = await Settings.findOne('uniqueID');\n\t\tstatistics.uniqueId = settings.get('uniqueID');\n\t\tif (uniqueID) {\n\t\t\tstatistics.installedAt = uniqueID.createdAt.toISOString();\n\t\t}\n\n\t\tstatistics.deploymentFingerprintHash = settings.get('Deployment_FingerPrint_Hash');\n\t\tstatistics.deploymentFingerprintVerified = settings.get('Deployment_FingerPrint_Verified');\n\n\t\tif (Info) {\n\t\t\tstatistics.version = Info.version;\n\t\t\tstatistics.tag = Info.tag;\n\t\t\tstatistics.branch = Info.branch;\n\t\t}\n\n\t\t// User statistics\n\t\tstatistics.totalUsers = await Users.col.countDocuments({});",
            "defaultValue": "\t\tconst defaultValue = { contactsCount: 0, conversationsCount: 0, sources: [] };\n\t\tconst defaultValue = { contactsCount: 0, conversationsCount: 0, sources: [] };",
            "channels": "\t\tconst monthAgo = moment.utc().subtract(30, 'days').toDate();\n\t\tconst monthAgo = moment.utc().subtract(30, 'days').toDate();\n\t\tconst today = moment.utc().toDate();\n\t\tconst today = moment.utc().toDate();\n\t\tstatsPms.push(\n\t\t\tLivechatRooms.getMACStatisticsBetweenDates(monthAgo, today).then(([result]) => {\n\t\t\t\tstatistics.uniqueContactsOfLastMonth = result || defaultValue;\n\t\t\t}),\n\t\t);\n\n\t\tconst weekAgo = moment.utc().subtract(7, 'days').toDate();\n\t\tconst weekAgo = moment.utc().subtract(7, 'days').toDate();\n\t\tstatsPms.push(\n\t\t\tLivechatRooms.getMACStatisticsBetweenDates(weekAgo, today).then(([result]) => {\n\t\t\t\tstatistics.uniqueContactsOfLastWeek = result || defaultValue;\n\t\t\t}),\n\t\t);\n\n\t\tconst yesterday = moment.utc().subtract(1, 'days').toDate();\n\t\tconst yesterday = moment.utc().subtract(1, 'days').toDate();\n\t\tstatsPms.push(\n\t\t\tLivechatRooms.getMACStatisticsBetweenDates(yesterday, today).then(([result]) => {\n\t\t\t\tstatistics.uniqueContactsOfYesterday = result || defaultValue;\n\t\t\t}),\n\t\t);\n\n\t\t// Message statistics\n\t\tconst channels = await Rooms.findByType('c', { projection: { msgs: 1, prid: 1 } }).toArray();\n\t\tconst channels = await Rooms.findByType('c', { projection: { msgs: 1, prid: 1 } }).toArray();",
            "privateGroups": "\t\tconst privateGroups = await Rooms.findByType('p', { projection: { msgs: 1, prid: 1 } }).toArray();\n\t\tconst privateGroups = await Rooms.findByType('p', { projection: { msgs: 1, prid: 1 } }).toArray();",
            "settingsStatisticsObject": "\t\t\t\tconst settingsStatisticsObject = res || {};\n\t\t\t\tconst settingsStatisticsObject = res || {};",
            "defaultGateway": "\t\tconst defaultGateway = (await Settings.findOneById('Push_gateway', { projection: { packageValue: 1 } }))?.packageValue;\n\t\tconst defaultGateway = (await Settings.findOneById('Push_gateway', { projection: { packageValue: 1 } }))?.packageValue;",
            "rcStatistics": "\t\tconst peak = await Statistics.findMonthlyPeakConnections();\n\t\tconst peak = await Statistics.findMonthlyPeakConnections();\n\t\tstatistics.maxMonthlyPeakConnections = Math.max(statistics.dailyPeakConnections, peak?.dailyPeakConnections || 0);\n\n\t\tstatistics.matrixFederation = await getMatrixFederationStatistics();\n\n\t\t// Omnichannel call stats\n\t\tstatistics.webRTCEnabled = settings.get('WebRTC_Enabled');\n\t\tstatistics.webRTCEnabledForOmnichannel = settings.get('Omnichannel_call_provider') === 'WebRTC';\n\t\tstatistics.omnichannelWebRTCCalls = await Rooms.findCountOfRoomsWithActiveCalls();\n\n\t\tawait Promise.all(statsPms).catch(log);\n\n\t\treturn statistics;\n\t},\n\tasync save(): Promise<IStats> {\n\t\tconst rcStatistics = await statistics.get();\n\t\tconst rcStatistics = await statistics.get();\n\t\trcStatistics.createdAt = new Date();\n\t\tconst { insertedId } = await Statistics.insertOne(rcStatistics);\n\t\tconst { insertedId } = await Statistics.insertOne(rcStatistics);"
        },
        "depth_rank": 10
    },
    {
        "file": "getServicesStatistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/statistics/server/lib/getServicesStatistics.ts",
        "code": {
            "readPreference": "\tconst readPreference = readSecondaryPreferred(db);\n\tconst readPreference = readSecondaryPreferred(db);\n\n\treturn {\n\t\tldap: {\n\t\t\tusers: await Users.countActiveUsersByService('ldap', { readPreference }),"
        },
        "depth_rank": 10
    },
    {
        "file": "SAUMonitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/statistics/server/lib/SAUMonitor.ts",
        "code": {
            "user": "const logger = new Logger('SAUMonitor');\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });",
            "params": "\t\t\tconst roles = await getUserRoles(userId);\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };",
            "searchTerm": "\t\tconst searchTerm = this._getSearchTerm(data);\n\t\tconst searchTerm = this._getSearchTerm(data);\n\n\t\tawait Sessions.createOrUpdate({ ...data, searchTerm });",
            "cursor": "\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });",
            "await": "\t\tconst batch = [];\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },",
            "host": "\t\tconst ip = getClientAddress(connection);\n\t\tconst ip = getClientAddress(connection);\n\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\t...(connection.loginToken && { loginToken: connection.loginToken }),",
            "period": "\t\tconst period = { start: getDateObj(threeDaysAgo), end: getDateObj(today) };\n\t\tconst period = { start: getDateObj(threeDaysAgo), end: getDateObj(today) };"
        },
        "depth_rank": 10
    },
    {
        "file": "loadScript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/analytics/client/loadScript.ts",
        "code": {
            "gtag": "\t\t\tconst dataLayer = w.dataLayer || [];\n\t\t\tconst dataLayer = w.dataLayer || [];\n\t\t\tconst gtag = (key: string, value: any) => {\n\t\t\tconst gtag = (key: string, value: any) => {\n\t\t\t\tdataLayer.push(key, value);\n\t\t\t};\n\t\t\tgtag('js', new Date());\n\t\t\tgtag('config', googleId);\n\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "PendingAvatarImporter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer-pending-avatars/server/PendingAvatarImporter.ts",
        "code": {
            "fileCount": "\t\tconst users = Users.findAllUsersWithPendingAvatar();\n\t\tconst users = Users.findAllUsersWithPendingAvatar();\n\t\tconst fileCount = await users.count();\n\t\tconst fileCount = await users.count();\n\n\t\tif (fileCount === 0) {\n\t\t\tawait super.updateProgress(ProgressStep.DONE);\n\t\t\treturn 0;\n\t\t}\n\n\t\tawait this.updateRecord({ 'count.messages': fileCount, 'messagesstatus': null });",
            "fileData": "\t\tconst fileData = new Selection(this.info.name, [], [], fileCount);\n\t\tconst fileData = new Selection(this.info.name, [], [], fileCount);\n\t\tawait this.updateRecord({ fileData });",
            "await": "\t\tconst pendingFileUserList = Users.findAllUsersWithPendingAvatar();\n\t\tconst pendingFileUserList = Users.findAllUsersWithPendingAvatar();\n\t\ttry {\n\t\t\tfor await (const user of pendingFileUserList) {\n\t\t\tfor await (const user of pendingFileUserList) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { _pendingAvatarUrl: url, name, _id } = user;\n\t\t\t\t\tconst { _pendingAvatarUrl: url, name, _id } = user;"
        },
        "depth_rank": 9
    },
    {
        "file": "api.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/mailer/server/api.ts",
        "code": {
            "email": "\tconst email = { to, from, replyTo, subject, html, text, headers };\n\tconst email = { to, from, replyTo, subject, html, text, headers };",
            "eventResult": "\tconst eventResult = await Apps.triggerEvent('IPreEmailSent', { email });\n\tconst eventResult = await Apps.triggerEvent('IPreEmailSent', { email });"
        },
        "depth_rank": 9
    },
    {
        "file": "collectMetrics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/metrics/server/lib/collectMetrics.ts",
        "code": {
            "sessions": "const setPrometheusData = async (): Promise<void> => {\nconst setPrometheusData = async (): Promise<void> => {\n\tmetrics.info.set(\n\t\t{\n\t\t\tversion: Info.version,\n\t\t\tunique_id: settings.get<string>('uniqueID'),\n\t\t\tsite_url: settings.get<string>('Site_Url'),\n\t\t},\n\t\t1,\n\t);\n\n\tconst sessions = Array.from<{ userId: string }>(Meteor.server.sessions.values());\n\tconst sessions = Array.from<{ userId: string }>(Meteor.server.sessions.values());",
            "authenticatedSessions": "\tconst authenticatedSessions = sessions.filter((s) => s.userId);\n\tconst authenticatedSessions = sessions.filter((s) => s.userId);\n\tmetrics.ddpSessions.set(Meteor.server.sessions.size);\n\tmetrics.ddpAuthenticatedSessions.set(authenticatedSessions.length);\n\tmetrics.ddpConnectedUsers.set(_.unique(authenticatedSessions.map((s) => s.userId)).length);\n\n\t// Apps metrics\n\tconst { totalInstalled, totalActive, totalFailed } = getAppsStatistics();\n\tconst { totalInstalled, totalActive, totalFailed } = getAppsStatistics();"
        },
        "depth_rank": 10
    },
    {
        "file": "roomAccessValidator.compatibility.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/roomAccessValidator.compatibility.ts",
        "code": {
            "departmentAgents": "\t\t\tconst departmentAgents = (await LivechatDepartmentAgents.findByAgentId(user._id, { projection: { departmentId: 1 } }).toArray()).map(\n\t\t\tconst departmentAgents = (await LivechatDepartmentAgents.findByAgentId(user._id, { projection: { departmentId: 1 } }).toArray()).map(",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOne(filter, { projection: { status: 1 } });\n\t\tconst inquiry = await LivechatInquiry.findOne(filter, { projection: { status: 1 } });",
            "agentOfDepartment": "\t\tconst agentOfDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(user._id, room.departmentId, {\n\t\tconst agentOfDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(user._id, room.departmentId, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "sendMessageBySMS.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/sendMessageBySMS.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(room.v.token, { projection: { phone: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(room.v.token, { projection: { phone: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "livechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/livechat.ts",
        "code": {
            "memoizedParseExtraAttributes": "const indexHtmlWithServerURL = addServerUrlToIndex((await Assets.getTextAsync('livechat/index.html')) || '');\nconst indexHtmlWithServerURL = addServerUrlToIndex((await Assets.getTextAsync('livechat/index.html')) || '');\n\nfunction parseExtraAttributes(widgetData: string): string {\nfunction parseExtraAttributes(widgetData: string): string {\n\tconst liveChatAdditionalScripts = settings.get<string>('Livechat_AdditionalWidgetScripts');\n\tconst liveChatAdditionalScripts = settings.get<string>('Livechat_AdditionalWidgetScripts');\n\tconst additionalClass = settings.get<string>('Livechat_WidgetLayoutClasses');\n\tconst additionalClass = settings.get<string>('Livechat_WidgetLayoutClasses');\n\n\tif (liveChatAdditionalScripts == null || additionalClass == null) {\n\t\treturn widgetData;\n\t}\n\n\tconst domParser = new jsdom.JSDOM(widgetData);\n\tconst domParser = new jsdom.JSDOM(widgetData);\n\tconst doc = domParser.window.document;\n\tconst doc = domParser.window.document;\n\tconst head = doc.querySelector('head');\n\tconst head = doc.querySelector('head');\n\tconst body = doc.querySelector('body');\n\tconst body = doc.querySelector('body');\n\n\tliveChatAdditionalScripts.split(',').forEach((script) => {\n\t\tconst scriptElement = doc.createElement('script');\n\t\tconst scriptElement = doc.createElement('script');\n\t\tscriptElement.src = script;\n\t\tbody?.appendChild(scriptElement);\n\t});\n\n\tadditionalClass.split(',').forEach((css) => {\n\t\tconst linkElement = doc.createElement('link');\n\t\tconst linkElement = doc.createElement('link');\n\t\tlinkElement.rel = 'stylesheet';\n\t\tlinkElement.href = css;\n\t\thead?.appendChild(linkElement);\n\t});\n\n\treturn doc.documentElement.innerHTML;\n}\n\nconst memoizedParseExtraAttributes = mem(parseExtraAttributes, { maxAge: process.env.TEST_MODE === 'true' ? 1 : 60000 });\nconst memoizedParseExtraAttributes = mem(parseExtraAttributes, { maxAge: process.env.TEST_MODE === 'true' ? 1 : 60000 });"
        },
        "depth_rank": 9
    },
    {
        "file": "processRoomAbandonment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/hooks/processRoomAbandonment.ts",
        "code": {
            "parseDays": "const getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\nconst getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\n\tmoment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n\nconst parseDays = (\nconst parseDays = (\n\tacc: Record<string, { start: { day: string; time: string }; finish: { day: string; time: string }; open: boolean }>,",
            "department": "\tconst department = room.departmentId\n\tconst department = room.departmentId\n\t\t? await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(room.departmentId, {\n\t\t\t\tprojection: { businessHourId: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "afterUserActions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/hooks/afterUserActions.ts",
        "code": {
            "handleAgentUpdated": "const handleAgentUpdated = async (userData: IAfterSaveUserProps) => {\nconst handleAgentUpdated = async (userData: IAfterSaveUserProps) => {\n\tconst { user: newUser, oldUser } = userData;\n\tconst { user: newUser, oldUser } = userData;"
        },
        "depth_rank": 10
    },
    {
        "file": "sendEmailTranscriptOnClose.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendEmailTranscriptOnClose.ts",
        "code": {
            "sendEmailTranscriptOnClose": "const sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\tconst { room, options } = params;",
            "resolveTranscriptData": "const resolveTranscriptData = (\nconst resolveTranscriptData = (\n\troom: IOmnichannelRoom,\n\toptions: LivechatCloseCallbackParams['options'] = {},"
        },
        "depth_rank": 10
    },
    {
        "file": "offlineMessageToChannel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/hooks/offlineMessageToChannel.ts",
        "code": {
            "dept": "\t\t\tconst dept = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'name' | 'offlineMessageChannelName'>>(\n\t\t\tconst dept = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'name' | 'offlineMessageChannelName'>>(\n\t\t\t\tdepartment,\n\t\t\t\t{\n\t\t\t\t\tprojection: { name: 1, offlineMessageChannelName: 1 },",
            "room": "\t\tconst room = await Rooms.findOneByName(channelName, { projection: { t: 1, archived: 1 } });\n\t\tconst room = await Rooms.findOneByName(channelName, { projection: { t: 1, archived: 1 } });",
            "user": "\t\tconst user = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\tconst user = await Users.findOneById('rocket.cat', { projection: { username: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "sendToCRM.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendToCRM.ts",
        "code": {
            "getAdditionalFieldsByType": "const isOmnichannelNavigationMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\nconst isOmnichannelNavigationMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\n\treturn message.t === msgNavType;\n};\n\nconst isOmnichannelClosingMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\nconst isOmnichannelClosingMessage = (message: IMessage): message is IOmnichannelSystemMessage => {\n\treturn message.t === msgClosingType;\n};\n\nconst sendMessageType = (msgType: string): boolean => {\nconst sendMessageType = (msgType: string): boolean => {\n\tswitch (msgType) {\n\t\tcase msgClosingType:\n\t\t\treturn true;\n\t\tcase msgNavType:\n\t\t\treturn (\n\t\t\t\tsettings.get<boolean>('Livechat_Visitor_navigation_as_a_message') &&\n\t\t\t\tsettings.get<boolean>('Send_visitor_navigation_history_livechat_webhook_request')\n\t\t\t);\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nconst getAdditionalFieldsByType = (type: string, room: OmnichannelRoomWithExtraFields): AdditionalFields => {\nconst getAdditionalFieldsByType = (type: string, room: OmnichannelRoomWithExtraFields): AdditionalFields => {\n\tconst { departmentId, servedBy, closedAt, closedBy, closer, oldServedBy, oldDepartmentId } = room;\n\tconst { departmentId, servedBy, closedAt, closedBy, closer, oldServedBy, oldDepartmentId } = room;",
            "msg": "\t\t\tconst msg = {\n\t\t\tconst msg = {\n\t\t\t\t_id: message._id,\n\t\t\t\tusername: message.u.username,\n\t\t\t\tmsg: message.msg || JSON.stringify(message.blocks),\n\t\t\t\t...(message.blocks && message.blocks.length > 0 ? { blocks: message.blocks } : {}),",
            "responseData": "\tconst additionalData = getAdditionalFieldsByType(type, room);\n\tconst additionalData = getAdditionalFieldsByType(type, room);\n\tconst responseData = Object.assign(postData, additionalData);\n\tconst responseData = Object.assign(postData, additionalData);\n\n\tconst response = await LivechatTyped.sendRequest(responseData);\n\tconst response = await LivechatTyped.sendRequest(responseData);\n\n\tif (response) {\n\t\tconst responseData = await response.text();\n\t\tconst responseData = await response.text();\n\t\tawait LivechatRooms.saveCRMDataByRoomId(room._id, responseData);\n\t}\n\n\treturn room;\n}\n\ncallbacks.add(\n\t'livechat.closeRoom',\n\tasync (params) => {\n\t\tconst { room } = params;\n\t\tconst { room } = params;",
            "room": "\t\tconst room = Object.assign(originalRoom, { oldDepartmentId });\n\t\tconst room = Object.assign(originalRoom, { oldDepartmentId });"
        },
        "depth_rank": 10
    },
    {
        "file": "Helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/Helper.ts",
        "code": {
            "extraRoomInfo": "\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online' } = guest;\n\tconst { _id, username, token, department: departmentId, status = 'online' } = guest;",
            "newRoomAt": "\tconst newRoomAt = new Date();\n\tconst newRoomAt = new Date();\n\n\tconst { activity } = guest;\n\tconst { activity } = guest;",
            "extraInquiryInfo": "\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = UserStatus.ONLINE, activity } = guest;\n\tconst { _id, username, token, department, status = UserStatus.ONLINE, activity } = guest;",
            "existingSubscription": "\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = UserStatus.ONLINE } = guest;\n\tconst { _id, username, token, status = UserStatus.ONLINE } = guest;",
            "parseCustomFields": "\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {",
            "externalCF": "\tconst externalCF = externalCustomFields();\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),",
            "customFields": "\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) }) as ILivechatAgent;",
            "await": "\tconst agentsRemoved = [];\n\tconst agentsRemoved = [];\n\tconst agentsAdded = [];\n\tconst agentsAdded = [];\n\tfor await (const { agentId } of remove) {\n\tfor await (const { agentId } of remove) {\n\t\tawait LivechatDepartmentAgents.removeByDepartmentIdAndAgentId(departmentId, agentId);\n\t\tagentsRemoved.push(agentId);\n\t}\n\n\tif (agentsRemoved.length > 0) {\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });",
            "fake": "\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: '',\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasReplyToThread: false,\n\t\t\tdisableAllMessageNotifications: false,\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: { _id: '', u: v, msg: '' },",
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});",
            "agent": "\tconst agent = { agentId, username };\n\tconst agent = { agentId, username };",
            "roomTaken": "\tconst roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, {\n\tconst roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, {\n\t\tforwardingToDepartment: { oldDepartmentId },",
            "isInDepartment": "\t\tconst isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n\t\tconst isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n\t\t\tprojection: { _id: 1 },",
            "department": "\t\tconst department = departmentId\n\t\tconst department = departmentId\n\t\t\t? await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment' | 'name'>>(departmentId, {\n\t\t\t\t\tprojection: { fallbackForwardDepartment: 1, name: 1 },",
            "type": "\tconst type = transferType || (_id === agentId ? 'agent' : 'user');\n\tconst type = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),",
            "agentFromDb": "\tfor await (const agent of upsert) {\n\tfor await (const agent of upsert) {\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "Departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/Departments.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'businessHourId'>>(departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { _id: 1, businessHourId: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "QueueManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/QueueManager.ts",
        "code": {
            "room": "\tconst room = await LivechatRooms.findOneById(inquiry.rid, { projection: { v: 1 } });\n\tconst room = await LivechatRooms.findOneById(inquiry.rid, { projection: { v: 1 } });",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneById(await createLivechatInquiry({ rid, name, guest, message, extraData: { source } }));\n\t\tconst inquiry = await LivechatInquiry.findOneById(await createLivechatInquiry({ rid, name, guest, message, extraData: { source } }));",
            "oldInquiry": "\t\tconst oldInquiry = await LivechatInquiry.findOneByRoomId<Pick<ILivechatInquiryRecord, '_id'>>(rid, { projection: { _id: 1 } });\n\t\tconst oldInquiry = await LivechatInquiry.findOneByRoomId<Pick<ILivechatInquiryRecord, '_id'>>(rid, { projection: { _id: 1 } });",
            "guest": "\t\tconst guest = {\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),"
        },
        "depth_rank": 10
    },
    {
        "file": "RoutingManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/RoutingManager.ts",
        "code": {
            "logger": "const logger = new Logger('RoutingManager');\nconst logger = new Logger('RoutingManager');\n\ntype Routing = {\n\tmethodName: string | null;\n\tmethods: Record<string, IRoutingMethod>;\n\tstartQueue(): void;\n\tisMethodSet(): boolean;\n\tsetMethodNameAndStartQueue(name: string): Promise<void>;\n\tregisterMethod(name: string, Method: IRoutingMethodConstructor): void;\n\tgetMethod(): IRoutingMethod;\n\tgetConfig(): RoutingMethodConfig | undefined;\n\tgetNextAgent(department?: string, ignoreAgentId?: string): Promise<SelectedAgent | null | undefined>;\n\tdelegateInquiry(\n\t\tinquiry: InquiryWithAgentInfo,\n\t\tagent?: SelectedAgent | null,\n\t\toptions?: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },"
        },
        "depth_rank": 10
    },
    {
        "file": "LivechatTyped.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/LivechatTyped.ts",
        "code": {
            "agentIds": "\t\t\tconst agentIds = await departmentAgents.map(({ agentId }) => agentId).toArray();\n\t\t\tconst agentIds = await departmentAgents.map(({ agentId }) => agentId).toArray();",
            "now": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy, transcriptRequest } = room;\n\t\tconst { _id: rid, servedBy, transcriptRequest } = room;",
            "dep": "\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { email: 1 } });\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { email: 1 } });",
            "visitor": "\t\tconst visitor = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst visitor = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });",
            "closingMessage": "\t\tconst showAgentInfo = settings.get<boolean>('Livechat_show_agent_info');\n\t\tconst showAgentInfo = settings.get<boolean>('Livechat_show_agent_info');\n\t\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });\n\t\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });",
            "messages": "\t\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\t\trid,\n\t\t\tignoredMessageTypes,\n\t\t\tclosingMessage?.ts ? new Date(closingMessage.ts) : new Date(),\n\t\t\t{\n\t\t\t\tsort: { ts: 1 },",
            "mailSubject": "\t\tconst mailSubject = subject || i18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\t\tconst mailSubject = subject || i18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });",
            "cat": "\t\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });\n\t\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });",
            "user": "\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });",
            "userData": "\t\t\tconst userData = {\n\t\t\tconst userData = {\n\t\t\t\tusername,\n\t\t\t\tstatus,\n\t\t\t\tts: new Date(),\n\t\t\t\ttoken,\n\t\t\t\t...(id && { _id: id }),",
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'enabled'>>(_id, { projection: { enabled: 1 } });\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'enabled'>>(_id, { projection: { enabled: 1 } });",
            "webhookUrl": "\t\tconst timeout = settings.get<number>('Livechat_http_timeout');\n\t\tconst timeout = settings.get<number>('Livechat_http_timeout');\n\t\tconst secretToken = settings.get<string>('Livechat_secret_token');\n\t\tconst secretToken = settings.get<string>('Livechat_secret_token');\n\t\tconst webhookUrl = settings.get<string>('Livechat_webhookUrl');\n\t\tconst webhookUrl = settings.get<string>('Livechat_webhookUrl');\n\t\ttry {\n\t\t\tLivechat.webhookLogger.debug({ msg: 'Sending webhook request', postData });",
            "room": "\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, open: 1, transcriptRequest: 1 } });\n\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, open: 1, transcriptRequest: 1 } });",
            "originalMessage": "\t\tconst originalMessage = await Messages.findOneById<Pick<IMessage, 'u' | '_id'>>(message._id, { projection: { u: 1 } });\n\t\tconst originalMessage = await Messages.findOneById<Pick<IMessage, 'u' | '_id'>>(message._id, { projection: { u: 1 } });",
            "openChats": "\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst promises: Promise<void>[] = [];\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait openChats.forEach((room) => {\n\t\t\tpromises.push(this.closeRoom({ user, room, comment }));",
            "transferredBy": "\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);",
            "guest": "\t\tconst guest = await LivechatVisitors.findOneEnabledById(_id, { projection: { _id: 1, token: 1 } });\n\t\tconst guest = await LivechatVisitors.findOneEnabledById(_id, { projection: { _id: 1, token: 1 } });",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOne({ rid: room._id });\n\t\tconst inquiry = await LivechatInquiry.findOne({ rid: room._id });",
            "transferData": "\t\tconst transferData = { roomId: room._id, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };\n\t\tconst transferData = { roomId: room._id, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };",
            "transfer": "\t\tconst transfer = {\n\t\tconst transfer = {\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),",
            "transferMessage": "\t\tconst type = 'livechat_transfer_history';\n\t\tconst type = 'livechat_transfer_history';\n\t\tconst transferMessage = {\n\t\tconst transferMessage = {\n\t\t\tt: type,\n\t\t\trid: room._id,\n\t\t\tts: new Date(),\n\t\t\tmsg: '',\n\t\t\tu: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t},\n\t\t\tgroupable: false,\n\t\t};\n\n\t\tObject.assign(transferMessage, transfer);\n\n\t\tawait sendMessage(transferredBy, transferMessage, room);\n\t}\n\n\tasync saveGuest(guestData: Pick<ILivechatVisitor, '_id' | 'name' | 'livechatData'> & { email?: string; phone?: string }, userId: string) {\n\t\tconst { _id, name, email, phone, livechatData = {} } = guestData;\n\t\tconst { _id, name, email, phone, livechatData = {} } = guestData;",
            "pageUrl": "\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst extraData: {\n\t\tconst extraData: {\n\t\t\tnavigation: {\n\t\t\t\tpage: PageInfo;\n\t\t\t\ttoken: string;\n\t\t\t};\n\t\t\texpireAt?: number;\n\t\t\t_hidden?: boolean;\n\t\t} = {",
            "customFields": "\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\t...(customFields && { customFields }),"
        },
        "depth_rank": 10
    },
    {
        "file": "Contacts.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/Contacts.ts",
        "code": {
            "user": "\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });",
            "fieldsToRemove": "\t\tconst fieldsToRemove = {\n\t\tconst fieldsToRemove = {\n\t\t\t// if field is explicitely set to empty string, remove\n\t\t\t...(phone === '' && { phone: 1 }),",
            "await": "\t\t\tfor await (const room of rooms) {\n\t\t\tfor await (const room of rooms) {\n\t\t\t\tconst { _id: rid } = room;\n\t\t\t\tconst { _id: rid } = room;"
        },
        "depth_rank": 10
    },
    {
        "file": "External.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/routing/External.ts",
        "code": {
            "result": "\t\t\tconst result = (await request.json()) as { username?: string };\n\t\t\tconst result = (await request.json()) as { username?: string };"
        },
        "depth_rank": 11
    },
    {
        "file": "agents.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/agents.ts",
        "code": {
            "total": "\tconst total = await LivechatRooms.findAllServiceTimeByAgent({\n\tconst total = await LivechatRooms.findAllServiceTimeByAgent({\n\t\tstart,\n\t\tend,\n\t\tonlyCount: true,\n\t}).toArray();\n\treturn {\n\t\tagents: await LivechatRooms.findAllServiceTimeByAgent({ start, end, options }).toArray(),"
        },
        "depth_rank": 11
    },
    {
        "file": "dashboards.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/dashboards.ts",
        "code": {
            "getProductivityMetricsAsync": "const getProductivityMetricsAsync = async ({\nconst getProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {",
            "totalOfAvarageWaitingTime": "\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],",
            "getAgentsProductivityMetricsAsync": "const getAgentsProductivityMetricsAsync = async ({\nconst getAgentsProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {",
            "totalOfAverageServiceTime": "\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metric.title === 'Busiest_time'),",
            "totalOfAverageChatDurationTime": "\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },",
            "getConversationsMetricsAsync": "const getConversationsMetricsAsync = async ({\nconst getConversationsMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId,\n\tuser,\n}: {",
            "visitorsCount": "\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.getVisitorsBetweenDate({\n\tconst visitorsCount = await LivechatVisitors.getVisitorsBetweenDate({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartment: departmentId,\n\t}).count();\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metrics.includes(metric.title)),",
            "findAllChatMetricsByAgentAsync": "const findAllChatMetricsByAgentAsync = async ({\nconst findAllChatMetricsByAgentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {",
            "onhold": "\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};",
            "findAllAgentsStatusAsync": "const findAllAgentsStatusAsync = async ({ departmentId = undefined }: { departmentId?: string }) =>\nconst findAllAgentsStatusAsync = async ({ departmentId = undefined }: { departmentId?: string }) =>",
            "findAllChatMetricsByDepartmentAsync": "const findAllChatMetricsByDepartmentAsync = async ({\nconst findAllChatMetricsByDepartmentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {",
            "closed": "\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result: Record<string, { open: number; closed: number }> = {};\n\tconst result: Record<string, { open: number; closed: number }> = {};",
            "findAllResponseTimeMetricsAsync": "const findAllResponseTimeMetricsAsync = async ({\nconst findAllResponseTimeMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {",
            "responseTimes": "\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];",
            "reactionTimes": "\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];",
            "durationTimings": "\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];"
        },
        "depth_rank": 11
    },
    {
        "file": "departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/departments.ts",
        "code": {
            "total": "\tconst total = await (\n\tconst total = await (\n\t\tawait LivechatRooms.findPercentageOfAbandonedRooms({\n\t\t\tstart,\n\t\t\tend,\n\t\t\tdepartmentId,\n\t\t\tonlyCount: true,\n\t\t})\n\t).toArray();\n\treturn {\n\t\tdepartments: await (await LivechatRooms.findPercentageOfAbandonedRooms({ start, end, departmentId, options })).toArray(),"
        },
        "depth_rank": 11
    },
    {
        "file": "integrations.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/integrations.ts",
        "code": {
            "settings": "\tconst settings = await Settings.findByIds([\n\tconst settings = await Settings.findByIds([\n\t\t'Livechat_webhookUrl',\n\t\t'Livechat_secret_token',\n\t\t'Livechat_http_timeout',\n\t\t'Livechat_webhook_on_start',\n\t\t'Livechat_webhook_on_close',\n\t\t'Livechat_webhook_on_chat_taken',\n\t\t'Livechat_webhook_on_chat_queued',\n\t\t'Livechat_webhook_on_forward',\n\t\t'Livechat_webhook_on_offline_msg',\n\t\t'Livechat_webhook_on_visitor_message',\n\t\t'Livechat_webhook_on_agent_message',\n\t]).toArray();\n\n\treturn { settings };"
        },
        "depth_rank": 11
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/users.ts",
        "code": {
            "function": "async function findUsers({\nasync function findUsers({\n\trole,\n\ttext,\n\tonlyAvailable = false,\n\texcludeId,\n\tshowIdleAgents = true,\n\tpagination: { offset, count, sort },"
        },
        "depth_rank": 11
    },
    {
        "file": "visitors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/visitors.ts",
        "code": {
            "allowedCF": "\tconst allowedCF = await LivechatCustomField.findMatchingCustomFields('visitor', true, { projection: { _id: 1 } })\n\tconst allowedCF = await LivechatCustomField.findMatchingCustomFields('visitor', true, { projection: { _id: 1 } })"
        },
        "depth_rank": 11
    },
    {
        "file": "inquiries.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/inquiries.ts",
        "code": {
            "agentDepartments": "const agentDepartments = async (userId: IUser['_id']): Promise<string[]> => {\nconst agentDepartments = async (userId: IUser['_id']): Promise<string[]> => {\n\tconst agentDepartments = (await LivechatDepartmentAgents.findByAgentId(userId, { projection: { departmentId: 1 } }).toArray()).map(\n\tconst agentDepartments = (await LivechatDepartmentAgents.findByAgentId(userId, { projection: { departmentId: 1 } }).toArray()).map(",
            "options": "\tconst defaultSort = getOmniChatSortQuery(getInquirySortMechanismSetting());\n\tconst defaultSort = getOmniChatSortQuery(getInquirySortMechanismSetting());\n\tconst options = {\n\tconst options = {\n\t\tlimit: count,\n\t\tskip: offset,\n\t\tsort: { ...sort, ...defaultSort },"
        },
        "depth_rank": 11
    },
    {
        "file": "departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/departments.ts",
        "code": {
            "departments": "\tconst departments = await LivechatDepartment.findInIds(ids, { projection: fields }).toArray();\n\tconst departments = await LivechatDepartment.findInIds(ids, { projection: fields }).toArray();"
        },
        "depth_rank": 11
    },
    {
        "file": "livechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/livechat.ts",
        "code": {
            "httpHeaders": "\tconst httpHeaders = Object.assign({}, headers);\n\tconst httpHeaders = Object.assign({}, headers);"
        },
        "depth_rank": 11
    },
    {
        "file": "transfer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/transfer.ts",
        "code": {
            "normalizeTransferHistory": "const normalizeTransferHistory = ({ transferData }: IOmnichannelSystemMessage): IOmnichannelSystemMessage['transferData'] => transferData;\nconst normalizeTransferHistory = ({ transferData }: IOmnichannelSystemMessage): IOmnichannelSystemMessage['transferData'] => transferData;"
        },
        "depth_rank": 11
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/lib/rooms.ts",
        "code": {
            "departments": "\tconst departmentsIds = [...new Set(rooms.map((room) => room.departmentId).filter(isRoomWithDepartmentId))];\n\tconst departmentsIds = [...new Set(rooms.map((room) => room.departmentId).filter(isRoomWithDepartmentId))];\n\tif (departmentsIds.length) {\n\t\tconst departments = await LivechatDepartment.findInIds(departmentsIds, {\n\t\tconst departments = await LivechatDepartment.findInIds(departmentsIds, {\n\t\t\tprojection: { name: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "agent.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/agent.ts",
        "code": {
            "room": "\t\t\tconst room = await findOpenRoom(token);\n\t\t\tconst room = await findOpenRoom(token);\n\t\t\tif (room) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlet { department } = this.queryParams;"
        },
        "depth_rank": 11
    },
    {
        "file": "contact.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/contact.ts",
        "code": {
            "contact": "\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\treturn API.v1.success({ contact });",
            "customFields": "\t\t\t\tconst cfIds = Object.keys(customCF);\n\t\t\t\tconst cfIds = Object.keys(customCF);\n\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/statistics.ts",
        "code": {
            "user": "\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1, utcOffset: 1 } });\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1, utcOffset: 1 } });",
            "language": "\t\t\tconst language = user?.language || settings.get('Language') || 'en';\n\t\t\tconst language = user?.language || settings.get('Language') || 'en';\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait getAnalyticsOverviewDataCached({\n\t\t\t\t\tdepartmentId,\n\t\t\t\t\tutcOffset: user?.utcOffset || 0,\n\t\t\t\t\tdaterange: { from, to },"
        },
        "depth_rank": 11
    },
    {
        "file": "config.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/config.ts",
        "code": {
            "cachedSettings": "const cachedSettings = mem(settings, { maxAge: process.env.TEST_MODE === 'true' ? 1 : 1000, cacheKey: JSON.stringify });\nconst cachedSettings = mem(settings, { maxAge: process.env.TEST_MODE === 'true' ? 1 : 1000, cacheKey: JSON.stringify });",
            "config": "\t\t\tconst config = await cachedSettings({ businessUnit });\n\t\t\tconst config = await cachedSettings({ businessUnit });",
            "extra": "\t\t\tconst status = await Livechat.online(department);\n\t\t\tconst status = await Livechat.online(department);\n\t\t\tconst guest = token ? await Livechat.findGuest(token) : null;\n\t\t\tconst guest = token ? await Livechat.findGuest(token) : null;\n\n\t\t\tconst room = guest ? await findOpenRoom(guest.token) : undefined;\n\t\t\tconst room = guest ? await findOpenRoom(guest.token) : undefined;\n\t\t\tconst agent = guest && room && room.servedBy && (await findAgent(room.servedBy._id));\n\t\t\tconst agent = guest && room && room.servedBy && (await findAgent(room.servedBy._id));\n\n\t\t\tconst extra = await getExtraConfigInfo(room);\n\t\t\tconst extra = await getExtraConfigInfo(room);\n\t\t\treturn API.v1.success({\n\t\t\t\tconfig: { ...config, online: status, ...extra, ...(guest && { guest }), ...(room && { room }), ...(agent && { agent }) },"
        },
        "depth_rank": 11
    },
    {
        "file": "transcript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/transcript.ts",
        "code": {
            "room": "\t\t\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, 'open' | 'transcriptRequest' | 'v'>>(rid, {\n\t\t\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, 'open' | 'transcriptRequest' | 'v'>>(rid, {\n\t\t\t\tprojection: { open: 1, transcriptRequest: 1, v: 1 },",
            "user": "\t\t\tconst user = await Users.findOneById(this.userId, {\n\t\t\tconst user = await Users.findOneById(this.userId, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1, utcOffset: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "room.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/room.ts",
        "code": {
            "extraCheckParams": "\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\t\ttoken: String,\n\t\t\trid: Match.Maybe(String),\n\t\t\tagentId: Match.Maybe(String),\n\t\t});\n\n\t\tcheck(this.queryParams, extraCheckParams as any);\n\n\t\tconst { token, rid: roomId, agentId, ...extraParams } = this.queryParams;\n\t\tconst { token, rid: roomId, agentId, ...extraParams } = this.queryParams;",
            "agentObj": "\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\tif (agentObj) {\n\t\t\t\tif (isAgentWithInfo(agentObj)) {\n\t\t\t\t\tconst { username = undefined } = agentObj;\n\t\t\t\t\tconst { username = undefined } = agentObj;",
            "newRoom": "\t\t\tconst rid = Random.id();\n\t\t\tconst rid = Random.id();\n\t\t\tconst roomInfo = {\n\t\t\tconst roomInfo = {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst newRoom = await getRoom({ guest, rid, agent, roomInfo, extraParams });\n\t\t\tconst newRoom = await getRoom({ guest, rid, agent, roomInfo, extraParams });",
            "froom": "\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});\n\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(roomId, token, {});",
            "comment": "\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });",
            "t": "\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\t\t\t\t\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "subject": "\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\n\t\t\t\t\toptions.emailTranscript = {\n\t\t\t\t\t\tsendToVisitor: true,\n\t\t\t\t\t\trequestData: {\n\t\t\t\t\t\t\temail: visitorEmail,\n\t\t\t\t\t\t\trequestedAt: new Date(),\n\t\t\t\t\t\t\trequestedBy: servingAgent,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait LivechatTyped.closeRoom({ visitor, room, comment, options });",
            "subscription": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, this.userId, { projection: { _id: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, this.userId, { projection: { _id: 1 } });",
            "transferredBy": "\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);",
            "transferData": "\t\t\tconst transferData = this.bodyParams as typeof this.bodyParams & {\n\t\t\tconst transferData = this.bodyParams as typeof this.bodyParams & {\n\t\t\t\ttransferredBy: TransferByData;\n\t\t\t\ttransferredTo?: { _id: string; username?: string; name?: string };",
            "room": "\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, v: 1 } }); // TODO: check _id\n\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, v: 1 } }); // TODO: check _id"
        },
        "depth_rank": 11
    },
    {
        "file": "videoCall.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/videoCall.ts",
        "code": {
            "room": "\t\t\tconst room = await canSendMessageAsync(\n\t\t\tconst room = await canSendMessageAsync(\n\t\t\t\trid,\n\t\t\t\t{\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tusername: this.user.username,\n\t\t\t\t\ttype: this.user.type,\n\t\t\t\t},\n\t\t\t\t{},",
            "videoCall": "\t\t\tconst videoCall = {\n\t\t\tconst videoCall = {\n\t\t\t\trid: room._id,\n\t\t\t\tprovider: 'webrtc',\n\t\t\t\tcallStatus,\n\t\t\t};\n\t\t\treturn API.v1.success({ videoCall });"
        },
        "depth_rank": 11
    },
    {
        "file": "webhooks.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/webhooks.ts",
        "code": {
            "response": "\t\t\t\tconst request = await fetch(webhookUrl, options);\n\t\t\t\tconst request = await fetch(webhookUrl, options);\n\t\t\t\tconst response = await request.text();\n\t\t\t\tconst response = await request.text();\n\n\t\t\t\tlogger.debug({ response });"
        },
        "depth_rank": 11
    },
    {
        "file": "message.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/message.ts",
        "code": {
            "result": "\t\t\tconst result = await LivechatTyped.deleteMessage({ guest, message });\n\t\t\tconst result = await LivechatTyped.deleteMessage({ guest, message });",
            "messages": "\t\t\tconst history = await loadMessageHistory({\n\t\t\tconst history = await loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\toffset,\n\t\t\t});\n\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\n\t\t\treturn API.v1.success({ messages });",
            "visitorToken": "\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\n\t\t\tlet visitor = await LivechatVisitors.getVisitorByToken(visitorToken, {});",
            "rooms": "\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();"
        },
        "depth_rank": 11
    },
    {
        "file": "transfer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/transfer.ts",
        "code": {
            "room": "\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });\n\t\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });"
        },
        "depth_rank": 11
    },
    {
        "file": "visitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/visitor.ts",
        "code": {
            "guest": "\t\tconst guest = {\n\t\tconst guest = {\n\t\t\ttoken,\n\t\t\t...(id && { id }),",
            "visitorId": "\t\tconst visitorId = await LivechatTyped.registerGuest(guest);\n\t\tconst visitorId = await LivechatTyped.registerGuest(guest);\n\n\t\tlet visitor: ILivechatVisitor | null = await VisitorsRaw.findOneEnabledById(visitorId, {});",
            "rooms": "\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\t\tthis.urlParams.token,\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\tcl: 1,\n\t\t\t\t\t\tu: 1,\n\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\tservedBy: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\textraQuery,\n\t\t\t).toArray();\n\t\t\treturn API.v1.success({ rooms });",
            "visitor": "\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});"
        },
        "depth_rank": 11
    },
    {
        "file": "customField.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/customField.ts",
        "code": {
            "fields": "\t\t\tconst fields = await Promise.all(\n\t\t\tconst fields = await Promise.all(\n\t\t\t\tthis.bodyParams.customFields.map(\n\t\t\t\t\tasync (customField: {\n\t\t\t\t\t\tkey: string;\n\t\t\t\t\t\tvalue: string;\n\t\t\t\t\t\toverwrite: boolean;\n\t\t\t\t\t}): Promise<{ Key: string; value: string; overwrite: boolean }> => {",
            "data": "\t\t\t\t\t\tconst data = Object.assign({ token }, customField);\n\t\t\t\t\t\tconst data = Object.assign({ token }, customField);"
        },
        "depth_rank": 11
    },
    {
        "file": "LivechatAgentActivityMonitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/statistics/LivechatAgentActivityMonitor.ts",
        "code": {
            "data": "\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };",
            "availableTime": "\t\tconst stoppedAt = new Date();\n\t\tconst stoppedAt = new Date();\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\n\t\tawait LivechatAgentActivity.updateLastStoppedAt({\n\t\t\tagentId,\n\t\t\tdate,\n\t\t\tavailableTime,\n\t\t\tlastStoppedAt: stoppedAt,\n\t\t});\n\t\tawait LivechatAgentActivity.updateServiceHistory({\n\t\t\tagentId,\n\t\t\tdate,\n\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },"
        },
        "depth_rank": 10
    },
    {
        "file": "getAnalyticsChartData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/getAnalyticsChartData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1, utcOffset: 1 } });\n\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1, utcOffset: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getAgentOverviewData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/getAgentOverviewData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1 } });\n\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getAnalyticsOverviewData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/getAnalyticsOverviewData.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1, language: 1 } });\n\t\tconst user = await Users.findOneById(uid, { projection: { _id: 1, utcOffset: 1, language: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "saveInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/saveInfo.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ _id: userId }, { projection: { _id: 1, username: 1 } });\n\t\tconst user = await Users.findOne({ _id: userId }, { projection: { _id: 1, username: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "webhookTest.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/webhookTest.ts",
        "code": {
            "postCatchError": "const postCatchError = async function (url: string, options?: Record<string, any> | undefined) {\nconst postCatchError = async function (url: string, options?: Record<string, any> | undefined) {\n\ttry {\n\t\treturn fetch(url, { ...options, method: 'POST' });",
            "response": "\t\tconst response = await postCatchError(settings.get('Livechat_webhookUrl'), options);\n\t\tconst response = await postCatchError(settings.get('Livechat_webhookUrl'), options);\n\n\t\tSystemLogger.debug({ response: await response?.text() });"
        },
        "depth_rank": 10
    },
    {
        "file": "loadHistory.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/loadHistory.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });",
            "room": "\t\tconst room = await LivechatRooms.findOneByIdAndVisitorToken(rid, token, { projection: { _id: 1 } });\n\t\tconst room = await LivechatRooms.findOneByIdAndVisitorToken(rid, token, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "searchAgent.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/searchAgent.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByUsernameIgnoringCase<Pick<IUser, 'username' | '_id'>>(username, {\n\t\tconst user = await Users.findOneByUsernameIgnoringCase<Pick<IUser, 'username' | '_id'>>(username, {\n\t\t\tprojection: { _id: 1, username: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "sendTranscript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/sendTranscript.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(uid, {\n\t\tconst user = await Users.findOneById(uid, {\n\t\t\tprojection: { _id: 1, username: 1, name: 1, utcOffset: 1 },",
            "room": "\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { activity: 1 } });\n\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { activity: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getNextAgent.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/getNextAgent.ts",
        "code": {
            "room": "\t\tconst room = await LivechatRooms.findOpenByVisitorToken(token, {}, extraQuery).toArray();\n\t\tconst room = await LivechatRooms.findOpenByVisitorToken(token, {}, extraQuery).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "removeCustomField.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/removeCustomField.ts",
        "code": {
            "customField": "\t\tconst customField = await LivechatCustomField.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst customField = await LivechatCustomField.findOneById(_id, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "loginByToken.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/loginByToken.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "sendFileLivechatMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/sendFileLivechatMessage.ts",
        "code": {
            "msg": "\tconst msg = Object.assign(\n\tconst msg = Object.assign(\n\t\t{\n\t\t\t_id: Random.id(),\n\t\t\trid: roomId,\n\t\t\tts: new Date(),\n\t\t\tmsg: '',\n\t\t\tfile: {\n\t\t\t\t_id: file._id,\n\t\t\t\tname: file.name,\n\t\t\t\ttype: file.type,\n\t\t\t},\n\t\t\tfiles: [\n\t\t\t\t{\n\t\t\t\t\t_id: file._id,\n\t\t\t\t\tname: file.name,\n\t\t\t\t\ttype: file.type,\n\t\t\t\t},\n\t\t\t],\n\t\t\tgroupable: false,\n\t\t\tattachments: [attachment],\n\t\t\ttoken: visitorToken,\n\t\t},\n\t\tmsgData,\n\t);\n\n\treturn sendMessageLivechat({ message: msg });"
        },
        "depth_rank": 10
    },
    {
        "file": "takeInquiry.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/takeInquiry.ts",
        "code": {
            "agent": "\tconst agent = {\n\tconst agent = {\n\t\tagentId: user._id,\n\t\tusername: user.username,\n\t};\n\n\ttry {\n\t\tawait RoutingManager.takeInquiry(inquiry, agent, options);\n\t} catch (e: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "transfer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/transfer.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, uid, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, uid, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "requestTranscript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/methods/requestTranscript.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneById(userId, {\n\t\tconst user = await Users.findOneById(userId, {\n\t\t\tprojection: { _id: 1, username: 1, name: 1, utcOffset: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "Helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Helper.ts",
        "code": {
            "businessHoursToOpenIds": "\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tprojection: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tbusinessHourLogger.debug({ msg: 'Opening default business hours', businessHoursToOpenIds });"
        },
        "depth_rank": 10
    },
    {
        "file": "Single.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Single.ts",
        "code": {
            "businessHoursIds": "\t\tconst businessHoursIds = (\n\t\tconst businessHoursIds = (\n\t\t\tawait this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, LivechatBusinessHourTypes.DEFAULT, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "appearance.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/appearance.ts",
        "code": {
            "dbSettings": "\t\t\tconst dbSettings = await Settings.findByIds(validSettingList, { projection: { _id: 1, value: 1, type: 1 } })\n\t\t\tconst dbSettings = await Settings.findByIds(validSettingList, { projection: { _id: 1, value: 1, type: 1 } })",
            "setting": "\t\t\t\t\tconst setting = settings.find(({ _id }) => _id === dbSetting._id);\n\t\t\t\t\tconst setting = settings.find(({ _id }) => _id === dbSetting._id);"
        },
        "depth_rank": 11
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/users.ts",
        "code": {
            "user": "\t\t\t\tconst user = await Livechat.addManager(this.bodyParams.username);\n\t\t\t\tconst user = await Livechat.addManager(this.bodyParams.username);\n\t\t\t\tif (user) {\n\t\t\t\t\treturn API.v1.success({ user });"
        },
        "depth_rank": 11
    },
    {
        "file": "triggers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/triggers.ts",
        "code": {
            "triggers": "\t\t\tconst triggers = await findTriggers({\n\t\t\tconst triggers = await findTriggers({\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success(triggers);\n\t\t},\n\t\tasync post() {\n\t\t\tconst { _id, name, description, enabled, runOnce, conditions, actions } = this.bodyParams;\n\t\t\tconst { _id, name, description, enabled, runOnce, conditions, actions } = this.bodyParams;"
        },
        "depth_rank": 11
    },
    {
        "file": "visitors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/visitors.ts",
        "code": {
            "visitor": "\t\t\tconst visitor = await findVisitorInfo({ visitorId: this.queryParams.visitorId });\n\t\t\tconst visitor = await findVisitorInfo({ visitorId: this.queryParams.visitorId });"
        },
        "depth_rank": 11
    },
    {
        "file": "inquiries.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/inquiries.ts",
        "code": {
            "departmentFromDB": "\t\t\t\tconst departmentFromDB = await LivechatDepartment.findOneByIdOrName(department, { projection: { _id: 1 } });\n\t\t\t\tconst departmentFromDB = await LivechatDepartment.findOneByIdOrName(department, { projection: { _id: 1 } });"
        },
        "depth_rank": 11
    },
    {
        "file": "dashboards.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/dashboards.ts",
        "code": {
            "user": "\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });",
            "totalizers": "\t\t\tconst totalizers = await getProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\tconst totalizers = await getProductivityMetricsAsyncCached({ start, end, departmentId, user });",
            "result": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllResponseTimeMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\t\t\tconst result = await findAllResponseTimeMetricsAsyncCached({ start: startDate, end: endDate, departmentId });"
        },
        "depth_rank": 11
    },
    {
        "file": "upload.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/upload.ts",
        "code": {
            "visitor": "\t\tconst visitor = await LivechatVisitors.getVisitorByToken(visitorToken as string, {});\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(visitorToken as string, {});",
            "file": "\t\tconst maxFileSize = settings.get<number>('FileUpload_MaxFileSize') || 104857600;\n\t\tconst maxFileSize = settings.get<number>('FileUpload_MaxFileSize') || 104857600;\n\n\t\tconst file = await getUploadFormData(\n\t\tconst file = await getUploadFormData(\n\t\t\t{\n\t\t\t\trequest: this.request,\n\t\t\t},\n\t\t\t{ field: 'file', sizeLimit: maxFileSize },"
        },
        "depth_rank": 11
    },
    {
        "file": "sms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/sms.ts",
        "code": {
            "fileStore": "\tconst fileStore = FileUpload.getStore('Uploads');\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insert({ ...details, size: contentSize }, content);",
            "department": "\tconst department = await LivechatDepartment.findOneByIdOrName(idOrName, { projection: { _id: 1 } });\n\tconst department = await LivechatDepartment.findOneByIdOrName(idOrName, { projection: { _id: 1 } });",
            "normalizeLocationSharing": "\tconst id = await LivechatTyped.registerGuest(data);\n\tconst id = await LivechatTyped.registerGuest(data);\n\treturn LivechatVisitors.findOneEnabledById(id);\n};\n\nconst normalizeLocationSharing = (payload: ServiceData) => {\nconst normalizeLocationSharing = (payload: ServiceData) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;",
            "sms": "\t\tconst smsDepartment = settings.get<string>('SMS_Default_Omnichannel_Department');\n\t\tconst smsDepartment = settings.get<string>('SMS_Default_Omnichannel_Department');\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(this.urlParams.service);\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(this.urlParams.service);\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tconst { department } = this.queryParams;",
            "uploadedFile": "\t\t\tconst details = {\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name || 'file', type: uploadedFile.type };",
            "attachment": "\t\t\t\tconst attachment = {\n\t\t\t\tconst attachment = {\n\t\t\t\t\ttitle: 'Attachment upload failed',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tdescription: 'An attachment was received, but upload to server failed',\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: 'User upload failed',\n\t\t\t\t\t\t\tvalue: 'An attachment was received, but upload to server failed',\n\t\t\t\t\t\t\tshort: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcolor: 'yellow',\n\t\t\t\t};\n\n\t\t\t\tattachments.push(attachment);\n\t\t\t}\n\t\t}\n\n\t\tconst sendMessage: {\n\t\tconst sendMessage: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\tmessage: ILivechatMessage;\n\t\t\troomInfo: {\n\t\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t} = {",
            "msg": "\t\t\tconst msg = SMSService.response();\n\t\t\tconst msg = SMSService.response();\n\t\t\tsetImmediate(async () => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.toPhone) {\n\t\t\t\t\t\tawait Meteor.callAsync('livechat:setCustomField', sendMessage.message.token, 'phoneNumber', sms.extra.toPhone);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e: any) {"
        },
        "depth_rank": 11
    },
    {
        "file": "departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/departments.ts",
        "code": {
            "agents": "\t\t\tconst agents = this.bodyParams.agents ? { upsert: this.bodyParams.agents } : {};\n\t\t\tconst agents = this.bodyParams.agents ? { upsert: this.bodyParams.agents } : {};",
            "department": "\t\t\tconst department = await LivechatEnterprise.saveDepartment(null, this.bodyParams.department as ILivechatDepartment, agents);\n\t\t\tconst department = await LivechatEnterprise.saveDepartment(null, this.bodyParams.department as ILivechatDepartment, agents);\n\n\t\t\tif (department) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tdepartment,\n\t\t\t\t\tagents: await LivechatDepartmentAgents.find({ departmentId: department._id }).toArray(),",
            "agentParam": "\t\t\tconst agentParam = permissionToAddAgents && agents ? { upsert: agents } : {};\n\t\t\tconst agentParam = permissionToAddAgents && agents ? { upsert: agents } : {};",
            "isDepartmentCreationAvailable": "\t\t\tconst isDepartmentCreationAvailable = await LivechatEnterprise.isDepartmentCreationAvailable();\n\t\t\tconst isDepartmentCreationAvailable = await LivechatEnterprise.isDepartmentCreationAvailable();\n\t\t\treturn API.v1.success({ isDepartmentCreationAvailable });"
        },
        "depth_rank": 11
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/rooms.ts",
        "code": {
            "validateDateParams": "const validateDateParams = (property: string, date?: string) => {\nconst validateDateParams = (property: string, date?: string) => {\n\tlet parsedDate: { start?: string; end?: string } | undefined = undefined;",
            "isBoolean": "const isBoolean = (value?: string | boolean): boolean => value === 'true' || value === 'false' || typeof value === 'boolean';\nconst isBoolean = (value?: string | boolean): boolean => value === 'true' || value === 'false' || typeof value === 'boolean';\n\nAPI.v1.addRoute(\n\t'livechat/rooms',\n\t{ authRequired: true, validateParams: isGETLivechatRoomsParams },",
            "parsedCustomFields": "\t\t\t\t\tconst parsedCustomFields = JSON.parse(customFields) as { [key: string]: string };\n\t\t\t\t\tconst parsedCustomFields = JSON.parse(customFields) as { [key: string]: string };"
        },
        "depth_rank": 11
    },
    {
        "file": "chartHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/client/lib/chartHandler.ts",
        "code": {
            "lineChartConfiguration": "const lineChartConfiguration = ({\nconst lineChartConfiguration = ({\n\tlegends = false,\n\tanim = false,\n\ttooltipCallbacks = {},",
            "doughnutChartConfiguration": "const doughnutChartConfiguration = (\nconst doughnutChartConfiguration = (\n\ttitle: string,\n\ttooltipCallbacks = {},"
        },
        "depth_rank": 10
    },
    {
        "file": "queueManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/client/lib/stream/queueManager.ts",
        "code": {
            "invalidateRoomQueries": "const invalidateRoomQueries = async (rid: string) => {\nconst invalidateRoomQueries = async (rid: string) => {\n\tawait queryClient.invalidateQueries(['rooms', { reference: rid, type: 'l' }]);",
            "removeInquiry": "const removeInquiry = async (inquiry: ILivechatInquiryRecord) => {\nconst removeInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tawait LivechatInquiry.remove(inquiry._id);\n\treturn queryClient.invalidateQueries(['rooms', { reference: inquiry.rid, type: 'l' }]);",
            "count": "const getInquiriesFromAPI = async () => {\nconst getInquiriesFromAPI = async () => {\n\tconst count = settings.get('Livechat_guest_pool_max_number_incoming_livechats_displayed') ?? 0;\n\tconst count = settings.get('Livechat_guest_pool_max_number_incoming_livechats_displayed') ?? 0;\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', { count });\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', { count });",
            "updateInquiries": "const addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\nconst addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));",
            "inquiriesFromAPI": "\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst globalCleanup = addGlobalListener();\n\tconst globalCleanup = addGlobalListener();\n\n\tconst computation = Tracker.autorun(async () => {\n\tconst computation = Tracker.autorun(async () => {\n\t\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\t\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\n\t\tawait updateInquiries(inquiriesFromAPI);\n\t});\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});"
        },
        "depth_rank": 11
    },
    {
        "file": "notifyUnreadRooms.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/livechat/client/startup/notifyUnreadRooms.js",
        "code": {
            "user": "\t\tconst user = await Users.findOne(\n\t\tconst user = await Users.findOne(\n\t\t\t{ _id: Meteor.userId() },",
            "newRoomNotification": "\t\tconst newRoomNotification = getUserPreference(user, 'newRoomNotification');\n\t\tconst newRoomNotification = getUserPreference(user, 'newRoomNotification');\n\n\t\taudio = CustomSounds.play(newRoomNotification, { loop: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "README.md",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/README.md",
        "code": {
            "function": "\t}, function(error, result){\n\t}, function(error, result){"
        },
        "depth_rank": 8
    },
    {
        "file": "loginHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/loginHandler.ts",
        "code": {
            "loginResult": "\tconst loginResult = await SAML.retrieveCredential(loginRequest.credentialToken);\n\tconst loginResult = await SAML.retrieveCredential(loginRequest.credentialToken);\n\tSAMLUtils.log({ msg: 'RESULT', loginResult });",
            "updatedUser": "\t\tconst userObject = SAMLUtils.mapProfileToUserObject(loginResult.profile);\n\t\tconst userObject = SAMLUtils.mapProfileToUserObject(loginResult.profile);\n\t\tconst updatedUser = await SAML.insertOrUpdateSAMLUser(userObject);\n\t\tconst updatedUser = await SAML.insertOrUpdateSAMLUser(userObject);\n\t\tSAMLUtils.events.emit('updateCustomFields', loginResult, updatedUser);\n\n\t\treturn updatedUser;\n\t} catch (error: any) {"
        },
        "depth_rank": 9
    },
    {
        "file": "ServiceProvider.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/ServiceProvider.ts",
        "code": {
            "identifiedRequest": "\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\tconst identifiedRequest = AuthorizeRequest.generate(this.serviceProviderOptions);\n\t\treturn identifiedRequest.request;\n\t}\n\n\tpublic generateLogoutResponse({\n\t\tnameID,\n\t\tsessionIndex,\n\t\tinResponseToId,\n\t}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "SAML.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/SAML.ts",
        "code": {
            "data": "\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static async insertOrUpdateSAMLUser(userObject: ISAMLUser): Promise<{ userId: string; token: string }> {\n\t\tconst {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tconst query: Record<string, any> = {};",
            "emails": "\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = await SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;",
            "userId": "\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = await generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tif (i18n.languages?.includes(userObject.language)) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);\n\t\t\tconst userId = Accounts.insertUserDoc({}, newUser);",
            "serviceProvider": "\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tlet url: string | undefined;\n\n\t\ttry {\n\t\t\turl = await serviceProvider.getAuthorizeUrl();\n\t\t} catch (err: any) {",
            "loggedOutUsers": "\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait logOutUser(inResponseTo);\n\t\t\t} finally {",
            "url": "\t\t\t\tconst credentialToken = Random.id();\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken));\n\t\t\t\tconst url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken));\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {",
            "privRoom": "\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});",
            "room": "\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/settings.ts",
        "code": {
            "configureSamlService": "const configureSamlService = function (samlConfigs: Record<string, any>): IServiceProviderOptions {\nconst configureSamlService = function (samlConfigs: Record<string, any>): IServiceProviderOptions {\n\tlet privateCert = null;\n\tlet privateKey = null;\n\n\tif (samlConfigs.secret.privateKey && samlConfigs.secret.publicCert) {\n\t\tprivateKey = samlConfigs.secret.privateKey;\n\t\tprivateCert = samlConfigs.secret.publicCert;\n\t} else if (samlConfigs.secret.privateKey || samlConfigs.secret.publicCert) {"
        },
        "depth_rank": 10
    },
    {
        "file": "Utils.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/Utils.ts",
        "code": {
            "lines": "\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tconst lines = cert.match(/.{1,64}/g);",
            "xmlString": "\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\treturn resolve(successCallback(xmlString));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {",
            "fieldName": "\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\t\t\t\tconst { regex, template } = attribute;",
            "defaultTypes": "\t\t\tconst defaultTypes = ['email', 'username'];\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {",
            "match": "\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "Response.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/parsers/Response.ts",
        "code": {
            "nameID": "\t\tconst subject = this.getSubject(assertion);\n\t\tconst subject = this.getSubject(assertion);\n\t\tif (subject) {\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tconst nameID = subject.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'NameID')[0];\n\t\t\tif (nameID) {\n\t\t\t\tprofile.nameID = nameID.textContent;\n\n\t\t\t\tif (nameID.hasAttribute('Format')) {\n\t\t\t\t\tprofile.nameIDFormat = nameID.getAttribute('Format');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.validateSubjectConditions(subject);\n\t\t\t} catch (e) {",
            "attributeStatement": "\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tconst attributeStatement = assertion.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeStatement')[0];\n\t\tif (attributeStatement) {\n\t\t\tthis.mapAttributes(attributeStatement, profile);\n\t\t} else {",
            "options": "\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };\n\t\t\tconst options = { key: this.serviceProviderOptions.privateKey };",
            "values": "\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tconst values = attributes[i].getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:assertion', 'AttributeValue');\n\t\t\t\tlet value;\n\t\t\t\tif (values.length === 1) {\n\t\t\t\t\tvalue = values[0].textContent;\n\t\t\t\t} else {"
        },
        "depth_rank": 11
    },
    {
        "file": "LogoutRequest.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/parsers/LogoutRequest.ts",
        "code": {
            "id": "\t\t\tconst idpSession = sessionNode.childNodes[0].nodeValue;\n\t\t\tconst idpSession = sessionNode.childNodes[0].nodeValue;\n\t\t\tconst nameID = nameIdNode.childNodes[0].nodeValue;\n\t\t\tconst nameID = nameIdNode.childNodes[0].nodeValue;\n\t\t\tconst id = request.getAttribute('ID');\n\t\t\tconst id = request.getAttribute('ID');\n\n\t\t\treturn callback(null, { idpSession, nameID, id });"
        },
        "depth_rank": 11
    },
    {
        "file": "samlLogout.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/methods/samlLogout.ts",
        "code": {
            "providerConfig": "\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\t\tconst providerConfig = getSamlServiceProviderOptions(provider);\n\n\t\tSAMLUtils.log({ msg: 'Logout request', providerConfig });"
        },
        "depth_rank": 10
    },
    {
        "file": "Importer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer/server/classes/Importer.ts",
        "code": {
            "onErrorFn": "\t\tconst onErrorFn = async () => {\n\t\tconst onErrorFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\t\t};\n\n\t\tprocess.nextTick(async () => {\n\t\t\tawait this.backupSettingValues();\n\n\t\t\ttry {\n\t\t\t\tawait this.applySettingValues({});"
        },
        "depth_rank": 10
    },
    {
        "file": "ImportDataConverter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer/server/classes/ImportDataConverter.ts",
        "code": {
            "emailUser": "\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});",
            "await": "\t\tconst channels = await this.getChannelsToImport();\n\t\tconst channels = await this.getChannelsToImport();\n\t\tfor await (const record of channels) {\n\t\tfor await (const record of channels) {\n\t\t\tconst { data, _id } = record;\n\t\t\tconst { data, _id } = record;",
            "emails": "\t\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));\n\t\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));",
            "newIds": "\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });",
            "insertedUser": "\t\t\t\t\t\tconst insertedUser = await Users.findOneById(userId, {});\n\t\t\t\t\t\tconst insertedUser = await Users.findOneById(userId, {});",
            "room": "\t\t\tconst room = await Rooms.findOneById('GENERAL', {});\n\t\t\tconst room = await Rooms.findOneById('GENERAL', {});",
            "obj": "\t\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\t\tconst cache = this._userCache.get(user);\n\t\t\t\t\t\tif (cache) {\n\t\t\t\t\t\t\treturn cache.username;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst obj = await Users.findOneByImportId(user, { projection: { _id: 1, username: 1 } });\n\t\t\t\t\tconst obj = await Users.findOneByImportId(user, { projection: { _id: 1, username: 1 } });",
            "roomName": "\t\tconst roomName = await getValidRoomName(data.name.trim(), undefined, { allowDuplicates: true });\n\t\tconst roomName = await getValidRoomName(data.name.trim(), undefined, { allowDuplicates: true });",
            "existingRoom": "\t\t\t\tconst existingRoom = await this.findExistingRoom(data);\n\t\t\t\tconst existingRoom = await this.findExistingRoom(data);\n\n\t\t\t\tif (existingRoom) {\n\t\t\t\t\tawait this.updateRoom(existingRoom, data, startedByUserId);\n\t\t\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "getLatestImportOperations.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer/server/methods/getLatestImportOperations.ts",
        "code": {
            "data": "\tconst data = Imports.find(\n\tconst data = Imports.find(\n\t\t{},"
        },
        "depth_rank": 10
    },
    {
        "file": "downloadPublicImportFile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer/server/methods/downloadPublicImportFile.ts",
        "code": {
            "writeStream": "\tconst writeStream = RocketChatImportFileInstance.createWriteStream(newFileName);\n\tconst writeStream = RocketChatImportFileInstance.createWriteStream(newFileName);\n\n\twriteStream.on('error', () => {\n\t\tvoid instance.updateProgress(ProgressStep.ERROR);\n\t});\n\n\twriteStream.on('end', () => {\n\t\tvoid instance.updateProgress(ProgressStep.FILE_LOADED);\n\t});\n\n\tif (isUrl) {\n\t\tdownloadHttpFile(fileUrl, writeStream);\n\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "uploadImportFile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/importer/server/methods/uploadImportFile.ts",
        "code": {
            "writeStream": "\tconst file = Buffer.from(binaryContent, 'base64');\n\tconst file = Buffer.from(binaryContent, 'base64');\n\tconst readStream = RocketChatFile.bufferToStream(file);\n\tconst readStream = RocketChatFile.bufferToStream(file);\n\tconst writeStream = RocketChatImportFileInstance.createWriteStream(newFileName, contentType);\n\tconst writeStream = RocketChatImportFileInstance.createWriteStream(newFileName, contentType);\n\n\tawait new Promise<void>((resolve, reject) => {\n\t\ttry {\n\t\t\twriteStream.on('end', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\twriteStream.on('error', (e: Error) => {\n\t\t\t\treject(e);\n\t\t\t});\n\n\t\t\treadStream.pipe(writeStream);\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "findOrCreateInvite.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/invites/server/functions/findOrCreateInvite.ts",
        "code": {
            "getInviteUrl": "function getInviteUrl(invite: Omit<IInvite, '_updatedAt'>) {\nfunction getInviteUrl(invite: Omit<IInvite, '_updatedAt'>) {\n\tconst { _id } = invite;\n\tconst { _id } = invite;",
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(invite.rid, userId, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(invite.rid, userId, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "sendInvitationEmail.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/invites/server/functions/sendInvitationEmail.ts",
        "code": {
            "await": "\tfor await (const email of validEmails) {\n\tfor await (const email of validEmails) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: email,\n\t\t\t\tfrom: settings.get('From_Email'),\n\t\t\t\tsubject,\n\t\t\t\thtml,\n\t\t\t\tdata: {\n\t\t\t\t\temail,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait Settings.incrementValueById('Invitation_Email_Count');\n\t\t\tcontinue;\n\t\t} catch ({ message }: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "useInviteToken.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/invites/server/functions/useInviteToken.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 10
    },
    {
        "file": "generateEml.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/smarsh-connector/server/functions/generateEml.ts",
        "code": {
            "smarshHistory": "\t\tconst smarshMissingEmail = settings.get('Smarsh_MissingEmail_Email');\n\t\tconst smarshMissingEmail = settings.get('Smarsh_MissingEmail_Email');\n\t\tconst timeZone = settings.get<string>('Smarsh_Timezone');\n\t\tconst timeZone = settings.get<string>('Smarsh_Timezone');\n\n\t\t// TODO: revisit with more time => This appears to be a super expensive operation, going through all rooms\n\t\tfor await (const room of Rooms.find()) {\n\t\tfor await (const room of Rooms.find()) {\n\t\t\tconst smarshHistory = await SmarshHistory.findOne({ _id: room._id });\n\t\t\tconst smarshHistory = await SmarshHistory.findOne({ _id: room._id });",
            "date": "\t\t\tconst date = new Date();\n\t\t\tconst date = new Date();\n\t\t\tconst rows: string[] = [];\n\t\t\tconst rows: string[] = [];\n\t\t\tconst data: {\n\t\t\tconst data: {\n\t\t\t\tusers: string[];\n\t\t\t\tmsgs: number;\n\t\t\t\tfiles: string[];\n\t\t\t\ttime: number;\n\t\t\t\troom: string;\n\t\t\t} = {",
            "sender": "\t\t\t\tconst sender = await Users.findOne({ _id: message.u._id });\n\t\t\t\tconst sender = await Users.findOne({ _id: message.u._id });",
            "messageType": "\t\t\t\t\tconst messageType = MessageTypes.getType(message);\n\t\t\t\t\tconst messageType = MessageTypes.getType(message);\n\t\t\t\t\tif (messageType) {\n\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\ti18n.t(messageType.message, {\n\t\t\t\t\t\t\t\tlng: 'en',\n\t\t\t\t\t\t\t\treplace: messageType.data ? messageType.data(message) : {},"
        },
        "depth_rank": 10
    },
    {
        "file": "afterUnsetReaction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterUnsetReaction.js",
        "code": {
            "room": "async function afterUnsetReaction(message, { user, reaction }) {\nasync function afterUnsetReaction(message, { user, reaction }) {\n\tconst room = Rooms.findOneById(message.rid, { fields: { federation: 1 } });\n\tconst room = Rooms.findOneById(message.rid, { fields: { federation: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "afterRemoveFromRoom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterRemoveFromRoom.js",
        "code": {
            "function": "async function afterRemoveFromRoom(involvedUsers, room) {\nasync function afterRemoveFromRoom(involvedUsers, room) {\n\tconst { removedUser } = involvedUsers;\n\tconst { removedUser } = involvedUsers;",
            "removeUserEvent": "\t\tconst domainsAfterRemoval = [...new Set(users.map((u) => u.federation.origin))];\n\t\tconst domainsAfterRemoval = [...new Set(users.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Normalize the room's federation status\n\t\t//\n\t\tconst usersBeforeRemoval = users;\n\t\tconst usersBeforeRemoval = users;\n\t\tusersBeforeRemoval.push(removedUser);\n\n\t\t// Get the users domains\n\t\tconst domainsBeforeRemoval = [...new Set(usersBeforeRemoval.map((u) => u.federation.origin))];\n\t\tconst domainsBeforeRemoval = [...new Set(usersBeforeRemoval.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Create the user remove event\n\t\t//\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(removedUser);\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(removedUser);\n\n\t\tconst removeUserEvent = await FederationRoomEvents.createRemoveUserEvent(\n\t\tconst removeUserEvent = await FederationRoomEvents.createRemoveUserEvent(\n\t\t\tlocalDomain,\n\t\t\troom._id,\n\t\t\tnormalizedSourceUser,\n\t\t\tdomainsAfterRemoval,\n\t\t);\n\n\t\t// Dispatch the events\n\t\tdispatchEvent(domainsBeforeRemoval, removeUserEvent);\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "afterCreateDirectRoom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterCreateDirectRoom.js",
        "code": {
            "function": "async function afterCreateDirectRoom(room, extras) {\nasync function afterCreateDirectRoom(room, extras) {\n\tclientLogger.debug({ msg: 'afterCreateDirectRoom', room, extras });",
            "normalizedSourceSubscription": "\t\tconst normalizedRoom = normalizers.normalizeRoom(room);\n\t\tconst normalizedRoom = normalizers.normalizeRoom(room);\n\n\t\t// Ensure a genesis event for this room\n\t\tconst genesisEvent = await FederationRoomEvents.createGenesisEvent(getFederationDomain(), normalizedRoom);\n\t\tconst genesisEvent = await FederationRoomEvents.createGenesisEvent(getFederationDomain(), normalizedRoom);\n\n\t\tconst events = await Promise.all(\n\t\tconst events = await Promise.all(\n\t\t\textras.members.map(async (member) => {\n\t\t\t\tconst normalizedMember = await normalizers.normalizeUser(member);\n\t\t\t\tconst normalizedMember = await normalizers.normalizeUser(member);\n\n\t\t\t\tconst sourceSubscription = await Subscriptions.findOne({\n\t\t\t\tconst sourceSubscription = await Subscriptions.findOne({\n\t\t\t\t\t'rid': normalizedRoom._id,\n\t\t\t\t\t'u._id': normalizedMember._id,\n\t\t\t\t});\n\t\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(sourceSubscription);\n\t\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(sourceSubscription);\n\n\t\t\t\t// Build the user event\n\t\t\t\treturn FederationRoomEvents.createAddUserEvent(\n\t\t\t\t\tgetFederationDomain(),\n\t\t\t\t\tnormalizedRoom._id,\n\t\t\t\t\tnormalizedMember,\n\t\t\t\t\tnormalizedSourceSubscription,\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\t// Dispatch the events\n\t\tawait dispatchEvents(normalizedRoom.federation.domains, [genesisEvent, ...events]);\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "beforeDeleteRoom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/beforeDeleteRoom.js",
        "code": {
            "room": "async function beforeDeleteRoom(roomId) {\nasync function beforeDeleteRoom(roomId) {\n\tconst room = await Rooms.findOneById(roomId, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(roomId, { projection: { federation: 1 } });",
            "event": "\t\tconst event = await FederationRoomEvents.createDeleteRoomEvent(getFederationDomain(), room._id);\n\t\tconst event = await FederationRoomEvents.createDeleteRoomEvent(getFederationDomain(), room._id);\n\n\t\t// Dispatch event (async)\n\t\tdispatchEvent(room.federation.domains, event);\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "afterSetReaction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterSetReaction.js",
        "code": {
            "room": "async function afterSetReaction(message, { user, reaction }) {\nasync function afterSetReaction(message, { user, reaction }) {\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "afterAddedToRoom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterAddedToRoom.js",
        "code": {
            "function": "async function afterAddedToRoom(involvedUsers, room) {\nasync function afterAddedToRoom(involvedUsers, room) {\n\tconst { user: addedUser } = involvedUsers;\n\tconst { user: addedUser } = involvedUsers;",
            "addUserEvent": "\t\t\tconst normalizedSourceUser = await normalizers.normalizeUser(addedUser);\n\t\t\tconst normalizedSourceUser = await normalizers.normalizeUser(addedUser);\n\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n\t\t\tconst normalizedSourceSubscription = normalizers.normalizeSubscription(subscription);\n\n\t\t\tconst addUserEvent = await FederationRoomEvents.createAddUserEvent(\n\t\t\tconst addUserEvent = await FederationRoomEvents.createAddUserEvent(\n\t\t\t\tlocalDomain,\n\t\t\t\troom._id,\n\t\t\t\tnormalizedSourceUser,\n\t\t\t\tnormalizedSourceSubscription,\n\t\t\t\tdomainsAfterAdd,\n\t\t\t);\n\n\t\t\t// Dispatch the events\n\t\t\tdispatchEvent(domainsAfterAdd, addUserEvent);\n\t\t}\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "afterDeleteMessage.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterDeleteMessage.js",
        "code": {
            "room": "async function afterDeleteMessage(message) {\nasync function afterDeleteMessage(message) {\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });\n\tconst room = await Rooms.findOneById(message.rid, { projection: { federation: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "afterLeaveRoom.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/hooks/afterLeaveRoom.js",
        "code": {
            "userLeftEvent": "\t\tconst domainsAfterLeave = [...new Set(users.map((u) => u.federation.origin))];\n\t\tconst domainsAfterLeave = [...new Set(users.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Normalize the room's federation status\n\t\t//\n\t\tconst usersBeforeLeave = users;\n\t\tconst usersBeforeLeave = users;\n\t\tusersBeforeLeave.push(user);\n\n\t\t// Get the users domains\n\t\tconst domainsBeforeLeft = [...new Set(usersBeforeLeave.map((u) => u.federation.origin))];\n\t\tconst domainsBeforeLeft = [...new Set(usersBeforeLeave.map((u) => u.federation.origin))];\n\n\t\t//\n\t\t// Create the user left event\n\t\t//\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(user);\n\t\tconst normalizedSourceUser = await normalizers.normalizeUser(user);\n\n\t\tconst userLeftEvent = await FederationRoomEvents.createUserLeftEvent(localDomain, room._id, normalizedSourceUser, domainsAfterLeave);\n\t\tconst userLeftEvent = await FederationRoomEvents.createUserLeftEvent(localDomain, room._id, normalizedSourceUser, domainsAfterLeave);\n\n\t\t// Dispatch the events\n\t\tdispatchEvent(domainsBeforeLeft, userLeftEvent);\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/handler/index.js",
        "code": {
            "await": "\tconst uri = '/api/v1/federation.events.dispatch';\n\tconst uri = '/api/v1/federation.events.dispatch';\n\n\tfor await (const domain of domains) {\n\tfor await (const domain of domains) {\n\t\tawait federationRequestToPeer('POST', domain, uri, { events }, { ignoreErrors: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "uploads.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/endpoints/uploads.js",
        "code": {
            "buffer": "\t\t\tconst buffer = await FileUpload.getBuffer(upload);\n\t\t\tconst buffer = await FileUpload.getBuffer(upload);\n\n\t\t\treturn API.v1.success({ upload, buffer });"
        },
        "depth_rank": 10
    },
    {
        "file": "users.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/endpoints/users.js",
        "code": {
            "userFields": "const userFields = { _id: 1, username: 1, type: 1, emails: 1, name: 1 };\nconst userFields = { _id: 1, username: 1, type: 1, emails: 1, name: 1 };",
            "query": "\t\t\tconst query = {\n\t\t\tconst query = {\n\t\t\t\ttype: 'user',\n\t\t\t\tusername,\n\t\t\t};\n\n\t\t\tlet user = await Users.findOne(query, { projection: userFields });"
        },
        "depth_rank": 10
    },
    {
        "file": "dispatch.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/endpoints/dispatch.js",
        "code": {
            "eventResult": "\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t// Mute user\n\t\t\tawait Rooms.muteUsernameByRoomId(roomId, denormalizedUser.username);\n\t\t}\n\n\t\treturn eventResult;\n\t},\n\n\t//\n\t// ROOM_UNMUTE_USER\n\t//\n\tasync [eventTypes.ROOM_UNMUTE_USER](event) {\n\t\tconst eventResult = await FederationRoomEvents.addEvent(event.context, event);\n\t\tconst eventResult = await FederationRoomEvents.addEvent(event.context, event);\n\n\t\t// If the event was successfully added, handle the event locally\n\t\tif (eventResult.success) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tdata: { roomId, user },",
            "persistedRoom": "\t\tconst persistedRoom = await Rooms.findOne({ _id: roomId });\n\t\tconst persistedRoom = await Rooms.findOne({ _id: roomId });",
            "denormalizedRoom": "\t\t\t\t\t\tconst denormalizedRoom = normalizers.denormalizeRoom(room);\n\t\t\t\t\t\tconst denormalizedRoom = normalizers.denormalizeRoom(room);\n\n\t\t\t\t\t\t// Create the room\n\t\t\t\t\t\tawait Rooms.insertOne(denormalizedRoom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn eventResult;\n\t\t}\n\t},\n\n\t//\n\t// ROOM_DELETE\n\t//\n\tasync [eventTypes.ROOM_DELETE](event) {\n\t\tconst {\n\t\tconst {\n\t\t\tdata: { roomId },",
            "persistedUser": "\t\t\tconst persistedUser = await Users.findOne({ _id: user._id });\n\t\t\tconst persistedUser = await Users.findOne({ _id: user._id });",
            "persistedSubscription": "\t\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t\t// Create the user\n\t\t\t\tawait Users.insertOne(denormalizedUser);\n\t\t\t\tfederationAltered = true;\n\t\t\t}\n\n\t\t\t// Check if subscription exists\n\t\t\tconst persistedSubscription = await Subscriptions.findOne({ _id: subscription._id });\n\t\t\tconst persistedSubscription = await Subscriptions.findOne({ _id: subscription._id });",
            "denormalizedSubscription": "\t\t\t\t\tconst denormalizedSubscription = normalizers.denormalizeSubscription(subscription);\n\t\t\t\t\tconst denormalizedSubscription = normalizers.denormalizeSubscription(subscription);\n\n\t\t\t\t\t// Create the subscription\n\t\t\t\t\tawait Subscriptions.insertOne(denormalizedSubscription);\n\t\t\t\t\tfederationAltered = true;\n\t\t\t\t}\n\t\t\t} catch (ex) {",
            "persistedMessage": "\t\t\tconst persistedMessage = await Messages.findOne({ _id: messageId });\n\t\t\tconst persistedMessage = await Messages.findOne({ _id: messageId });",
            "fileStore": "\t\t\t\tconst room = await Rooms.findOneById(message.rid);\n\t\t\t\tconst room = await Rooms.findOneById(message.rid);\n\n\t\t\t\t// Denormalize message\n\t\t\t\tconst denormalizedMessage = normalizers.denormalizeMessage(message);\n\t\t\t\tconst denormalizedMessage = normalizers.denormalizeMessage(message);\n\n\t\t\t\t// Is there a file?\n\t\t\t\tif (denormalizedMessage.file) {\n\t\t\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\t\t\tconst {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tfederation: { origin },",
            "denormalizedUser": "\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\t\t\tconst denormalizedUser = normalizers.denormalizeUser(user);\n\n\t\t\t// Unmute user\n\t\t\tawait Rooms.unmuteMutedUsernameByRoomId(roomId, denormalizedUser.username);\n\t\t}\n\n\t\treturn eventResult;\n\t},\n};\n\nAPI.v1.addRoute(\n\t'federation.events.dispatch',\n\t{ authRequired: false, rateLimiterOptions: { numRequestsAllowed: 30, intervalTimeInMS: 1000 } },"
        },
        "depth_rank": 10
    },
    {
        "file": "dns.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/lib/dns.js",
        "code": {
            "memoizedDnsResolveSRV": "const dnsResolveSRV = util.promisify(dnsResolver.resolveSrv);\nconst dnsResolveSRV = util.promisify(dnsResolver.resolveSrv);\nconst dnsResolveTXT = util.promisify(dnsResolver.resolveTxt);\nconst dnsResolveTXT = util.promisify(dnsResolver.resolveTxt);\n\nconst cacheMaxAge = 3600000; // one hour\nconst cacheMaxAge = 3600000; // one hour\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, { maxAge: cacheMaxAge });\nconst memoizedDnsResolveSRV = mem(dnsResolveSRV, { maxAge: cacheMaxAge });",
            "memoizedDnsResolveTXT": "const memoizedDnsResolveTXT = mem(dnsResolveTXT, { maxAge: cacheMaxAge });\nconst memoizedDnsResolveTXT = mem(dnsResolveTXT, { maxAge: cacheMaxAge });",
            "body": "\tconst body = { domain: peerDomain, url, public_key: publicKey };\n\tconst body = { domain: peerDomain, url, public_key: publicKey };"
        },
        "depth_rank": 10
    },
    {
        "file": "crypt.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/lib/crypt.js",
        "code": {
            "payloadBuffer": "async function decrypt(data, peerKey) {\nasync function decrypt(data, peerKey) {\n\t//\n\t// Decrypt the payload\n\tconst payloadBuffer = Buffer.from(data);\n\tconst payloadBuffer = Buffer.from(data);\n\n\t// Decrypt with the peer's public key\n\ttry {\n\t\tdata = (await FederationKeys.loadKey(peerKey, 'public')).decryptPublic(payloadBuffer);\n\n\t\t// Decrypt with the local private key\n\t\tdata = (await FederationKeys.getPrivateKey()).decrypt(data);\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "http.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/lib/http.js",
        "code": {
            "ignoreErrors": "\tconst ignoreErrors = peerDomain === getFederationDomain() ? false : options.ignoreErrors;\n\tconst ignoreErrors = peerDomain === getFederationDomain() ? false : options.ignoreErrors;\n\n\tconst { url: baseUrl, publicKey } = search(peerDomain);\n\tconst { url: baseUrl, publicKey } = search(peerDomain);"
        },
        "depth_rank": 10
    },
    {
        "file": "dashboard.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/functions/dashboard.js",
        "code": {
            "numberOfServers": "\tconst numberOfEvents = await FederationRoomEvents.col.estimatedDocumentCount();\n\tconst numberOfEvents = await FederationRoomEvents.col.estimatedDocumentCount();\n\tconst numberOfFederatedUsers = await Users.countRemote();\n\tconst numberOfFederatedUsers = await Users.countRemote();\n\tconst numberOfServers = await FederationServers.col.estimatedDocumentCount();\n\tconst numberOfServers = await FederationServers.col.estimatedDocumentCount();\n\n\treturn { numberOfEvents, numberOfFederatedUsers, numberOfServers };"
        },
        "depth_rank": 10
    },
    {
        "file": "user.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/normalizers/user.js",
        "code": {
            "resource": "const denormalizeUser = (originalResource) => {\nconst denormalizeUser = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 10
    },
    {
        "file": "message.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/normalizers/message.js",
        "code": {
            "resource": "\t\tconst [username, domain] = getNameAndDomain(channel.name);\n\t\tconst [username, domain] = getNameAndDomain(channel.name);\n\n\t\tif (domain === localDomain) {\n\t\t\tconst originalUsername = channel.name;\n\t\t\tconst originalUsername = channel.name;\n\n\t\t\tchannel.name = username;\n\n\t\t\tresource.msg = resource.msg.split(originalUsername).join(username);\n\t\t}\n\t}\n\n\treturn resource;\n};\n\nconst denormalizeAllMessages = (resources) => resources.map(denormalizeMessage);\nconst denormalizeAllMessages = (resources) => resources.map(denormalizeMessage);\n\nconst normalizeMessage = (originalResource) => {\nconst normalizeMessage = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 10
    },
    {
        "file": "room.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/normalizers/room.js",
        "code": {
            "resource": "\t\tconst [roomName, roomDomain] = getNameAndDomain(resource.name);\n\t\tconst [roomName, roomDomain] = getNameAndDomain(resource.name);\n\n\t\tresource.name = roomDomain === getFederationDomain() ? roomName : resource.name;\n\n\t\t// Denormalize room owner name\n\t\tconst [username, userDomain] = getNameAndDomain(resource.u.username);\n\t\tconst [username, userDomain] = getNameAndDomain(resource.u.username);\n\n\t\tresource.u.username = userDomain === getFederationDomain() ? username : resource.u.username;\n\n\t\t// Denormalize muted users\n\t\tif (resource.muted) {\n\t\t\tresource.muted = resource.muted.map((u) => {\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\n\t\t\t\treturn domain === getFederationDomain() ? username : u;\n\t\t\t});\n\t\t}\n\n\t\t// Denormalize unmuted users\n\t\tif (resource.unmuted) {\n\t\t\tresource.unmuted = resource.unmuted.map((u) => {\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\t\t\t\tconst [username, domain] = getNameAndDomain(u);\n\n\t\t\t\treturn domain === getFederationDomain() ? username : u;\n\t\t\t});\n\t\t}\n\t}\n\n\treturn resource;\n};\n\nconst normalizeRoom = (originalResource, users) => {\nconst normalizeRoom = (originalResource, users) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 10
    },
    {
        "file": "subscription.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/federation/server/normalizers/subscription.js",
        "code": {
            "resource": "\tconst [username, domain] = getNameAndDomain(resource.u.username);\n\tconst [username, domain] = getNameAndDomain(resource.u.username);\n\n\tresource.u.username = domain === getFederationDomain() ? username : resource.u.username;\n\n\tconst [nameUsername, nameDomain] = getNameAndDomain(resource.name);\n\tconst [nameUsername, nameDomain] = getNameAndDomain(resource.name);\n\n\tresource.name = nameDomain === getFederationDomain() ? nameUsername : resource.name;\n\n\treturn resource;\n};\n\nconst denormalizeAllSubscriptions = (resources) => resources.map(denormalizeSubscription);\nconst denormalizeAllSubscriptions = (resources) => resources.map(denormalizeSubscription);\n\nconst normalizeSubscription = (originalResource) => {\nconst normalizeSubscription = (originalResource) => {\n\tconst resource = { ...originalResource };\n\tconst resource = { ...originalResource };"
        },
        "depth_rank": 10
    },
    {
        "file": "raw.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/settings/server/raw.ts",
        "code": {
            "setting": "const setFromDB = async (_id: string) => {\nconst setFromDB = async (_id: string) => {\n\tconst setting = await Settings.findOneById(_id, { projection: { value: 1 } });\n\tconst setting = await Settings.findOneById(_id, { projection: { value: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "SettingsRegistry.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/settings/server/SettingsRegistry.ts",
        "code": {
            "settingStoredOverwritten": "\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingStored = this.store.getSetting(_id);\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {",
            "options": "\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })",
            "mergedOptions": "\t\tconst groupSetWith =\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\tconst mergedOptions = { ...preset, ...options };"
        },
        "depth_rank": 9
    },
    {
        "file": "overrideGenerator.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/settings/server/functions/overrideGenerator.ts",
        "code": {
            "value": "\t\tconst overwriteValue = fn(setting._id);\n\t\tconst overwriteValue = fn(setting._id);\n\t\tif (overwriteValue === null || overwriteValue === undefined) {\n\t\t\treturn setting;\n\t\t}\n\n\t\ttry {\n\t\t\tconst value = convertValue(overwriteValue, setting.type);\n\t\t\tconst value = convertValue(overwriteValue, setting.type);\n\n\t\t\tif (compareSettingsValue(value, setting.value, setting.type)) {\n\t\t\t\treturn setting;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...setting,\n\t\t\t\tvalue,\n\t\t\t\tprocessEnvValue: value,\n\t\t\t\tvalueSource: 'processEnvValue',\n\t\t\t};\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "custom_oauth_server.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/custom-oauth/server/custom_oauth_server.js",
        "code": {
            "Services": "const logger = new Logger('CustomOAuth');\nconst logger = new Logger('CustomOAuth');\n\nconst Services = {};\nconst Services = {};",
            "config": "\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });\n\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });",
            "params": "\t\tconst params = {};\n\t\tconst params = {};",
            "response": "\t\t\tconst response = await request.json();\n\t\t\tconst response = await request.json();\n\n\t\t\tlogger.debug({ msg: 'Identity response', response });",
            "result": "\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tnormalizeIdentity(identity) {\n\t\tif (identity) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tif (result) {\n\t\t\t\t\tidentity = result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.usernameField) {\n\t\t\tidentity.username = this.getUsername(identity);\n\t\t}\n\n\t\tif (this.emailField) {\n\t\t\tidentity.email = this.getEmail(identity);\n\t\t}\n\n\t\tif (this.avatarField) {\n\t\t\tidentity.avatarUrl = this.getAvatarUrl(identity);\n\t\t}\n\n\t\tif (this.nameField) {\n\t\t\tidentity.name = this.getCustomName(identity);\n\t\t} else {",
            "fields": "\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\t_.extend(serviceData, fields);\n\n\t\t\treturn {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n}\n\nconst { updateOrCreateUserFromExternalService } = Accounts;\nconst { updateOrCreateUserFromExternalService } = Accounts;"
        },
        "depth_rank": 9
    },
    {
        "file": "CustomOAuth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/custom-oauth/client/CustomOAuth.ts",
        "code": {
            "credentialRequestCompleteCallback": "\t\tconst loginWithOAuthTokenAndTOTP = createOAuthTotpLoginMethod(this);\n\t\tconst loginWithOAuthTokenAndTOTP = createOAuthTotpLoginMethod(this);\n\n\t\tconst loginWithOAuthToken = async (options?: Meteor.LoginWithExternalServiceOptions, callback?: LoginCallback) => {\n\t\tconst loginWithOAuthToken = async (options?: Meteor.LoginWithExternalServiceOptions, callback?: LoginCallback) => {\n\t\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\t\tawait this.requestCredential(options, credentialRequestCompleteCallback);\n\t\t};\n\n\t\t(Meteor as any)[loginWithService] = (options: Meteor.LoginWithExternalServiceOptions, callback: LoginCallback) => {\n\t\t\toverrideLoginMethod(loginWithOAuthToken, [options], callback, loginWithOAuthTokenAndTOTP);\n\t\t};\n\t}\n\n\tasync requestCredential(\n\t\toptions: Meteor.LoginWithExternalServiceOptions = {},"
        },
        "depth_rank": 9
    },
    {
        "file": "insertOrUpdateEmoji.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/emoji-custom/server/methods/insertOrUpdateEmoji.ts",
        "code": {
            "await": "\t\t\tfor await (const alias of aliases) {\n\t\t\tfor await (const alias of aliases) {\n\t\t\t\tmatchingResults = matchingResults.concat(await EmojiCustom.findByNameOrAlias(alias).toArray());\n\t\t\t}\n\t\t}\n\n\t\tif (matchingResults.length > 0) {\n\t\t\tthrow new Meteor.Error(\n\t\t\t\t'Custom_Emoji_Error_Name_Or_Alias_Already_In_Use',\n\t\t\t\t'The custom emoji or one of its aliases is already in use',\n\t\t\t\t{ method: 'insertOrUpdateEmoji' },"
        },
        "depth_rank": 10
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/slashcommands-inviteall/server/server.ts",
        "code": {
            "cursor": "\t\tconst cursor = Subscriptions.findByRoomIdWhenUsernameExists(baseChannel._id, {\n\t\tconst cursor = Subscriptions.findByRoomIdWhenUsernameExists(baseChannel._id, {\n\t\t\tprojection: { 'u.username': 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "functions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/server/functions.ts",
        "code": {
            "await": "\tconst mentionedUsers = new Set<string>([...mentionIds, ...highlightedUserIds]);\n\tconst mentionedUsers = new Set<string>([...mentionIds, ...highlightedUserIds]);\n\tfor await (const userId of mentionedUsers) {\n\tfor await (const userId of mentionedUsers) {\n\t\tawait Subscriptions.addUnreadThreadByRoomIdAndUserIds(rid, [userId], tmid, { userMention: true });",
            "projection": "\tconst projection = { tunread: 1 };\n\tconst projection = { tunread: 1 };",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, { projection });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, { projection });"
        },
        "depth_rank": 9
    },
    {
        "file": "aftersavemessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/server/hooks/aftersavemessage.ts",
        "code": {
            "function": "async function notifyUsersOnReply(message: IMessage, replies: string[], room: IRoom) {\nasync function notifyUsersOnReply(message: IMessage, replies: string[], room: IRoom) {\n\t// skips this callback if the message was edited\n\tif (isEditedMessage(message)) {\n\t\treturn message;\n\t}\n\n\tawait updateThreadUsersSubscriptions(message, room, replies);\n\n\treturn message;\n}\n\nasync function metaData(message: IMessage, parentMessage: IMessage, followers: string[]) {\nasync function metaData(message: IMessage, parentMessage: IMessage, followers: string[]) {\n\tawait reply({ tmid: message.tmid }, message, parentMessage, followers);"
        },
        "depth_rank": 10
    },
    {
        "file": "followMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/server/methods/followMessage.ts",
        "code": {
            "followResult": "\t\tconst followResult = await follow({ tmid: message.tmid || message._id, uid });\n\t\tconst followResult = await follow({ tmid: message.tmid || message._id, uid });"
        },
        "depth_rank": 10
    },
    {
        "file": "getThreadMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/server/methods/getThreadMessages.ts",
        "code": {
            "result": "\t\tconst result = await Messages.findVisibleThreadByThreadId(tmid, {\n\t\tconst result = await Messages.findVisibleThreadByThreadId(tmid, {\n\t\t\t...(skip && { skip }),"
        },
        "depth_rank": 10
    },
    {
        "file": "unfollowMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/server/methods/unfollowMessage.ts",
        "code": {
            "unfollowResult": "\t\tconst unfollowResult = await unfollow({ rid: message.rid, tmid: message.tmid || message._id, uid });\n\t\tconst unfollowResult = await unfollow({ rid: message.rid, tmid: message.tmid || message._id, uid });"
        },
        "depth_rank": 10
    },
    {
        "file": "normalizeThreadTitle.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/client/lib/normalizeThreadTitle.ts",
        "code": {
            "me": "\t\tconst uid = Meteor.userId();\n\t\tconst uid = Meteor.userId();\n\t\tconst me = (uid && Users.findOne(uid, { fields: { username: 1 } })?.username) || '';\n\t\tconst me = (uid && Users.findOne(uid, { fields: { username: 1 } })?.username) || '';"
        },
        "depth_rank": 10
    },
    {
        "file": "unfollow.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/client/messageAction/unfollow.ts",
        "code": {
            "parentMessage": "\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });\n\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "follow.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/threads/client/messageAction/follow.ts",
        "code": {
            "parentMessage": "\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });\n\t\t\t\t\tconst parentMessage = Messages.findOne({ _id: tmid || _id }, { fields: { replies: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "getURL.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/lib/getURL.ts",
        "code": {
            "cloudParams": "\t\tconst cloudParams = cloud_params || {};\n\t\tconst cloudParams = cloud_params || {};"
        },
        "depth_rank": 9
    },
    {
        "file": "i18n.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/lib/i18n.ts",
        "code": {
            "all": "\tconst all = extractTranslationNamespaces(source);\n\tconst all = extractTranslationNamespaces(source);\n\treturn Array.isArray(namespaces)\n\t\t? (namespaces as TranslationNamespace[]).reduce((result, namespace) => ({ ...result, ...all[namespace] }), {})"
        },
        "depth_rank": 9
    },
    {
        "file": "JWTHelper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/server/lib/JWTHelper.ts",
        "code": {
            "header": "\tconst header = JSON.stringify(HEADER);\n\tconst header = JSON.stringify(HEADER);\n\n\treturn jsr.KJUR.jws.JWS.sign(HEADER.alg, header, JSON.stringify(tokenPayload), { rstr: secret });"
        },
        "depth_rank": 10
    },
    {
        "file": "getValidRoomName.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/server/lib/getValidRoomName.ts",
        "code": {
            "cleanName": "\t\tconst cleanName = limax(displayName, { maintainCase: true });\n\t\tconst cleanName = limax(displayName, { maintainCase: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "isDocker.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/server/functions/isDocker.ts",
        "code": {
            "hasDockerEnv": "function hasDockerEnv(): boolean {\nfunction hasDockerEnv(): boolean {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (err) {"
        },
        "depth_rank": 10
    },
    {
        "file": "normalizeMessageFileUpload.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/server/functions/normalizeMessageFileUpload.ts",
        "code": {
            "file": "\t\tconst jwt = FileUpload.generateJWTToFileUrls({\n\t\tconst jwt = FileUpload.generateJWTToFileUrls({\n\t\t\trid: message.rid,\n\t\t\tuserId: message.u._id,\n\t\t\tfileId: message.file._id,\n\t\t});\n\t\tconst file = await Uploads.findOne({ _id: message.file._id });\n\t\tconst file = await Uploads.findOne({ _id: message.file._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "getMongoInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/utils/server/functions/getMongoInfo.ts",
        "code": {
            "getOplogInfo": "function getOplogInfo(): { oplogEnabled: boolean; mongo: MongoConnection } {\nfunction getOplogInfo(): { oplogEnabled: boolean; mongo: MongoConnection } {\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();",
            "function": "async function fallbackMongoInfo(): Promise<{\nasync function fallbackMongoInfo(): Promise<{\n\toplogEnabled: boolean;\n\tmongoVersion: string;\n\tmongoStorageEngine?: string;\n\tmongo: MongoConnection;\n}> {"
        },
        "depth_rank": 10
    },
    {
        "file": "iframe_client.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/app/iframe-login/client/iframe_client.ts",
        "code": {
            "iframeLogin": "const iframeLogin = new IframeLogin();\nconst iframeLogin = new IframeLogin();\n\nconst { _unstoreLoginToken } = Accounts;\nconst { _unstoreLoginToken } = Accounts;"
        },
        "depth_rank": 9
    },
    {
        "file": "callbacksBase.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/lib/callbacks/callbacksBase.ts",
        "code": {
            "stopTracking": "\t\t\t\treturn (await this.runOne(callback, item, constant)) ?? item;\n\t\t\t\treturn (await this.runOne(callback, item, constant)) ?? item;\n\t\t\t};\n\n\t\tconst identity = <TItem>(item: TItem): Promise<TItem> => Promise.resolve(item);\n\t\tconst identity = <TItem>(item: TItem): Promise<TItem> => Promise.resolve(item);\n\n\t\tconst pipe =\n\t\tconst pipe =\n\t\t\t(curr: (item: unknown, constant?: unknown) => Promise<unknown>, next: (item: unknown, constant?: unknown) => Promise<unknown>) =>\n\t\t\t(curr: (item: unknown, constant?: unknown) => Promise<unknown>, next: (item: unknown, constant?: unknown) => Promise<unknown>) =>\n\t\t\tasync (item: unknown, constant?: unknown): Promise<unknown> =>\n\t\t\tasync (item: unknown, constant?: unknown): Promise<unknown> =>\n\t\t\t\tnext(await curr(item, constant), constant);\n\t\t\t\tnext(await curr(item, constant), constant);\n\n\t\tconst fn = callbacks.map(wrapCallback).reduce(pipe, identity);\n\t\tconst fn = callbacks.map(wrapCallback).reduce(pipe, identity);\n\n\t\treturn async (item: unknown, constant?: unknown): Promise<unknown> => {\n\t\treturn async (item: unknown, constant?: unknown): Promise<unknown> => {\n\t\t\tconst stopTracking = this.trackHook?.({ hook, length: callbacks.length });\n\t\t\tconst stopTracking = this.trackHook?.({ hook, length: callbacks.length });"
        },
        "depth_rank": 8
    },
    {
        "file": "throttledCounter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/lib/utils/throttledCounter.ts",
        "code": {
            "throttledFn": "\tconst throttledFn = throttle(\n\tconst throttledFn = throttle(\n\t\t() => {\n\t\t\tfn(counter);\n\n\t\t\tcounter = 0;\n\t\t},\n\t\twait,\n\t\t{ leading: false },"
        },
        "depth_rank": 8
    },
    {
        "file": "omit.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/lib/utils/omit.ts",
        "code": {
            "result": "\tconst result = { ...obj };\n\tconst result = { ...obj };"
        },
        "depth_rank": 8
    },
    {
        "file": "highOrderFunctions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/lib/utils/highOrderFunctions.ts",
        "code": {
            "cancel": "\t\tconst cancel = () => {\n\t\tconst cancel = () => {\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = undefined;\n\t\t};\n\n\t\treturn Object.assign(debounced, { cancel });"
        },
        "depth_rank": 8
    },
    {
        "file": "oauth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/oauth2-server/oauth.ts",
        "code": {
            "handleResponse": "\t\tconst debugMiddleware = function (req: Request, _res: Response, next: NextFunction) {\n\t\tconst debugMiddleware = function (req: Request, _res: Response, next: NextFunction) {\n\t\t\tif (config.debug === true) {\n\t\t\t\tconsole.log('[OAuth2Server]', req.method, req.url);\n\t\t\t}\n\t\t\treturn next();\n\t\t};\n\n\t\tconst handleResponse = function (res: Response, response: OAuthServer.Response, next: NextFunction) {\n\t\tconst handleResponse = function (res: Response, response: OAuthServer.Response, next: NextFunction) {\n\t\t\tif (response.status === 302 && response.headers?.location) {\n\t\t\t\tconst { location } = response.headers;\n\t\t\t\tconst { location } = response.headers;",
            "response": "\t\t\tconst request = new OAuthServer.Request(req);\n\t\t\tconst request = new OAuthServer.Request(req);\n\t\t\tconst response = new OAuthServer.Response(res);\n\t\t\tconst response = new OAuthServer.Response(res);\n\n\t\t\ttry {\n\t\t\t\tawait oauth.token(request, response);\n\n\t\t\t\thandleResponse(res, response, next);\n\t\t\t} catch (e: any) {",
            "user": "\t\t\tconst user = await Users.findOne(\n\t\t\tconst user = await Users.findOne(\n\t\t\t\t{\n\t\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.access_token),\n\t\t\t\t},\n\t\t\t\t{ projection: { _id: 1 } },"
        },
        "depth_rank": 8
    },
    {
        "file": "LivechatInquiry.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LivechatInquiry.ts",
        "code": {
            "query": "\t\tconst query = { rid };\n\t\tconst query = { rid };"
        },
        "depth_rank": 9
    },
    {
        "file": "LivechatDepartmentAgents.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartmentAgents.ts",
        "code": {
            "query": "\t\tconst query = { agentId: userId };\n\t\tconst query = { agentId: userId };",
            "agent": "\t\tconst agent = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tconst agent = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });",
            "bot": "\t\tconst bot = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tconst bot = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoConference.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/VideoConference.ts",
        "code": {
            "1": "\t\t\t\t\t\t\tproviderData: 1 as const,\n\t\t\t\t\t\t\tproviderData: 1 as const,\n\t\t\t\t\t\t},\n\t\t\t\t  }),\n\t\t});\n\t}\n\n\tpublic async addUserById(\n\t\tcallId: string,\n\t\tuser: Required<Pick<IUser, '_id' | 'name' | 'username' | 'avatarETag'>> & { ts?: Date },"
        },
        "depth_rank": 9
    },
    {
        "file": "Settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Settings.ts",
        "code": {
            "setting": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISetting>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISetting>>) {\n\t\tsuper(db, 'settings', trash);\n\t}\n\n\tasync getValueById(_id: string): Promise<ISetting['value'] | undefined> {\n\t\tconst setting = await this.findOne<Pick<ISetting, 'value'>>({ _id }, { projection: { value: 1 } });\n\t\tconst setting = await this.findOne<Pick<ISetting, 'value'>>({ _id }, { projection: { value: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "Roles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Roles.ts",
        "code": {
            "role": "\t\tconst role = {\n\t\tconst role = {\n\t\t\tname,\n\t\t\tscope,\n\t\t\tdescription,\n\t\t\tprotected: protectedRole,\n\t\t\tmandatory2fa,\n\t\t};\n\n\t\treturn this.insertOne(role);\n\t}\n\n\tasync canAddUserToRole(uid: IUser['_id'], roleId: IRole['_id'], scope?: IRoom['_id']): Promise<boolean> {\n\t\tif (process.env.NODE_ENV === 'development' && (scope === 'Users' || scope === 'Subscriptions')) {\n\t\t\tthrow new Error('Roles.canAddUserToRole method received a role scope instead of a scope value.');\n\t\t}\n\n\t\tconst role = await this.findOne({ _id: roleId }, { projection: { scope: 1 } });\n\t\tconst role = await this.findOne({ _id: roleId }, { projection: { scope: 1 } });",
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tscope,\n\t\t};\n\n\t\treturn this.find(query, options || {});"
        },
        "depth_rank": 9
    },
    {
        "file": "LivechatDepartment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartment.ts",
        "code": {
            "query": "\t\tconst query = { businessHourId, enabled: true };\n\t\tconst query = { businessHourId, enabled: true };"
        },
        "depth_rank": 9
    },
    {
        "file": "NpsVote.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/NpsVote.ts",
        "code": {
            "cursor": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\n\t\treturn cursor.sort({ ts: 1 }).limit(1000);",
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tfindByNpsId(npsId: string, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tsave(vote: Omit<INpsVote, '_id' | '_updatedAt'>): Promise<UpdateResult> {\n\t\tconst { npsId, identifier } = vote;\n\t\tconst { npsId, identifier } = vote;"
        },
        "depth_rank": 9
    },
    {
        "file": "Sessions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Sessions.ts",
        "code": {
            "getGroupSessionsByHour": "const getGroupSessionsByHour = (\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,",
            "queryArray": "\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\n\t\tconst [\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],",
            "day": "\t\tconst day = date.getDate();\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isValidData(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): boolean {\n\t\treturn Boolean(data.year && data.month && data.day && data.sessionId && data.instanceId);\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateResult | undefined> {\n\t\t// TODO: check if we should create a session when there is no loginToken or not\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\t\tconst { year, month, day, sessionId, instanceId } = data;",
            "now": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },",
            "session": "\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });\n\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "BaseRaw.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/BaseRaw.ts",
        "code": {
            "indexes": "\t\tconst indexes = this.modelIndexes();\n\t\tconst indexes = this.modelIndexes();\n\t\tif (this.options?._updatedAtIndexOptions) {\n\t\t\tindexes?.push({ ...this.options._updatedAtIndexOptions, key: { _updatedAt: 1 } });",
            "removeKeys": "\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tconst optionsDef = this.ensureDefaultFields(options);\n\t\tif (optionsDef?.projection === undefined) {\n\t\t\treturn optionsDef;\n\t\t}\n\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst projection: Record<string, any> = optionsDef?.projection;\n\t\tconst keys = Object.keys(projection);\n\t\tconst keys = Object.keys(projection);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tconst removeKeys = keys.filter((key) => projection[key] === 0);\n\t\tif (keys.length > removeKeys.length) {\n\t\t\tremoveKeys.forEach((key) => delete projection[key]);\n\t\t}\n\n\t\treturn {\n\t\t\t...optionsDef,\n\t\t\tprojection,\n\t\t};\n\t}\n\n\tprivate ensureDefaultFields<P extends Document>(options: FindOptions<P>): FindOptions<P>;\n\n\tprivate ensureDefaultFields<P extends Document>(\n\t\toptions?: FindOptions<P> & { fields?: FindOptions<P>['projection'] },",
            "fields": "\t\tconst fields = { ...deprecatedFields, ...projection };\n\t\tconst fields = { ...deprecatedFields, ...projection };",
            "optionsDef": "\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\tconst optionsDef = this.doNotMixInclusionAndExclusionFields(options);\n\t\tif (optionsDef) {\n\t\t\treturn this.col.findOne(q, optionsDef);\n\t\t}\n\t\treturn this.col.findOne(q);\n\t}\n\n\tfind(query?: Filter<T>): FindCursor<ResultFields<T, C>>;\n\n\tfind<P extends Document = T>(query: Filter<T>, options?: FindOptions<P extends T ? T : P>): FindCursor<P>;\n\n\tfind<P extends Document>(\n\t\tquery: Filter<T> = {},",
            "oid": "\t\t\tconst oid = new ObjectId();\n\t\t\tconst oid = new ObjectId();\n\t\t\tdoc = { _id: oid.toHexString(), ...doc };",
            "doc": "\t\tconst doc = await this.findOne(filter);\n\t\tconst doc = await this.findOne(filter);\n\n\t\tif (doc) {\n\t\t\tconst { _id, ...record } = doc;\n\t\t\tconst { _id, ...record } = doc;",
            "await": "\t\tconst cursor = this.find(filter);\n\t\tconst cursor = this.find(filter);\n\n\t\tconst ids: T['_id'][] = [];\n\t\tconst ids: T['_id'][] = [];\n\t\tfor await (const doc of cursor) {\n\t\tfor await (const doc of cursor) {\n\t\t\tconst { _id, ...record } = doc as T;\n\t\t\tconst { _id, ...record } = doc as T;"
        },
        "depth_rank": 9
    },
    {
        "file": "WebdavAccounts.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/WebdavAccounts.ts",
        "code": {
            "query": "\t\tconst query = { userId };\n\t\tconst query = { userId };"
        },
        "depth_rank": 9
    },
    {
        "file": "Statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Statistics.ts",
        "code": {
            "records": "\t\tconst records = await this.find(\n\t\tconst records = await this.find(\n\t\t\t{},"
        },
        "depth_rank": 9
    },
    {
        "file": "FederationKeys.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/FederationKeys.ts",
        "code": {
            "keyResource": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<FederationKey>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<FederationKey>>) {\n\t\tsuper(db, 'federation_keys', trash);\n\t}\n\n\tasync getKey(type: FederationKey['type']): Promise<string | null> {\n\t\tconst keyResource = await this.findOne({ type });\n\t\tconst keyResource = await this.findOne({ type });",
            "key": "\t\tconst key = new NodeRSA({ b: 512 });\n\t\tconst key = new NodeRSA({ b: 512 });"
        },
        "depth_rank": 9
    },
    {
        "file": "Banners.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Banners.ts",
        "code": {
            "query": "\t\tconst today = new Date();\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\tconst query = {\n\t\t\t...(bannerId && { _id: bannerId }),"
        },
        "depth_rank": 9
    },
    {
        "file": "FederationEvents.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/FederationEvents.ts",
        "code": {
            "previousEvents": "\t\t\tconst previousEvents = await this.find({ context: contextQuery, hasChildren: false }).toArray();\n\t\t\tconst previousEvents = await this.find({ context: contextQuery, hasChildren: false }).toArray();",
            "genesisEvent": "\t\tconst genesisEvent = await this.findOne({ context: contextQuery, type: eventTypes.GENESIS });\n\t\tconst genesisEvent = await this.findOne({ context: contextQuery, type: eventTypes.GENESIS });",
            "existingEvent": "\t\tconst existingEvent = await this.findOne({ _id: event._id });\n\t\tconst existingEvent = await this.findOne({ _id: event._id });",
            "parentIds": "\t\t\tconst parentIds = parents.map(({ _id }) => _id);\n\t\t\tconst parentIds = parents.map(({ _id }) => _id);",
            "latestEvents": "\t\t\t\tconst latestEvents = await this.find({ context: contextQuery, origin }, { projection: { _id: 1 } }).toArray();\n\t\t\t\tconst latestEvents = await this.find({ context: contextQuery, origin }, { projection: { _id: 1 } }).toArray();",
            "latestEventIds": "\t\t\t\tconst latestEventIds = latestEvents.map(({ _id }) => _id);\n\t\t\t\tconst latestEventIds = latestEvents.map(({ _id }) => _id);",
            "event": "\t\tconst event = await this.findOne({ context: contextQuery, _id: eventId });\n\t\tconst event = await this.findOne({ context: contextQuery, _id: eventId });"
        },
        "depth_rank": 9
    },
    {
        "file": "Subscriptions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Subscriptions.ts",
        "code": {
            "Add": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\t\tsuper(db, 'subscription', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\t// Add all indexes from constructor to here\n\t\t// Add all indexes from constructor to here\n\t\treturn [\n\t\t\t{ key: { E2EKey: 1 }, unique: true, sparse: true },",
            "subscriptions": "\t\tconst subscriptions = users.map(({ user, extraData }) => ({\n\t\tconst subscriptions = users.map(({ user, extraData }) => ({\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },",
            "orStatement": "\t\tconst orStatement = searchFields.reduce((acc, el) => {\n\t\tconst orStatement = searchFields.reduce((acc, el) => {\n\t\t\tacc.push({ [el.trim()]: termRegex });",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "customFields": "\t\tconst customFields = cfields || {};\n\t\tconst customFields = cfields || {};",
            "subscription": "\t\tconst subscription = {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),"
        },
        "depth_rank": 9
    },
    {
        "file": "LoginServiceConfiguration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LoginServiceConfiguration.ts",
        "code": {
            "existing": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<LoginServiceConfiguration>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<LoginServiceConfiguration>>) {\n\t\tsuper(db, 'meteor_accounts_loginServiceConfiguration', trash, {\n\t\t\tpreventSetUpdatedAt: true,\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\t}\n\n\tasync createOrUpdateService(\n\t\tserviceName: string,\n\t\tserviceData: Partial<LoginServiceConfiguration>,\n\t): Promise<LoginServiceConfiguration['_id']> {\n\t\tconst service = serviceName.toLowerCase();\n\t\tconst service = serviceName.toLowerCase();\n\n\t\tconst existing = await this.findOne({ service });\n\t\tconst existing = await this.findOne({ service });",
            "service": "\t\tconst service = serviceName.toLowerCase();\n\t\tconst service = serviceName.toLowerCase();\n\n\t\treturn this.deleteOne({ service });"
        },
        "depth_rank": 9
    },
    {
        "file": "Rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Rooms.ts",
        "code": {
            "aggregationParams": "\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\treturn this.col.aggregate<IChannelsWithNumberOfMessagesBetweenDate>(aggregationParams, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tcountChannelsWithNumberOfMessagesBetweenDate(params: {\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}): AggregationCursor<{ total: number }> {",
            "room": "\t\tconst query: Filter<IRoom> = {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: rid,\n\t\t\tjoinCode,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByNonValidatedName(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}) {\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\treturn this.findOneByName(name, options);\n\t}\n\n\tfindOneByName(name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.col.findOne({ name }, options);",
            "asc": "\t\tconst asc = true;\n\t\tconst asc = true;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync countFederatedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ federated: true });",
            "data": "\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);",
            "ids": "\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);",
            "nameRegex": "\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\tname: NonNullable<IRoom['name']>,\n\t\toptions: FindOptions<IRoom> = {},"
        },
        "depth_rank": 9
    },
    {
        "file": "Permissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Permissions.ts",
        "code": {
            "exists": "\t\tconst exists = await this.findOneById<Pick<IPermission, '_id'>>(id, { projection: { _id: 1 } });\n\t\tconst exists = await this.findOneById<Pick<IPermission, '_id'>>(id, { projection: { _id: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "LivechatVisitors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LivechatVisitors.ts",
        "code": {
            "livechatCount": "\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });",
            "user": "\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });\n\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });",
            "saveEmail": "\t\tconst saveEmail = ([] as string[])\n\t\tconst saveEmail = ([] as string[])\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email?.trim())\n\t\t\t.map((email) => ({ address: email }));",
            "savePhone": "\t\tconst savePhone = ([] as string[])\n\t\tconst savePhone = ([] as string[])\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone?.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));",
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t\tactivity: period,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { _id: 1 } }).then(Boolean);"
        },
        "depth_rank": 9
    },
    {
        "file": "Users.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Users.js",
        "code": {
            "Move": "\tconstructor(db, trash) {\n\tconstructor(db, trash) {\n\t\tsuper(db, 'users', trash, {\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\n\t\tthis.defaultFields = {\n\t\t\t__rooms: 0,\n\t\t};\n\t}\n\n\t// Move index from constructor to here\n\t// Move index from constructor to here\n\tmodelIndexes() {\n\t\treturn [\n\t\t\t{ key: { __rooms: 1 }, sparse: 1 },",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "orStmt": "\t\tconst orStmt = (searchFields || []).reduce((acc, el) => {\n\t\tconst orStmt = (searchFields || []).reduce((acc, el) => {\n\t\t\tacc.push({ [el.trim()]: termRegex });",
            "result": "\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync setLastRoutingTime(userId) {\n\t\tconst result = await this.findOneAndUpdate(\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{ _id: userId },",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\t_pendingAvatarUrl: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateCustomFieldsById(userId, customFields) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },",
            "user": "\t\tconst user = {\n\t\tconst user = {\n\t\t\tcreatedAt: new Date(),\n\t\t\tavatarOrigin: 'none',\n\t\t};\n\n\t\tObject.assign(user, data);\n\n\t\treturn this.insertOne(user);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\treturn this.deleteOne({ _id });",
            "values": "\t\tconst values = {};\n\t\tconst values = {};",
            "settingsObject": "\t\tconst settingsObject = Object.assign(\n\t\tconst settingsObject = Object.assign(\n\t\t\t{},",
            "setData": "\t\tconst setData = {};\n\t\tconst setData = {};",
            "unsetData": "\t\tconst unsetData = {};\n\t\tconst unsetData = {};",
            "update": "\t\tconst update = {};\n\t\tconst update = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "MatrixBridgedRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/MatrixBridgedRoom.ts",
        "code": {
            "bridgedRoom": "\t\tconst bridgedRoom = await this.findOne({ mri: externalRoomId });\n\t\tconst bridgedRoom = await this.findOne({ mri: externalRoomId });"
        },
        "depth_rank": 9
    },
    {
        "file": "BaseUploadModel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/BaseUploadModel.ts",
        "code": {
            "filter": "\t\tconst filter = { _id: fileId };\n\t\tconst filter = { _id: fileId };"
        },
        "depth_rank": 9
    },
    {
        "file": "LivechatRooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/LivechatRooms.ts",
        "code": {
            "move": "\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\t// move indexes from constructor to here using IndexDescription as type\n\t// move indexes from constructor to here using IndexDescription as type\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { open: 1 }, sparse: true },",
            "params": "\t\tconst params = [match, lookup, unwind, group, project];\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();",
            "room": "\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });\n\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });",
            "trimmedTopic": "\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tif (trimmedTopic.length) {\n\t\t\t\tsetData.topic = trimmedTopic;\n\t\t\t} else {",
            "livechatCount": "\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t\tconst livechatCount = await Settings.findOneAndUpdate(query, update, { returnDocument: 'after' });"
        },
        "depth_rank": 9
    },
    {
        "file": "Messages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/Messages.ts",
        "code": {
            "queryResult": "\t\tconst queryResult = await this.col\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "false": "\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\t\tt: type,\n\t\t\trid,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tgroupable: false as const,\n\t\t\tgroupable: false as const,\n\t\t\t...(unread && { unread: true }),",
            "msg": "\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });\n\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "MatrixBridgedUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/models/raw/MatrixBridgedUser.ts",
        "code": {
            "bridgedUser": "\t\tconst bridgedUser = await this.findOne({ mui: externalUserId });\n\t\tconst bridgedUser = await this.findOne({ mui: externalUserId });"
        },
        "depth_rank": 9
    },
    {
        "file": "sauMonitorHooks.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/hooks/sauMonitorHooks.ts",
        "code": {
            "eventObject": "\tconst eventObject = {\n\tconst eventObject = {\n\t\tuserId: info.user._id,\n\t\tconnection: {\n\t\t\t...info.connection,\n\t\t\t...(resume && { loginToken: Accounts._hashLoginToken(resume) }),"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/meteor/service.ts",
        "code": {
            "records": "\t\t\tconst records = Promise.await(\n\t\t\tconst records = Promise.await(\n\t\t\t\tmongo\n\t\t\t\t\t.rawCollection(collectionName)\n\t\t\t\t\t.find(selector, {\n\t\t\t\t\t\t...(options.projection || options.fields ? { projection: options.projection || options.fields } : {}),",
            "tokens": "\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);\n\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);",
            "user": "\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/banner/service.ts",
        "code": {
            "snapshot": "\t\tconst snapshot = await this.create({ ...banner, snapshot: _id, active: false }); // create a snapshot\n\t\tconst snapshot = await this.create({ ...banner, snapshot: _id, active: false }); // create a snapshot",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(userId, {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(userId, {\n\t\t\tprojection: { username: 1 },",
            "bannerIds": "\t\tconst banners = await Banners.findActiveByRoleOrId(roles, platform, bannerId).toArray();\n\t\tconst banners = await Banners.findActiveByRoleOrId(roles, platform, bannerId).toArray();\n\n\t\tconst bannerIds = banners.map(({ _id }) => _id);\n\t\tconst bannerIds = banners.map(({ _id }) => _id);",
            "result": "\t\tconst result = await BannersDismiss.findByUserIdAndBannerId<Pick<IBannerDismiss, 'bannerId'>>(userId, bannerIds, {\n\t\tconst result = await BannersDismiss.findByUserIdAndBannerId<Pick<IBannerDismiss, 'bannerId'>>(userId, bannerIds, {\n\t\t\tprojection: { bannerId: 1, _id: 0 },",
            "dismissed": "\t\tconst dismissed = new Set(result.map(({ bannerId }) => bannerId));\n\t\tconst dismissed = new Set(result.map(({ bannerId }) => bannerId));",
            "newBanner": "\t\tconst newBanner = { ...banner, ...doc, active: true };\n\t\tconst newBanner = { ...banner, ...doc, active: true };"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/push/service.ts",
        "code": {
            "tokens": "\t\t\tconst loginTokens = Array.isArray(data.diff['services.resume.loginTokens']) ? data.diff['services.resume.loginTokens'] : [];\n\t\t\tconst loginTokens = Array.isArray(data.diff['services.resume.loginTokens']) ? data.diff['services.resume.loginTokens'] : [];\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }: { hashedToken: string }) => hashedToken);\n\t\t\tconst tokens = loginTokens.map(({ hashedToken }: { hashedToken: string }) => hashedToken);"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/upload/service.ts",
        "code": {
            "fileStore": "\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\treturn fileStore.insert(details, buffer);\n\t}\n\n\tasync sendFileMessage({ roomId, file, userId, message }: ISendFileMessageParams): Promise<boolean | undefined> {\n\t\treturn sendFileMessage(userId, { roomId, file, msgData: message });"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/messages/service.ts",
        "code": {
            "const": "\t// \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t// \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t// \t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "BeforeSaveMentions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/messages/hooks/BeforeSaveMentions.ts",
        "code": {
            "teams": "\t\tconst uniqueUsernames = [...new Set(usernames)];\n\t\tconst uniqueUsernames = [...new Set(usernames)];\n\n\t\tconst teams = await Team.listByNames(uniqueUsernames, { projection: { name: 1 } });\n\t\tconst teams = await Team.listByNames(uniqueUsernames, { projection: { name: 1 } });",
            "msg": "\t\tconst msg = i18n.t('Group_mentions_disabled_x_members', { total: this.messageMaxAll(), lng: language });\n\t\tconst msg = i18n.t('Group_mentions_disabled_x_members', { total: this.messageMaxAll(), lng: language });"
        },
        "depth_rank": 10
    },
    {
        "file": "BeforeSavePreventMention.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/messages/hooks/BeforeSavePreventMention.ts",
        "code": {
            "action": "\t\tconst action = i18n.t('Notify_all_in_this_room', { lng: user.language });\n\t\tconst action = i18n.t('Notify_all_in_this_room', { lng: user.language });"
        },
        "depth_rank": 10
    },
    {
        "file": "canAccessRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/authorization/canAccessRoom.ts",
        "code": {
            "team": "\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'type'>>(room.teamId, {\n\t\t\tprojection: { type: 1 },",
            "membership": "\t\tconst membership =\n\t\tconst membership =\n\t\t\tuser?._id &&\n\t\t\t(await TeamMember.findOneByUserIdAndTeamId(user._id, room.teamId, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/authorization/service.ts",
        "code": {
            "users": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tsort: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\troles: 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst users = await Users.findUsersInRoles(roleIds, null, options).toArray();\n\t\t\tconst users = await Users.findUsersInRoles(roleIds, null, options).toArray();\n\n\t\t\treturn users.map((user) => ({\n\t\t\t\t...user,\n\t\t\t\troles: user.roles.filter((roleId: string) => roleIds.includes(roleId)),\n\t\t\t}));\n\t\t},\n\t\t{ maxAge: 10000 },"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/image/service.ts",
        "code": {
            "result": "\t\tconst result = transformer.toBuffer({ resolveWithObject: true });\n\t\tconst result = transformer.toBuffer({ resolveWithObject: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "getAndCreateNpsSurvey.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/nps/getAndCreateNpsSurvey.ts",
        "code": {
            "surveyData": "\t\tconst surveyData = (await result.json()) as NpsSurveyData;\n\t\tconst surveyData = (await result.json()) as NpsSurveyData;\n\n\t\tconst banner: IBanner = {\n\t\tconst banner: IBanner = {\n\t\t\t_id: npsId,\n\t\t\tplatform: surveyData.platform,\n\t\t\tcreatedAt: new Date(surveyData.createdAt),\n\t\t\texpireAt: new Date(surveyData.expireAt),\n\t\t\tstartAt: new Date(surveyData.startAt),\n\t\t\t_updatedAt: new Date(), // Needed by the IRocketChatRecord interface\n\t\t\troles: surveyData.roles,\n\t\t\tcreatedBy: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t},\n\t\t\tview: surveyData.survey,\n\t\t\tsurface: 'banner',\n\t\t};\n\n\t\tawait Banner.create(banner);\n\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/nps/service.ts",
        "code": {
            "any": "\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });\n\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });",
            "sending": "\t\tconst today = new Date();\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await NpsVote.findOneAndUpdate(\n\t\t\t\tconst { value } = await NpsVote.findOneAndUpdate(",
            "voteIds": "\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);",
            "nps": "\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "queue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel/queue.ts",
        "code": {
            "propagateAgentDelegated": "\t\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent);\n\t\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent);\n\n\t\tconst propagateAgentDelegated = async (rid: string, agentId: string) => {\n\t\tconst propagateAgentDelegated = async (rid: string, agentId: string) => {\n\t\t\tawait dispatchAgentDelegated(rid, agentId);\n\t\t};\n\n\t\tif (room?.servedBy) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\t_id: rid,\n\t\t\t\tservedBy: { _id: agentId },"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/room/service.ts",
        "code": {
            "TODO": "\t\t// TODO convert `createRoom` function to \"raw\" and move to here\n\t\t// TODO convert `createRoom` function to \"raw\" and move to here\n\t\treturn createRoom(type, name, user, members, false, readOnly, extraData, options) as unknown as IRoom;\n\t}\n\n\tasync createDirectMessage({ to, from }: { to: string; from: string }): Promise<{ rid: string }> {\n\t\tconst [toUser, fromUser] = await Promise.all([\n\t\tconst [toUser, fromUser] = await Promise.all([\n\t\t\tUsers.findOneById(to, { projection: { username: 1 } }),"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/service.ts",
        "code": {
            "Init": "\t\t// Init from constructor if we already have\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tvoid this.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP service');\n\t\tif (this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP service already started' });",
            "queues": "\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];"
        },
        "depth_rank": 9
    },
    {
        "file": "CommandHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/CommandHandler.ts",
        "code": {
            "connection": "\t\tconst connection = new WebsocketConnection();\n\t\tconst connection = new WebsocketConnection();\n\t\ttry {\n\t\t\tawait connection.connectWithUrl(websocketUrl, protocol);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });"
        },
        "depth_rank": 11
    },
    {
        "file": "PJSIPEndpoint.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/PJSIPEndpoint.ts",
        "code": {
            "extensions": "\t\tconst extensions = _.sortBy(this.result.endpoints, (o: any) => {\n\t\tconst extensions = _.sortBy(this.result.endpoints, (o: any) => {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);"
        },
        "depth_rank": 12
    },
    {
        "file": "ContinuousMonitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/ContinuousMonitor.ts",
        "code": {
            "queueDetails": "\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst { calls } = queueDetails;\n\t\tconst { calls } = queueDetails;",
            "extension": "\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst { queue } = event;\n\t\tconst { queue } = event;"
        },
        "depth_rank": 12
    },
    {
        "file": "ACDQueue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/connector/asterisk/ami/ACDQueue.ts",
        "code": {
            "queue": "\t\tconst queue = {\n\t\tconst queue = {\n\t\t\tname: event.queue,\n\t\t\tloggedin: event.loggedin,\n\t\t\tavailable: event.available,\n\t\t\tcallers: event.callers,\n\t\t\tholdtime: event.holdtime,\n\t\t\ttalktime: event.talktime,\n\t\t\tlogestholdtime: event.logestholdtime,\n\t\t};\n\t\tconst { result } = this;\n\t\tconst { result } = this;"
        },
        "depth_rank": 12
    },
    {
        "file": "WebsocketConnection.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/voip/connector/websocket/WebsocketConnection.ts",
        "code": {
            "onError": "\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\tconst returnPromise = new Promise<void>((_resolve, _reject) => {\n\t\t\tconst onError = (err: unknown): void => {\n\t\t\tconst onError = (err: unknown): void => {\n\t\t\t\t_reject(err);\n\t\t\t\tthis.logger.error({ msg: 'checkCallserverConnection () Connection Error', err });",
            "onConnect": "\t\t\tconst onConnect = (): void => {\n\t\t\tconst onConnect = (): void => {\n\t\t\t\t_resolve();\n\t\t\t\tthis.connection.close();\n\t\t\t};\n\t\t\tthis.connection = new WebSocket(connectionUrl, connectionProtocol);\n\t\t\tthis.connection.on('open', onConnect);\n\t\t\tthis.connection.on('error', onError);\n\t\t});\n\t\treturn returnPromise;\n\t}\n\n\tisConnected(): boolean {\n\t\tthis.logger.debug({ msg: 'isConnected() unimplemented' });"
        },
        "depth_rank": 11
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/team/service.ts",
        "code": {
            "existingRoom": "\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });",
            "createdBy": "\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "memberUsernames": "\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);",
            "memberIds": "\t\tconst memberIds = membersResult.map(({ _id }) => _id);\n\t\tconst memberIds = membersResult.map(({ _id }) => _id);",
            "createdRoom": "\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\t\t\t\tconst roomType: IRoom['t'] = team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c';\n\n\t\t\t\tconst newRoom = {\n\t\t\t\tconst newRoom = {\n\t\t\t\t\t...room,\n\t\t\t\t\ttype: roomType,\n\t\t\t\t\tname: team.name,\n\t\t\t\t\tmembers: memberUsernames as string[],\n\t\t\t\t\textraData: {\n\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\tconst createdRoom = await Room.create(owner || uid, newRoom);\n\t\t\t\troomId = createdRoom._id;\n\t\t\t}\n\n\t\t\tawait Team.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {",
            "team": "\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },",
            "unfilteredTeams": "\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },",
            "unfilteredTeamIds": "\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);",
            "publicTeams": "\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },",
            "publicTeamIds": "\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);",
            "privateTeams": "\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },",
            "visibleTeamIds": "\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);",
            "ownedTeams": "\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);",
            "userTeams": "\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },",
            "teamIds": "\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);",
            "users": "\t\tconst users = await Users.findActive({ ...query }).toArray();\n\t\tconst users = await Users.findActive({ ...query }).toArray();",
            "room": "\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });",
            "user": "\t\tfor await (const member of members) {\n\t\tfor await (const member of members) {\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "await": "\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\t\t\tconst teamMembers = await this.members(uid, room.teamId, true, undefined, undefined);\n\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\t\tawait addUserToRoom(room._id, m.user, user);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: FindOptions<ITeamMember>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(uid: string, options: FindOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(\n\t\tuid: string,\n\t\toptions?: undefined | FindOptions<ITeamMember> | FindOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\treturn TeamMember.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn TeamMember.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },",
            "userRooms": "\t\tconst userRooms = user?.__rooms;\n\t\tconst userRooms = user?.__rooms;\n\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });",
            "rooms": "\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },",
            "usersToRemove": "\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },",
            "byUser": "\t\tconst byUser = (await Users.findOneById(uid, { projection: { _id: 1, username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tconst byUser = (await Users.findOneById(uid, { projection: { _id: 1, username: 1 } })) as Pick<IUser, '_id' | 'username'>;",
            "inviter": "\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };",
            "isAlreadyAMember": "\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },",
            "isMember": "\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },",
            "subscriptions": "\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();\n\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();",
            "subscriptionIds": "\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/video-conference/service.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\treturn room?.fname || room?.name || 'Rocket.Chat';\n\t}\n\n\tprivate async getCallTitle(call: VideoConference): Promise<string> {\n\t\tif (call.type === 'videoconference') {\n\t\t\tif (call.title) {\n\t\t\t\treturn call.title;\n\t\t\t}\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tconst room = await Rooms.findOneById(call.rid);\n\t\tif (room) {\n\t\t\tif (room.t === 'd') {\n\t\t\t\tif (room.usernames?.length) {\n\t\t\t\t\treturn room.usernames.join(', ');\n\t\t\t\t}\n\t\t\t} else if (room.fname) {",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'roles'>>(uid, { projection: { language: 1, roles: 1 } });\n\t\tconst user = await Users.findOneById<Pick<IUser, 'language' | 'roles'>>(uid, { projection: { language: 1, roles: 1 } });",
            "title": "\t\tconst title = (data as Partial<IGroupVideoConference>).title || room.fname || room.name || '';\n\t\tconst title = (data as Partial<IGroupVideoConference>).title || room.fname || room.name || '';\n\t\treturn this.startGroup(providerName, user, room._id, title, data, useAppUser);\n\t}\n\n\t// VideoConference.start: Detect the desired type and provider then start a video conference using them\n\tpublic async start(\n\t\tcaller: IUser['_id'],\n\t\trid: string,\n\t\t{ title, allowRinging }: { title?: string; allowRinging?: boolean },",
            "providerName": "\t\tconst providerName = await this.getValidatedProvider();\n\t\tconst providerName = await this.getValidatedProvider();\n\n\t\treturn {\n\t\t\tproviderName,\n\t\t\tcapabilities: videoConfProviders.getProviderCapabilities(providerName) || {},",
            "text": "\t\t\tconst name =\n\t\t\tconst name =\n\t\t\t\t(settings.get<boolean>('UI_Use_Real_Name') ? call.createdBy.name : call.createdBy.username) || call.createdBy.username || '';\n\t\t\tconst text = i18n.t('video_livechat_missed', { username: name });\n\t\t\tconst text = i18n.t('video_livechat_missed', { username: name });",
            "options": "\t\tconst options = {\n\t\tconst options = {\n\t\t\treadPreference: readSecondaryPreferred(db),\n\t\t};\n\n\t\treturn {\n\t\t\tvideoConference: {\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('videoconference', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('videoconference', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tdirect: {\n\t\t\t\tcalling: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.CALLING, options),\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('direct', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tlivechat: {\n\t\t\t\tstarted: await VideoConferenceModel.countByTypeAndStatus('livechat', VideoConferenceStatus.STARTED, options),\n\t\t\t\tended: await VideoConferenceModel.countByTypeAndStatus('livechat', VideoConferenceStatus.ENDED, options),\n\t\t\t},\n\t\t\tsettings: {\n\t\t\t\tprovider: settings.get<string>('VideoConf_Default_Provider'),\n\t\t\t\tdms: settings.get<boolean>('VideoConf_Enable_DMs'),\n\t\t\t\tchannels: settings.get<boolean>('VideoConf_Enable_Channels'),\n\t\t\t\tgroups: settings.get<boolean>('VideoConf_Enable_Groups'),\n\t\t\t\tteams: settings.get<boolean>('VideoConf_Enable_Teams'),\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic async validateAction(\n\t\taction: string,\n\t\tcaller: IUser['_id'],\n\t\t{ callId, uid, rid }: { callId: VideoConference['_id']; uid: IUser['_id']; rid: IRoom['_id'] },",
            "call": "\t\tconst call = await VideoConferenceModel.findOneById<Pick<VideoConference, 'createdBy' | 'rid' | '_id' | 'users' | 'status'>>(callId, {\n\t\tconst call = await VideoConferenceModel.findOneById<Pick<VideoConference, 'createdBy' | 'rid' | '_id' | 'users' | 'status'>>(callId, {\n\t\t\tprojection: { createdBy: 1, rid: 1, users: 1, status: 1 },",
            "params": "\t\tconst params = { rid: call.rid, uid: call.createdBy._id, callId: call._id };\n\t\tconst params = { rid: call.rid, uid: call.createdBy._id, callId: call._id };",
            "subscriptions": "\t\tconst subscriptions = Subscriptions.findByRoomIdAndNotUserId(rid, uid, {\n\t\tconst subscriptions = Subscriptions.findByRoomIdAndNotUserId(rid, uid, {\n\t\t\tprojection: { 'u._id': 1, '_id': 0 },",
            "await": "\t\tfor await (const subscription of subscriptions) {\n\t\tfor await (const subscription of subscriptions) {\n\t\t\tawait this.sendPushNotification(call, subscription.u._id);\n\t\t}\n\t}\n\n\tprivate async startDirect(\n\t\tproviderName: string,\n\t\tuser: IUser,\n\t\t{ _id: rid, uids }: AtLeast<IRoom, '_id' | 'uids'>,",
            "messageId": "\t\tconst url = await this.generateNewUrl(call);\n\t\tconst url = await this.generateNewUrl(call);\n\t\tawait VideoConferenceModel.setUrlById(callId, url);\n\n\t\tcall.url = url;\n\n\t\tconst messageId = await this.createMessage(call, useAppUser ? undefined : user);\n\t\tconst messageId = await this.createMessage(call, useAppUser ? undefined : user);\n\t\tcall.messages.started = messageId;\n\t\tawait VideoConferenceModel.setMessageById(callId, 'started', messageId);\n\n\t\tif (call.ringing) {\n\t\t\tawait this.notifyUsersOfRoom(rid, user._id, 'ring', { callId, rid, uid: call.createdBy._id });",
            "subscription": "\t\tconst title = isGroupVideoConference(call) ? call.title || (await this.getRoomName(call.rid)) : '';\n\t\tconst title = isGroupVideoConference(call) ? call.title || (await this.getRoomName(call.rid)) : '';\n\n\t\treturn (await this.getProviderManager())\n\t\t\t.generateUrl(call.providerName, {\n\t\t\t\t_id: call._id,\n\t\t\t\ttype: call.type,\n\t\t\t\trid: call.rid,\n\t\t\t\tcreatedBy: call.createdBy as Required<VideoConference['createdBy']>,\n\t\t\t\ttitle,\n\t\t\t\tproviderData: call.providerData,\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthrow new Error(e);\n\t\t\t});\n\t}\n\n\tprivate async getCallTitleForUser(call: VideoConference, userId?: IUser['_id']): Promise<string> {\n\t\tif (call.type === 'videoconference' && call.title) {\n\t\t\treturn call.title;\n\t\t}\n\n\t\tif (userId) {\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(call.rid, userId, { projection: { fname: 1, name: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(call.rid, userId, { projection: { fname: 1, name: 1 } });",
            "callData": "\t\tconst callData = {\n\t\tconst callData = {\n\t\t\t_id: call._id,\n\t\t\ttype: call.type,\n\t\t\trid: call.rid,\n\t\t\turl: call.url,\n\t\t\tcreatedBy: call.createdBy as Required<VideoConference['createdBy']>,\n\t\t\tproviderData: {\n\t\t\t\t...(call.providerData || {}),"
        },
        "depth_rank": 9
    },
    {
        "file": "ChartData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/ChartData.ts",
        "code": {
            "readonly": "\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}"
        },
        "depth_rank": 9
    },
    {
        "file": "AgentData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/AgentData.ts",
        "code": {
            "readonly": "\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}",
            "date": "\t\t\tconst avg = obj.frt / obj.total;\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Best_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlt: to.add(1, 'days').toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Best_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentFirstRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n\t\t\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "OverviewData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/OverviewData.ts",
        "code": {
            "readonly": "\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}",
            "cursor": "\t\tconst cursor = this.roomsModel.getAnalyticsBetweenDate(date, { departmentId }, extraQuery);\n\t\tconst cursor = this.roomsModel.getAnalyticsBetweenDate(date, { departmentId }, extraQuery);"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/service.ts",
        "code": {
            "timezone": "\t\tconst timezone = getTimezone({ utcOffset });\n\t\tconst timezone = getTimezone({ utcOffset });",
            "label": "\t\t\tconst m = moment(from);\n\t\t\tconst m = moment(from);\n\t\t\tfor await (const currentHour of Array.from({ length: HOURS_IN_DAY }, (_, i) => i)) {\n\t\t\tfor await (const currentHour of Array.from({ length: HOURS_IN_DAY }, (_, i) => i)) {\n\t\t\t\tconst hour = parseInt(m.add(currentHour ? 1 : 0, 'hour').format('H'));\n\t\t\t\tconst hour = parseInt(m.add(currentHour ? 1 : 0, 'hour').format('H'));\n\t\t\t\tconst label = {\n\t\t\t\tconst label = {\n\t\t\t\t\tfrom: moment.utc().set({ hour }).tz(timezone).format('hA'),",
            "date": "\t\t\tfor await (const m of dayIterator(from, to)) {\n\t\t\tfor await (const m of dayIterator(from, to)) {\n\t\t\t\tdata.dataLabels.push(m.format('M/D'));\n\n\t\t\t\tconst date = {\n\t\t\t\tconst date = {\n\t\t\t\t\tgte: m.toDate(),\n\t\t\t\t\tlt: moment(m).add(1, 'days').toDate(),\n\t\t\t\t};\n\n\t\t\t\tdata.dataPoints.push(await this.chart.callAction(chartLabel, date, departmentId, extraQuery));\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tasync getAnalyticsOverviewData(options: AnalyticsOverviewDataOptions) {\n\t\tconst { departmentId, utcOffset = 0, language, daterange: { from: fDate, to: tDate } = {}, analyticsOptions: { name } = {} } = options;\n\t\tconst { departmentId, utcOffset = 0, language, daterange: { from: fDate, to: tDate } = {}, analyticsOptions: { name } = {} } = options;",
            "t": "\t\tconst t = (s: string) => i18n.t(s, { lng: language });\n\t\tconst t = (s: string) => i18n.t(s, { lng: language });"
        },
        "depth_rank": 9
    },
    {
        "file": "FederatedUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/domain/FederatedUser.ts",
        "code": {
            "constructor": "\tprotected constructor({\n\tprotected constructor({\n\t\texternalId,\n\t\tinternalReference,\n\t\texistsOnlyOnProxyServer,\n\t}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "FederatedRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/domain/FederatedRoom.ts",
        "code": {
            "constructor": "\tprotected constructor({\n\tprotected constructor({\n\t\texternalId,\n\t\tinternalReference,\n\t\tmembers,\n\t}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "action.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/slash-commands/action.ts",
        "code": {
            "invitee": "\tconst invitee = normalizeExternalInviteeId(rawUserId);\n\tconst invitee = normalizeExternalInviteeId(rawUserId);\n\n\tconst { rid: roomId } = item;\n\tconst { rid: roomId } = item;"
        },
        "depth_rank": 12
    },
    {
        "file": "to-external-parser-formatter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/converters/to-external-parser-formatter.ts",
        "code": {
            "getAllMentionsWithTheirRealNames": "const getAllMentionsWithTheirRealNames = (message: string, homeServerDomain: string, senderExternalId: string): IInternalMention[] => {\nconst getAllMentionsWithTheirRealNames = (message: string, homeServerDomain: string, senderExternalId: string): IInternalMention[] => {\n\tconst mentions: IInternalMention[] = [];\n\tconst mentions: IInternalMention[] = [];\n\tsanitizeHtml(message, {\n\t\tallowedTags: ['a'],\n\t\texclusiveFilter: (frame: IFrame): boolean => {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\tattribs: { href = '' },"
        },
        "depth_rank": 12
    },
    {
        "file": "Message.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Message.ts",
        "code": {
            "room": "\t\tconst room = federatedRoom.getInternalReference();\n\t\tconst room = federatedRoom.getInternalReference();\n\n\t\tawait sendMessage(\n\t\t\tuser.getInternalReference(),\n\t\t\t{\n\t\t\t\tfederation: { eventId: externalEventId },",
            "updatedMessage": "\t\tconst quotedMessageUrl = editedMessage.attachments?.filter(isQuoteAttachment)?.[0]?.message_link;\n\t\tconst quotedMessageUrl = editedMessage.attachments?.filter(isQuoteAttachment)?.[0]?.message_link;\n\n\t\treturn toInternalQuoteMessageFormat({\n\t\t\tmessageToReplyToUrl: quotedMessageUrl || '',\n\t\t\tformattedMessage: newExternalFormattedMessage,\n\t\t\trawMessage: newRawMessageText,\n\t\t\thomeServerDomain,\n\t\t\tsenderExternalId: senderUser.getExternalId(),\n\t\t});\n\t}\n\n\tpublic async editQuotedMessage(\n\t\tuser: FederatedUser,\n\t\tnewRawMessageText: string,\n\t\tnewExternalFormattedMessage: string,\n\t\teditedMessage: IMessage,\n\t\thomeServerDomain: string,\n\t): Promise<void> {\n\t\tconst updatedMessage = {\n\t\tconst updatedMessage = {\n\t\t\t...editedMessage,\n\t\t\tmsg: await this.getMessageToEditWhenReplyAndQuote(\n\t\t\t\teditedMessage,\n\t\t\t\tnewExternalFormattedMessage,\n\t\t\t\tnewRawMessageText,\n\t\t\t\thomeServerDomain,\n\t\t\t\tuser,\n\t\t\t),\n\t\t};\n\t\tawait updateMessage(updatedMessage, user.getInternalReference(), editedMessage);\n\t}\n\n\tpublic async sendFileMessage(\n\t\tuser: FederatedUser,\n\t\troom: FederatedRoom,\n\t\tfiles: IMessage['files'],\n\t\tattachments: IMessage['attachments'],\n\t\texternalEventId: string,\n\t): Promise<void> {\n\t\tawait sendMessage(\n\t\t\tuser.getInternalReference(),\n\t\t\t{\n\t\t\t\tfederation: { eventId: externalEventId },"
        },
        "depth_rank": 12
    },
    {
        "file": "Settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Settings.ts",
        "code": {
            "parsedFile": "\t\t\tconst registrationYaml = fs.readFileSync(this.getFilePathForHomeserverConfig(), 'utf8');\n\t\t\tconst registrationYaml = fs.readFileSync(this.getFilePathForHomeserverConfig(), 'utf8');\n\n\t\t\tconst parsedFile = yaml.load(registrationYaml as string) as Record<string, any>;\n\t\t\tconst parsedFile = yaml.load(registrationYaml as string) as Record<string, any>;\n\t\t\treturn {\n\t\t\t\tapplicationServiceToken: parsedFile.as_token,\n\t\t\t\tbridgeUrl: parsedFile.url,\n\t\t\t\tbotName: parsedFile.sender_localpart,\n\t\t\t\thomeserverToken: parsedFile.hs_token,\n\t\t\t\tid: parsedFile.id,\n\t\t\t\tlistenTo: parsedFile.namespaces,\n\t\t\t\tenableEphemeralEvents: parsedFile['de.sorunome.msc2409.push_ephemeral'],\n\t\t\t\trocketchat: { domainName: parsedFile.rocketchat?.homeserver_domain, homeServerUrl: parsedFile.rocketchat?.homeserver_url },"
        },
        "depth_rank": 12
    },
    {
        "file": "Statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });",
            "externalServers": "\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\t\tsettings.get('Federation_Matrix_homeserver_domain'),\n\t\t);\n\n\t\treturn {\n\t\t\tquantity: externalServers.length,\n\t\t\tservers: externalServers,\n\t\t};\n\t}\n}\n\ninterface IFederationStatistics {\n\tenabled: boolean;\n\tmaximumSizeOfPublicRoomsUsers: number;\n\tbiggestRoom: {\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null;\n\tsmallestRoom: {\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null;\n\tamountOfExternalUsers: number;\n\tamountOfFederatedRooms: number;\n\texternalConnectedServers: { quantity: number; servers: string[] };"
        },
        "depth_rank": 12
    },
    {
        "file": "File.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/File.ts",
        "code": {
            "uploadedFile": "\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\tconst uploadedFile = await fileStore.insert(fileRecord, readableStream);\n\t\tconst uploadedFile = await fileStore.insert(fileRecord, readableStream);\n\t\tconst { files, attachments } = await parseFileIntoMessageAttachments(uploadedFile, internalRoomId, internalUser);\n\t\tconst { files, attachments } = await parseFileIntoMessageAttachments(uploadedFile, internalRoomId, internalUser);",
            "metadata": "\t\t\tconst metadata = await FileUpload.extractMetadata(file);\n\t\t\tconst metadata = await FileUpload.extractMetadata(file);\n\n\t\t\treturn {\n\t\t\t\tformat: metadata.format,\n\t\t\t\theight: metadata.height,\n\t\t\t\twidth: metadata.width,\n\t\t\t};\n\t\t}\n\t\tif (file.type?.startsWith('video/')) {\n\t\t\treturn {\n\t\t\t\theight: 200,\n\t\t\t\twidth: 250,\n\t\t\t};\n\t\t}\n\t\treturn {};"
        },
        "depth_rank": 12
    },
    {
        "file": "Room.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Room.ts",
        "code": {
            "options": "\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;\n\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;",
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), targetFederatedUser.getInternalId(), {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), targetFederatedUser.getInternalId(), {\n\t\t\tprojection: { roles: 1 },",
            "eventsForRemovedRoles": "\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\t\tthis.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'),\n\t\t);\n\t\t[...eventsForAddedRoles, ...eventsForRemovedRoles].forEach((event) => api.broadcast('user.roleUpdate', event));\n\t}\n\n\tprivate createRoleUpdateEvent(\n\t\tfederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\trole: string,\n\t\taction: 'added' | 'removed',\n\t): {\n\t\ttype: 'added' | 'removed' | 'changed';\n\t\t_id: string;\n\t\tu?: { _id: IUser['_id']; username: IUser['username']; name: IUser['name'] };"
        },
        "depth_rank": 12
    },
    {
        "file": "User.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/User.ts",
        "code": {
            "internalUserIds": "\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUsersByExternalIds(externalUserIds: string[]): Promise<FederatedUser[]> {\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tif (internalBridgedUsers.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\t\t(acc, bridgedUser) => ({ ...acc, [bridgedUser.uid]: { mui: bridgedUser.mui, remote: bridgedUser.remote } }),",
            "existingLocalUser": "\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tif (existingLocalUser) {\n\t\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\t\texistingLocalUser._id,\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedUser.isRemote(),\n\t\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t\t);\n\t\t}\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());"
        },
        "depth_rank": 12
    },
    {
        "file": "Bridge.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/Bridge.ts",
        "code": {
            "externalInformation": "\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\n\t\t\treturn {\n\t\t\t\tdisplayName: externalInformation.displayname || '',\n\t\t\t\t...(externalInformation.avatar_url\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tavatarUrl: externalInformation.avatar_url,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),",
            "responseBody": "\t\t\t\tconst responseBody = await response.json();\n\t\t\t\tconst responseBody = await response.json();\n\n\t\t\t\tif (responseBody.errcode === MATRIX_USER_IN_USE) {\n\t\t\t\t\treturn VerificationStatus.VERIFIED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.status === HttpStatusCodes.OK) {\n\t\t\t\treturn VerificationStatus.UNVERIFIED;\n\t\t\t}\n\t\t} catch (e) {",
            "newUser": "\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tawait this.bridgeInstance.provisionUser(newUser, { name, ...(avatarUrl ? { url: avatarUrl } : {}) });",
            "messageId": "\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },",
            "mxcUrl": "\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\n\t\t\treturn mxcUrl;\n\t\t} catch (e: any) {",
            "knownVideoMimeTypes": "\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\n\t\tif (knownImageMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.IMAGE;\n\t\t}\n\t\tif (knownAudioMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.AUDIO;\n\t\t}\n\t\tif (knownVideoMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.VIDEO;\n\t\t}\n\t\treturn MatrixEnumSendMessageType.FILE;\n\t}\n\n\tpublic async uploadContent(\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\toptions?: { name?: string; type?: string },",
            "roomState": "\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_TOPIC_CHANGED) as MatrixEventRoomTopicChanged)?.content\n\t\t\t\t?.topic;\n\t\t} catch (error) {",
            "event": "\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),"
        },
        "depth_rank": 11
    },
    {
        "file": "to-internal-parser-formatter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/converters/room/to-internal-parser-formatter.ts",
        "code": {
            "finalFormattedMessage": "\tconst formattedMessage = convertMarkdownToHTML(message);\n\tconst formattedMessage = convertMarkdownToHTML(message);\n\tconst finalFormattedMessage = convertMarkdownToHTML(\n\tconst finalFormattedMessage = convertMarkdownToHTML(\n\t\tawait toExternalMessageFormat({\n\t\t\tmessage,\n\t\t\texternalRoomId,\n\t\t\thomeServerDomain,\n\t\t}),\n\t);\n\n\tconst { formatted_body: formattedBody } = RichReply.createFor(\n\tconst { formatted_body: formattedBody } = RichReply.createFor("
        },
        "depth_rank": 13
    },
    {
        "file": "RoomReceiver.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/converters/room/RoomReceiver.ts",
        "code": {
            "tryToExtractExternalRoomNameFromTheRoomState": "const convertExternalJoinRuleToInternalRoomType = (matrixJoinRule: MatrixRoomJoinRules, matrixRoomIsDirect = false): RoomType => {\nconst convertExternalJoinRuleToInternalRoomType = (matrixJoinRule: MatrixRoomJoinRules, matrixRoomIsDirect = false): RoomType => {\n\tif (matrixRoomIsDirect) {\n\t\treturn RoomType.DIRECT_MESSAGE;\n\t}\n\tconst mapping: Record<string, RoomType> = {\n\tconst mapping: Record<string, RoomType> = {\n\t\t[MatrixRoomJoinRules.JOIN]: RoomType.CHANNEL,\n\t\t[MatrixRoomJoinRules.INVITE]: RoomType.PRIVATE_GROUP,\n\t};\n\n\treturn mapping[matrixJoinRule] || RoomType.CHANNEL;\n};\n\nconst tryToExtractExternalRoomNameFromTheRoomState = (roomState: AbstractMatrixEvent[] = []): { externalRoomName?: string } => {\nconst tryToExtractExternalRoomNameFromTheRoomState = (roomState: AbstractMatrixEvent[] = []): { externalRoomName?: string } => {\n\tif (roomState.length === 0) {\n\t\treturn {};",
            "externalRoomName": "\tconst externalRoomName = (\n\tconst externalRoomName = (\n\t\troomState.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_NAME_CHANGED) as MatrixEventRoomNameChanged\n\t)?.content?.name;\n\n\treturn {\n\t\t...(externalRoomName ? { externalRoomName: removeExternalSpecificCharsFromExternalIdentifier(externalRoomName) } : {}),",
            "tryToExtractAndConvertRoomTypeFromTheRoomState": "const tryToExtractAndConvertRoomTypeFromTheRoomState = (\nconst tryToExtractAndConvertRoomTypeFromTheRoomState = (\n\troomState: AbstractMatrixEvent[] = [],\n\tmatrixRoomIsDirect = false,\n): { roomType?: RoomType } => {\n\tif (roomState.length === 0) {\n\t\treturn {};",
            "externalRoomJoinRule": "\tconst externalRoomJoinRule = (\n\tconst externalRoomJoinRule = (\n\t\troomState.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_JOIN_RULES_CHANGED) as MatrixEventRoomJoinRulesChanged\n\t)?.content?.join_rule;\n\n\treturn {\n\t\t...(externalRoomJoinRule ? { roomType: convertExternalJoinRuleToInternalRoomType(externalRoomJoinRule, matrixRoomIsDirect) } : {}),",
            "onlyRolesAddedToDefaultUsers": "const convertNumericalPowerLevelToInternalRole = (powerLevel: number): ROCKET_CHAT_FEDERATION_ROLES | undefined => {\nconst convertNumericalPowerLevelToInternalRole = (powerLevel: number): ROCKET_CHAT_FEDERATION_ROLES | undefined => {\n\tconst mapping: Record<number, ROCKET_CHAT_FEDERATION_ROLES | undefined> = {\n\tconst mapping: Record<number, ROCKET_CHAT_FEDERATION_ROLES | undefined> = {\n\t\t[MATRIX_POWER_LEVELS.USER]: undefined,\n\t\t[MATRIX_POWER_LEVELS.MODERATOR]: ROCKET_CHAT_FEDERATION_ROLES.MODERATOR,\n\t\t[MATRIX_POWER_LEVELS.ADMIN]: ROCKET_CHAT_FEDERATION_ROLES.OWNER,\n\t};\n\n\tif (mapping[powerLevel]) {\n\t\treturn mapping[powerLevel];\n\t}\n\n\tif (powerLevel <= MATRIX_POWER_LEVELS.USER) {\n\t\treturn;\n\t}\n\tif (powerLevel > MATRIX_POWER_LEVELS.USER && powerLevel <= MATRIX_POWER_LEVELS.MODERATOR) {\n\t\treturn ROCKET_CHAT_FEDERATION_ROLES.MODERATOR;\n\t}\n\treturn ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n};\n\nconst onlyRolesAddedToDefaultUsers = (previousRolesState: { [key: string]: number }, externalUserId: string): boolean =>\nconst onlyRolesAddedToDefaultUsers = (previousRolesState: { [key: string]: number }, externalUserId: string): boolean =>",
            "verifyIfNewRolesWereAddedForDefaultUsers": "const verifyIfNewRolesWereAddedForDefaultUsers = (\nconst verifyIfNewRolesWereAddedForDefaultUsers = (\n\tcurrentRolesState: { [key: string]: number },",
            "isCurrentRoleAnOwner": "\t\t\tconst isCurrentRoleAnOwner =\n\t\t\tconst isCurrentRoleAnOwner =\n\t\t\t\tconvertNumericalPowerLevelToInternalRole(currentRolesState[externalUserId]) === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\t\texternalRolesChangesForDefaultUsers[externalUserId] = isCurrentRoleAnOwner\n\t\t\t\t? [{ action: 'add', role: ROCKET_CHAT_FEDERATION_ROLES.OWNER }]",
            "createExternalRolesChangesActions": "const createExternalRolesChangesActions = (\nconst createExternalRolesChangesActions = (\n\tcurrentRolesState: { [key: string]: number } = {},",
            "isDowngradingTheRole": "\tconst changesInRolesBasedOnPreviousState = Object.keys(previousRolesState).reduce((externalRolesChangesByUser, externalUserId) => {\n\tconst changesInRolesBasedOnPreviousState = Object.keys(previousRolesState).reduce((externalRolesChangesByUser, externalUserId) => {\n\t\tconst currentPowerLevel = currentRolesState[externalUserId];\n\t\tconst currentPowerLevel = currentRolesState[externalUserId];\n\t\tconst previousPowerLevel = previousRolesState[externalUserId];\n\t\tconst previousPowerLevel = previousRolesState[externalUserId];\n\t\tconst convertedPreviousExternalRole = convertNumericalPowerLevelToInternalRole(previousPowerLevel);\n\t\tconst convertedPreviousExternalRole = convertNumericalPowerLevelToInternalRole(previousPowerLevel);\n\t\tconst convertedCurrentExternalRole = convertNumericalPowerLevelToInternalRole(currentPowerLevel);\n\t\tconst convertedCurrentExternalRole = convertNumericalPowerLevelToInternalRole(currentPowerLevel);\n\t\tconst wasPreviousRoleAnOwner = convertedPreviousExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst wasPreviousRoleAnOwner = convertedPreviousExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleAnOwner = convertedCurrentExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleAnOwner = convertedCurrentExternalRole === ROCKET_CHAT_FEDERATION_ROLES.OWNER;\n\t\tconst isCurrentRoleADefault = currentPowerLevel === undefined;\n\t\tconst isCurrentRoleADefault = currentPowerLevel === undefined;\n\t\tconst isStillTheSameRole = currentPowerLevel === previousPowerLevel;\n\t\tconst isStillTheSameRole = currentPowerLevel === previousPowerLevel;\n\t\tconst isDowngradingTheRole = currentPowerLevel < previousPowerLevel;\n\t\tconst isDowngradingTheRole = currentPowerLevel < previousPowerLevel;\n\t\tif (isCurrentRoleADefault) {\n\t\t\texternalRolesChangesByUser[externalUserId] = wasPreviousRoleAnOwner\n\t\t\t\t? [{ action: 'remove', role: ROCKET_CHAT_FEDERATION_ROLES.OWNER }]",
            "getInviteesFromRoomState": "const getInviteesFromRoomState = (\nconst getInviteesFromRoomState = (\n\troomState: AbstractMatrixEvent[] = [],\n): {\n\texternalInviteeId: string;\n\tnormalizedInviteeId: string;\n\tinviteeUsernameOnly: string;\n}[] => {",
            "extractAllInviteeIdsWhenDM": "\tconst inviteesFromRoomState = (\n\tconst inviteesFromRoomState = (\n\t\troomState?.find((stateEvent) => stateEvent.type === MatrixEventType.ROOM_CREATED) as MatrixEventRoomCreated\n\t)?.content.inviteesExternalIds;\n\tif (inviteesFromRoomState) {\n\t\treturn inviteesFromRoomState.map((inviteeExternalId) => ({\n\t\t\texternalInviteeId: inviteeExternalId,\n\t\t\tnormalizedInviteeId: removeExternalSpecificCharsFromExternalIdentifier(inviteeExternalId),\n\t\t\tinviteeUsernameOnly: formatExternalUserIdToInternalUsernameFormat(inviteeExternalId),\n\t\t}));\n\t}\n\treturn [];\n};\n\nconst extractAllInviteeIdsWhenDM = (\nconst extractAllInviteeIdsWhenDM = (\n\texternalEvent: MatrixEventRoomMembershipChanged,\n): {\n\texternalInviteeId: string;\n\tnormalizedInviteeId: string;\n\tinviteeUsernameOnly: string;\n}[] => {"
        },
        "depth_rank": 13
    },
    {
        "file": "AbstractFederationApplicationService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/AbstractFederationApplicationService.ts",
        "code": {
            "externalUserProfileInformation": "\tconstructor(\n\tconstructor(\n\t\tprotected bridge: IFederationBridge,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t) {\n\t\tthis.internalHomeServerDomain = this.internalSettingsAdapter.getHomeServerDomain();\n\t}\n\n\tprotected async createFederatedUserInternallyOnly(\n\t\texternalUserId: string,\n\t\tusername: string,\n\t\texistsOnlyOnProxyServer = false,\n\t\tprovidedName?: string,\n\t): Promise<void> {\n\t\tconst internalUser = await this.internalUserAdapter.getInternalUserByUsername(username);\n\t\tconst internalUser = await this.internalUserAdapter.getInternalUserByUsername(username);\n\t\tconst externalUserProfileInformation = await this.bridge.getUserProfileInformation(externalUserId);\n\t\tconst externalUserProfileInformation = await this.bridge.getUserProfileInformation(externalUserId);\n\t\tlet federatedUser;\n\t\tif (internalUser) {\n\t\t\tfederatedUser = FederatedUser.createWithInternalReference(externalUserId, existsOnlyOnProxyServer, internalUser);\n\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "UserServiceReceiver.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/user/receiver/UserServiceReceiver.ts",
        "code": {
            "stillTyping": "\t\tconst stillTyping = this.usersTypingByRoomIdCache\n\t\tconst stillTyping = this.usersTypingByRoomIdCache\n\t\t\t.get(externalRoomId)\n\t\t\t?.filter((user) => externalUserIdsTyping.includes(user.externalUserId));\n\n\t\tnotTypingAnymore?.forEach((user) => this.internalNotificationAdapter.notifyUserTypingOnRoom(internalRoomId, user.username, isTyping));\n\t\tthis.usersTypingByRoomIdCache.set(externalRoomId, stillTyping || []);\n\t}\n\n\tpublic async onUserTyping(userTypingInput: FederationUserTypingStatusEventDto): Promise<void> {\n\t\tconst { externalUserIdsTyping, externalRoomId } = userTypingInput;\n\t\tconst { externalUserIdsTyping, externalRoomId } = userTypingInput;"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomServiceReceiver.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/room/receiver/RoomServiceReceiver.ts",
        "code": {
            "isInviteeFromTheSameHomeServer": "\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t);\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\t\t? dmExternalInviteeId.inviteeUsernameOnly\n\t\t\t\t\t\t: dmExternalInviteeId.normalizedInviteeId;\n\t\t\t\t\tawait this.createFederatedUserInternallyOnly(\n\t\t\t\t\t\tdmExternalInviteeId.externalInviteeId,\n\t\t\t\t\t\tdmInviteeUsername,\n\t\t\t\t\t\tisDMInviteeFromTheSameHomeServer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (invitee ||\n\t\t\t\t\t(await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId))) as FederatedUser;\n\t\t\t}),\n\t\t);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\tfederatedInviterUser,\n\t\t\t...allInvitees,\n\t\t]);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tallInvitees\n\t\t\t\t.filter((invitee) =>\n\t\t\t\t\tFederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.getExternalId()),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())),\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(\n\t\tfederatedInviteeUser: FederatedUser,\n\t\tfederatedInviterUser: FederatedUser,\n\t\texternalRoomId: string,\n\t): Promise<void> {\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n\n\tpublic async onExternalMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =",
            "readableStream": "\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(",
            "notAllowedChangeJoinRules": "\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tif (notAllowedChangeJoinRules) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomType(roomType);\n\t\tawait this.internalRoomAdapter.updateRoomType(federatedRoom);\n\t}\n\n\tpublic async onChangeRoomName(roomChangeNameInput: FederationRoomChangeNameDto): Promise<void> {\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;",
            "rolesToAdd": "\t\t\t\tconst rolesToRemove = changes.filter((change) => change.action === 'remove').map((change) => change.role);\n\t\t\t\tconst rolesToRemove = changes.filter((change) => change.action === 'remove').map((change) => change.role);\n\t\t\t\tconst rolesToAdd = changes.filter((change) => change.action === 'add').map((change) => change.role);\n\t\t\t\tconst rolesToAdd = changes.filter((change) => change.action === 'add').map((change) => change.role);\n\n\t\t\t\treturn this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\t\t\tfederatedRoom,\n\t\t\t\t\ttargetFederatedUser,\n\t\t\t\t\tfromUser: federatedUserWhoChangedThePermission,\n\t\t\t\t\trolesToAdd,\n\t\t\t\t\trolesToRemove,\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId, thread } =\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId, thread } ="
        },
        "depth_rank": 12
    },
    {
        "file": "RoomServiceSender.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/room/sender/RoomServiceSender.ts",
        "code": {
            "externalRoomId": "\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\t[federatedInviteeUser.getExternalId()],\n\t\t\t\t{ internalRoomId },"
        },
        "depth_rank": 12
    },
    {
        "file": "message-redaction-helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/room/message/receiver/message-redaction-helper.ts",
        "code": {
            "reaction": "\t\tconst normalizedEventId = Federation.escapeExternalFederationEventId(this.redactsEvents);\n\t\tconst normalizedEventId = Federation.escapeExternalFederationEventId(this.redactsEvents);\n\t\tconst reaction = Object.keys(this.message.reactions || {}).find(\n\t\tconst reaction = Object.keys(this.message.reactions || {}).find("
        },
        "depth_rank": 13
    },
    {
        "file": "message-sender-helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/room/message/sender/message-sender-helper.ts",
        "code": {
            "externalMessageId": "\t\tconst originalSender = await this.internalUserAdapter.getFederatedUserByInternalId(messageToReplyTo?.u?._id);\n\t\tconst originalSender = await this.internalUserAdapter.getFederatedUserByInternalId(messageToReplyTo?.u?._id);\n\t\tconst externalMessageId = await this.bridge.sendThreadReplyToMessage(\n\t\tconst externalMessageId = await this.bridge.sendThreadReplyToMessage(\n\t\t\texternalRoomId,\n\t\t\texternalSenderId,\n\t\t\tmessageToReplyTo.federation?.eventId as string,\n\t\t\toriginalSender?.getExternalId() as string,\n\t\t\tmessage.msg,\n\t\t\tparentMessage.federation.eventId,\n\t\t);\n\t\tawait this.internalMessageAdapter.setExternalFederationEventOnMessage(message._id, externalMessageId);\n\t}\n}\n\nclass ThreadFileExternalMessageSender implements IExternalMessageSender {\n\tconstructor(\n\tconstructor(\n\t\tprivate readonly bridge: IFederationBridge,\n\t\tprivate readonly internalFileHelper: RocketChatFileAdapter,\n\t\tprivate readonly internalMessageAdapter: RocketChatMessageAdapter,\n\t) {}"
        },
        "depth_rank": 13
    },
    {
        "file": "MessageServiceSender.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/federation/application/room/message/sender/MessageServiceSender.ts",
        "code": {
            "externalEventId": "\t\tconst externalEventId = Object.keys(internalMessage.reactions?.[reaction].federationReactionEventIds || {}).find(\n\t\tconst externalEventId = Object.keys(internalMessage.reactions?.[reaction].federationReactionEventIds || {}).find("
        },
        "depth_rank": 13
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-voip/service.ts",
        "code": {
            "status": "\t\tconst status = UserStatus.ONLINE;\n\t\tconst status = UserStatus.ONLINE;\n\t\tconst { _id, department: departmentId } = guest;\n\t\tconst { _id, department: departmentId } = guest;",
            "user": "\t\tconst summary = await (await Voip.cachedQueueDetails())();\n\t\tconst summary = await (await Voip.cachedQueueDetails())();\n\t\tconst allocatedExtensions = await this.getAllocatedExtesionAllocationData({\n\t\tconst allocatedExtensions = await this.getAllocatedExtesionAllocationData({\n\t\t\textension: 1,\n\t\t\t_id: 1,\n\t\t\tusername: 1,\n\t\t\tname: 1,\n\t\t});\n\n\t\treturn (extensions as unknown as IVoipExtensionBase[]).map((ext) => {\n\t\t\tconst user = allocatedExtensions.find((ex) => ex.extension === ext.extension);\n\t\t\tconst user = allocatedExtensions.find((ex) => ex.extension === ext.extension);\n\t\t\treturn {\n\t\t\t\tuserId: user?._id,\n\t\t\t\tusername: user?.username,\n\t\t\t\tname: user?.name,\n\t\t\t\tqueues: this.getQueuesForExt(ext.extension, summary),\n\t\t\t\t...ext,\n\t\t\t};\n\t\t});\n\t}\n\n\tasync findVoipRooms({\n\t\tagents,\n\t\topen,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\tvisitorId,\n\t\ttags,\n\t\tqueue,\n\t\tdirection,\n\t\troomName,\n\t\toptions: { offset = 0, count, fields, sort } = {},",
            "agentCalledEvent": "\t\tconst agentCalledEvent = await PbxEvents.findOneByEvent(room.callUniqueId, 'AgentConnect');\n\t\tconst agentCalledEvent = await PbxEvents.findOneByEvent(room.callUniqueId, 'AgentConnect');\n\t\t// Update room with the agentconnect event information (hold time => time call was in queue)\n\t\tawait VoipRoom.updateOne(\n\t\t\t{ _id: room._id },",
            "false": "\t\tconst message = {\n\t\tconst message = {\n\t\t\tt: event,\n\t\t\tmsg: comment,\n\t\t\tgroupable: false as const,\n\t\t\tgroupable: false as const,\n\t\t\tvoipData: {\n\t\t\t\tcallDuration: Number(room.callDuration) || 0,\n\t\t\t\tcallStarted: room.callStarted?.toISOString() || new Date().toISOString(),\n\t\t\t},\n\t\t};\n\n\t\tif (\n\t\t\tisVoipRoom(room) &&\n\t\t\troom.open &&\n\t\t\troom.callUniqueId &&\n\t\t\t// Check if call exists by looking if we have pbx events of it\n\t\t\t(await PbxEvents.findOneByUniqueId(room.callUniqueId))\n\t\t) {\n\t\t\tawait sendMessage(user, message, room);\n\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/calendar/service.ts",
        "code": {
            "updateResult": "\t\t\tconst insertResult = await CalendarEvent.insertOne({\n\t\t\tconst insertResult = await CalendarEvent.insertOne({\n\t\t\t\tuid,\n\t\t\t\tnotificationSent: false,\n\t\t\t\t...updateData,\n\t\t\t});\n\n\t\t\tawait this.setupNextNotification();\n\t\t\treturn insertResult.insertedId;\n\t\t}\n\n\t\tconst updateResult = await CalendarEvent.updateEvent(event._id, updateData);\n\t\tconst updateResult = await CalendarEvent.updateEvent(event._id, updateData);\n\t\tif (updateResult.modifiedCount > 0) {\n\t\t\tawait this.setupNextNotification();\n\t\t}\n\n\t\treturn event._id;\n\t}\n\n\tpublic async get(eventId: ICalendarEvent['_id']): Promise<ICalendarEvent | null> {\n\t\treturn CalendarEvent.findOne({ _id: eventId });"
        },
        "depth_rank": 9
    },
    {
        "file": "twilio.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/twilio.ts",
        "code": {
            "user": "\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;",
            "result": "\t\t\tconst result = await client.messages.create({\n\t\t\tconst result = await client.messages.create({\n\t\t\t\tto: toNumber,\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody,\n\t\t\t\t...(mediaUrl && { mediaUrl }),"
        },
        "depth_rank": 10
    },
    {
        "file": "voxtelesys.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/voxtelesys.ts",
        "code": {
            "contentType": "\t\t\tconst media = {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType as string;\n\n\t\t\treturnData?.media?.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };",
            "defaultLanguage": "\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },",
            "user": "\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;"
        },
        "depth_rank": 10
    },
    {
        "file": "statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/cron/statistics.ts",
        "code": {
            "response": "\t\tconst response = await fetch('https://collector.rocket.chat/', {\n\t\tconst response = await fetch('https://collector.rocket.chat/', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\t...cronStatistics,\n\t\t\t\thost: Meteor.absoluteUrl(),\n\t\t\t},\n\t\t\theaders,\n\t\t});\n\n\t\tconst { statsToken } = await response.json();\n\t\tconst { statsToken } = await response.json();"
        },
        "depth_rank": 8
    },
    {
        "file": "federation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/cron/federation.ts",
        "code": {
            "setting": "\t\tconst setting = settings.get(id);\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tawait settingsRegistry.add(id, value);\n\t\t} else {",
            "siteUrl": "async function runFederation(): Promise<void> {\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst { protocol } = new URL(siteUrl);",
            "user": "\t\tconst user = await Users.findOne({ isRemote: true });\n\t\tconst user = await Users.findOne({ isRemote: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "userDataDownloads.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/cron/userDataDownloads.ts",
        "code": {
            "plug": "\tconst jobName = 'Generate download files for user data';\n\tconst jobName = 'Generate download files for user data';\n\tconst name = 'UserDataDownload';\n\tconst name = 'UserDataDownload';\n\n\tconst plug = async ({\n\tconst plug = async ({\n\t\tdisabled,\n\t\tprocessingFrequency,\n\t}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "videoConferences.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/cron/videoConferences.ts",
        "code": {
            "calls": "\tconst calls = await (await VideoConferenceModel.findAllLongRunning(minimum))\n\tconst calls = await (await VideoConferenceModel.findAllLongRunning(minimum))\n\t\t.map(({ _id: callId }: Pick<VideoConference, '_id'>) => callId)"
        },
        "depth_rank": 8
    },
    {
        "file": "EmailInbox_Outgoing.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Outgoing.ts",
        "code": {
            "t": "const getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\nconst getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\n\nconst language = settings.get<string>('Language') || 'en';\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => i18n.t(s, { lng: language });\nconst t = (s: string): string => i18n.t(s, { lng: language });",
            "function": "async function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\nasync function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\n\treturn inbox.smtp\n\t\t.sendMail({\n\t\t\tfrom: inbox.config.senderInfo\n\t\t\t\t? {\n\t\t\t\t\t\tname: inbox.config.senderInfo,\n\t\t\t\t\t\taddress: inbox.config.email,\n\t\t\t\t  }\n\t\t\t\t: inbox.config.email,\n\t\t\t...mail,\n\t\t})\n\t\t.then((info) => {\n\t\t\tlogger.info({ msg: 'Message sent', info });",
            "buffer": "\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tif (buffer) {\n\t\t\tvoid sendEmail(\n\t\t\t\tinbox,\n\t\t\t\t{\n\t\t\t\t\tto: room.email?.replyTo,\n\t\t\t\t\tsubject: room.email?.subject,\n\t\t\t\t\ttext: message?.attachments?.[0].description || '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: buffer,\n\t\t\t\t\t\t\tcontentType: file.type,\n\t\t\t\t\t\t\tfilename: file.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinReplyTo: Array.isArray(room.email?.thread) ? room.email?.thread[0] : room.email?.thread,\n\t\t\t\t\treferences: ([] as string[]).concat(room.email?.thread || []),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmsgId: message._id,\n\t\t\t\t\tsender: message.u.username,\n\t\t\t\t\trid: message.rid,\n\t\t\t\t},\n\t\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\t\t}\n\n\t\tawait Messages.updateOne(\n\t\t\t{ _id: message._id },"
        },
        "depth_rank": 9
    },
    {
        "file": "EmailInbox.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox.ts",
        "code": {
            "imap": "\t\t\tconst imap = new IMAPInterceptor(\n\t\t\tconst imap = new IMAPInterceptor(\n\t\t\t\t{\n\t\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\t\t...(emailInboxRecord.imap.secure\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\t\t\t\t\ttlsOptions: {\n\t\t\t\t\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {}),",
            "smtp": "\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });"
        },
        "depth_rank": 9
    },
    {
        "file": "EmailInbox_Incoming.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Incoming.ts",
        "code": {
            "t": "const language = settings.get<string>('Language') || 'en';\nconst language = settings.get<string>('Language') || 'en';\nconst t = (s: string): string => i18n.t(s, { lng: language });\nconst t = (s: string): string => i18n.t(s, { lng: language });"
        },
        "depth_rank": 9
    },
    {
        "file": "sendDirectMessageToUsers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/sendDirectMessageToUsers.ts",
        "code": {
            "fromUser": "\tconst fromUser = await Users.findOneById(fromId, { projection: { _id: 1, username: 1 } });\n\tconst fromUser = await Users.findOneById(fromId, { projection: { _id: 1, username: 1 } });",
            "users": "\tconst users = Users.findByIds(toIds, { projection: { _id: 1, username: 1, language: 1 } });\n\tconst users = Users.findByIds(toIds, { projection: { _id: 1, username: 1, language: 1 } });",
            "await": "\tconst success: string[] = [];\n\tconst success: string[] = [];\n\n\tfor await (const user of users) {\n\tfor await (const user of users) {\n\t\ttry {\n\t\t\tconst { rid } = await createDirectMessage([user.username], fromId);\n\t\t\tconst { rid } = await createDirectMessage([user.username], fromId);",
            "msg": "\t\t\tconst msg = typeof messageFn === 'function' ? messageFn(user) : messageFn;\n\t\t\tconst msg = typeof messageFn === 'function' ? messageFn(user) : messageFn;\n\n\t\t\tawait executeSendMessage(fromId, { rid, msg });"
        },
        "depth_rank": 8
    },
    {
        "file": "videoConfProviders.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/videoConfProviders.ts",
        "code": {
            "providers": "const providers = new Map<string, { capabilities: VideoConferenceCapabilities; label: string; appId: string }>();\nconst providers = new Map<string, { capabilities: VideoConferenceCapabilities; label: string; appId: string }>();",
            "defaultProvider": "\t\tconst key = providerName.toLowerCase();\n\t\tconst key = providerName.toLowerCase();\n\n\t\tif (providers.has(key)) {\n\t\t\tproviders.delete(key);\n\t\t}\n\t},\n\n\tgetActiveProvider(): string | undefined {\n\t\tif (providers.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultProvider = settings.get<string>('VideoConf_Default_Provider');\n\t\tconst defaultProvider = settings.get<string>('VideoConf_Default_Provider');\n\n\t\tif (defaultProvider) {\n\t\t\tif (providers.has(defaultProvider)) {\n\t\t\t\treturn defaultProvider;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (providers.size === 1) {\n\t\t\tconst [[name]] = [...providers];\n\t\t\tconst [[name]] = [...providers];\n\t\t\treturn name;\n\t\t}\n\t},\n\n\thasAnyProvider(): boolean {\n\t\treturn providers.size > 0;\n\t},\n\n\tgetProviderList(): { key: string; label: string }[] {\n\t\treturn [...providers.keys()].map((key) => ({ key, label: providers.get(key)?.label || key }));"
        },
        "depth_rank": 8
    },
    {
        "file": "isUserIdFederated.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/isUserIdFederated.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { federated: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { federated: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "parseMessageSearchQuery.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/parseMessageSearchQuery.ts",
        "code": {
            "parser": "\tconst parser = new MessageSearchQueryParser({ user, offset, limit, forceRegex });\n\tconst parser = new MessageSearchQueryParser({ user, offset, limit, forceRegex });"
        },
        "depth_rank": 8
    },
    {
        "file": "spotlight.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/spotlight.js",
        "code": {
            "roomIds": "\t\tconst searchableRoomTypeIds = roomCoordinator.searchableRoomTypes();\n\t\tconst searchableRoomTypeIds = roomCoordinator.searchableRoomTypes();\n\n\t\tconst roomIds = (\n\t\tconst roomIds = (\n\t\t\tawait SubscriptionsRaw.findByUserIdAndTypes(userId, searchableRoomTypeIds, {\n\t\t\t\tprojection: { rid: 1 },",
            "teamOptions": "\t\tconst teamOptions = { ...options, projection: { name: 1, type: 1 } };\n\t\tconst teamOptions = { ...options, projection: { name: 1, type: 1 } };",
            "room": "\t\tconst teams = await Team.search(userId, text, teamOptions);\n\t\tconst teams = await Team.search(userId, text, teamOptions);\n\t\tusers.push(...this.mapTeams(teams));\n\n\t\treturn users;\n\t}\n\n\tasync searchUsers({ userId, rid, text, usernames, mentions }) {\n\t\tconst users = [];\n\t\tconst users = [];\n\n\t\tconst options = {\n\t\tconst options = {\n\t\t\tlimit: settings.get('Number_of_users_autocomplete_suggestions'),\n\t\t\tprojection: {\n\t\t\t\tusername: 1,\n\t\t\t\tnickname: 1,\n\t\t\t\tname: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tstatusText: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t},\n\t\t\tsort: {\n\t\t\t\t[settings.get('UI_Use_Real_Name') ? 'name' : 'username']: 1,\n\t\t\t},\n\t\t\treadPreference: readSecondaryPreferred(Users.col.s.db),\n\t\t};\n\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, uids: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, _id: 1, t: 1, uids: 1 } });",
            "canListInsiders": "\t\tconst canListInsiders = canListOutsiders || (rid && (await canAccessRoomAsync(room, { _id: userId })));\n\t\tconst canListInsiders = canListOutsiders || (rid && (await canAccessRoomAsync(room, { _id: userId })));",
            "exactMatch": "\t\tconst searchParams = {\n\t\tconst searchParams = {\n\t\t\trid,\n\t\t\ttext,\n\t\t\tusernames,\n\t\t\toptions,\n\t\t\tusers,\n\t\t\tcanListOutsiders,\n\t\t\tinsiderExtraQuery,\n\t\t\tmentions,\n\t\t};\n\n\t\t// Exact match for username only\n\t\tif (rid && canListInsiders) {\n\t\t\tconst exactMatch = await Users.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n\t\t\tconst exactMatch = await Users.findOneByUsernameAndRoomIgnoringCase(text, rid, {\n\t\t\t\tprojection: options.projection,\n\t\t\t\treadPreference: options.readPreference,\n\t\t\t});\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(exactMatch);\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\tif (users.length === 0 && canListOutsiders && text) {\n\t\t\tconst exactMatch = await Users.findOneByUsernameIgnoringCase(text, {\n\t\t\tconst exactMatch = await Users.findOneByUsernameIgnoringCase(text, {\n\t\t\t\tprojection: options.projection,\n\t\t\t\treadPreference: options.readPreference,\n\t\t\t});\n\t\t\tif (exactMatch) {\n\t\t\t\tusers.push(this.mapOutsiders(exactMatch));\n\t\t\t\tthis.processLimitAndUsernames(options, usernames, users);\n\t\t\t}\n\t\t}\n\n\t\tif (canListInsiders && rid) {\n\t\t\t// Search for insiders\n\t\t\tif (await this._searchInsiderUsers(searchParams)) {\n\t\t\t\treturn users;\n\t\t\t}\n\n\t\t\t// Search for users that the requester has DMs with\n\t\t\tif (await this._searchConnectedUsers(userId, searchParams, 'd')) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t}\n\n\t\t// If the user can search outsiders, search for any user in the server\n\t\t// Otherwise, search for users that are subscribed to the same rooms as the requester\n\t\tif (canListOutsiders) {\n\t\t\tif (await this._searchOutsiderUsers(searchParams)) {\n\t\t\t\treturn users;\n\t\t\t}\n\t\t} else if (await this._searchConnectedUsers(userId, searchParams, 'd')) {"
        },
        "depth_rank": 8
    },
    {
        "file": "findUsersOfRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/findUsersOfRoom.ts",
        "code": {
            "searchFields": "\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\treturn Users.findPaginatedByActiveUsersExcept(filter, undefined, options, searchFields, [\n\t\t{\n\t\t\t__rooms: rid,\n\t\t\t...(status && { status }),"
        },
        "depth_rank": 8
    },
    {
        "file": "videoConfTypes.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/videoConfTypes.ts",
        "code": {
            "await": "\t\tfor await (const { data, condition } of typeConditions) {\n\t\tfor await (const { data, condition } of typeConditions) {\n\t\t\tif (await condition(room, allowRinging)) {\n\t\t\t\tif (typeof data === 'string') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: data,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\n\t\treturn { type: 'videoconference' };"
        },
        "depth_rank": 8
    },
    {
        "file": "getSubscriptionAutotranslateDefaultConfig.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/getSubscriptionAutotranslateDefaultConfig.ts",
        "code": {
            "languageSetting": "\tconst languageSetting = settings.get('Language');\n\tconst languageSetting = settings.get('Language');\n\n\tconst { language: userLanguage } = user.settings?.preferences || {};\n\tconst { language: userLanguage } = user.settings?.preferences || {};"
        },
        "depth_rank": 8
    },
    {
        "file": "sendMessagesToAdmins.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/sendMessagesToAdmins.ts",
        "code": {
            "result": "const getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\nconst getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;",
            "fromUser": "\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;\n\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;",
            "await": "\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\n\tfor await (const adminUser of users) {\n\tfor await (const adminUser of users) {\n\t\tif (fromUser) {\n\t\t\ttry {\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);"
        },
        "depth_rank": 8
    },
    {
        "file": "readMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/readMessages.ts",
        "code": {
            "projection": "\tconst projection = { ls: 1, tunread: 1, alert: 1, ts: 1 };\n\tconst projection = { ls: 1, tunread: 1, alert: 1, ts: 1 };",
            "sub": "\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection });",
            "lastSeen": "\tconst lastSeen = sub.ls || sub.ts;\n\tconst lastSeen = sub.ls || sub.ts;\n\tcallbacks.runAsync('afterReadMessages', rid, { uid, lastSeen });"
        },
        "depth_rank": 8
    },
    {
        "file": "resetUserE2EKey.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/resetUserE2EKey.ts",
        "code": {
            "user": "const sendResetNotification = async function (uid: string): Promise<void> {\nconst sendResetNotification = async function (uid: string): Promise<void> {\n\tconst user = await Users.findOneById(uid, {});\n\tconst user = await Users.findOneById(uid, {});",
            "addresses": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\tconst addresses = user.emails?.filter(({ verified }) => verified).map((e) => e.address);\n\tconst addresses = user.emails?.filter(({ verified }) => verified).map((e) => e.address);",
            "t": "\tconst t = (s: string): string => i18n.t(s, { lng: language });\n\tconst t = (s: string): string => i18n.t(s, { lng: language });",
            "await": "\tconst from = settings.get('From_Email');\n\tconst from = settings.get('From_Email');\n\tconst subject = t('E2E_key_reset_email');\n\tconst subject = t('E2E_key_reset_email');\n\n\tfor await (const address of addresses) {\n\tfor await (const address of addresses) {\n\t\ttry {\n\t\t\tawait Mailer.send({\n\t\t\t\tto: address,\n\t\t\t\tfrom,\n\t\t\t\tsubject,\n\t\t\t\ttext,\n\t\t\t\thtml,\n\t\t\t} as any);\n\t\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "migrations.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/migrations.ts",
        "code": {
            "await": "\t\tfor await (const migration of migrations) {\n\t\tfor await (const migration of migrations) {\n\t\t\tawait migration();\n\t\t}\n\t} catch (e) {"
        },
        "depth_rank": 8
    },
    {
        "file": "sendViaEmail.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/dataExport/sendViaEmail.ts",
        "code": {
            "missing": "\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\tconst emails = data.toEmails.map((email) => email.trim()).filter(Boolean);\n\n\tconst missing = [...data.toUsers].filter(Boolean);\n\tconst missing = [...data.toUsers].filter(Boolean);\n\n\t(\n\t\tawait Users.findUsersByUsernames(data.toUsers, {\n\t\t\tprojection: { 'username': 1, 'emails.address': 1 },",
            "localeFn": "\t\tconst localeFn = await getMomentLocale(lang);\n\t\tconst localeFn = await getMomentLocale(lang);\n\t\tif (localeFn) {\n\t\t\tFunction(localeFn).call({ moment });",
            "html": "\tconst html = (\n\tconst html = (\n\t\tawait Messages.findByRoomIdAndMessageIds(data.rid, data.messages, {\n\t\t\tsort: { ts: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "uploadZipFile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/dataExport/uploadZipFile.ts",
        "code": {
            "contentType": "\tconst contentType = 'application/zip';\n\tconst contentType = 'application/zip';\n\tconst { size } = await stat(filePath);\n\tconst { size } = await stat(filePath);"
        },
        "depth_rank": 9
    },
    {
        "file": "exportRoomMessagesToFile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/dataExport/exportRoomMessagesToFile.ts",
        "code": {
            "hideUserName": "const hideUserName = (\nconst hideUserName = (\n\tusername: string,\n\tuserData: Pick<IUser, 'username'> | undefined,\n\tusersMap: { userNameTable: Record<string, string> },",
            "getMessageData": "const getMessageData = (\nconst getMessageData = (\n\tmsg: IMessage,\n\thideUsers: boolean,\n\tuserData: Pick<IUser, 'username'> | undefined,\n\tusersMap: { userNameTable: Record<string, string> },",
            "messageObject": "\tconst username = hideUsers ? hideUserName(msg.u.username || msg.u.name || '', userData, usersMap) : msg.u.username;\n\tconst username = hideUsers ? hideUserName(msg.u.username || msg.u.name || '', userData, usersMap) : msg.u.username;\n\n\tconst messageObject = {\n\tconst messageObject = {\n\t\tmsg: msg.msg,\n\t\tusername,\n\t\tts: msg.ts,\n\t\t...(msg.attachments && {\n\t\t\tattachments: msg.attachments.map((attachment) => getAttachmentData(attachment, msg)),\n\t\t}),\n\t\t...(msg.t && { type: msg.t }),",
            "readPreference": "\tconst readPreference = readSecondaryPreferred();\n\tconst readPreference = readSecondaryPreferred();\n\n\tconst { cursor, totalCount } = Messages.findPaginated(\n\tconst { cursor, totalCount } = Messages.findPaginated("
        },
        "depth_rank": 9
    },
    {
        "file": "processDataDownloads.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/dataExport/processDataDownloads.ts",
        "code": {
            "dataToSave": "\tconst dataToSave = {\n\tconst dataToSave = {\n\t\tusername,\n\t\tname,\n\t\tstatusText,\n\t\temails: emails?.map(({ address }) => address),",
            "stream": "\t\tconst stream = createWriteStream(fileName, { encoding: 'utf8' });\n\t\tconst stream = createWriteStream(fileName, { encoding: 'utf8' });",
            "body": "\t\tconst subject = i18n.t('UserDataDownload_EmailSubject');\n\t\tconst subject = i18n.t('UserDataDownload_EmailSubject');\n\t\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\t\tdownload_link: getURL(getPath(file._id), { cdn: false, full: true }),"
        },
        "depth_rank": 9
    },
    {
        "file": "sendFile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/dataExport/sendFile.ts",
        "code": {
            "body": "\tconst subject = i18n.t('Channel_Export');\n\tconst subject = i18n.t('Channel_Export');\n\n\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\tconst body = i18n.t('UserDataDownload_EmailBody', {\n\t\tdownload_link: getURL(getPath(file._id), { cdn: false, full: true }),"
        },
        "depth_rank": 9
    },
    {
        "file": "findExistingCASUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/cas/findExistingCASUser.ts",
        "code": {
            "casUser": "\tconst casUser = await Users.findOne({ 'services.cas.external_id': username });\n\tconst casUser = await Users.findOne({ 'services.cas.external_id': username });",
            "user": "\tconst user = await Users.findOne({ regex });\n\tconst user = await Users.findOne({ regex });"
        },
        "depth_rank": 9
    },
    {
        "file": "createNewUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/cas/createNewUser.ts",
        "code": {
            "userId": "\tconst userId = Accounts.insertUserDoc({}, newUser);\n\tconst userId = Accounts.insertUserDoc({}, newUser);"
        },
        "depth_rank": 9
    },
    {
        "file": "loginHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/cas/loginHandler.ts",
        "code": {
            "userCreationEnabled": "\tconst credentials = await CredentialTokens.findOneNotExpiredById(options.cas.credentialToken);\n\tconst credentials = await CredentialTokens.findOneNotExpiredById(options.cas.credentialToken);\n\tif (credentials === undefined || credentials === null) {\n\t\tthrow new Meteor.Error(Accounts.LoginCancelledError.numericError, 'no matching login attempt found');\n\t}\n\n\tconst result = credentials.userInfo;\n\tconst result = credentials.userInfo;\n\tconst syncUserDataFieldMap = settings.get<string>('CAS_Sync_User_Data_FieldMap').trim();\n\tconst syncUserDataFieldMap = settings.get<string>('CAS_Sync_User_Data_FieldMap').trim();\n\tconst casVersion = parseFloat(settings.get('CAS_version') ?? '1.0');\n\tconst casVersion = parseFloat(settings.get('CAS_version') ?? '1.0');\n\tconst syncEnabled = settings.get('CAS_Sync_User_Data_Enabled');\n\tconst syncEnabled = settings.get('CAS_Sync_User_Data_Enabled');\n\tconst flagEmailAsVerified = settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts');\n\tconst flagEmailAsVerified = settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts');\n\tconst userCreationEnabled = settings.get('CAS_Creation_User_Enabled');\n\tconst userCreationEnabled = settings.get('CAS_Creation_User_Enabled');\n\n\tconst { username, attributes: credentialsAttributes } = result as { username: string; attributes: Record<string, string[]> };\n\tconst { username, attributes: credentialsAttributes } = result as { username: string; attributes: Record<string, string[]> };",
            "attributeMap": "\t\tconst attributeMap = wrapExceptions(() => JSON.parse(syncUserDataFieldMap) as Record<string, any>).catch((err) => {\n\t\tconst attributeMap = wrapExceptions(() => JSON.parse(syncUserDataFieldMap) as Record<string, any>).catch((err) => {\n\t\t\tlogger.error({ msg: 'Invalid JSON for attribute mapping', err });",
            "newUser": "\tconst newUser = await createNewUser(username, {\n\tconst newUser = await createNewUser(username, {\n\t\tattributes: internalAttributes,\n\t\tcasVersion,\n\t\tflagEmailAsVerified,\n\t});\n\n\treturn { userId: newUser._id };"
        },
        "depth_rank": 9
    },
    {
        "file": "logPayloads.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/logger/logPayloads.ts",
        "code": {
            "params": "\t\t\t\tconst params = method === 'ufsWrite' ? args.slice(1) : args;\n\t\t\t\tconst params = method === 'ufsWrite' ? args.slice(1) : args;\n\n\t\t\t\tif (method === 'saveSettings') {\n\t\t\t\t\treturn { arguments: [args[0].map((arg: any) => omit(arg, 'value'))] };"
        },
        "depth_rank": 9
    },
    {
        "file": "call.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/http/call.ts",
        "code": {
            "content": "\tconst followRedirects = options.followRedirects === false ? 'manual' : 'follow';\n\tconst followRedirects = options.followRedirects === false ? 'manual' : 'follow';\n\n\tconst requestOptions = {\n\tconst requestOptions = {\n\t\tmethod,\n\t\tjar: false,\n\t\ttimeout: options.timeout,\n\t\tbody: content,\n\t\tredirect: followRedirects,\n\t\treferrer: options.referrer,\n\t\tintegrity: options.integrity,\n\t\theaders,\n\t} as const;\n\t} as const;\n\n\tfetch(newUrl, requestOptions)\n\t\t.then(async (res) => {\n\t\t\tconst content = await res.text();\n\t\t\tconst content = await res.text();\n\t\t\tconst response: HTTPResponse = {};\n\t\t\tconst response: HTTPResponse = {};",
            "error": "\t\t\tfor (const entry of (res.headers as any).entries()) {\n\t\t\tfor (const entry of (res.headers as any).entries()) {\n\t\t\t\tconst [key, val] = entry;\n\t\t\t\tconst [key, val] = entry;\n\t\t\t\tresponse.headers[key] = val;\n\t\t\t}\n\n\t\t\tresponse.ok = res.ok;\n\t\t\tresponse.redirected = res.redirected;\n\n\t\t\tpopulateData(response);\n\n\t\t\tif (response.statusCode >= 400) {\n\t\t\t\tconst error = makeErrorByStatus(response.statusCode, response.content);\n\t\t\t\tconst error = makeErrorByStatus(response.statusCode, response.content);\n\t\t\t\twrappedCallback(error, response);\n\t\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "direct.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/direct.ts",
        "code": {
            "getCurrentUserId": "const DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\nconst DirectMessageRoomType = getDirectMessageRoomType(roomCoordinator);\n\nconst getCurrentUserId = (): string | undefined => {\nconst getCurrentUserId = (): string | undefined => {\n\ttry {\n\t\treturn Meteor.userId() || undefined;\n\t} catch (_e) {",
            "uid": "\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tconst uid = userId || getCurrentUserId();\n\t\t\tif (uid) {\n\t\t\t\treturn Subscriptions.findOneByRoomIdAndUserId(room._id, uid, { projection: { name: 1, fname: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "conversation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/conversation.ts",
        "code": {
            "ConversationRoomType": "const ConversationRoomType = getConversationRoomType(roomCoordinator);\nconst ConversationRoomType = getConversationRoomType(roomCoordinator);\n\nroomCoordinator.add(ConversationRoomType, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "unread.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/unread.ts",
        "code": {
            "UnreadRoomType": "const UnreadRoomType = getUnreadRoomType(roomCoordinator);\nconst UnreadRoomType = getUnreadRoomType(roomCoordinator);\n\nroomCoordinator.add(UnreadRoomType, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "favorite.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/favorite.ts",
        "code": {
            "FavoriteRoomType": "const FavoriteRoomType = getFavoriteRoomType(roomCoordinator);\nconst FavoriteRoomType = getFavoriteRoomType(roomCoordinator);\n\nroomCoordinator.add(FavoriteRoomType, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "voip.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/voip.ts",
        "code": {
            "text": "\t\tconst text = notificationMessage;\n\t\tconst text = notificationMessage;\n\n\t\treturn { title, text, name: room.name };"
        },
        "depth_rank": 10
    },
    {
        "file": "livechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/rooms/roomTypes/livechat.ts",
        "code": {
            "text": "\t\tconst text = notificationMessage;\n\t\tconst text = notificationMessage;\n\n\t\treturn { title, text, name: roomName };"
        },
        "depth_rank": 10
    },
    {
        "file": "deleteReportedMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/moderation/deleteReportedMessages.ts",
        "code": {
            "await": "\t\t\tfor await (const doc of cursor) {\n\t\t\tfor await (const doc of cursor) {\n\t\t\t\tawait Messages.cloneAndSaveAsHistoryByRecord(\n\t\t\t\t\tdoc,\n\t\t\t\t\tuser as Required<Pick<IUser, '_id' | 'name'>> & { username: NonNullable<IUser['username']> },"
        },
        "depth_rank": 9
    },
    {
        "file": "updateOAuthServices.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/oauth/updateOAuthServices.ts",
        "code": {
            "await": "\tconst filteredServices = services.filter(([, value]) => typeof value === 'boolean');\n\tconst filteredServices = services.filter(([, value]) => typeof value === 'boolean');\n\tfor await (const [key, value] of filteredServices) {\n\tfor await (const [key, value] of filteredServices) {\n\t\tlogger.debug({ oauth_updated: key });"
        },
        "depth_rank": 9
    },
    {
        "file": "validateRoleList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/roles/validateRoleList.ts",
        "code": {
            "existingRoleIds": "\tconst options = {\n\tconst options = {\n\t\tprojection: {\n\t\t\t_id: 1,\n\t\t},\n\t};\n\n\tconst existingRoleIds = (await Roles.findInIds<Pick<IRole, '_id'>>(roleIds, options).toArray()).map(({ _id }) => _id);\n\tconst existingRoleIds = (await Roles.findInIds<Pick<IRole, '_id'>>(roleIds, options).toArray()).map(({ _id }) => _id);"
        },
        "depth_rank": 9
    },
    {
        "file": "createOrUpdateProtectedRole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/roles/createOrUpdateProtectedRole.ts",
        "code": {
            "role": "\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'name' | 'scope' | 'description' | 'mandatory2fa'>>(roleId, {\n\tconst role = await Roles.findOneById<Pick<IRole, '_id' | 'name' | 'scope' | 'description' | 'mandatory2fa'>>(roleId, {\n\t\tprojection: { name: 1, scope: 1, description: 1, mandatory2fa: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "removeUserFromRoles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/roles/removeUserFromRoles.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "getSettingsStatistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/statistics/getSettingsStatistics.ts",
        "code": {
            "settingsBase": "\t\tconst settingsBase = [\n\t\tconst settingsBase = [\n\t\t\t{ key: 'Accounts_TwoFactorAuthentication_Enabled', alias: 'account2fa' },",
            "alias": "\t\tconst settingsIDs = settingsBase.map((el) => el.key);\n\t\tconst settingsIDs = settingsBase.map((el) => el.key);\n\n\t\tconst settingsStatistics = (\n\t\tconst settingsStatistics = (\n\t\t\tawait Settings.findByIds(settingsIDs)\n\t\t\t\t.map((el): ISettingStatistics => {\n\t\t\t\t\tconst alias = settingsBase.find((obj) => obj.key === el._id)?.alias || {};\n\t\t\t\t\tconst alias = settingsBase.find((obj) => obj.key === el._id)?.alias || {};",
            "staticticObject": "\t\tconst staticticObject = await setSettingsStatistics(settingsStatistics);\n\t\tconst staticticObject = await setSettingsStatistics(settingsStatistics);\n\n\t\treturn staticticObject;\n\t} catch (error: any) {"
        },
        "depth_rank": 9
    },
    {
        "file": "DataConverter.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/ldap/DataConverter.ts",
        "code": {
            "emailUser": "\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});"
        },
        "depth_rank": 9
    },
    {
        "file": "Manager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/ldap/Manager.ts",
        "code": {
            "ldap": "\t\t\tconst ldap = new LDAPConnection();\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.testConnection();\n\t\t} catch (error) {",
            "user": "\t\t\tconst slugifiedUsername = this.slugifyUsername(ldapUser, username);\n\t\t\tconst slugifiedUsername = this.slugifyUsername(ldapUser, username);\n\t\t\tconst user = await this.findExistingUser(ldapUser, slugifiedUsername);\n\t\t\tconst user = await this.findExistingUser(ldapUser, slugifiedUsername);\n\n\t\t\tif (user) {\n\t\t\t\treturn await this.loginExistingUser(ldap, user, ldapUser);\n\t\t\t}\n\n\t\t\treturn await this.loginNewUserFromLDAP(slugifiedUsername, ldap, ldapUser);\n\t\t} finally {",
            "hash": "\t\tconst hash = SHA256(avatar.toString());\n\t\tconst hash = SHA256(avatar.toString());\n\t\tif (user.avatarETag === hash) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug({ msg: 'Syncing user avatar', username: user.username });",
            "uniqueIdentifierField": "\t\tconst uniqueIdentifierField = this.getLdapUserUniqueID(ldapUser);\n\t\tconst uniqueIdentifierField = this.getLdapUserUniqueID(ldapUser);\n\n\t\tif (uniqueIdentifierField) {\n\t\t\tlogger.debug({ msg: 'Querying user', uniqueId: uniqueIdentifierField.value });",
            "syncData": "\t\tconst syncData = forceUserSync || (settings.get<boolean>('LDAP_Update_Data_On_Login') ?? true);\n\t\tconst syncData = forceUserSync || (settings.get<boolean>('LDAP_Update_Data_On_Login') ?? true);\n\t\tlogger.debug({ msg: 'Logging user in', syncData });",
            "updatedUser": "\t\tconst updatedUser = (syncData && (await this.syncUserForLogin(ldapUser, user))) || user;\n\t\tconst updatedUser = (syncData && (await this.syncUserForLogin(ldapUser, user))) || user;\n\n\t\tawait this.onLogin(ldapUser, updatedUser, password, ldap, false);\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t};\n\t}\n\n\tprivate static async syncUserForLogin(\n\t\tldapUser: ILDAPEntry,\n\t\texistingUser?: IUser,\n\t\tusedUsername?: string | undefined,\n\t): Promise<IUser | undefined> {\n\t\tlogger.debug({\n\t\t\tmsg: 'Syncing user data',\n\t\t\tldapUser: omit(ldapUser, '_raw'),\n\t\t\tuser: { ...(existingUser && { email: existingUser.emails, _id: existingUser._id }) },",
            "options": "\t\tconst options = this.getConverterOptions();\n\t\tconst options = this.getConverterOptions();\n\t\tawait LDAPDataConverter.convertSingleUser(userData, options);\n\n\t\treturn existingUser || this.findExistingLDAPUser(ldapUser);\n\t}\n\n\tprivate static getLdapUserUniqueID(ldapUser: ILDAPEntry): ILDAPUniqueIdentifierField | undefined {\n\t\tlet uniqueIdentifierField: string | string[] | undefined = settings.get<string>('LDAP_Unique_Identifier_Field');\n\n\t\tif (uniqueIdentifierField) {\n\t\t\tuniqueIdentifierField = uniqueIdentifierField.replace(/\\s/g, '').split(',');\n\t\t} else {"
        },
        "depth_rank": 9
    },
    {
        "file": "Connection.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/lib/ldap/Connection.ts",
        "code": {
            "results": "\t\tconst results = await this.searchById(id, attribute);\n\t\tconst results = await this.searchById(id, attribute);\n\t\tif (results.length === 1) {\n\t\t\treturn results[0];\n\t\t}\n\t}\n\n\tpublic async searchAllUsers<T = ldapjs.SearchEntry>({\n\t\tdataCallback,\n\t\tendCallback,\n\t\tentryCallback,\n\t}: ILDAPSearchAllCallbacks<T>): Promise<void> {",
            "result": "\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tconst result = entryCallback ? entryCallback(entry) : entry;\n\t\t\t\t\tentries.push(result as T);\n\n\t\t\t\t\tif (entries.length >= internalPageSize) {\n\t\t\t\t\t\tthis.processSearchPage<T>(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t\ttitle: 'Internal Page',\n\t\t\t\t\t\t\t\tend: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tentries = [];\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "streamer.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/streamer/streamer.module.ts",
        "code": {
            "subByEventName": "\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fn === 'none' || fn === false) {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (fn === 'logged') {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\trules[eventName] = async function (): Promise<boolean> {\n\t\t\t\t\treturn Boolean(this.userId);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n\tallowRead(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowRead, 'allowRead')(eventName, fn);\n\t}\n\n\tallowWrite(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowWrite, 'allowWrite')(eventName, fn);\n\t}\n\n\tallowEmit(eventName: string | boolean | Rule, fn?: Rule | 'all' | 'none' | 'logged'): void {\n\t\tthis.allow(this._allowEmit, 'allowEmit')(eventName, fn);\n\t}\n\n\tprivate isAllowed(rules: IRules) {\n\t\treturn async (scope: IPublication, eventName: string, args: any): Promise<boolean | object> => {\n\t\t\tif (rules[eventName]) {\n\t\t\t\treturn rules[eventName].call(scope, eventName, ...args);\n\t\t\t}\n\n\t\t\treturn rules.__all__.call(scope, eventName, ...args);\n\t\t};\n\t}\n\n\tasync isReadAllowed(scope: IPublication, eventName: string, args: any): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowRead)(scope, eventName, args);\n\t}\n\n\tasync isEmitAllowed(scope: IPublication, eventName: string, ...args: any[]): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowEmit)(scope, eventName, args);\n\t}\n\n\tasync isWriteAllowed(scope: IPublication, eventName: string, args: any): Promise<boolean | object> {\n\t\treturn this.isAllowed(this._allowWrite)(scope, eventName, args);\n\t}\n\n\taddSubscription(subscription: DDPSubscription, eventName: string): void {\n\t\tthis.subscriptions.add(subscription);\n\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName) || new Set();\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName) || new Set();\n\t\tsubByEventName.add(subscription);\n\n\t\tthis.subscriptionsByEventName.set(eventName, subByEventName);\n\t}\n\n\tremoveSubscription(subscription: DDPSubscription, eventName: string): void {\n\t\tthis.subscriptions.delete(subscription);\n\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName);\n\t\tconst subByEventName = this.subscriptionsByEventName.get(eventName);\n\t\tif (subByEventName) {\n\t\t\tsubByEventName.delete(subscription);\n\t\t}\n\t}\n\n\tasync _publish(\n\t\tpublication: IPublication,\n\t\teventName: string,\n\t\toptions: boolean | { useCollection?: boolean; args?: any } = false,",
            "subscription": "\t\tconst subscription = {\n\t\tconst subscription = {\n\t\t\tsubscription: publication,\n\t\t\teventName,\n\t\t};\n\n\t\tthis.addSubscription(subscription, eventName);\n\n\t\tpublication.onStop(() => {\n\t\t\tthis.removeSubscription(subscription, eventName);\n\t\t});\n\n\t\t// DDPStreamer doesn't have this\n\t\tif (useCollection === true) {\n\t\t\t// Collection compatibility\n\t\t\tpublication._session.sendAdded(this.subscriptionName, 'id', {\n\t\t\t\teventName,\n\t\t\t});\n\t\t}\n\n\t\tpublication.ready();\n\n\t\tsuper.emit('_afterPublish', this, publication, eventName, options);\n\t}\n\n\tabstract registerPublication(\n\t\tname: string,\n\t\tfn: (eventName: string, options: boolean | { useCollection?: boolean; args?: any }) => Promise<void>,",
            "_emit": "\t\tconst _publish = this._publish.bind(this);\n\t\tconst _publish = this._publish.bind(this);\n\t\tthis.registerPublication(\n\t\t\tthis.subscriptionName,\n\t\t\tasync function (this: IPublication, eventName: string, options: boolean | { useCollection?: boolean; args?: any }) {\n\t\t\tasync function (this: IPublication, eventName: string, options: boolean | { useCollection?: boolean; args?: any }) {\n\t\t\t\treturn _publish(this, eventName, options);\n\t\t\t},\n\t\t);\n\t}\n\n\tabstract registerMethod(methods: Record<string, (eventName: string, ...args: any[]) => any>): void;\n\n\tinitMethod(): void {\n\t\tconst isWriteAllowed = this.isWriteAllowed.bind(this);\n\t\tconst isWriteAllowed = this.isWriteAllowed.bind(this);\n\t\tconst __emit = this.__emit.bind(this);\n\t\tconst __emit = this.__emit.bind(this);\n\t\tconst _emit = this._emit.bind(this);\n\t\tconst _emit = this._emit.bind(this);\n\t\tconst { retransmit } = this;\n\t\tconst { retransmit } = this;"
        },
        "depth_rank": 9
    },
    {
        "file": "cloudAnnouncements.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/core-apps/cloudAnnouncements.module.ts",
        "code": {
            "announcement": "\t\tconst announcement = await Banners.findOneById<Pick<IBanner, 'surface'>>(viewId, { projection: { surface: 1 } });\n\t\tconst announcement = await Banners.findOneById<Pick<IBanner, 'surface'>>(viewId, { projection: { surface: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "mention.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/core-apps/mention.module.ts",
        "code": {
            "usernames": "\t\tconst mentions = retrieveMentionsFromPayload(stringifiedMentions);\n\t\tconst mentions = retrieveMentionsFromPayload(stringifiedMentions);\n\n\t\tconst usernames = mentions.map(({ username }) => username);\n\t\tconst usernames = mentions.map(({ username }) => username);",
            "message": "\t\tconst message = await Messages.findOneById(referenceMessageId, { projection: { _id: 1, tmid: 1 } });\n\t\tconst message = await Messages.findOneById(referenceMessageId, { projection: { _id: 1, tmid: 1 } });",
            "sub": "\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(payload.room, payload.user._id, { projection: { t: 1, rid: 1, name: 1 } });\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(payload.room, payload.user._id, { projection: { t: 1, rid: 1, name: 1 } });",
            "roomPath": "\t\t\tconst roomPath = roomCoordinator.getRouteLink(sub.t, { rid: sub.rid, name: sub.name });\n\t\t\tconst roomPath = roomCoordinator.getRouteLink(sub.t, { rid: sub.rid, name: sub.name });"
        },
        "depth_rank": 9
    },
    {
        "file": "createModal.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/core-apps/nps/createModal.ts",
        "code": {
            "language": "\tconst language = user.language || settings.get('Language') || 'en';\n\tconst language = user.language || settings.get('Language') || 'en';\n\n\treturn {\n\t\ttype,\n\t\ttriggerId,\n\t\tappId,\n\t\tview: {\n\t\t\tappId,\n\t\t\ttype: 'modal',\n\t\t\tid,\n\t\t\ttitle: {\n\t\t\t\ttype: 'plain_text',\n\t\t\t\ttext: i18n.t('We_appreciate_your_feedback', { lng: language }),"
        },
        "depth_rank": 10
    },
    {
        "file": "watchers.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/watchers/watchers.module.ts",
        "code": {
            "message": "\t\t\t\t\tconst message = await getMessageToBroadcast({ id, data });\n\t\t\t\t\tconst message = await getMessageToBroadcast({ id, data });",
            "trash": "\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1 },",
            "subscription": "\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tconst subscription = trash || { _id: id };",
            "data": "\t\tconst data = eventData ?? (await LivechatPriority.findOne({ _id: id }));\n\t\tconst data = eventData ?? (await LivechatPriority.findOne({ _id: id }));",
            "room": "\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));",
            "history": "\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "messages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/watchers/lib/messages.ts",
        "code": {
            "getSettingCached": "const getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\nconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });",
            "user": "const getUserNameCached = mem(\nconst getUserNameCached = mem(\n\tasync (userId: string): Promise<string | undefined> => {\n\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });",
            "message": "\tconst message = await getMessageToBroadcast({ id, data });\n\tconst message = await getMessageToBroadcast({ id, data });"
        },
        "depth_rank": 10
    },
    {
        "file": "notifications.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/notifications/notifications.module.ts",
        "code": {
            "canAccess": "\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });\n\t\t\t\tconst canAccess = await Authorization.canAccessRoom(room, { _id: this.userId });",
            "roomParticipant": "\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\t\t\t\tconst roomParticipant = await Subscriptions.countByRoomIdAndUserId(room._id, this.userId);\n\n\t\t\t\treturn {\n\t\t\t\t\troomParticipant: roomParticipant > 0,\n\t\t\t\t\troomType: room.t,\n\t\t\t\t\troomName: room.name,\n\t\t\t\t};\n\t\t\t} catch (error) {",
            "room": "\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\tconst room = await Rooms.findOneById<Pick<IOmnichannelRoom, 't' | 'v'>>(roomId, {\n\t\t\t\tprojection: { _id: 0, t: 1, v: 1 },",
            "function": "\t\t\tconst canAccess = await Authorization.canAccessRoomId(room._id, this.userId);\n\t\t\tconst canAccess = await Authorization.canAccessRoomId(room._id, this.userId);\n\n\t\t\treturn canAccess;\n\t\t});\n\n\t\tasync function canType({\n\t\tasync function canType({\n\t\t\tuserId,\n\t\t\tusername,\n\t\t\textraData,\n\t\t\trid,\n\t\t}: {",
            "subscriptions": "\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>(\n\t\t\t\t\t{ 'u._id': userId },"
        },
        "depth_rank": 9
    },
    {
        "file": "listeners.module.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/modules/listeners/listeners.module.ts",
        "code": {
            "value": "\t\t\tconst value = {\n\t\t\tconst value = {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t\t...(isSettingColor(setting) && { editor: setting.editor }),"
        },
        "depth_rank": 9
    },
    {
        "file": "userDataDownload.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/routes/userDataDownload.ts",
        "code": {
            "matchUID": "const cookies = new Cookies();\nconst cookies = new Cookies();\n\nconst matchUID = async (uid: string | undefined, token: string | undefined, ownerUID: string) => {\nconst matchUID = async (uid: string | undefined, token: string | undefined, ownerUID: string) => {\n\treturn (\n\t\tuid &&\n\t\ttoken &&\n\t\tuid === ownerUID &&\n\t\tBoolean(await Users.findOneByIdAndLoginToken(uid, hashLoginToken(token), { projection: { _id: 1 } }))",
            "matchFileRoute": "const matchFileRoute = match<{ fileID: string }>('/:fileID', { decode: decodeURIComponent });\nconst matchFileRoute = match<{ fileID: string }>('/:fileID', { decode: decodeURIComponent });"
        },
        "depth_rank": 8
    },
    {
        "file": "i18n.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/routes/i18n.ts",
        "code": {
            "matchRoute": "const matchRoute = match<{ lng: string }>('/:lng.json', { decode: decodeURIComponent });\nconst matchRoute = match<{ lng: string }>('/:lng.json', { decode: decodeURIComponent });",
            "match": "\tconst match = matchRoute(url.pathname);\n\tconst match = matchRoute(url.pathname);\n\n\tif (match === false) {\n\t\tres.writeHead(400);\n\t\tres.end();\n\t\treturn;\n\t}\n\n\tconst { lng } = match.params;\n\tconst { lng } = match.params;"
        },
        "depth_rank": 8
    },
    {
        "file": "utils.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/routes/avatar/utils.js",
        "code": {
            "function": "async function isUserAuthenticated({ headers, query }) {\nasync function isUserAuthenticated({ headers, query }) {\n\tlet { rc_uid, rc_token } = query;",
            "userFound": "\tconst userFound = await Users.findOneByIdAndLoginToken(rc_uid, hashLoginToken(rc_token), { projection: { _id: 1 } }); // TODO memoize find\n\tconst userFound = await Users.findOneByIdAndLoginToken(rc_uid, hashLoginToken(rc_token), { projection: { _id: 1 } }); // TODO memoize find",
            "isAuthenticated": "\tconst isAuthenticated = await isUserAuthenticated({ headers, query });\n\tconst isAuthenticated = await isUserAuthenticated({ headers, query });"
        },
        "depth_rank": 9
    },
    {
        "file": "room.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/routes/avatar/room.js",
        "code": {
            "room": "const cookie = new Cookies();\nconst cookie = new Cookies();\nconst getRoomAvatar = async (roomId) => {\nconst getRoomAvatar = async (roomId) => {\n\tconst room = await Rooms.findOneById(roomId, { projection: { t: 1, prid: 1, name: 1, fname: 1, federated: 1 } });\n\tconst room = await Rooms.findOneById(roomId, { projection: { t: 1, prid: 1, name: 1, fname: 1, federated: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "IMAPInterceptor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/email/IMAPInterceptor.ts",
        "code": {
            "cb": "\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "watchDb.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/watchDb.ts",
        "code": {
            "watcher": "const watcher = new DatabaseWatcher({ db, _oplogHandle: (mongo as any)._oplogHandle, metrics, logger: Logger });\nconst watcher = new DatabaseWatcher({ db, _oplogHandle: (mongo as any)._oplogHandle, metrics, logger: Logger });"
        },
        "depth_rank": 8
    },
    {
        "file": "localServices.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/localServices.ts",
        "code": {
            "broker": "const broker = new LocalBroker();\nconst broker = new LocalBroker();\n\nbroker.onBroadcast((eventName: string, args: unknown[]) => {\n\tStreamerCentral.emit('broadcast', 'local', 'broadcast', [{ eventName, args }]);"
        },
        "depth_rank": 8
    },
    {
        "file": "callbacks.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/callbacks.ts",
        "code": {
            "stopTimer": "\t\tconst start = performance.now();\n\t\tconst start = performance.now();\n\n\t\tconst stopTimer = metrics.rocketchatCallbacks.startTimer({ hook, callback: id });\n\t\tconst stopTimer = metrics.rocketchatCallbacks.startTimer({ hook, callback: id });"
        },
        "depth_rank": 8
    },
    {
        "file": "serverRunning.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/serverRunning.js",
        "code": {
            "skipMongoDbDeprecationBanner": "const exitIfNotBypassed = (ignore, errorCode = 1) => {\nconst exitIfNotBypassed = (ignore, errorCode = 1) => {\n\tif (typeof ignore === 'string' && ['yes', 'true'].includes(ignore.toLowerCase())) {\n\t\treturn;\n\t}\n\n\tprocess.exit(errorCode);\n};\n\nconst skipMongoDbDeprecationCheck = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_CHECK).toLowerCase());\nconst skipMongoDbDeprecationCheck = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_CHECK).toLowerCase());\nconst skipMongoDbDeprecationBanner = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_BANNER).toLowerCase());\nconst skipMongoDbDeprecationBanner = ['yes', 'true'].includes(String(process.env.SKIP_MONGODEPRECATION_BANNER).toLowerCase());\n\nMeteor.startup(async () => {\n\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = await getMongoInfo();\n\tconst { oplogEnabled, mongoVersion, mongoStorageEngine } = await getMongoInfo();"
        },
        "depth_rank": 8
    },
    {
        "file": "initialData.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/initialData.js",
        "code": {
            "exists": "\t\tconst exists = await Rooms.findOneById('GENERAL', { projection: { _id: 1 } });\n\t\tconst exists = await Rooms.findOneById('GENERAL', { projection: { _id: 1 } });",
            "upload": "\t\t\tconst buffer = Buffer.from(await Assets.getBinaryAsync('avatars/rocketcat.png'));\n\t\t\tconst buffer = Buffer.from(await Assets.getBinaryAsync('avatars/rocketcat.png'));\n\n\t\t\tconst rs = RocketChatFile.bufferToStream(buffer, 'utf8');\n\t\t\tconst rs = RocketChatFile.bufferToStream(buffer, 'utf8');\n\t\t\tconst fileStore = FileUpload.getStore('Avatars');\n\t\t\tconst fileStore = FileUpload.getStore('Avatars');\n\t\t\tawait fileStore.deleteByName('rocket.cat');\n\n\t\t\tconst file = {\n\t\t\tconst file = {\n\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\ttype: 'image/png',\n\t\t\t\tsize: buffer.length,\n\t\t\t};\n\n\t\t\tconst upload = await fileStore.insert(file, rs);\n\t\t\tconst upload = await fileStore.insert(file, rs);\n\t\t\tawait Users.setAvatarData('rocket.cat', 'local', upload.etag);\n\t\t}\n\t} catch (error) {",
            "oldestUser": "\t\tconst oldestUser = await Users.getOldest({ projection: { _id: 1, username: 1, name: 1 } });\n\t\tconst oldestUser = await Users.getOldest({ projection: { _id: 1, username: 1, name: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "v277.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/migrations/v277.ts",
        "code": {
            "oldSettings": "\t\tconst oldSettings = await Settings.findOne({ _id: 'email_style' });\n\t\tconst oldSettings = await Settings.findOne({ _id: 'email_style' });"
        },
        "depth_rank": 9
    },
    {
        "file": "v290.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/migrations/v290.ts",
        "code": {
            "currentPriorities": "\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tawait LivechatPriority.deleteMany({});"
        },
        "depth_rank": 9
    },
    {
        "file": "v295.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/startup/migrations/v295.ts",
        "code": {
            "ldapSyncInterval": "\t\tconst oldLdapDefault = 'Every 24 hours';\n\t\tconst oldLdapDefault = 'Every 24 hours';\n\t\tconst oldCrowdDefault = 'Every 60 mins';\n\t\tconst oldCrowdDefault = 'Every 60 mins';\n\n\t\tconst newLdapDefault = 'every_24_hours';\n\t\tconst newLdapDefault = 'every_24_hours';\n\t\tconst newCrowdDefault = 'every_1_hours';\n\t\tconst newCrowdDefault = 'every_1_hours';\n\n\t\tconst ldapSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('LDAP_Background_Sync_Interval', {\n\t\tconst ldapSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('LDAP_Background_Sync_Interval', {\n\t\t\tprojection: { value: 1 },",
            "crowdSyncInterval": "\t\tconst crowdSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('CROWD_Sync_Interval', { projection: { value: 1 } });\n\t\tconst crowdSyncInterval = await Settings.findOneById<Pick<ISetting, 'value'>>('CROWD_Sync_Interval', { projection: { value: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "ufs-methods.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/ufs/ufs-methods.ts",
        "code": {
            "file": "\t\t\tconst file = await store.getCollection().findOne({ _id: fileId });\n\t\t\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 8
    },
    {
        "file": "ufs-store.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/ufs/ufs-store.ts",
        "code": {
            "file": "\t\tconst file = await this.getCollection().findOne(fileId, { projection: { name: 1 } });\n\t\tconst file = await this.getCollection().findOne(fileId, { projection: { name: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "ufs-server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/ufs/ufs-server.ts",
        "code": {
            "mode": "\tconst path = UploadFS.config.tmpDir;\n\tconst path = UploadFS.config.tmpDir;\n\tconst mode = UploadFS.config.tmpDirPermissions;\n\tconst mode = UploadFS.config.tmpDirPermissions;\n\n\tfs.stat(path, (err) => {\n\t\tif (err) {\n\t\t\t// Create the temp directory\n\t\t\tmkdirp(path, { mode })",
            "file": "\t\tconst file = await store.getCollection().findOne({ _id: fileId });\n\t\tconst file = await store.getCollection().findOne({ _id: fileId });"
        },
        "depth_rank": 8
    },
    {
        "file": "ufs-gridfs.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/ufs/ufs-gridfs.ts",
        "code": {
            "const": "\t\t// const mongo = MongoInternals.NpmModule;\n\t\t// const mongo = MongoInternals.NpmModule;\n\t\tconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;\n\t\tconst { db } = MongoInternals.defaultRemoteCollectionDriver().mongo;",
            "file": "\t\t\tconst file = await db.collection(collectionName).findOne({ _id: fileId });\n\t\t\tconst file = await db.collection(collectionName).findOne({ _id: fileId });"
        },
        "depth_rank": 8
    },
    {
        "file": "ufs-local.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/ufs/ufs-local.ts",
        "code": {
            "file": "\t\tconst file = fileParam || (await this.getCollection().findOne(fileId, { projection: { extension: 1 } }));\n\t\tconst file = fileParam || (await this.getCollection().findOne(fileId, { projection: { extension: 1 } }));"
        },
        "depth_rank": 8
    },
    {
        "file": "addAllUserToRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/addAllUserToRoom.ts",
        "code": {
            "autoTranslateConfig": "\t\t\tconst autoTranslateConfig = getSubscriptionAutotranslateDefaultConfig(user);\n\t\t\tconst autoTranslateConfig = getSubscriptionAutotranslateDefaultConfig(user);\n\t\t\tawait Subscriptions.createWithRoomAndUser(room, user, {\n\t\t\t\tts: now,\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tunread: 1,\n\t\t\t\tuserMentions: 1,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\t...autoTranslateConfig,\n\t\t\t});\n\t\t\tawait Message.saveSystemMessage('uj', rid, user.username || '', user, { ts: now });"
        },
        "depth_rank": 8
    },
    {
        "file": "browseChannels.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/browseChannels.ts",
        "code": {
            "getChannelsAndGroups": "const getChannelsAndGroups = async (\nconst getChannelsAndGroups = async (\n\tuser: IUser & { __rooms?: IRoom['_id'][] },",
            "publicTeamIds": "\tconst teams = await Team.getAllPublicTeams();\n\tconst teams = await Team.getAllPublicTeams();\n\tconst publicTeamIds = teams.map(({ _id }) => _id);\n\tconst publicTeamIds = teams.map(({ _id }) => _id);",
            "userTeamsIds": "\tconst userTeamsIds = (await Team.listTeamsBySubscriberUserId(user._id, { projection: { teamId: 1 } }))?.map(({ teamId }) => teamId) || [];\n\tconst userTeamsIds = (await Team.listTeamsBySubscriberUserId(user._id, { projection: { teamId: 1 } }))?.map(({ teamId }) => teamId) || [];",
            "userRooms": "\tconst userRooms = user.__rooms ?? [];\n\tconst userRooms = user.__rooms ?? [];\n\n\tconst { cursor, totalCount } = Rooms.findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(\n\tconst { cursor, totalCount } = Rooms.findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(",
            "teamIds": "\tconst [result, total] = await Promise.all([cursor.toArray(), totalCount]);\n\tconst [result, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\tconst teamIds = result.map(({ teamId }) => teamId).filter(isTruthy);\n\tconst teamIds = result.map(({ teamId }) => teamId).filter(isTruthy);",
            "teamsMains": "\tconst teamsMains = await Team.listByIds([...new Set(teamIds)], { projection: { _id: 1, name: 1 } });\n\tconst teamsMains = await Team.listByIds([...new Set(teamIds)], { projection: { _id: 1, name: 1 } });",
            "team": "\tconst results = result.map((room) => {\n\tconst results = result.map((room) => {\n\t\tif (room.teamId) {\n\t\t\tconst team = teamsMains.find((mainRoom) => mainRoom._id === room.teamId);\n\t\t\tconst team = teamsMains.find((mainRoom) => mainRoom._id === room.teamId);\n\t\t\tif (team) {\n\t\t\t\treturn { ...room, belongsTo: team.name };",
            "ids": "\tconst userSubs = await Subscriptions.findByUserId(user._id).toArray();\n\tconst userSubs = await Subscriptions.findByUserId(user._id).toArray();\n\tconst ids = userSubs.map((sub) => sub.rid);\n\tconst ids = userSubs.map((sub) => sub.rid);\n\tconst { cursor, totalCount } = Rooms.findPaginatedContainingNameOrFNameInIdsAsTeamMain(\n\tconst { cursor, totalCount } = Rooms.findPaginatedContainingNameOrFNameInIdsAsTeamMain(",
            "findUsers": "\tconst results = await Promise.all(\n\tconst results = await Promise.all(\n\t\t(\n\t\t\tawait cursor.toArray()\n\t\t).map(async (room) => ({\n\t\t\t...room,\n\t\t\troomsCount: await getChannelsCountForTeam(room.teamId),\n\t\t})),\n\t);\n\n\treturn {\n\t\ttotal: await totalCount,\n\t\tresults,\n\t};\n};\n\nconst findUsers = async ({\nconst findUsers = async ({\n\ttext,\n\tsort,\n\tpagination,\n\tworkspace,\n\tviewFullOtherUserInfo,\n}: {",
            "options": "\tconst searchFields =\n\tconst searchFields =\n\t\tworkspace === 'all' ? ['username', 'name', 'emails.address'] : settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\tconst options = {\n\tconst options = {\n\t\t...pagination,\n\t\tsort,\n\t\tprojection: {\n\t\t\tusername: 1,\n\t\t\tname: 1,\n\t\t\tnickname: 1,\n\t\t\tbio: 1,\n\t\t\tcreatedAt: 1,\n\t\t\t...(viewFullOtherUserInfo && { emails: 1 }),"
        },
        "depth_rank": 8
    },
    {
        "file": "loadHistory.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/loadHistory.ts",
        "code": {
            "room": "\t\tconst fromId = Meteor.userId();\n\t\tconst fromId = Meteor.userId();\n\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "sendConfirmationEmail.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/sendConfirmationEmail.ts",
        "code": {
            "user": "\t\tconst email = to.trim();\n\t\tconst email = to.trim();\n\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "deleteUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/deleteUser.ts",
        "code": {
            "adminCount": "\t\tconst adminCount = await Users.col.countDocuments({ roles: 'admin' });\n\t\tconst adminCount = await Users.col.countDocuments({ roles: 'admin' });"
        },
        "depth_rank": 8
    },
    {
        "file": "getRoomNameById.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/getRoomNameById.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "sendForgotPasswordEmail.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/sendForgotPasswordEmail.ts",
        "code": {
            "user": "\t\tconst email = to.trim().toLowerCase();\n\t\tconst email = to.trim().toLowerCase();\n\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByEmailAddress(email, { projection: { _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "getPasswordPolicy.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/getPasswordPolicy.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOne({ 'services.password.reset.token': params.token });\n\t\tconst user = await Users.findOne({ 'services.password.reset.token': params.token });"
        },
        "depth_rank": 8
    },
    {
        "file": "removeUserFromRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/removeUserFromRoom.ts",
        "code": {
            "subscription": "\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, removedUser._id, {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(data.rid, removedUser._id, {\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "unmuteUserInRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/unmuteUserInRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "muteUserInRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/muteUserInRoom.ts",
        "code": {
            "subscription": "\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\tconst subscription = await Subscriptions.findOneByRoomIdAndUsername(data.rid, data.username, {\n\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 8
    },
    {
        "file": "saveUserProfile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/saveUserProfile.ts",
        "code": {
            "updatedUser": "\tconst updatedUser = await Users.findOneById(this.userId);\n\tconst updatedUser = await Users.findOneById(this.userId);\n\tawait Apps.triggerEvent(AppEvents.IPostUserUpdated, { user: updatedUser, previousUser: user });"
        },
        "depth_rank": 8
    },
    {
        "file": "addRoomOwner.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/addRoomOwner.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.addRolesToMember(team._id, userId, ['owner']);\n\t\t}\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'added',\n\t\t\t_id: 'owner',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 8
    },
    {
        "file": "getUsersOfRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/getUsersOfRoom.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, broadcast: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, broadcast: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "removeRoomModerator.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/removeRoomModerator.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.removeRolesFromMember(team._id, userId, ['moderator']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: 'moderator',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 8
    },
    {
        "file": "registerUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/registerUser.ts",
        "code": {
            "userId": "\t\t\tconst userId = Accounts.insertUserDoc(\n\t\t\tconst userId = Accounts.insertUserDoc(\n\t\t\t\t{},",
            "userData": "\t\tconst userData = {\n\t\tconst userData = {\n\t\t\temail: trim(formData.email.toLowerCase()),\n\t\t\tpassword: formData.pass,\n\t\t\tname: formData.name,\n\t\t\treason: formData.reason,\n\t\t};\n\n\t\tlet userId;\n\t\ttry {\n\t\t\tuserId = await Accounts.createUserAsync(userData);\n\t\t} catch (e) {",
            "reason": "\t\tconst reason = trim(formData.reason);\n\t\tconst reason = trim(formData.reason);\n\t\tif (manuallyApproveNewUsers && reason) {\n\t\t\tawait Users.setReason(userId, reason);\n\t\t}\n\n\t\ttry {\n\t\t\tAccounts.sendVerificationEmail(userId, userData.email);\n\t\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "removeRoomOwner.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/removeRoomOwner.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.removeRolesFromMember(team._id, userId, ['owner']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'removed',\n\t\t\t_id: 'owner',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 8
    },
    {
        "file": "addRoomModerator.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/addRoomModerator.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });\n\t\tconst room = await Rooms.findOneById(rid, { projection: { t: 1, federated: 1 } });",
            "as": "\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tconst team = await Team.getOneByMainRoomId(rid);\n\t\tif (team) {\n\t\t\tawait Team.addRolesToMember(team._id, userId, ['moderator']);\n\t\t}\n\n\t\tconst event = {\n\t\tconst event = {\n\t\t\ttype: 'added',\n\t\t\t_id: 'moderator',\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: fromUser.name,\n\t\t\t},\n\t\t\tscope: rid,\n\t\t} as const;\n\t\t} as const;\n\n\t\tif (settings.get<boolean>('UI_DisplayRoles')) {\n\t\t\tvoid api.broadcast('user.roleUpdate', event);\n\t\t}\n\n\t\tvoid api.broadcast('federation.userRoleChanged', { ...event, givenByUserId: uid });"
        },
        "depth_rank": 8
    },
    {
        "file": "channelsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/channelsList.ts",
        "code": {
            "roomIds": "\t\t\t\tconst roomIds = (await Subscriptions.findByTypeAndUserId('p', userId, { projection: { rid: 1 } }).toArray()).map((s) => s.rid);\n\t\t\t\tconst roomIds = (await Subscriptions.findByTypeAndUserId('p', userId, { projection: { rid: 1 } }).toArray()).map((s) => s.rid);"
        },
        "depth_rank": 8
    },
    {
        "file": "roomNameExists.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/roomNameExists.ts",
        "code": {
            "room": "\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });\n\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "createDirectMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/methods/createDirectMessage.ts",
        "code": {
            "me": "\tconst me = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });\n\tconst me = await Users.findOneById(userId, { projection: { username: 1, name: 1 } });",
            "uids": "\t\t\tconst uids = (roomUsers as IUser[]).map(({ _id }) => _id).sort();\n\t\t\tconst uids = (roomUsers as IUser[]).map(({ _id }) => _id).sort();",
            "room": "\t\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(uids, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(uids, { projection: { _id: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "crowd.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/crowd.ts",
        "code": {
            "enableQuery": "\tsettingsRegistry.addGroup('AtlassianCrowd', async function () {\n\tsettingsRegistry.addGroup('AtlassianCrowd', async function () {\n\t\tconst enableQuery = { _id: 'CROWD_Enable', value: true };\n\t\tconst enableQuery = { _id: 'CROWD_Enable', value: true };",
            "enableSyncQuery": "\t\tconst enableSyncQuery = [enableQuery, { _id: 'CROWD_Sync_User_Data', value: true }];\n\t\tconst enableSyncQuery = [enableQuery, { _id: 'CROWD_Sync_User_Data', value: true }];"
        },
        "depth_rank": 8
    },
    {
        "file": "mobile.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/mobile.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('Mobile', async function () {\n\tsettingsRegistry.addGroup('Mobile', async function () {\n\t\tawait this.add('Allow_Save_Media_to_Gallery', true, {\n\t\t\ttype: 'boolean',\n\t\t\tpublic: true,\n\t\t});\n\t\tawait this.section('Screen_Lock', async function () {\n\t\tawait this.section('Screen_Lock', async function () {\n\t\t\tawait this.add('Force_Screen_Lock', false, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\ti18nDescription: 'Force_Screen_Lock_description',\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Force_Screen_Lock_After', 1800, {\n\t\t\t\ttype: 'int',\n\t\t\t\ti18nDescription: 'Force_Screen_Lock_After_description',\n\t\t\t\tenableQuery: { _id: 'Force_Screen_Lock', value: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "omnichannel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/omnichannel.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };"
        },
        "depth_rank": 8
    },
    {
        "file": "analytics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/analytics.ts",
        "code": {
            "enableQuery": "\t\tawait this.section('Analytics_Google', async function () {\n\t\tawait this.section('Analytics_Google', async function () {\n\t\t\tconst enableQuery = { _id: 'GoogleAnalytics_enabled', value: true };\n\t\t\tconst enableQuery = { _id: 'GoogleAnalytics_enabled', value: true };"
        },
        "depth_rank": 8
    },
    {
        "file": "general.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/general.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('General', async function () {\n\tsettingsRegistry.addGroup('General', async function () {\n\t\tawait this.section('REST API', async function () {\n\t\tawait this.section('REST API', async function () {\n\t\t\tawait this.add('API_Upper_Count_Limit', 100, { type: 'int', public: false });"
        },
        "depth_rank": 8
    },
    {
        "file": "oauth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/oauth.ts",
        "code": {
            "enableQuery": "\t\tawait this.section('Tokenpass', async function () {\n\t\tawait this.section('Tokenpass', async function () {\n\t\t\tconst enableQuery = {\n\t\t\tconst enableQuery = {\n\t\t\t\t_id: 'Accounts_OAuth_Tokenpass',\n\t\t\t\tvalue: true,\n\t\t\t};\n\n\t\t\tawait this.add('Accounts_OAuth_Tokenpass', false, { type: 'boolean' });",
            "customOAuthQuery": "\t\t\tconst customOAuthQuery = [\n\t\t\tconst customOAuthQuery = [\n\t\t\t\t{\n\t\t\t\t\t_id: 'Accounts_OAuth_Wordpress',\n\t\t\t\t\tvalue: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t_id: 'Accounts_OAuth_Wordpress_server_type',\n\t\t\t\t\tvalue: 'custom',\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_identity_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_identity_token_sent_via', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_token_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_authorize_path', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_scope', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tenableQuery: customOAuthQuery,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Wordpress_callback_url', '_oauth/wordpress', {\n\t\t\t\ttype: 'relativeUrl',\n\t\t\t\treadonly: true,\n\t\t\t\tenableQuery,\n\t\t\t});\n\t\t});\n\n\t\tawait this.section('Dolphin', async function () {\n\t\tawait this.section('Dolphin', async function () {\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_URL', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\tpublic: true,\n\t\t\t\ti18nLabel: 'URL',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin', false, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Enable',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_id', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_id',\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_secret', '', {\n\t\t\t\ttype: 'string',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Secret',\n\t\t\t\tsecret: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_OAuth_Dolphin_login_style', 'redirect', {\n\t\t\t\ttype: 'select',\n\t\t\t\ti18nLabel: 'Accounts_OAuth_Custom_Login_Style',\n\t\t\t\tpersistent: true,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ key: 'redirect', i18nLabel: 'Redirect' },"
        },
        "depth_rank": 8
    },
    {
        "file": "troubleshoot.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/troubleshoot.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('Troubleshoot', async function () {\n\tsettingsRegistry.addGroup('Troubleshoot', async function () {\n\t\tawait this.add('Troubleshoot_Disable_Notifications', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nDescription: 'Troubleshoot_Disable_Notifications_Alert',\n\t\t});\n\n\t\t// this settings will let clients know in case presence has been disabled\n\t\tawait this.add('Presence_broadcast_disabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tpublic: true,\n\t\t\treadonly: true,\n\t\t});\n\n\t\tawait this.add('Troubleshoot_Disable_Presence_Broadcast', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nDescription: 'Troubleshoot_Disable_Presence_Broadcast_Alert',\n\t\t\tenableQuery: { _id: 'Presence_broadcast_disabled', value: false },"
        },
        "depth_rank": 8
    },
    {
        "file": "ldap.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/ldap.ts",
        "code": {
            "enableQuery": "\tsettingsRegistry.addGroup('LDAP', async function () {\n\tsettingsRegistry.addGroup('LDAP', async function () {\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };",
            "adOnly": "\t\tconst adOnly = { _id: 'LDAP_Server_Type', value: 'ad' };\n\t\tconst adOnly = { _id: 'LDAP_Server_Type', value: 'ad' };",
            "ldapOnly": "\t\tconst ldapOnly = { _id: 'LDAP_Server_Type', value: '' };\n\t\tconst ldapOnly = { _id: 'LDAP_Server_Type', value: '' };",
            "enableAuthentication": "\t\t\tawait this.section('LDAP_Connection_Authentication', async function () {\n\t\t\tawait this.section('LDAP_Connection_Authentication', async function () {\n\t\t\t\tconst enableAuthentication = [enableQuery, { _id: 'LDAP_Authentication', value: true }];\n\t\t\t\tconst enableAuthentication = [enableQuery, { _id: 'LDAP_Authentication', value: true }];",
            "groupFilterQuery": "\t\t\tawait this.section('LDAP_UserSearch_GroupFilter', async function () {\n\t\t\tawait this.section('LDAP_UserSearch_GroupFilter', async function () {\n\t\t\t\tconst groupFilterQuery = [enableQuery, { _id: 'LDAP_Group_Filter_Enable', value: true }];\n\t\t\t\tconst groupFilterQuery = [enableQuery, { _id: 'LDAP_Group_Filter_Enable', value: true }];"
        },
        "depth_rank": 8
    },
    {
        "file": "cas.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/cas.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('CAS', async function () {\n\tsettingsRegistry.addGroup('CAS', async function () {\n\t\tawait this.add('CAS_enabled', false, { type: 'boolean', group: 'CAS', public: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "webrtc.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/webrtc.ts",
        "code": {
            "async": "\tsettingsRegistry.addGroup('WebRTC', async function () {\n\tsettingsRegistry.addGroup('WebRTC', async function () {\n\t\tawait this.add('WebRTC_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tgroup: 'WebRTC',\n\t\t\tpublic: true,\n\t\t\ti18nLabel: 'Enabled',\n\t\t});\n\t\tawait this.add('WebRTC_Enable_Channel', false, {\n\t\t\ttype: 'boolean',\n\t\t\tgroup: 'WebRTC',\n\t\t\tpublic: true,\n\t\t\tenableQuery: { _id: 'WebRTC_Enabled', value: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "accounts.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/settings/accounts.ts",
        "code": {
            "enableQueryCollectData": "\tsettingsRegistry.addGroup('Accounts', async function () {\n\tsettingsRegistry.addGroup('Accounts', async function () {\n\t\tawait this.section('Two Factor Authentication', async function () {\n\t\tawait this.section('Two Factor Authentication', async function () {\n\t\t\tconst enable2FA = {\n\t\t\tconst enable2FA = {\n\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t};\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_MaxDelta', 1, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_TOTP_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: [\n\t\t\t\t\tenable2FA,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_By_Email_Enabled',\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\twizard: {\n\t\t\t\t\tstep: 3,\n\t\t\t\t\torder: 3,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration', 3600, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: [\n\t\t\t\t\tenable2FA,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_By_Email_Enabled',\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts', 5, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: [\n\t\t\t\t\tenable2FA,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: 'Accounts_TwoFactorAuthentication_By_Email_Enabled',\n\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ti18nLabel: 'Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts',\n\t\t\t\ti18nDescription: 'Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts_Description',\n\t\t\t});\n\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_RememberFor', 1800, {\n\t\t\t\ttype: 'int',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t});\n\n\t\t\t// TODO: Remove this setting for version 4.0\n\t\t\tawait this.add('Accounts_TwoFactorAuthentication_Enforce_Password_Fallback', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enable2FA,\n\t\t\t\tpublic: true,\n\t\t\t});\n\t\t});\n\t\tconst enableQueryCollectData = { _id: 'Block_Multiple_Failed_Logins_Enabled', value: true };\n\t\tconst enableQueryCollectData = { _id: 'Block_Multiple_Failed_Logins_Enabled', value: true };",
            "enableQueryByUser": "\t\tawait this.section('Login_Attempts', async function () {\n\t\tawait this.section('Login_Attempts', async function () {\n\t\t\tawait this.add('Block_Multiple_Failed_Logins_Enabled', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t});\n\n\t\t\tawait this.add('Block_Multiple_Failed_Logins_By_User', true, {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tenableQuery: enableQueryCollectData,\n\t\t\t});\n\n\t\t\tconst enableQueryByUser = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_User', value: true }];\n\t\t\tconst enableQueryByUser = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_User', value: true }];",
            "enableQueryByIp": "\t\t\tconst enableQueryByIp = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_Ip', value: true }];\n\t\t\tconst enableQueryByIp = [enableQueryCollectData, { _id: 'Block_Multiple_Failed_Logins_By_Ip', value: true }];",
            "enableQueryAudit": "\t\tawait this.section('Login_Logs', async function () {\n\t\tawait this.section('Login_Logs', async function () {\n\t\t\tconst enableQueryAudit = { _id: 'Login_Logs_Enabled', value: true };\n\t\t\tconst enableQueryAudit = { _id: 'Login_Logs_Enabled', value: true };"
        },
        "depth_rank": 8
    },
    {
        "file": "DatabaseWatcher.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/server/database/DatabaseWatcher.ts",
        "code": {
            "isMasterDoc": "\t\tconst isMasterDoc = await this.db.admin().command({ ismaster: 1 });\n\t\tconst isMasterDoc = await this.db.admin().command({ ismaster: 1 });",
            "options": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\t...(useFullDocument ? { fullDocument: 'updateLookup' } : {}),"
        },
        "depth_rank": 8
    },
    {
        "file": "compile-version.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/rocketchat-coverage/plugin/compile-version.js",
        "code": {
            "report": "\t\tconst coverageMap = libCoverage.createCoverageMap(globalThis['__coverage__']);\n\t\tconst coverageMap = libCoverage.createCoverageMap(globalThis['__coverage__']);\n\n\t\tconst configWatermarks = {\n\t\tconst configWatermarks = {\n\t\t\tstatements: [50, 80],\n\t\t\tfunctions: [50, 80],\n\t\t\tfunctions: [50, 80],\n\t\t\tbranches: [50, 80],\n\t\t\tlines: [50, 80],\n\t\t};\n\n\t\tconst context = libReport.createContext({\n\t\tconst context = libReport.createContext({\n\t\t\tdir,\n\t\t\tcoverageMap,\n\t\t});\n\n\t\tconst report = reports.create(reporter);\n\t\tconst report = reports.create(reporter);\n\n\t\treport.execute(context);\n\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "linkedin-server.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/linkedin-oauth/linkedin-server.js",
        "code": {
            "config": "const getTokenResponse = async function (query) {\nconst getTokenResponse = async function (query) {\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });",
            "response": "\tconst response = await getTokenResponse(query);\n\tconst response = await getTokenResponse(query);\n\tconst { accessToken } = response;\n\tconst { accessToken } = response;",
            "identity": "\tconst identity = await getIdentity(accessToken);\n\tconst identity = await getIdentity(accessToken);\n\n\tconst { sub, given_name, family_name, picture, email } = identity;\n\tconst { sub, given_name, family_name, picture, email } = identity;"
        },
        "depth_rank": 8
    },
    {
        "file": "auth.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/auth.js",
        "code": {
            "getUserQuerySelector": "const getUserQuerySelector = function (user) {\nconst getUserQuerySelector = function (user) {\n\tif (user.id) {\n\t\treturn { _id: user.id };",
            "hashedToken": "\t\tconst passwordVerification = await Accounts._checkPasswordAsync(authenticatingUser, password);\n\t\tconst passwordVerification = await Accounts._checkPasswordAsync(authenticatingUser, password);\n\t\tif (passwordVerification.error) {\n\t\t\tthrow new Meteor.Error(401, 'Unauthorized');\n\t\t}\n\n\t\t// Add a new auth token to the user's account\n\t\tconst authToken = Accounts._generateStampedLoginToken();\n\t\tconst authToken = Accounts._generateStampedLoginToken();\n\t\tconst hashedToken = Accounts._hashLoginToken(authToken.token);\n\t\tconst hashedToken = Accounts._hashLoginToken(authToken.token);\n\t\tAccounts._insertHashedLoginToken(authenticatingUser._id, { hashedToken });"
        },
        "depth_rank": 9
    },
    {
        "file": "route.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/route.js",
        "code": {
            "endpointContext": "\t\tallowedMethods.forEach(function (method) {\n\t\tallowedMethods.forEach(function (method) {\n\t\t\tconst endpoint = self.endpoints[method];\n\t\t\tconst endpoint = self.endpoints[method];\n\t\t\treturn JsonRoutes.add(method, fullPath, async function (req, res) {\n\t\t\treturn JsonRoutes.add(method, fullPath, async function (req, res) {\n\t\t\t\tlet responseInitiated = false;\n\t\t\t\tconst doneFunc = function () {\n\t\t\t\tconst doneFunc = function () {\n\t\t\t\t\tresponseInitiated = true;\n\t\t\t\t};\n\t\t\t\tconst endpointContext = {\n\t\t\t\tconst endpointContext = {\n\t\t\t\t\turlParams: req.params,\n\t\t\t\t\tqueryParams: req.query,\n\t\t\t\t\tbodyParams: req.body,\n\t\t\t\t\trequest: req,\n\t\t\t\t\tresponse: res,\n\t\t\t\t\tdone: doneFunc,\n\t\t\t\t\t...endpoint,\n\t\t\t\t};\n\t\t\t\tlet responseData = null;\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = await self._callEndpoint(endpointContext, endpoint);\n\t\t\t\t} catch (e) {",
            "userSelector": "\t\t\tconst userSelector = {};\n\t\t\tconst userSelector = {};",
            "defaultHeaders": "\t\tconst defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);\n\t\tconst defaultHeaders = this._lowerCaseKeys(this.api._config.defaultHeaders);\n\t\theaders = this._lowerCaseKeys(headers);\n\t\theaders = { ...defaultHeaders, ...headers };"
        },
        "depth_rank": 9
    },
    {
        "file": "restivus.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-restivus/lib/restivus.js",
        "code": {
            "user": "\t\t\t\t\tconst user = {};\n\t\t\t\t\tconst user = {};",
            "searchQuery": "\t\t\t\t\t\tconst searchQuery = {};\n\t\t\t\t\t\tconst searchQuery = {};",
            "tokenToRemove": "\t\t\tconst tokenToRemove = {};\n\t\t\tconst tokenToRemove = {};",
            "tokenRemovalQuery": "\t\t\tconst tokenRemovalQuery = {};\n\t\t\tconst tokenRemovalQuery = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "cookies.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-cookies/cookies.js",
        "code": {
            "NoOp": "const NoOp  = () => {};\nconst NoOp  = () => {};",
            "tryDecode": "const tryDecode = (str, d) => {\nconst tryDecode = (str, d) => {\n  try {\n    return d(str);\n  } catch (e) {",
            "__middlewareHandler": "const __middlewareHandler = (request, response, opts) => {\nconst __middlewareHandler = (request, response, opts) => {\n  let _cookies = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "triggers.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/flow-router/client/triggers.js",
        "code": {
            "a": "// a set of utility functions for triggers\n// a set of utility functions for triggers\n\nTriggers = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "client.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-user-presence/client/client.js",
        "code": {
            "after": "\t\t// after first call overwrite start function to only call startTimer\n\t\t// after first call overwrite start function to only call startTimer\n\t\tthis.start = () => {\n\t\t\tthis.startTimer();\n\t\t};\n\t\tthis.userId = userId;\n\n\t\t// register a tracker on connection status so we can setup the away timer again (on reconnect)\n\t\tTracker.autorun(() => {\n\t\t\tconst { connected } = Meteor.status();\n\t\t\tconst { connected } = Meteor.status();"
        },
        "depth_rank": 9
    },
    {
        "file": "linkedin.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/accounts-linkedin/linkedin.js",
        "code": {
            "credentialRequestCompleteCallback": "\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\tconst credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n\t\tvoid Linkedin.requestCredential(options, credentialRequestCompleteCallback).catch(credentialRequestCompleteCallback);\n\t};\n\tAccounts.registerClientLoginFunction('linkedin', loginWithLinkedin);\n\n\tMeteor.loginWithLinkedin = (...args) => Accounts.applyLoginFunction('linkedin', args);\n} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "inject-server.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/meteor-inject-initial/lib/inject-server.js",
        "code": {
            "objs": "\t\tconst objs = _.extend({}, Inject.objList, res.Inject && res.Inject.objList);\n\t\tconst objs = _.extend({}, Inject.objList, res.Inject && res.Inject.objList);",
            "metas": "\t\tconst metas = _.extend({}, Inject.metaList, res.Inject && res.Inject.metaList);\n\t\tconst metas = _.extend({}, Inject.metaList, res.Inject && res.Inject.metaList);",
            "heads": "\t\tconst heads = _.extend({}, Inject.rawHeads, res.Inject && res.Inject.rawHeads);\n\t\tconst heads = _.extend({}, Inject.rawHeads, res.Inject && res.Inject.rawHeads);",
            "bodies": "\t\tconst bodies = _.extend({}, Inject.rawBodies, res.Inject && res.Inject.rawBodies);\n\t\tconst bodies = _.extend({}, Inject.rawBodies, res.Inject && res.Inject.rawBodies);"
        },
        "depth_rank": 9
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/rocketchat-mongo-config/server/index.js",
        "code": {
            "stream": "\tconst stream = new PassThrough();\n\tconst stream = new PassThrough();\n\tstream.on('data', () => {});"
        },
        "depth_rank": 9
    },
    {
        "file": "compile-version.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/rocketchat-version/plugin/compile-version.js",
        "code": {
            "currentVersion": "const execAsync = util.promisify(exec);\nconst execAsync = util.promisify(exec);\n\nclass VersionCompiler {\n\tasync processFilesForTarget(files) {\n\t\tconst processVersionFile = async function (file) {\n\t\tconst processVersionFile = async function (file) {\n\t\t\tconst data = await new Promise((resolve, reject) => {\n\t\t\tconst data = await new Promise((resolve, reject) => {\n\t\t\t\tconst currentVersion =\n\t\t\t\tconst currentVersion =\n\t\t\t\t\tJSON.parse(fs.readFileSync(path.resolve(process.cwd(), './package.json'), { encoding: 'utf8' }))?.version || '';",
            "minimumClientVersions": "\t\t\tconst minimumClientVersions =\n\t\t\tconst minimumClientVersions =\n\t\t\t\tJSON.parse(fs.readFileSync(path.resolve(process.cwd(), './package.json'), { encoding: 'utf8' }))?.rocketchat",
            "data": "\t\t\t\tconst data = result.stdout.split('\\n');\n\t\t\t\tconst data = result.stdout.split('\\n');\n\t\t\t\toutput.commit = {\n\t\t\t\t\thash: data.shift(),\n\t\t\t\t\tdate: data.shift(),\n\t\t\t\t\tauthor: data.shift(),\n\t\t\t\t\tsubject: data.join('\\n'),\n\t\t\t\t};\n\t\t\t} catch (e) {"
        },
        "depth_rank": 9
    },
    {
        "file": "autoupdate_client.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_client.js",
        "code": {
            "head": "\t\t\t\t\t\t\twaitUntilCssLoads(newLink, function () {\n\t\t\t\t\t\t\twaitUntilCssLoads(newLink, function () {\n\t\t\t\t\t\t\t\tMeteor.setTimeout(removeOldLinks, 200);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst head = document.getElementsByTagName(\"head\").item(0);\n\t\t\t\t\t\t\tconst head = document.getElementsByTagName(\"head\").item(0);\n\t\t\t\t\t\t\thead.appendChild(newLink);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "autoupdate_server.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_server.js",
        "code": {
            "stop": "\t\tconst stop = clientVersions.watch((version, isNew) => {\n\t\tconst stop = clientVersions.watch((version, isNew) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\t(isNew ? this.added : this.changed)\n\t\t\t\t.call(this, \"meteor_autoupdate_clientVersions\", version._id, version)\n\t\t\t}, randomInterval);\n\t\t});\n\n\t\tthis.onStop(() => stop());\n\t\tthis.ready();\n\t},\n\t{is_auto: true}"
        },
        "depth_rank": 8
    },
    {
        "file": "client_versions.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/packages/autoupdate/client_versions.js",
        "code": {
            "callback": "\t\tconst callback = { fn, filter };\n\t\tconst callback = { fn, filter };",
            "stop": "\t\tconst dependency = new Tracker.Dependency();\n\t\tconst dependency = new Tracker.Dependency();\n\t\tconst version = this.get(id);\n\t\tconst version = this.get(id);\n\n\t\tdependency.depend();\n\n\t\tconst stop = this.watch(\n\t\tconst stop = this.watch(\n\t\t\t(version) => {\n\t\t\t\tif (isNewVersion(version)) {\n\t\t\t\t\tdependency.changed();\n\t\t\t\t\tstop();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ skipInitial: true }"
        },
        "depth_rank": 8
    },
    {
        "file": "voipService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/voip-enterprise/server/services/voipService.ts",
        "code": {
            "callTotalHoldTime": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tconst callTotalHoldTime = await calculateOnHoldTimeForRoom(room, now);\n\t\tconst callTotalHoldTime = await calculateOnHoldTimeForRoom(room, now);\n\t\tcloseInfo.callTotalHoldTime = callTotalHoldTime;\n\n\t\treturn { closeInfo, closeSystemMsgData };"
        },
        "depth_rank": 11
    },
    {
        "file": "permissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/permissions.ts",
        "code": {
            "monitorRole": "\tconst monitorRole = await Roles.findOneById(livechatMonitorRole, { projection: { _id: 1 } });\n\tconst monitorRole = await Roles.findOneById(livechatMonitorRole, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/settings.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };",
            "businessHoursEnabled": "const businessHoursEnabled = { _id: 'Livechat_enable_business_hours', value: true };\nconst businessHoursEnabled = { _id: 'Livechat_enable_business_hours', value: true };"
        },
        "depth_rank": 10
    },
    {
        "file": "priorities.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/priorities.ts",
        "code": {
            "priorities": "\tconst priorities = await LivechatPriority.col.countDocuments({});\n\tconst priorities = await LivechatPriority.col.countDocuments({});"
        },
        "depth_rank": 10
    },
    {
        "file": "onLoadConfigApi.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onLoadConfigApi.ts",
        "code": {
            "customFields": "\t\tconst queueInfo = await getLivechatQueueInfo(room);\n\t\tconst queueInfo = await getLivechatQueueInfo(room);\n\t\tconst customFields = await getLivechatCustomFields();\n\t\tconst customFields = await getLivechatCustomFields();\n\n\t\treturn {\n\t\t\t...(queueInfo && { queueInfo }),"
        },
        "depth_rank": 11
    },
    {
        "file": "scheduleAutoTransfer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/scheduleAutoTransfer.ts",
        "code": {
            "handleAfterTakeInquiryCallback": "const handleAfterTakeInquiryCallback = async (inquiry: any = {}): Promise<any> => {\nconst handleAfterTakeInquiryCallback = async (inquiry: any = {}): Promise<any> => {\n\tconst { rid } = inquiry;\n\tconst { rid } = inquiry;",
            "room": "\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, autoTransferredAt: 1, autoTransferOngoing: 1 } });\n\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, autoTransferredAt: 1, autoTransferOngoing: 1 } });",
            "handleAfterCloseRoom": "const handleAfterCloseRoom = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst handleAfterCloseRoom = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room } = params;\n\tconst { room } = params;"
        },
        "depth_rank": 11
    },
    {
        "file": "afterOnHold.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/afterOnHold.ts",
        "code": {
            "handleAfterOnHold": "const handleAfterOnHold = async (room: Pick<IOmnichannelRoom, '_id'>): Promise<any> => {\nconst handleAfterOnHold = async (room: Pick<IOmnichannelRoom, '_id'>): Promise<any> => {\n\tconst { _id: rid } = room;\n\tconst { _id: rid } = room;"
        },
        "depth_rank": 11
    },
    {
        "file": "onCloseLivechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onCloseLivechat.ts",
        "code": {
            "onCloseLivechat": "const onCloseLivechat = async (params: LivechatCloseCallbackParams) => {\nconst onCloseLivechat = async (params: LivechatCloseCallbackParams) => {\n\tconst {\n\tconst {\n\t\troom,\n\t\troom: { _id: roomId },"
        },
        "depth_rank": 11
    },
    {
        "file": "sendPdfTranscriptOnClose.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/sendPdfTranscriptOnClose.ts",
        "code": {
            "sendPdfTranscriptOnClose": "const sendPdfTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\nconst sendPdfTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\tconst { room, options } = params;"
        },
        "depth_rank": 11
    },
    {
        "file": "applySimultaneousChatsRestrictions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/applySimultaneousChatsRestrictions.ts",
        "code": {
            "departmentLimit": "\t\t\tconst departmentLimit =\n\t\t\tconst departmentLimit =\n\t\t\t\t(\n\t\t\t\t\tawait LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'maxNumberSimultaneousChat'>>(departmentId, {\n\t\t\t\t\t\tprojection: { maxNumberSimultaneousChat: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "applyRoomRestrictions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/applyRoomRestrictions.ts",
        "code": {
            "query": "\tconst query = { ...originalQuery };\n\tconst query = { ...originalQuery };"
        },
        "depth_rank": 11
    },
    {
        "file": "afterForwardChatToDepartment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/afterForwardChatToDepartment.ts",
        "code": {
            "room": "\t\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id' | 'departmentAncestors'>>(rid, {\n\t\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id' | 'departmentAncestors'>>(rid, {\n\t\t\tprojection: { departmentAncestors: 1 },",
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'ancestors'>>(newDepartmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'ancestors'>>(newDepartmentId, {\n\t\t\tprojection: { ancestors: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "beforeForwardRoomToDepartment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/beforeForwardRoomToDepartment.ts",
        "code": {
            "currentDepartment": "\t\tconst currentDepartment = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'departmentsAllowedToForward'>>(departmentId, {\n\t\tconst currentDepartment = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'departmentsAllowedToForward'>>(departmentId, {\n\t\t\tprojection: { departmentsAllowedToForward: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "afterRemoveDepartment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/afterRemoveDepartment.ts",
        "code": {
            "afterRemoveDepartment": "const afterRemoveDepartment = async (options: {\nconst afterRemoveDepartment = async (options: {\n\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\tagentsId: ILivechatAgent['_id'][];\n}) => {"
        },
        "depth_rank": 11
    },
    {
        "file": "checkAgentBeforeTakeInquiry.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/checkAgentBeforeTakeInquiry.ts",
        "code": {
            "validateMaxChats": "const validateMaxChats = async ({\nconst validateMaxChats = async ({\n\tagent,\n\tinquiry,\n}: {"
        },
        "depth_rank": 11
    },
    {
        "file": "resumeOnHold.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts",
        "code": {
            "resumeOnHoldCommentAndUser": "const resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\nconst resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\n\tconst {\n\tconst {\n\t\tv: { _id: visitorId },",
            "visitor": "\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },",
            "resumeChatComment": "\tconst guest = visitor.name || visitor.username;\n\tconst guest = visitor.name || visitor.username;\n\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });"
        },
        "depth_rank": 11
    },
    {
        "file": "onTransferFailure.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onTransferFailure.ts",
        "code": {
            "onTransferFailure": "const onTransferFailure = async (\nconst onTransferFailure = async (\n\troom: IRoom,\n\t{\n\t\tguest,\n\t\ttransferData,\n\t\tdepartment,\n\t}: {",
            "fallbackDepartment": "\tconst fallbackDepartment = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'name'>>(\n\tconst fallbackDepartment = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'name'>>(\n\t\tdepartment.fallbackForwardDepartment,\n\t\t{\n\t\t\tprojection: { name: 1, _id: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "onAgentAssignmentFailed.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onAgentAssignmentFailed.ts",
        "code": {
            "handleOnAgentAssignmentFailed": "const handleOnAgentAssignmentFailed = async (\nconst handleOnAgentAssignmentFailed = async (\n\troom: IOmnichannelRoom,\n\t{\n\t\tinquiry,\n\t\toptions,\n\t}: {"
        },
        "depth_rank": 11
    },
    {
        "file": "addDepartmentAncestors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/addDepartmentAncestors.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'ancestors'>>(room.departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'ancestors'>>(room.departmentId, {\n\t\t\tprojection: { ancestors: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "beforeRoutingChat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/beforeRoutingChat.ts",
        "code": {
            "department": "\t\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(\n\t\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(\n\t\t\t\tinquiry.department,\n\t\t\t\t{\n\t\t\t\t\tprojection: { fallbackForwardDepartment: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "beforeNewInquiry.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/beforeNewInquiry.ts",
        "code": {
            "beforeNewInquiry": "const beforeNewInquiry = async (extraData: Props) => {\nconst beforeNewInquiry = async (extraData: Props) => {\n\tconst { sla: slaSearchTerm, priority: prioritySearchTerm, ...props } = extraData;\n\tconst { sla: slaSearchTerm, priority: prioritySearchTerm, ...props } = extraData;",
            "ts": "\t\t\t\tfunction: 'livechat.beforeInquiry',\n\t\t\t\tfunction: 'livechat.beforeInquiry',\n\t\t\t});\n\t\t}\n\t}\n\n\tconst ts = new Date();\n\tconst ts = new Date();\n\tconst changes: Partial<ILivechatInquiryRecord> = {\n\tconst changes: Partial<ILivechatInquiryRecord> = {\n\t\tts,\n\t};\n\tif (sla) {\n\t\tchanges.slaId = sla._id;\n\t\tchanges.estimatedWaitingTimeQueue = sla.dueTimeInMinutes;\n\t}\n\tif (priority) {\n\t\tchanges.priorityId = priority._id;\n\t\tchanges.priorityWeight = priority.sortItem;\n\t}\n\treturn { ...props, ...changes };"
        },
        "depth_rank": 11
    },
    {
        "file": "handleNextAgentPreferredEvents.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/handleNextAgentPreferredEvents.ts",
        "code": {
            "guest": "\t\tconst guest = await LivechatVisitors.findOneEnabledById(guestId, {\n\t\tconst guest = await LivechatVisitors.findOneEnabledById(guestId, {\n\t\t\tprojection: { lastAgent: 1, token: 1, contactManager: 1 },",
            "room": "\t\tconst guestAgent = lastAgent?.username && getDefaultAgent(lastAgent?.username);\n\t\tconst guestAgent = lastAgent?.username && getDefaultAgent(lastAgent?.username);\n\t\tif (guestAgent) {\n\t\t\treturn guestAgent;\n\t\t}\n\n\t\tconst room = await LivechatRooms.findOneLastServedAndClosedByVisitorToken(token, {\n\t\tconst room = await LivechatRooms.findOneLastServedAndClosedByVisitorToken(token, {\n\t\t\tprojection: { servedBy: 1 },",
            "lastRoomAgent": "\t\tconst lastRoomAgent = normalizeDefaultAgent(\n\t\tconst lastRoomAgent = normalizeDefaultAgent(\n\t\t\tawait Users.findOneOnlineAgentByUserList(usernameByRoom, { projection: { _id: 1, username: 1 } }),"
        },
        "depth_rank": 11
    },
    {
        "file": "onLoadForwardDepartmentRestrictions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/onLoadForwardDepartmentRestrictions.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'departmentsAllowedToForward'>>(departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'departmentsAllowedToForward'>>(departmentId, {\n\t\t\tprojection: { departmentsAllowedToForward: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "omnichannel.internalService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts",
        "code": {
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});",
            "agent": "\t\t\tconst agent = {\n\t\t\tconst agent = {\n\t\t\t\tagentId: servingAgent._id,\n\t\t\t\tusername: servingAgent.username,\n\t\t\t};\n\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions: {},"
        },
        "depth_rank": 11
    },
    {
        "file": "query.helper.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/query.helper.js",
        "code": {
            "query": "\tconst query = { ...originalQuery };\n\tconst query = { ...originalQuery };"
        },
        "depth_rank": 11
    },
    {
        "file": "Helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/Helper.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };",
            "user": "\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};",
            "message": "const getWaitingQueueMessage = async (departmentId?: string) => {\nconst getWaitingQueueMessage = async (departmentId?: string) => {\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tif (department?.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get<string>('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department?: string) => {\nconst getQueueInfo = async (department?: string) => {\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst message = {\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },",
            "normalizeQueueInfo": "const normalizeQueueInfo = async ({\nconst normalizeQueueInfo = async ({\n\tposition,\n\tqueueInfo,\n\tdepartment,\n}: {",
            "estimatedWaitTimeSeconds": "\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };",
            "data": "\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });",
            "aggregatedDate": "\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tawait OmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tawait LivechatInquiry.getQueuedInquiries({ projection: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\tvoid OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {",
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });"
        },
        "depth_rank": 11
    },
    {
        "file": "QueueInactivityMonitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/QueueInactivityMonitor.ts",
        "code": {
            "language": "\t\tconst language = settings.get<string>('Language') || 'en';\n\t\tconst language = settings.get<string>('Language') || 'en';\n\t\tthis.message = i18n.t('Closed_automatically_chat_queued_too_long', { lng: language });",
            "job": "\t\tconst name = this.getName(inquiryId);\n\t\tconst name = this.getName(inquiryId);\n\t\tthis.scheduler.define(name, this.bindedCloseRoom);\n\n\t\tconst job = this.scheduler.create(name, { inquiryId });\n\t\tconst job = this.scheduler.create(name, { inquiryId });",
            "name": "\t\tconst name = this.getName(inquiryId);\n\t\tconst name = this.getName(inquiryId);\n\t\tawait this.scheduler.cancel({ name });",
            "comment": "\t\tconst comment = this.message;\n\t\tconst comment = this.message;\n\t\treturn Livechat.closeRoom({\n\t\t\tcomment,\n\t\t\troom,\n\t\t\tuser: await this.getRocketCatUser(),\n\t\t});\n\t}\n\n\tasync closeRoom({ attrs: { data } }: any = {}): Promise<void> {\n\t\tconst { inquiryId } = data;\n\t\tconst { inquiryId } = data;"
        },
        "depth_rank": 11
    },
    {
        "file": "AutoCloseOnHoldScheduler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/AutoCloseOnHoldScheduler.ts",
        "code": {
            "SCHEDULER_NAME": "const SCHEDULER_NAME = 'omnichannel_auto_close_on_hold_scheduler';\nconst SCHEDULER_NAME = 'omnichannel_auto_close_on_hold_scheduler';\n\nclass AutoCloseOnHoldSchedulerClass {\n\tscheduler: Agenda;\n\n\tschedulerUser: IUser;\n\n\trunning: boolean;\n\n\tlogger: MainLogger;\n\n\tconstructor() {\n\tconstructor() {\n\t\tthis.logger = schedulerLogger.section('AutoCloseOnHoldScheduler');\n\t}\n\n\tpublic async init(): Promise<void> {\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: SCHEDULER_NAME },",
            "when": "\t\tconst when = moment(new Date()).add(timeout, 's').toDate();\n\t\tconst when = moment(new Date()).add(timeout, 's').toDate();\n\n\t\tthis.scheduler.define(jobName, this.executeJob.bind(this));\n\t\tawait this.scheduler.schedule(when, jobName, { roomId, comment });"
        },
        "depth_rank": 11
    },
    {
        "file": "units.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/units.ts",
        "code": {
            "memoizedHasUnits": "const memoizedHasUnits = mem(hasUnits, { maxAge: process.env.TEST_MODE ? 1 : 10000 });\nconst memoizedHasUnits = mem(hasUnits, { maxAge: process.env.TEST_MODE ? 1 : 10000 });"
        },
        "depth_rank": 11
    },
    {
        "file": "SlaHelper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/SlaHelper.ts",
        "code": {
            "openRooms": "\tconst openRooms = await LivechatRooms.findOpenBySlaId(slaId, { projection: { _id: 1 } }, extraQuery).toArray();\n\tconst openRooms = await LivechatRooms.findOpenBySlaId(slaId, { projection: { _id: 1 } }, extraQuery).toArray();",
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { rid: 1, ts: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { rid: 1, ts: 1 } });"
        },
        "depth_rank": 11
    },
    {
        "file": "AutoTransferChatScheduler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/AutoTransferChatScheduler.ts",
        "code": {
            "SCHEDULER_NAME": "const SCHEDULER_NAME = 'omnichannel_scheduler';\nconst SCHEDULER_NAME = 'omnichannel_scheduler';\n\nclass AutoTransferChatSchedulerClass {\n\tscheduler: Agenda;\n\n\trunning: boolean;\n\n\tuser: IUser;\n\n\tlogger: MainLogger;\n\n\tconstructor() {\n\tconstructor() {\n\t\tthis.logger = schedulerLogger.section('AutoTransferChatScheduler');\n\t}\n\n\tpublic async init(): Promise<void> {\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: SCHEDULER_NAME },"
        },
        "depth_rank": 11
    },
    {
        "file": "VisitorInactivityMonitor.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/VisitorInactivityMonitor.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'abandonedRoomsCloseCustomMessage'>>(\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'abandonedRoomsCloseCustomMessage'>>(\n\t\t\tdepartmentId,\n\t\t\t{ projection: { _id: 1, abandonedRoomsCloseCustomMessage: 1 } },",
            "rejected": "\t\tconst result = await Promise.allSettled([\n\t\tconst result = await Promise.allSettled([\n\t\t\tOmnichannelEEService.placeRoomOnHold(room, comment, this.user),\n\t\t\tLivechatRooms.unsetPredictedVisitorAbandonmentByRoomId(room._id),\n\t\t]);\n\t\tconst rejected = result.filter(isPromiseRejectedResult).map((r) => r.reason);\n\t\tconst rejected = result.filter(isPromiseRejectedResult).map((r) => r.reason);\n\t\tif (rejected.length) {\n\t\t\tthis.logger.error({ msg: 'Error placing room on hold', error: rejected });"
        },
        "depth_rank": 11
    },
    {
        "file": "LivechatEnterprise.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/LivechatEnterprise.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });",
            "unit": "\t\tconst unit = await LivechatUnit.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst unit = await LivechatUnit.findOneById(_id, { projection: { _id: 1 } });",
            "tag": "\t\tconst monitors = validUserMonitors.map(({ _id: monitorId, username }) => ({\n\t\tconst monitors = validUserMonitors.map(({ _id: monitorId, username }) => ({\n\t\t\tmonitorId,\n\t\t\tusername,\n\t\t})) as { monitorId: string; username: string }[];\n\n\t\treturn LivechatUnit.createOrUpdateUnit(_id, unitData, ancestors, monitors, unitDepartments);\n\t},\n\n\tasync removeTag(_id: string) {\n\t\tcheck(_id, String);\n\n\t\tconst tag = await LivechatTag.findOneById(_id, { projection: { _id: 1, name: 1 } });\n\t\tconst tag = await LivechatTag.findOneById(_id, { projection: { _id: 1, name: 1 } });",
            "oldSLA": "\t\tconst oldSLA = _id && (await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { dueTimeInMinutes: 1 } }));\n\t\tconst oldSLA = _id && (await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { dueTimeInMinutes: 1 } }));",
            "sla": "\t\tconst sla = await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { _id: 1 } });\n\t\tconst sla = await OmnichannelServiceLevelAgreements.findOneById(_id, { projection: { _id: 1 } });",
            "department": "\t\tconst department = _id ? await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1, archived: 1, enabled: 1 } }) : null;\n\t\tconst department = _id ? await LivechatDepartmentRaw.findOneById(_id, { projection: { _id: 1, archived: 1, enabled: 1 } }) : null;",
            "fallbackDep": "\t\t\tconst fallbackDep = await LivechatDepartmentRaw.findOneById(fallbackForwardDepartment, {\n\t\t\tconst fallbackDep = await LivechatDepartmentRaw.findOneById(fallbackForwardDepartment, {\n\t\t\t\tprojection: { _id: 1, fallbackForwardDepartment: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "units.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/units.ts",
        "code": {
            "params": "\t\t\tconst params = this.queryParams;\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { offset, count } = await getPaginationItems(params);",
            "unit": "\t\t\tconst unit = await findUnitById({\n\t\t\tconst unit = await findUnitById({\n\t\t\t\tunitId: id,\n\t\t\t});\n\n\t\t\treturn API.v1.success(unit);\n\t\t},\n\t\tasync post() {\n\t\t\tconst { unitData, unitMonitors, unitDepartments } = this.bodyParams;\n\t\t\tconst { unitData, unitMonitors, unitDepartments } = this.bodyParams;"
        },
        "depth_rank": 11
    },
    {
        "file": "agents.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/agents.ts",
        "code": {
            "endDate": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst { agents, total } = await findAllServiceTimeAsync({\n\t\t\tconst { agents, total } = await findAllServiceTimeAsync({\n\t\t\t\tstart: startDate,\n\t\t\t\tend: endDate,\n\t\t\t\toptions: { offset, count },"
        },
        "depth_rank": 11
    },
    {
        "file": "reports.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/reports.ts",
        "code": {
            "result": "\t\t\tconst result = await findAllConversationsByAgentsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\t\t\tconst result = await findAllConversationsByAgentsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });"
        },
        "depth_rank": 11
    },
    {
        "file": "departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/departments.ts",
        "code": {
            "endDate": "\t\t\tconst startDate = new Date(start);\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst { departments, total } = await findPercentageOfAbandonedRoomsAsync({\n\t\t\tconst { departments, total } = await findPercentageOfAbandonedRoomsAsync({\n\t\t\t\tstart: startDate,\n\t\t\t\tend: endDate,\n\t\t\t\tdepartmentId,\n\t\t\t\toptions: { offset, count },"
        },
        "depth_rank": 11
    },
    {
        "file": "sla.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/sla.ts",
        "code": {
            "newSla": "\t\t\tconst newSla = await LivechatEnterprise.saveSLA(null, {\n\t\t\tconst newSla = await LivechatEnterprise.saveSLA(null, {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdueTimeInMinutes,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ sla: newSla });",
            "updatedSla": "\t\t\tconst updatedSla = await LivechatEnterprise.saveSLA(slaId, {\n\t\t\tconst updatedSla = await LivechatEnterprise.saveSLA(slaId, {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdueTimeInMinutes,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ sla: updatedSla });"
        },
        "depth_rank": 11
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/rooms.ts",
        "code": {
            "room": "\t\t\tconst room = await LivechatRooms.findOneById<Room>(roomId, {\n\t\t\tconst room = await LivechatRooms.findOneById<Room>(roomId, {\n\t\t\t\tprojection: { t: 1, open: 1, onHold: 1, servedBy: 1 },",
            "subscription": "\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId, { projection: { _id: 1 } });\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId, { projection: { _id: 1 } });",
            "onHoldBy": "\t\t\tconst onHoldBy = { _id: userId, username, name };\n\t\t\tconst onHoldBy = { _id: userId, username, name };"
        },
        "depth_rank": 11
    },
    {
        "file": "inquiries.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/inquiries.ts",
        "code": {
            "inquiry": "\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { status: 1 } });\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, { projection: { status: 1 } });",
            "user": "\tconst user = await Users.findOneById(userId, { projection: { _id: 1, username: 1, name: 1 } });\n\tconst user = await Users.findOneById(userId, { projection: { _id: 1, username: 1, name: 1 } });"
        },
        "depth_rank": 12
    },
    {
        "file": "dashboards.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/dashboards.ts",
        "code": {
            "defaultValue": "const defaultValue = { data: [], total: 0 };\nconst defaultValue = { data: [], total: 0 };"
        },
        "depth_rank": 12
    },
    {
        "file": "priorities.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/priorities.ts",
        "code": {
            "priority": "\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });\n\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });",
            "room": "\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });\n\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });",
            "addPriorityChangeHistoryToRoom": "const addPriorityChangeHistoryToRoom = async (\nconst addPriorityChangeHistoryToRoom = async (\n\troomId: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriority?: Pick<ILivechatPriority, 'name' | 'i18n'>,\n) => {\n\tawait Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n\t\tpriorityData: {\n\t\t\tdefinedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\t...(priority && { priority }),"
        },
        "depth_rank": 12
    },
    {
        "file": "monitors.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/monitors.ts",
        "code": {
            "query": "\tconst query = {};\n\tconst query = {};"
        },
        "depth_rank": 12
    },
    {
        "file": "departments.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/departments.ts",
        "code": {
            "department": "\tconst department = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(userId, departmentId, { projection: { _id: 1 } });\n\tconst department = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(userId, departmentId, { projection: { _id: 1 } });"
        },
        "depth_rank": 12
    },
    {
        "file": "getUnitsFromUserRoles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/methods/getUnitsFromUserRoles.ts",
        "code": {
            "memoizedGetUnitFromUserRoles": "async function getUnitsFromUserRoles(user: string): Promise<string[]> {\nasync function getUnitsFromUserRoles(user: string): Promise<string[]> {\n\treturn LivechatUnit.findByMonitorId(user);\n}\n\nasync function getDepartmentsFromUserRoles(user: string): Promise<string[]> {\nasync function getDepartmentsFromUserRoles(user: string): Promise<string[]> {\n\treturn (await LivechatDepartmentAgents.findByAgentId(user).toArray()).map((department) => department.departmentId);\n}\n\nconst memoizedGetUnitFromUserRoles = mem(getUnitsFromUserRoles, { maxAge: process.env.TEST_MODE ? 1 : 10000 });\nconst memoizedGetUnitFromUserRoles = mem(getUnitsFromUserRoles, { maxAge: process.env.TEST_MODE ? 1 : 10000 });",
            "memoizedGetDepartmentsFromUserRoles": "const memoizedGetDepartmentsFromUserRoles = mem(getDepartmentsFromUserRoles, { maxAge: process.env.TEST_MODE ? 1 : 10000 });\nconst memoizedGetDepartmentsFromUserRoles = mem(getDepartmentsFromUserRoles, { maxAge: process.env.TEST_MODE ? 1 : 10000 });",
            "unitsAndDepartments": "\tconst unitsAndDepartments = [...(await memoizedGetUnitFromUserRoles(user)), ...(await memoizedGetDepartmentsFromUserRoles(user))];\n\tconst unitsAndDepartments = [...(await memoizedGetUnitFromUserRoles(user)), ...(await memoizedGetDepartmentsFromUserRoles(user))];\n\tlogger.debug({ msg: 'Calculating units for monitor', user, unitsAndDepartments });"
        },
        "depth_rank": 11
    },
    {
        "file": "resumeOnHold.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/methods/resumeOnHold.ts",
        "code": {
            "function": "async function resolveOnHoldCommentInfo(options: { clientAction: boolean }, room: any, onHoldChatResumedBy: any): Promise<string> {\nasync function resolveOnHoldCommentInfo(options: { clientAction: boolean }, room: any, onHoldChatResumedBy: any): Promise<string> {\n\tif (options.clientAction) {\n\t\treturn i18n.t('Omnichannel_on_hold_chat_resumed_manually', {\n\t\t\tuser: onHoldChatResumedBy.name || onHoldChatResumedBy.username,\n\t\t});\n\t}\n\tconst {\n\tconst {\n\t\tv: { _id: visitorId },",
            "visitor": "\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },",
            "guest": "\tconst guest = visitor.name || visitor.username;\n\tconst guest = visitor.name || visitor.username;\n\n\treturn i18n.t('Omnichannel_on_hold_chat_automatically', { guest });",
            "inquiry": "\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});"
        },
        "depth_rank": 11
    },
    {
        "file": "Helper.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Helper.ts",
        "code": {
            "departmentIds": "\tconst agentIdsWithDepartmentNotConnectedToBusinessHour = await LivechatDepartmentAgents.findAllAgentsConnectedToListOfDepartments(\n\tconst agentIdsWithDepartmentNotConnectedToBusinessHour = await LivechatDepartmentAgents.findAllAgentsConnectedToListOfDepartments(\n\t\tactiveDepartmentsWithoutBusinessHour,\n\t);\n\treturn agentIdsWithDepartmentNotConnectedToBusinessHour;\n};\n\nconst getAllAgentIdsForDefaultBusinessHour = async (): Promise<string[]> => {\nconst getAllAgentIdsForDefaultBusinessHour = async (): Promise<string[]> => {\n\tconst [withoutDepartment, withDepartmentNotConnectedToBusinessHour] = await Promise.all([\n\tconst [withoutDepartment, withDepartmentNotConnectedToBusinessHour] = await Promise.all([\n\t\tgetAllAgentIdsWithoutDepartment(),\n\t\tgetAllAgentIdsWithDepartmentNotConnectedToBusinessHour(),\n\t]);\n\n\treturn [...new Set([...withoutDepartment, ...withDepartmentNotConnectedToBusinessHour])];\n};\n\nconst getAgentIdsToHandle = async (businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<string[]> => {\nconst getAgentIdsToHandle = async (businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<string[]> => {\n\tif (businessHour.type === LivechatBusinessHourTypes.DEFAULT) {\n\t\treturn getAllAgentIdsForDefaultBusinessHour();\n\t}\n\tconst departmentIds = (\n\tconst departmentIds = (\n\t\tawait LivechatDepartment.findEnabledByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { _id: 1 },",
            "activeDepartmentsWithoutBusinessHour": "const getAllAgentIdsWithDepartmentNotConnectedToBusinessHour = async (): Promise<string[]> => {\nconst getAllAgentIdsWithDepartmentNotConnectedToBusinessHour = async (): Promise<string[]> => {\n\tconst activeDepartmentsWithoutBusinessHour = (\n\tconst activeDepartmentsWithoutBusinessHour = (\n\t\tawait LivechatDepartment.findActiveDepartmentsWithoutBusinessHour({\n\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "Multiple.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Multiple.ts",
        "code": {
            "department": "\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },",
            "agentDepartments": "\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },",
            "isDefaultBHActive": "\t\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);",
            "departments": "\t\tconst departments = (await LivechatDepartment.findInIds(\n\t\tconst departments = (await LivechatDepartment.findInIds(\n\t\t\tagentDepartments.map(({ departmentId }) => departmentId),",
            "activeBusinessHoursForAgent": "\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId).filter(isTruthy);\n\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId).filter(isTruthy);",
            "agentIds": "\t\tconst agentIds = (\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentsToRemove, { projection: { agentId: 1 } }).toArray()"
        },
        "depth_rank": 11
    },
    {
        "file": "Custom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Custom.ts",
        "code": {
            "existingBusinessHour": "\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },",
            "businessHourToReturn": "\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };",
            "currentDepartments": "\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\tconst currentDepartments = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },",
            "businessHour": "\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});",
            "departmentIds": "\t\tconst departmentIds = (\n\t\tconst departmentIds = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },",
            "agentIds": "\t\tconst agentIds = (\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },",
            "agentsConnectedToDefaultBH": "\t\tconst agentsConnectedToDefaultBH = await (\n\t\tconst agentsConnectedToDefaultBH = await (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },"
        },
        "depth_rank": 11
    },
    {
        "file": "business-hour.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/lib/business-hour.ts",
        "code": {
            "query": "\tconst query = {};\n\tconst query = {};",
            "filterReg": "\t\tconst filterReg = new RegExp(escapeRegExp(name), 'i');\n\t\tconst filterReg = new RegExp(escapeRegExp(name), 'i');\n\t\tObject.assign(query, { name: filterReg });",
            "currentDepartments": "\tconst [businessHours, total] = await Promise.all([cursor.toArray(), totalCount]);\n\tconst [businessHours, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t// add departments to businessHours\n\tconst businessHoursWithDepartments = await Promise.all(\n\tconst businessHoursWithDepartments = await Promise.all(\n\t\tbusinessHours.map(async (businessHour) => {\n\t\t\tconst currentDepartments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\tconst currentDepartments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\t\tprojection: { _id: 1 },"
        },
        "depth_rank": 12
    },
    {
        "file": "messageTypes.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/client/messageTypes.ts",
        "code": {
            "to": "\t\tconst from = message.transferData.prevDepartment;\n\t\tconst from = message.transferData.prevDepartment;\n\t\tconst to = message.transferData.department.name;\n\t\tconst to = message.transferData.department.name;\n\n\t\treturn {\n\t\t\tfallback: t('Livechat_transfer_failed_fallback', { from, to }),"
        },
        "depth_rank": 10
    },
    {
        "file": "startup.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/license/server/startup.ts",
        "code": {
            "existingData": "\t\tconst existingData = wrapExceptions(() => JSON.parse(settings.get<string>('Enterprise_License_Data'))).catch(() => ({})) ?? {};\n\t\tconst existingData = wrapExceptions(() => JSON.parse(settings.get<string>('Enterprise_License_Data'))).catch(() => ({})) ?? {};",
            "obj": "\t\tconst [, , signed] = License.encryptedLicense.split('.');\n\t\tconst [, , signed] = License.encryptedLicense.split('.');\n\n\t\t// Check if this sync has already been done. Based on License, behavior.\n\n\t\tif ([...contexts.values()].every((context) => existingData.signed === signed && existingData[context] === period)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst obj = Object.fromEntries(contexts.map((context) => [context, period]));\n\t\tconst obj = Object.fromEntries(contexts.map((context) => [context, period]));\n\n\t\tawait Settings.updateValueById(\n\t\t\t'Enterprise_License_Data',\n\t\t\tJSON.stringify({\n\t\t\t\t...(existingData.signed === signed && existingData),\n\t\t\t\t...existingData,\n\t\t\t\t...obj,\n\t\t\t\tsigned,\n\t\t\t}),\n\t\t);\n\n\t\ttry {\n\t\t\tawait syncWorkspace();\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "getSeatsRequestLink.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/license/server/getSeatsRequestLink.ts",
        "code": {
            "newUrl": "\tconst workspaceId = await Settings.findOneById('Cloud_Workspace_Id');\n\tconst workspaceId = await Settings.findOneById('Cloud_Workspace_Id');\n\tconst activeUsers = await Users.getActiveLocalUserCount();\n\tconst activeUsers = await Users.getActiveLocalUserCount();\n\tconst wizardSettings: WizardSettings = await Settings.findSetupWizardSettings().toArray();\n\tconst wizardSettings: WizardSettings = await Settings.findSetupWizardSettings().toArray();\n\n\tconst newUrl = new URL(url);\n\tconst newUrl = new URL(url);\n\n\tif (workspaceId?.value) {\n\t\tnewUrl.searchParams.append('workspaceId', String(workspaceId.value));\n\t}\n\n\tif (activeUsers) {\n\t\tnewUrl.searchParams.append('activeUsers', String(activeUsers));\n\t}\n\n\twizardSettings\n\t\t.filter(({ _id, value }) => ['Industry', 'Country', 'Size'].includes(_id) && value)"
        },
        "depth_rank": 10
    },
    {
        "file": "getAppCount.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/license/server/lib/getAppCount.ts",
        "code": {
            "apps": "\tconst apps = await Apps.getApps({ enabled: true });\n\tconst apps = await Apps.getApps({ enabled: true });"
        },
        "depth_rank": 11
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/license/client/index.ts",
        "code": {
            "features": "\t\tconst features = await queryClient.fetchQuery({\n\t\tconst features = await queryClient.fetchQuery({\n\t\t\tqueryKey: ['ee.features'],\n\t\t\tqueryFn: fetchFeatures,\n\t\t});\n\t\treturn features.includes(feature);\n\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/settings/server/settings.ts",
        "code": {
            "value": "\tconst value = changeSettingValue(record);\n\tconst value = changeSettingValue(record);\n\n\treturn next({ ...record, value });"
        },
        "depth_rank": 10
    },
    {
        "file": "settings.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/canned-responses/server/settings.ts",
        "code": {
            "omnichannelEnabledQuery": "const omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };\nconst omnichannelEnabledQuery = { _id: 'Livechat_enabled', value: true };"
        },
        "depth_rank": 10
    },
    {
        "file": "saveCannedResponse.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/canned-responses/server/methods/saveCannedResponse.ts",
        "code": {
            "duplicateShortcut": "\t\tconst duplicateShortcut = await CannedResponse.findOneByShortcut(responseData.shortcut, {\n\t\tconst duplicateShortcut = await CannedResponse.findOneByShortcut(responseData.shortcut, {\n\t\t\tprojection: { _id: 1 },",
            "data": "\t\t\tconst user = await Users.findOneById(userId);\n\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\t...responseData,\n\t\t\t\t...(responseData.scope === 'user' && { userId: user?._id }),"
        },
        "depth_rank": 11
    },
    {
        "file": "responses.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/app/canned-responses/client/startup/responses.js",
        "code": {
            "events": "const events = {\nconst events = {\n\tchanged: ({ type, ...response }) => {\n\t\tCannedResponse.upsert({ _id: response._id }, response);"
        },
        "depth_rank": 11
    },
    {
        "file": "transformMappedData.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/lib/misc/transformMappedData.js",
        "code": {
            "transformedData": "\tconst originalData = cloneDeep(data);\n\tconst originalData = cloneDeep(data);\n\tconst transformedData = {};\n\tconst transformedData = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "requestSeatsRoute.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/requestSeatsRoute.ts",
        "code": {
            "url": "\tconst url = await getSeatsRequestLink(req.unauthorized ? fallback : (await getCheckoutUrl()).url, req.query as Record<string, string>);\n\tconst url = await getSeatsRequestLink(req.unauthorized ? fallback : (await getCheckoutUrl()).url, req.query as Record<string, string>);\n\n\tawait Analytics.saveSeatRequest();\n\n\tres.writeHead(302, { Location: url });"
        },
        "depth_rank": 8
    },
    {
        "file": "LivechatUnit.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatUnit.ts",
        "code": {
            "savedMonitors": "\t\tconst savedMonitors = (await LivechatUnitMonitors.findByUnitId(_id).toArray()).map(({ monitorId }) => monitorId);\n\t\tconst savedMonitors = (await LivechatUnitMonitors.findByUnitId(_id).toArray()).map(({ monitorId }) => monitorId);",
            "monitorsToSave": "\t\tconst monitorsToSave = monitors.map(({ monitorId }) => monitorId);\n\t\tconst monitorsToSave = monitors.map(({ monitorId }) => monitorId);",
            "savedDepartments": "\t\tfor await (const monitor of monitors) {\n\t\tfor await (const monitor of monitors) {\n\t\t\tawait LivechatUnitMonitors.saveMonitor({\n\t\t\t\tmonitorId: monitor.monitorId,\n\t\t\t\tunitId: _id,\n\t\t\t\tusername: monitor.username,\n\t\t\t});\n\t\t}\n\n\t\tconst savedDepartments = (await LivechatDepartment.findByParentId(_id, { projection: { _id: 1 } }).toArray()).map(({ _id }) => _id);\n\t\tconst savedDepartments = (await LivechatDepartment.findByParentId(_id, { projection: { _id: 1 } }).toArray()).map(({ _id }) => _id);",
            "departmentsToSave": "\t\tconst departmentsToSave = departments.map(({ departmentId }) => departmentId);\n\t\tconst departmentsToSave = departments.map(({ departmentId }) => departmentId);",
            "await": "\t\tfor await (const departmentId of departmentsToSave) {\n\t\tfor await (const departmentId of departmentsToSave) {\n\t\t\tawait LivechatDepartment.updateOne(\n\t\t\t\t{ _id: departmentId },",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };",
            "monitoredUnits": "\t\tconst monitoredUnits = await LivechatUnitMonitors.findByMonitorId(monitorId).toArray();\n\t\tconst monitoredUnits = await LivechatUnitMonitors.findByMonitorId(monitorId).toArray();\n\t\tif (monitoredUnits.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn monitoredUnits.map((u) => u.unitId);\n\t}\n\n\tasync findMonitoredDepartmentsByMonitorId(monitorId: string, includeDisabled: boolean): Promise<ILivechatDepartment[]> {\n\t\tconst monitoredUnits = await this.findByMonitorId(monitorId);\n\t\tconst monitoredUnits = await this.findByMonitorId(monitorId);\n\n\t\tif (includeDisabled) {\n\t\t\treturn LivechatDepartment.findByUnitIds(monitoredUnits, {}).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "LivechatDepartment.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatDepartment.ts",
        "code": {
            "unit": "\t\tconst unit = await LivechatUnit.findOneById(businessUnit, { projection: { _id: 1 } });\n\t\tconst unit = await LivechatUnit.findOneById(businessUnit, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "CannedResponse.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/models/raw/CannedResponse.ts",
        "code": {
            "_id": "\t\tconst record = {\n\t\tconst record = {\n\t\t\tshortcut,\n\t\t\ttext,\n\t\t\tscope,\n\t\t\ttags,\n\t\t\tuserId,\n\t\t\tdepartmentId,\n\t\t\tcreatedBy,\n\t\t\t_createdAt,\n\t\t};\n\n\t\tconst _id = (await this.insertOne(record)).insertedId;\n\t\tconst _id = (await this.insertOne(record)).insertedId;\n\t\treturn Object.assign(record, { _id });",
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };"
        },
        "depth_rank": 10
    },
    {
        "file": "LivechatTag.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatTag.ts",
        "code": {
            "query": "\t\tconst query = { _id };\n\t\tconst query = { _id };"
        },
        "depth_rank": 10
    },
    {
        "file": "LivechatRooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatRooms.ts",
        "code": {
            "query": "\t\tconst query = {\n\t\tconst query = {\n\t\t\tt: 'l' as const,\n\t\t\tt: 'l' as const,\n\t\t\topen: true,\n\t\t\tslaId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;"
        },
        "depth_rank": 10
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/instance/service.ts",
        "code": {
            "hostIP": "const hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\nconst hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\n\nconst { Base } = Serializers;\nconst { Base } = Serializers;",
            "tx": "\tconstructor() {\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });"
        },
        "depth_rank": 10
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/message-reads/service.ts",
        "code": {
            "threadMessage": "\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });",
            "subscriptions": "\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\n\t\tif (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },",
            "totalMessageReads": "\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {",
            "result": "\t\t\tconst totalMessageReads = await MessageReads.countByThreadId(tmid);\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadId(tmid);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n\t\tconst firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n\t\tif (firstRead?.ls) {\n\t\t\tconst result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n\t\t\tconst result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n\t\t\tif (result.modifiedCount > 0) {\n\t\t\t\tvoid api.broadcast('notify.messagesRead', { rid: threadMessage.rid, tmid, until: firstRead.ls });"
        },
        "depth_rank": 10
    },
    {
        "file": "action.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/slash-commands/action.ts",
        "code": {
            "invitees": "\tconst invitees = externalUserIdsToInvite.map((rawUserId) => normalizeExternalInviteeId(rawUserId));\n\tconst invitees = externalUserIdsToInvite.map((rawUserId) => normalizeExternalInviteeId(rawUserId));\n\n\tconst { rid: roomId } = item;\n\tconst { rid: roomId } = item;"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomSender.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/converters/RoomSender.ts",
        "code": {
            "inviteesUsername": "\t\tconst allUsernamesToBeInvited: string[] = [...externalUsernamesToBeInvited, ...internalUsernamesToBeInvited];\n\t\tconst allUsernamesToBeInvited: string[] = [...externalUsernamesToBeInvited, ...internalUsernamesToBeInvited];\n\n\t\tconst externalInviterId = isAnExternalUserIdFormat(internalInviterId) && internalInviterId;\n\t\tconst externalInviterId = isAnExternalUserIdFormat(internalInviterId) && internalInviterId;\n\n\t\treturn new FederationOnDirectMessageRoomCreationDto({\n\t\t\tinternalInviterId,\n\t\t\tinternalRoomId,\n\t\t\tinvitees: normalizeInvitees(allUsernamesToBeInvited, homeServerDomainName),\n\t\t\tinviteComesFromAnExternalHomeServer: Boolean(externalInviterId),\n\t\t});\n\t}\n\n\tpublic static toBeforeDirectMessageCreatedDto(\n\t\tmembers: (IUser | string)[],\n\t\thomeServerDomainName: string,\n\t): FederationBeforeDirectMessageRoomCreationDto {\n\t\tconst invitees = getExternalUsersToBeInvited(members);\n\t\tconst invitees = getExternalUsersToBeInvited(members);\n\t\tconst inviteesUsername = getInviteesUsername(invitees);\n\t\tconst inviteesUsername = getInviteesUsername(invitees);\n\n\t\treturn new FederationBeforeDirectMessageRoomCreationDto({\n\t\t\tinvitees: normalizeInvitees(inviteesUsername, homeServerDomainName),\n\t\t});\n\t}\n\n\tpublic static toBeforeAddUserToARoomDto(\n\t\tmembers: (IUser | string)[],\n\t\tinternalRoom: IRoom,\n\t\thomeServerDomainName: string,\n\t\tinternalInviter?: IUser,\n\t): FederationBeforeAddUserToARoomDto {\n\t\tconst { invitees } = FederationRoomSenderConverterEE.toBeforeDirectMessageCreatedDto(members, homeServerDomainName);\n\t\tconst { invitees } = FederationRoomSenderConverterEE.toBeforeDirectMessageCreatedDto(members, homeServerDomainName);"
        },
        "depth_rank": 13
    },
    {
        "file": "User.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/infrastructure/rocket-chat/adapters/User.ts",
        "code": {
            "existingLocalUser": "\t\tconst existingLocalUser = internalUser.username && (await Users.findOneByUsername(internalUser.username, { projection: { _id: 1 } }));\n\t\tconst existingLocalUser = internalUser.username && (await Users.findOneByUsername(internalUser.username, { projection: { _id: 1 } }));"
        },
        "depth_rank": 13
    },
    {
        "file": "UserService.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/UserService.ts",
        "code": {
            "searchedServersByUser": "\t\tconst searchedServersByUser = await this.internalUserAdapter.getSearchedServerNamesByUserId(internalUserId);\n\t\tconst searchedServersByUser = await this.internalUserAdapter.getSearchedServerNamesByUserId(internalUserId);\n\n\t\treturn [...this.availableServers, ...searchedServersByUser.map((server) => ({ name: server, default: false, local: false }))];"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomServiceSender.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts",
        "code": {
            "await": "\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\t\tawait this.inviteUserToAFederatedRoom({\n\t\t\t\tinternalInviterId,\n\t\t\t\tinternalRoomId,\n\t\t\t\tinviteeUsernameOnly: user.inviteeUsernameOnly,\n\t\t\t\tnormalizedInviteeId: user.normalizedInviteeId,\n\t\t\t\trawInviteeId: user.rawInviteeId,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async onUsersAddedToARoom(roomOnUsersAddedToARoomInput: FederationOnUsersAddedToARoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;",
            "externalRoomId": "\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n\t}\n\n\tprivate async inviteUserToAFederatedRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;"
        },
        "depth_rank": 13
    },
    {
        "file": "DirectMessageRoomServiceSender.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts",
        "code": {
            "inviteesFromTheSameHomeServer": "\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\t\tinternalRoomId,\n\t\t});\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(inviteesFromTheSameHomeServer.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tprivate async createUserForDirectMessageRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;"
        },
        "depth_rank": 13
    },
    {
        "file": "server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/services/ecdh-proxy/lib/server.ts",
        "code": {
            "getSessionCached": "const app = express();\nconst app = express();\napp.use(cookieParser());\n\nconst port = process.env.PORT || 4000;\nconst port = process.env.PORT || 4000;\n\nfunction streamToBuffer(stream: Readable): Promise<Buffer> {\nfunction streamToBuffer(stream: Readable): Promise<Buffer> {\n\treturn new Promise((resolve) => {\n\t\tconst buffers: any[] = [];\n\t\tconst buffers: any[] = [];\n\t\tstream.on('data', (d) => buffers.push(d));\n\t\tstream.on('end', () => {\n\t\t\tresolve(Buffer.concat(buffers));\n\t\t});\n\t\tstream.resume();\n\t});\n}\n\nasync function getSession(clientPublicKey: string): Promise<ServerSession> {\nasync function getSession(clientPublicKey: string): Promise<ServerSession> {\n\tconst serverSession = new ServerSession();\n\tconst serverSession = new ServerSession();\n\tawait serverSession.init(clientPublicKey);\n\treturn serverSession;\n}\n\nconst getSessionCached = mem(getSession, { maxAge: 1000 });\nconst getSessionCached = mem(getSession, { maxAge: 1000 });",
            "responseData": "\tconst connector = http.request(options, async (serverResponse) => {\n\tconst connector = http.request(options, async (serverResponse) => {\n\t\tserverResponse.pause();\n\t\tif (serverResponse.statusCode) {\n\t\t\tres.writeHead(serverResponse.statusCode, serverResponse.headers);\n\t\t}\n\t\tif (session) {\n\t\t\tconst responseData = await streamToBuffer(serverResponse);\n\t\t\tconst responseData = await streamToBuffer(serverResponse);\n\t\t\tif (responseData.length) {\n\t\t\t\tres.write(await processResponse(session, responseData));\n\t\t\t}\n\t\t\tres.end();\n\t\t\t// session.encryptStream(serverResponse, processInput, processOutput).pipe(res);\n\t\t} else {",
            "requestData": "\t\tconst requestData = await streamToBuffer(req);\n\t\tconst requestData = await streamToBuffer(req);\n\t\tif (requestData.length) {\n\t\t\tconnector.write(await processRequest(session, requestData));\n\t\t}\n\t\tconnector.end();\n\t} else {",
            "session": "\t\tconst session = await getSessionCached(req.body.clientPublicKey);\n\t\tconst session = await getSessionCached(req.body.clientPublicKey);\n\n\t\tres.cookie('ecdhSession', req.body.clientPublicKey);\n\t\tres.send({\n\t\t\tsuccess: true,\n\t\t\tpublicKeyString: session.publicKeyString,\n\t\t});\n\t} catch (e) {",
            "result": "\t\tconst result = await session.decrypt(req.body.text);\n\t\tconst result = await session.decrypt(req.body.text);\n\t\tres.send(await session.encrypt(result));\n\t} catch (e) {",
            "wss": "const wss = new WebSocket.Server({ server: httpServer });\nconst wss = new WebSocket.Server({ server: httpServer });",
            "decrypted": "\t\tconst decrypted = JSON.stringify([await session.decrypt(data.replace('[\"', '').replace('\"]', ''))]);\n\t\tconst decrypted = JSON.stringify([await session.decrypt(data.replace('[\"', '').replace('\"]', ''))]);\n\t\tproxy.send(decrypted);\n\t});\n\n\tproxy.on('message', async (data: string) => {\n\t\tws.send(await session.encrypt(data.toString()));\n\t});\n\n\tproxy.on('error', (error) => {\n\t\tconsole.error(error);\n\t});\n\n\tws.on('error', (error) => {\n\t\tconsole.error(error);\n\t});\n\n\tws.on('close', (code, reason) => {\n\t\ttry {\n\t\t\tproxy.close(code, reason);\n\t\t} catch (e) {"
        },
        "depth_rank": 11
    },
    {
        "file": "appRequestsCron.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/appRequestsCron.ts",
        "code": {
            "installedApps": "const appsNotifyAppRequests = async function _appsNotifyAppRequests() {\nconst appsNotifyAppRequests = async function _appsNotifyAppRequests() {\n\ttry {\n\t\tconst installedApps = await Apps.installedApps({ enabled: true });\n\t\tconst installedApps = await Apps.installedApps({ enabled: true });",
            "result": "\t\tconst result = await fetch(pendingSentUrl, options);\n\t\tconst result = await fetch(pendingSentUrl, options);\n\t\tconst { data } = await result.json();\n\t\tconst { data } = await result.json();"
        },
        "depth_rank": 9
    },
    {
        "file": "cron.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/cron.ts",
        "code": {
            "result": "\t\tconst response = await fetch(fullUrl, options);\n\t\tconst response = await fetch(fullUrl, options);\n\n\t\tconst result = await response.json();\n\t\tconst result = await response.json();\n\n\t\tif (Array.isArray(result)) {\n\t\t\tdata = result;\n\t\t}\n\t} catch (err) {"
        },
        "depth_rank": 9
    },
    {
        "file": "logs-storage.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/storage/logs-storage.js",
        "code": {
            "id": "\tconstructor(model) {\n\tconstructor(model) {\n\t\tsuper('mongodb');\n\t\tthis.db = model;\n\t}\n\n\tasync find(...args) {\n\t\treturn this.db.find(...args).toArray();\n\t}\n\n\tasync storeEntries(appId, logger) {\n\t\tconst item = AppConsole.toStorageEntry(appId, logger);\n\t\tconst item = AppConsole.toStorageEntry(appId, logger);\n\n\t\titem.instanceId = InstanceStatus.id();\n\n\t\tconst id = (await this.db.insertOne(item)).insertedId;\n\t\tconst id = (await this.db.insertOne(item)).insertedId;\n\n\t\treturn this.db.findOneById(id);\n\t}\n\n\tasync getEntriesFor(appId) {\n\t\treturn this.db.find({ appId }).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "AppRealStorage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/storage/AppRealStorage.ts",
        "code": {
            "docs": "\t\tconst docs = await this.db.find({}).toArray();\n\t\tconst docs = await this.db.find({}).toArray();"
        },
        "depth_rank": 10
    },
    {
        "file": "appRequestNotifyUsers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/marketplace/appRequestNotifyUsers.ts",
        "code": {
            "data": "\t\tconst data = (await response.json()) as { meta: { total: number }; data: any };\n\t\tconst data = (await response.json()) as { meta: { total: number }; data: any };",
            "finalResult": "\t\tconst finalResult = await Promise.all(requestsCollection);\n\t\tconst finalResult = await Promise.all(requestsCollection);\n\n\t\t// Return the list of users that were notified\n\t\treturn finalResult.flat();\n\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "uikit.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/communication/uikit.ts",
        "code": {
            "getCoreAppPayload": "const getCoreAppPayload = (req: UiKitUserInteractionRequest): UiKitCoreAppPayload => {\nconst getCoreAppPayload = (req: UiKitUserInteractionRequest): UiKitCoreAppPayload => {\n\tconst { id: appId } = req.params;\n\tconst { id: appId } = req.params;",
            "room": "\t\tconst message = 'mid' in req.body ? req.body.mid : undefined;\n\t\tconst message = 'mid' in req.body ? req.body.mid : undefined;\n\t\tconst room = 'rid' in req.body ? req.body.rid : undefined;\n\t\tconst room = 'rid' in req.body ? req.body.rid : undefined;\n\n\t\treturn {\n\t\t\tappId,\n\t\t\ttype,\n\t\t\tactionId,\n\t\t\ttriggerId,\n\t\t\tcontainer,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tuser,\n\t\t\tvisitor,\n\t\t\troom,\n\t\t};\n\t}\n\n\tif (req.body.type === 'viewClosed') {\n\t\tconst { user } = req;\n\t\tconst { user } = req;",
            "result": "\t\t\t\t\tconst result = await orch.triggerEvent('IUIKitInteractionHandler', action);\n\t\t\t\t\tconst result = await orch.triggerEvent('IUIKitInteractionHandler', action);\n\n\t\t\t\t\tres.send(result);\n\t\t\t\t} catch (e) {",
            "error": "\t\t\t\t\tconst error = e instanceof Error ? e.message : e;\n\t\t\t\t\tconst error = e instanceof Error ? e.message : e;\n\t\t\t\t\tres.status(500).send({ error });",
            "rid": "\t\t\t\tconst mid = 'mid' in req.body ? req.body.mid : undefined;\n\t\t\t\tconst mid = 'mid' in req.body ? req.body.mid : undefined;\n\t\t\t\tconst rid = 'rid' in req.body ? req.body.rid : undefined;\n\t\t\t\tconst rid = 'rid' in req.body ? req.body.rid : undefined;\n\n\t\t\t\tconst { visitor } = req.body;\n\t\t\t\tconst { visitor } = req.body;",
            "action": "\t\t\t\tconst room = await orch.getConverters()?.get('rooms').convertById(rid);\n\t\t\t\tconst room = await orch.getConverters()?.get('rooms').convertById(rid);\n\t\t\t\tconst user = orch.getConverters()?.get('users').convertToApp(req.user);\n\t\t\t\tconst user = orch.getConverters()?.get('users').convertToApp(req.user);\n\t\t\t\tconst message = mid && (await orch.getConverters()?.get('messages').convertById(mid));\n\t\t\t\tconst message = mid && (await orch.getConverters()?.get('messages').convertById(mid));\n\n\t\t\t\tconst action = {\n\t\t\t\tconst action = {\n\t\t\t\t\ttype,\n\t\t\t\t\tappId,\n\t\t\t\t\tactionId,\n\t\t\t\t\ttriggerId,\n\t\t\t\t\tuser,\n\t\t\t\t\troom,\n\t\t\t\t\tmessage,\n\t\t\t\t\ttmid,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t...(msgText ? { message: msgText } : {}),"
        },
        "depth_rank": 10
    },
    {
        "file": "rest.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/communication/rest.ts",
        "code": {
            "workspaceId": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst workspaceId = settings.get('Cloud_Workspace_Id');\n\t\t\t\t\tconst workspaceId = settings.get('Cloud_Workspace_Id');\n\t\t\t\t\tconst { action, appId, appVersion } = this.queryParams;\n\t\t\t\t\tconst { action, appId, appVersion } = this.queryParams;",
            "apps": "\t\t\t\t\tconst apps = manager.get().map((prl) => ({\n\t\t\t\t\tconst apps = manager.get().map((prl) => ({\n\t\t\t\t\t\tid: prl.getID(),\n\t\t\t\t\t\tlanguages: prl.getStorageItem().languageContent,\n\t\t\t\t\t}));\n\n\t\t\t\t\treturn API.v1.success({ apps });",
            "app": "\t\t\t\t\t\tconst app = await getUploadFormData(\n\t\t\t\t\t\tconst app = await getUploadFormData(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ field: 'app', sizeLimit: settings.get('FileUpload_MaxFileSize') },",
            "permissions": "\t\t\t\t\t\t\t\tconst permissions = JSON.parse(formData?.permissions || '');\n\t\t\t\t\t\t\t\tconst permissions = JSON.parse(formData?.permissions || '');\n\t\t\t\t\t\t\t\treturn permissions.length ? permissions : undefined;\n\t\t\t\t\t\t\t} catch {",
            "aff": "\t\t\t\t\tconst aff = await manager.update(buff, permissionsGranted);\n\t\t\t\t\tconst aff = await manager.update(buff, permissionsGranted);\n\t\t\t\t\tconst info: IAppInfo & { status?: AppStatus } = aff.getAppInfo();\n\t\t\t\t\tconst info: IAppInfo & { status?: AppStatus } = aff.getAppInfo();",
            "success": "\t\t\t\t\t\tconst success = await manager.enable(info.id);\n\t\t\t\t\t\tconst success = await manager.enable(info.id);\n\t\t\t\t\t\tinfo.status = success ? AppStatus.AUTO_ENABLED : info.status;\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid orchestrator.getNotifier().appAdded(info.id);\n\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tapp: info,\n\t\t\t\t\t\timplemented: aff.getImplementedInferfaces(),\n\t\t\t\t\t\tlicenseValidation: aff.getLicenseValidationResult(),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\tthis.api.addRoute(\n\t\t\t'buildExternalAppRequest',\n\t\t\t{ authRequired: true },",
            "adminsRaw": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst workspaceId = settings.get<string>('Cloud_Workspace_Id');\n\t\t\t\t\tconst workspaceId = settings.get<string>('Cloud_Workspace_Id');\n\n\t\t\t\t\tconst requester = {\n\t\t\t\t\tconst requester = {\n\t\t\t\t\t\tid: this.user._id,\n\t\t\t\t\t\tusername: this.user.username,\n\t\t\t\t\t\tname: this.user.name,\n\t\t\t\t\t\tnickname: this.user.nickname,\n\t\t\t\t\t\temails: this.user?.emails?.map((e) => e.address),\n\t\t\t\t\t};\n\n\t\t\t\t\tlet admins: {\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t\tusername?: string;\n\t\t\t\t\t\tname?: string;\n\t\t\t\t\t\tnickname?: string;\n\t\t\t\t\t}[] = [];\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst adminsRaw = await Users.findUsersInRoles(['admin'], undefined, {\n\t\t\t\t\t\tconst adminsRaw = await Users.findUsersInRoles(['admin'], undefined, {\n\t\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t\tnickname: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}).toArray();\n\n\t\t\t\t\t\tadmins = adminsRaw.map((a) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tid: a._id,\n\t\t\t\t\t\t\t\tusername: a.username,\n\t\t\t\t\t\t\t\tname: a.name,\n\t\t\t\t\t\t\t\tnickname: a.nickname,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) {",
            "externalComponents": "\t\t\t\t\tconst externalComponents = orchestrator.getProvidedComponents();\n\t\t\t\t\tconst externalComponents = orchestrator.getProvidedComponents();\n\n\t\t\t\t\treturn API.v1.success({ externalComponents });",
            "result": "\t\t\t\t\tconst result = await manager.changeStatus(prl.getID(), status);\n\t\t\t\t\tconst result = await manager.changeStatus(prl.getID(), status);\n\t\t\t\t\treturn API.v1.success({ status: result.getStatus() });",
            "baseUrl": "\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl();\n\t\t\t\t\tconst { appId, q = '', sort = '', limit = 25, offset = 0 } = this.queryParams;\n\t\t\t\t\tconst { appId, q = '', sort = '', limit = 25, offset = 0 } = this.queryParams;",
            "user": "\t\t\t\t\tconst user = orchestrator\n\t\t\t\t\tconst user = orchestrator\n\t\t\t\t\t\t?.getConverters()\n\t\t\t\t\t\t?.get('users')\n\t\t\t\t\t\t.convertToApp(await Meteor.userAsync());\n\n\t\t\t\t\tawait manager.remove(prl.getID(), { user });",
            "data": "\t\t\t\t\t\tconst data = await request.json();\n\t\t\t\t\t\tconst data = await request.json();\n\n\t\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\t\tscreenshots: data,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e: any) {",
            "languages": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\tconst languages = prl.getStorageItem().languageContent || {};\n\t\t\t\t\t\tconst languages = prl.getStorageItem().languageContent || {};",
            "prl": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\treturn API.v1.success({ status: prl.getStatus() });",
            "ourQuery": "\t\t\t\t\t\tconst ourQuery = Object.assign({}, query, { appId: prl.getID() });\n\t\t\t\t\t\tconst ourQuery = Object.assign({}, query, { appId: prl.getID() });",
            "logs": "\t\t\t\t\t\tconst logs = await orchestrator?.getLogStorage()?.find(ourQuery, options);\n\t\t\t\t\t\tconst logs = await orchestrator?.getLogStorage()?.find(ourQuery, options);\n\n\t\t\t\t\t\treturn API.v1.success({ logs });",
            "settings": "\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\t\t\t\t\tconst prl = manager.getOneById(this.urlParams.id);\n\n\t\t\t\t\tif (prl) {\n\t\t\t\t\t\tconst settings = Object.assign({}, prl.getStorageItem().settings);\n\t\t\t\t\t\tconst settings = Object.assign({}, prl.getStorageItem().settings);",
            "setting": "\t\t\t\t\t\tconst setting = manager.getSettingsManager().getAppSetting(this.urlParams.id, this.urlParams.settingId);\n\t\t\t\t\t\tconst setting = manager.getSettingsManager().getAppSetting(this.urlParams.id, this.urlParams.settingId);\n\n\t\t\t\t\t\treturn API.v1.success({ setting });",
            "storedApp": "\t\t\t\t\tconst storedApp = prl.getStorageItem();\n\t\t\t\t\tconst storedApp = prl.getStorageItem();\n\t\t\t\t\tconst { installationSource, marketplaceInfo } = storedApp;\n\t\t\t\t\tconst { installationSource, marketplaceInfo } = storedApp;",
            "headers": "\t\t\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl() as string;\n\t\t\t\t\t\t\tconst baseUrl = orchestrator.getMarketplaceUrl() as string;\n\t\t\t\t\t\t\tconst headers = getDefaultHeaders();\n\t\t\t\t\t\t\tconst headers = getDefaultHeaders();\n\t\t\t\t\t\t\tconst { version } = prl.getInfo();\n\t\t\t\t\t\t\tconst { version } = prl.getInfo();"
        },
        "depth_rank": 10
    },
    {
        "file": "appsCountHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/apps/communication/endpoints/appsCountHandler.ts",
        "code": {
            "apps": "\t\t\t\tconst manager = apiManager._manager as AppManager;\n\t\t\t\tconst manager = apiManager._manager as AppManager;\n\n\t\t\t\tconst apps = manager.get({ enabled: true });\n\t\t\t\tconst apps = manager.get({ enabled: true });"
        },
        "depth_rank": 11
    },
    {
        "file": "saml.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/configuration/saml.ts",
        "code": {
            "userDataCustomFieldMap": "\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\t\tconst customFieldsList: Record<string, any> = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "oauth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/configuration/oauth.ts",
        "code": {
            "getChannelsMap": "function getChannelsMap(channelsMap: string): Record<string, any> | undefined {\nfunction getChannelsMap(channelsMap: string): Record<string, any> | undefined {\n\tchannelsMap = (channelsMap || '{}').trim();"
        },
        "depth_rank": 9
    },
    {
        "file": "ldap.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/configuration/ldap.ts",
        "code": {
            "addLogoutCronJob": "\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addCronJob = configureBackgroundSync('LDAP_Sync', 'LDAP_Background_Sync', 'LDAP_Background_Sync_Interval', () => LDAPEE.sync());\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\tconst addAvatarCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AvatarSync',\n\t\t\t'LDAP_Background_Sync_Avatars',\n\t\t\t'LDAP_Background_Sync_Avatars_Interval',\n\t\t\t() => LDAPEE.syncAvatars(),\n\t\t);\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\tconst addLogoutCronJob = configureBackgroundSync(\n\t\t\t'LDAP_AutoLogout',\n\t\t\t'LDAP_Sync_AutoLogout_Enabled',\n\t\t\t'LDAP_Sync_AutoLogout_Interval',\n\t\t\t() => LDAPEE.syncLogout(),\n\t\t);\n\n\t\tsettings.watchMultiple(['LDAP_Background_Sync', 'LDAP_Background_Sync_Interval'], addCronJob);\n\t\tsettings.watchMultiple(['LDAP_Background_Sync_Avatars', 'LDAP_Background_Sync_Avatars_Interval'], addAvatarCronJob);\n\t\tsettings.watchMultiple(['LDAP_Sync_AutoLogout_Enabled', 'LDAP_Sync_AutoLogout_Interval'], addLogoutCronJob);\n\n\t\tsettings.watch('LDAP_Enable', async () => {\n\t\t\tawait addCronJob();\n\t\t\tawait addAvatarCronJob();\n\t\t\tawait addLogoutCronJob();\n\t\t});\n\n\t\tsettings.watch<string>('LDAP_Groups_To_Rocket_Chat_Teams', (value) => {\n\t\t\ttry {\n\t\t\t\tLDAPEEManager.validateLDAPTeamsMappingChanges(value);\n\t\t\t} catch (error) {"
        },
        "depth_rank": 9
    },
    {
        "file": "videoConference.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/configuration/videoConference.ts",
        "code": {
            "room": "\t\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'uids'>>(_id, { projection: { uids: 1 } });\n\t\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'uids'>>(_id, { projection: { uids: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "syncUserRoles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/syncUserRoles.ts",
        "code": {
            "user": "\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'roles'>>(uid, { projection: { username: 1, roles: 1 } });\n\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'roles'>>(uid, { projection: { username: 1, roles: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "EnterpriseCheck.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/EnterpriseCheck.ts",
        "code": {
            "hasLicense": "\t\t\tconst firstNode = nodes.sort().shift();\n\t\t\tconst firstNode = nodes.sort().shift();\n\n\t\t\t// if the first node is the current node and there are others nodes running the same service or\n\t\t\t// if this is the only one node online, then we should shutdown\n\t\t\treturn firstNode === this.broker.nodeID && (nodes.length > 0 || services.length === 1);\n\t\t},\n\t},\n\tasync started(): Promise<void> {\n\t\tsetInterval(async () => {\n\t\t\ttry {\n\t\t\t\tconst hasLicense = await this.broker.call('license.hasValidLicense', ['scalability']);\n\t\t\t\tconst hasLicense = await this.broker.call('license.hasValidLicense', ['scalability']);\n\t\t\t\tif (hasLicense) {\n\t\t\t\t\tcheckFails = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {"
        },
        "depth_rank": 9
    },
    {
        "file": "session.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/deviceManagement/session.ts",
        "code": {
            "user": "\t\tconst user = await Users.findOneByIdWithEmailAddress(userId, {\n\t\tconst user = await Users.findOneByIdWithEmailAddress(userId, {\n\t\t\tprojection: { 'name': 1, 'username': 1, 'emails': 1, 'settings.preferences.receiveLoginDetectionEmail': 1 },",
            "dateFormat": "\t\tconst dateFormat = settings.get('Message_TimeAndDateFormat');\n\t\tconst dateFormat = settings.get('Message_TimeAndDateFormat');\n\n\t\tconst {\n\t\tconst {\n\t\t\tname,\n\t\t\tusername,\n\t\t\temails: [{ address: email }],"
        },
        "depth_rank": 10
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/users.ts",
        "code": {
            "users": "\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst users = (await Users.getTotalOfRegisteredUsersByDate({\n\t\tconst users = (await Users.getTotalOfRegisteredUsersByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t})) as {",
            "lastPeriodTotalUsers": "\tconst yesterdayUsers = currentPeriodUsers.find((item) => item._id === yesterday)?.users || 0;\n\tconst yesterdayUsers = currentPeriodUsers.find((item) => item._id === yesterday)?.users || 0;\n\tconst todayUsers = currentPeriodUsers.find((item) => item._id === today)?.users || 0;\n\tconst todayUsers = currentPeriodUsers.find((item) => item._id === today)?.users || 0;\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst currentPeriodTotalUsers = getTotalOfWeekItems(currentPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\tconst lastPeriodTotalUsers = getTotalOfWeekItems(lastPeriodUsers, 'users');\n\treturn {\n\t\tdays: currentPeriodUsers.map((day) => ({ day: convertIntToDate(day._id), users: day.users })),",
            "createDestructuredDate": "const createDestructuredDate = (\nconst createDestructuredDate = (\n\tinput: moment.MomentInput,\n): {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n} => {"
        },
        "depth_rank": 10
    },
    {
        "file": "Manager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/oauth/Manager.ts",
        "code": {
            "name": "\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "updateRole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/roles/updateRole.ts",
        "code": {
            "otherRole": "\t\tconst otherRole = await Roles.findOneByName(roleData.name, { projection: { _id: 1 } });\n\t\tconst otherRole = await Roles.findOneByName(roleData.name, { projection: { _id: 1 } });"
        },
        "depth_rank": 10
    },
    {
        "file": "ReadReceipt.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/message-read-receipt/ReadReceipt.js",
        "code": {
            "list": "// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\n// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\nconst list = {};\nconst list = {};",
            "result": "\tconst result = await Messages.setVisibleMessagesAsRead(_id, firstSubscription.ls);\n\tconst result = await Messages.setVisibleMessagesAsRead(_id, firstSubscription.ls);\n\tif (result.modifiedCount > 0) {\n\t\tvoid api.broadcast('notify.messagesRead', { rid: _id, until: firstSubscription.ls });",
            "room": "\t\tconst room = await Rooms.findOneById(roomId, { projection: { lm: 1 } });\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { lm: 1 } });",
            "message": "\t\tconst message = await Messages.findOneById(tmid, { projection: { tlm: 1, rid: 1 } });\n\t\tconst message = await Messages.findOneById(tmid, { projection: { tlm: 1, rid: 1 } });",
            "receipts": "\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\n\t\treturn Promise.all(\n\t\t\treceipts.map(async (receipt) => ({\n\t\t\t\t...receipt,\n\t\t\t\tuser: receipt.token\n\t\t\t\t\t? await LivechatVisitors.getVisitorByToken(receipt.token, { projection: { username: 1, name: 1 } })"
        },
        "depth_rank": 10
    },
    {
        "file": "startup.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/audit/startup.ts",
        "code": {
            "defaultRoles": "\tconst defaultRoles = [\n\tconst defaultRoles = [\n\t\t{ name: 'auditor', scope: 'Users' },"
        },
        "depth_rank": 10
    },
    {
        "file": "methods.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/audit/methods.ts",
        "code": {
            "getValue": "const getValue = (room: IRoom | null) => room && { rids: [room._id], name: room.name };\nconst getValue = (room: IRoom | null) => room && { rids: [room._id], name: room.name };",
            "getRoomInfoByAuditParams": "const getUsersIdFromUserName = async (usernames: IUser['username'][]) => {\nconst getUsersIdFromUserName = async (usernames: IUser['username'][]) => {\n\tconst users = usernames ? await Users.findByUsernames(usernames.filter(isTruthy)).toArray() : undefined;\n\tconst users = usernames ? await Users.findByUsernames(usernames.filter(isTruthy)).toArray() : undefined;\n\n\treturn users?.filter(isTruthy).map((userId) => userId._id);\n};\n\nconst getRoomInfoByAuditParams = async ({\nconst getRoomInfoByAuditParams = async ({\n\ttype,\n\troomId: rid,\n\tusers: usernames,\n\tvisitor,\n\tagent,\n}: {",
            "rids": "\t\tconst rids = rooms?.length ? rooms.map(({ _id }) => _id) : undefined;\n\t\tconst rids = rooms?.length ? rooms.map(({ _id }) => _id) : undefined;",
            "messages": "\t\t\tconst regex = new RegExp(escapeRegExp(msg).trim(), 'i');\n\t\t\tconst regex = new RegExp(escapeRegExp(msg).trim(), 'i');\n\t\t\tquery.msg = regex;\n\t\t}\n\n\t\tconst messages = await Messages.find(query).toArray();\n\t\tconst messages = await Messages.find(query).toArray();\n\n\t\t// Once the filter is applied, messages will be shown and a log containing all filters will be saved for further auditing.\n\n\t\tawait AuditLog.insertOne({\n\t\t\tts: new Date(),\n\t\t\tresults: messages.length,\n\t\t\tu: user,\n\t\t\tfields: { msg, users: usernames, rids, room: name, startDate, endDate, type, visitor, agent },",
            "roomInfo": "\t\t\tconst roomInfo = await getRoomInfoByAuditParams({ type, roomId: rid, users: usernames, visitor, agent });\n\t\t\tconst roomInfo = await getRoomInfoByAuditParams({ type, roomId: rid, users: usernames, visitor, agent });"
        },
        "depth_rank": 10
    },
    {
        "file": "Manager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/ldap/Manager.ts",
        "code": {
            "ldap": "\t\t\tconst ldap = new LDAPConnection();\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.logoutDeactivatedUsers(ldap);\n\t\t\t} finally {",
            "roles": "\t\tconst roles = (await Roles.find(\n\t\tconst roles = (await Roles.find(\n\t\t\t{},",
            "room": "\t\tconst roomOwner = settings.get<string>('LDAP_Sync_User_Data_Channels_Admin') || '';\n\t\tconst roomOwner = settings.get<string>('LDAP_Sync_User_Data_Channels_Admin') || '';\n\n\t\tconst user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n\t\tconst user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n\n\t\tconst room = await createRoom('c', channel, user, [], false, false, {\n\t\tconst room = await createRoom('c', channel, user, [], false, false, {\n\t\t\tcustomFields: { ldap: true },",
            "isUserInGroup": "\t\t\tconst isUserInGroup = await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapField);\n\t\t\tconst isUserInGroup = await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapField);",
            "name": "\t\t\tconst channels: Array<string> = [].concat(fieldMap[ldapField]);\n\t\t\tconst channels: Array<string> = [].concat(fieldMap[ldapField]);\n\t\t\tfor await (const channel of channels) {\n\t\t\tfor await (const channel of channels) {\n\t\t\t\ttry {\n\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });",
            "allTeams": "\t\tconst teamNames = this.getRocketChatTeamsByLdapTeams(map, ldapUserTeams);\n\t\tconst teamNames = this.getRocketChatTeamsByLdapTeams(map, ldapUserTeams);\n\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });",
            "inTeamIds": "\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);\n\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);",
            "currentTeams": "\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\t\tprojection: { teamId: 1 },",
            "currentTeamIds": "\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);\n\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);",
            "userData": "\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\n\t\t\tif (ldapUser) {\n\t\t\t\tconst userData = this.mapUserData(ldapUser, user.username);\n\t\t\t\tconst userData = this.mapUserData(ldapUser, user.username);\n\t\t\t\tconverter.addUserSync(userData, { dn: ldapUser.dn, username: this.getLdapUsername(ldapUser) });"
        },
        "depth_rank": 10
    },
    {
        "file": "replacesNestedValues.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/lib/ldap/replacesNestedValues.spec.ts",
        "code": {
            "result": "\t\tconst result = replacesNestedValues(\n\t\tconst result = replacesNestedValues(\n\t\t\t{\n\t\t\t\ta: {\n\t\t\t\t\tb: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t'a.b',\n\t\t\t2,\n\t\t);\n\t\texpect(result).to.eql({\n\t\t\ta: {\n\t\t\t\tb: 2,\n\t\t\t},\n\t\t});\n\t});\n\tit('should replace undefined nested values', () => {\n\t\tconst result = replacesNestedValues(\n\t\tconst result = replacesNestedValues(\n\t\t\t{\n\t\t\t\ta: {},"
        },
        "depth_rank": 10
    },
    {
        "file": "roles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/api/roles.ts",
        "code": {
            "role": "\t\t\tconst options = {\n\t\t\tconst options = {\n\t\t\t\tbroadcastUpdate: settings.get<boolean>('UI_DisplayRoles'),\n\t\t\t};\n\n\t\t\tconst role = await insertRoleAsync(roleData, options);\n\t\t\tconst role = await insertRoleAsync(roleData, options);\n\n\t\t\treturn API.v1.success({\n\t\t\t\trole,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'roles.update',\n\t{ authRequired: true },"
        },
        "depth_rank": 9
    },
    {
        "file": "sessions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/api/sessions.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "sessions": "\t\t\tconst sessions = await Sessions.aggregateSessionsAndPopulate({ search: search.join('|'), sort, offset, count });\n\t\t\tconst sessions = await Sessions.aggregateSessionsAndPopulate({ search: search.join('|'), sort, offset, count });",
            "sessionId": "\t\t\tconst sessionId = this.queryParams?.sessionId as string;\n\t\t\tconst sessionId = this.queryParams?.sessionId as string;\n\t\t\tconst { sessions } = await Sessions.aggregateSessionsAndPopulate({ search: sessionId, count: 1 });\n\t\t\tconst { sessions } = await Sessions.aggregateSessionsAndPopulate({ search: sessionId, count: 1 });"
        },
        "depth_rank": 9
    },
    {
        "file": "licenses.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/api/licenses.ts",
        "code": {
            "licenses": "\t\t\tconst license = License.getUnmodifiedLicenseAndModules();\n\t\t\tconst license = License.getUnmodifiedLicenseAndModules();\n\t\t\tconst licenses = license ? [license] : [];\n\t\t\tconst licenses = license ? [license] : [];\n\n\t\t\treturn API.v1.success({ licenses });",
            "activeUsers": "\t\t\tconst maxActiveUsers = License.getMaxActiveUsers();\n\t\t\tconst maxActiveUsers = License.getMaxActiveUsers();\n\t\t\tconst activeUsers = await Users.getActiveLocalUserCount();\n\t\t\tconst activeUsers = await Users.getActiveLocalUserCount();\n\n\t\t\treturn API.v1.success({ maxActiveUsers: maxActiveUsers > 0 ? maxActiveUsers : null, activeUsers });",
            "isEnterpriseEdition": "\t\t\tconst isEnterpriseEdition = License.hasValidLicense();\n\t\t\tconst isEnterpriseEdition = License.hasValidLicense();\n\t\t\treturn API.v1.success({ isEnterprise: isEnterpriseEdition });"
        },
        "depth_rank": 9
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/api/federation/rooms.ts",
        "code": {
            "servers": "\t\t\tconst result = await FederationEE.searchPublicRooms(serverName, roomName, pageToken, count);\n\t\t\tconst result = await FederationEE.searchPublicRooms(serverName, roomName, pageToken, count);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'federation/listServersByUser',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst servers = await FederationEE.getSearchedServerNamesByInternalUserId(this.userId);\n\t\t\tconst servers = await FederationEE.getSearchedServerNamesByInternalUserId(this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tservers,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'federation/addServerByUser',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFederationAddServerProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { serverName } = this.bodyParams;\n\t\t\tconst { serverName } = this.bodyParams;"
        },
        "depth_rank": 10
    },
    {
        "file": "deviceManagement.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/settings/deviceManagement.ts",
        "code": {
            "function": "\t\t\tasync function () {\n\t\t\tasync function () {\n\t\t\t\tawait this.add('Device_Management_Enable_Login_Emails', true, {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tpublic: true,\n\t\t\t\t\tinvalidValue: true,\n\t\t\t\t});\n\n\t\t\t\tawait this.add('Device_Management_Allow_Login_Email_preference', true, {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tpublic: true,\n\t\t\t\t\tinvalidValue: true,\n\t\t\t\t\tenableQuery: { _id: 'Device_Management_Enable_Login_Emails', value: true },"
        },
        "depth_rank": 9
    },
    {
        "file": "ldap.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/server/settings/ldap.ts",
        "code": {
            "enableQuery": "\treturn settingsRegistry.addGroup('LDAP', async function () {\n\treturn settingsRegistry.addGroup('LDAP', async function () {\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };\n\t\tconst enableQuery = { _id: 'LDAP_Enable', value: true };",
            "backgroundSyncQuery": "\t\t\tasync function () {\n\t\t\tasync function () {\n\t\t\t\tawait this.section('LDAP_DataSync_BackgroundSync', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_BackgroundSync', async function () {\n\t\t\t\t\tawait this.add('LDAP_Background_Sync', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst backgroundSyncQuery = [enableQuery, { _id: 'LDAP_Background_Sync', value: true }];\n\t\t\t\t\tconst backgroundSyncQuery = [enableQuery, { _id: 'LDAP_Background_Sync', value: true }];",
            "syncRolesQuery": "\t\t\t\tawait this.section('LDAP_DataSync_Roles', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_Roles', async function () {\n\t\t\t\t\tawait this.add('LDAP_Sync_User_Data_Roles', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\t\t\t\t\tconst syncRolesQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Roles', value: true }];\n\t\t\t\t\tconst syncRolesQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Roles', value: true }];",
            "syncChannelsQuery": "\t\t\t\tawait this.section('LDAP_DataSync_Channels', async function () {\n\t\t\t\tawait this.section('LDAP_DataSync_Channels', async function () {\n\t\t\t\t\tawait this.add('LDAP_Sync_User_Data_Channels', false, {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tenableQuery,\n\t\t\t\t\t\tinvalidValue: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst syncChannelsQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Channels', value: true }];\n\t\t\t\t\tconst syncChannelsQuery = [enableQuery, { _id: 'LDAP_Sync_User_Data_Channels', value: true }];",
            "enableQueryTeams": "\t\t\t\t\tconst enableQueryTeams = { _id: 'LDAP_Enable_LDAP_Groups_To_RC_Teams', value: true };\n\t\t\t\t\tconst enableQueryTeams = { _id: 'LDAP_Enable_LDAP_Groups_To_RC_Teams', value: true };"
        },
        "depth_rank": 9
    },
    {
        "file": "BeforeSaveCannedResponse.tests.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/hooks/messages/BeforeSaveCannedResponse.tests.ts",
        "code": {
            "db": "const db = {\nconst db = {\n\tcollection: () => ({}),",
            "message": "\t\tconst usersModel = new UsersModel(db as unknown as any, 'user');\n\t\tconst usersModel = new UsersModel(db as unknown as any, 'user');\n\t\tconst spy = sinon.spy(usersModel, 'findOneById');\n\t\tconst spy = sinon.spy(usersModel, 'findOneById');\n\n\t\tregisterModel('IUsersModel', () => usersModel);\n\n\t\tconst canned = new BeforeSaveCannedResponse();\n\t\tconst canned = new BeforeSaveCannedResponse();\n\n\t\tconst message = await canned.replacePlaceholders({\n\t\tconst message = await canned.replacePlaceholders({\n\t\t\tmessage: createMessage('{{agent.name}}'),"
        },
        "depth_rank": 12
    },
    {
        "file": "actions.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/slash-commands/actions.spec.ts",
        "code": {
            "call": "\t\tit('should call the command function without any error', async () => {\n\t\tit('should call the command function without any error', async () => {\n\t\t\tawait executeSlashCommand('federation', 'dm @external:server.com', { rid: 'roomId' }, validCommands, currentUserId);"
        },
        "depth_rank": 15
    },
    {
        "file": "hooks.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/hooks/hooks.spec.ts",
        "code": {
            "get": "const remove = sinon.stub();\nconst remove = sinon.stub();\nconst get = sinon.stub();\nconst get = sinon.stub();\nconst hooks: Record<string, any> = {};\nconst hooks: Record<string, any> = {};"
        },
        "depth_rank": 15
    },
    {
        "file": "RoomSender.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/infrastructure/rocket-chat/converters/RoomSender.spec.ts",
        "code": {
            "result": "\t\t\tconst result = FederationRoomSenderConverterEE.toCreateDirectMessageDto('inviterId', [\n\t\t\tconst result = FederationRoomSenderConverterEE.toCreateDirectMessageDto('inviterId', [\n\t\t\t\tinviteeId,\n\t\t\t\t{ _id: 'inviterId', username: 'username' } as any,"
        },
        "depth_rank": 15
    },
    {
        "file": "UserService.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/UserService.spec.ts",
        "code": {
            "result": "\t\t\tconst result = await service.getSearchedServerNamesByInternalUserId({} as any);\n\t\t\tconst result = await service.getSearchedServerNamesByInternalUserId({} as any);"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomServiceSender.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/room/sender/RoomServiceSender.spec.ts",
        "code": {
            "messageAdapter": "\tconst roomAdapter = {\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByInternalId: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t\tgetInternalRoomById: sinon.stub(),\n\t\tgetInternalRoomRolesByUserId: sinon.stub(),\n\t\tisUserAlreadyJoined: sinon.stub(),\n\t\tgetFederatedRoomByExternalId: sinon.stub(),\n\t\tcreateFederatedRoom: sinon.stub(),\n\t\taddUserToRoom: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tgetFederatedUserByInternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tgetInternalUserById: sinon.stub(),\n\t\tgetFederatedUserByInternalUsername: sinon.stub(),\n\t\tcreateLocalUser: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t\tupdateFederationAvatar: sinon.stub(),\n\t\tsetAvatar: sinon.stub(),\n\t\tupdateRealName: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t\tisFederationEnabled: sinon.stub(),\n\t\tgetMaximumSizeOfUsersWhenJoiningPublicRooms: sinon.stub(),\n\t};\n\tconst messageAdapter = {};\n\tconst messageAdapter = {};",
            "bridge": "\tconst bridge = {\n\tconst bridge = {\n\t\tsearchPublicRooms: sinon.stub(),\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),",
            "room": "\t\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'normalizedInviterId',\n\t\t\t\tusername: 'normalizedInviterId',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\n\t\t\tit('should throw an error if the federation is disabled', async () => {\n\t\t\t\tsettingsAdapter.isFederationEnabled.returns(false);\n\t\t\t\tawait expect(service.joinExternalPublicRoom({} as any)).to.be.rejectedWith('Federation is disabled');",
            "inviter": "\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'name',\n\t\t\t\tusername: 'username',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\texpect(bridge.createUser.calledWith('username', 'name', 'localDomain')).to.be.true;\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the inviter user was not found', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(undefined);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "invitee": "\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].normalizedInviteeId,\n\t\t\t\tusername: invitees[0].normalizedInviteeId,\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the invitee user was not found', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(undefined);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\n\t\t\tawait expect(service.onUsersAddedToARoom({ invitees, internalInviterId: 'internalInviterId' } as any)).to.be.rejectedWith(",
            "createUsersLocallyOnlySpy": "\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves({ getInternalId: () => 'differentId' });",
            "displayNameSpy": "\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tconst createUsersLocallyOnlySpy = sinon.spy(service, 'createUsersLocallyOnly');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(federatedUser);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\troomAdapter.getInternalRoomRolesByUserId.resolves([]);\n\n\t\t\tawait service.beforeAddUserToARoom({\n\t\t\t\t...validParams,\n\t\t\t\tinternalInviter: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t});\n\n\t\t\texpect(createUsersLocallyOnlySpy.calledWith(validParams.invitees)).to.be.true;\n\t\t});\n\n\t\tit('should create the invitee locally for each external user', async () => {\n\t\t\tconst avatarSpy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\tconst avatarSpy = sinon.spy(service, 'updateUserAvatarInternally');\n\t\t\tconst displayNameSpy = sinon.spy(service, 'updateUserDisplayNameInternally');\n\t\t\tconst displayNameSpy = sinon.spy(service, 'updateUserDisplayNameInternally');\n\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: 'avatarUrl', displayName: 'displayName' });",
            "existsOnlyOnProxyServer": "\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(\n\t\t\t\tFederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t\tname: 'displayName',\n\t\t\t\t}),\n\t\t\t);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: '', displayName: 'displayName' });",
            "userAvatar": "\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\tit('should call the functions to update the avatar internally correctly', async () => {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst userAvatar = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\tconst userAvatar = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\tfederation: {\n\t\t\t\t\tavatarUrl: 'currentAvatarUrl',\n\t\t\t\t},\n\t\t\t\t_id: 'userId',\n\t\t\t});\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(userAvatar);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: 'avatarUrl', displayName: 'displayName' });",
            "user": "\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\tit('should call the functions to update the display name internally correctly', async () => {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tconst user = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\tconst user = FederatedUserEE.createWithInternalReference('externalInviterId', existsOnlyOnProxyServer, {\n\t\t\t\t_id: 'userId',\n\t\t\t\tname: 'currentName',\n\t\t\t});\n\t\t\tuserAdapter.getFederatedUserByExternalId.resolves(user);\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('externalDomain');\n\t\t\tbridge.extractHomeserverOrigin.onCall(1).returns('localDomain');\n\t\t\tbridge.getUserProfileInformation.resolves({ avatarUrl: '', displayName: 'displayName' });",
            "result": "\t\t\tconst result = await service.searchPublicRooms({ pageToken: 'pageToken' } as any);\n\t\t\tconst result = await service.searchPublicRooms({ pageToken: 'pageToken' } as any);",
            "spy": "\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserIncludingHomeserverUsingLocalInformation');\n\t\t\t\tconst spy = sinon.spy(service, 'createFederatedUserIncludingHomeserverUsingLocalInformation');\n\t\t\t\tsinon.stub(service, 'isRoomSizeAllowed').returns(true);\n\n\t\t\t\tawait service.joinExternalPublicRoom({ internalUserId: 'internalUserId' } as any);"
        },
        "depth_rank": 15
    },
    {
        "file": "DirectMessageRoomServiceSender.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/tests/unit/server/federation/server/application/room/sender/DirectMessageRoomServiceSender.spec.ts",
        "code": {
            "bridge": "\tconst roomAdapter = {\n\tconst roomAdapter = {\n\t\tgetFederatedRoomByInternalId: sinon.stub(),\n\t\tupdateFederatedRoomByInternalRoomId: sinon.stub(),\n\t};\n\tconst userAdapter = {\n\tconst userAdapter = {\n\t\tgetFederatedUserByExternalId: sinon.stub(),\n\t\tgetFederatedUserByInternalId: sinon.stub(),\n\t\tcreateFederatedUser: sinon.stub(),\n\t\tgetInternalUserById: sinon.stub(),\n\t\tgetFederatedUserByInternalUsername: sinon.stub(),\n\t\tcreateLocalUser: sinon.stub(),\n\t\tgetInternalUserByUsername: sinon.stub(),\n\t};\n\tconst settingsAdapter = {\n\tconst settingsAdapter = {\n\t\tgetHomeServerDomain: sinon.stub().returns('localDomain'),\n\t};\n\tconst bridge = {\n\tconst bridge = {\n\t\tgetUserProfileInformation: sinon.stub().resolves({}),",
            "invitees": "\tconst invitees = [\n\tconst invitees = [\n\t\t{\n\t\t\tinviteeUsernameOnly: 'marcos.defendi',\n\t\t\tnormalizedInviteeId: 'marcos.defendi:matrix.com',\n\t\t\trawInviteeId: '@marcos.defendi:matrix.com',\n\t\t},\n\t];\n\n\tbeforeEach(() => {\n\t\tservice = new FederationDirectMessageRoomServiceSender(\n\t\t\troomAdapter as any,\n\t\t\tuserAdapter as any,\n\t\t\t{} as any,",
            "room": "\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\tconst user = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tname: 'normalizedInviterId',\n\t\t\tusername: 'normalizedInviterId',\n\t\t\texistsOnlyOnProxyServer: true,\n\t\t});\n\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\t\tconst room = FederatedRoomEE.createInstance('externalRoomId', 'normalizedRoomId', user, RoomType.CHANNEL, 'externalRoomName');\n\n\t\tit('should NOT create the inviter user both externally and internally if it already exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(bridge.createUser.called).to.be.false;\n\t\t});\n\n\t\tit('should create the inviter user both externally and internally if it does not exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.onCall(0).resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByInternalId.onCall(1).resolves(user);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "inviter": "\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\tconst inviter = FederatedUserEE.createInstance('externalInviterId', {\n\t\t\t\tname: 'name',\n\t\t\t\tusername: 'username',\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\t\t\texpect(bridge.createUser.calledWith('username', 'name', 'localDomain')).to.be.true;\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(inviter)).to.be.true;\n\t\t});\n\n\t\tit('should throw an error if the inviter does not exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(undefined);\n\t\t\tuserAdapter.getInternalUserById.resolves({ username: 'username', name: 'name' } as any);",
            "invitee": "\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].inviteeUsernameOnly,\n\t\t\t\tusername: invitees[0].inviteeUsernameOnly,\n\t\t\t\texistsOnlyOnProxyServer: true,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should create the invitee user if it does not exists and it is NOT from the same home server', async () => {\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.onCall(0).resolves(undefined);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\tconst invitee = FederatedUserEE.createInstance(invitees[0].rawInviteeId, {\n\t\t\t\tname: invitees[0].normalizedInviteeId,\n\t\t\t\tusername: invitees[0].normalizedInviteeId,\n\t\t\t\texistsOnlyOnProxyServer: false,\n\t\t\t});\n\n\t\t\texpect(userAdapter.createFederatedUser.calledWith(invitee)).to.be.true;\n\t\t});\n\n\t\tit('should NOT create the invitee user if it already exists', async () => {\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(userAdapter.createFederatedUser.called).to.be.false;\n\t\t});\n\n\t\tit('should NOT create the user on the proxy homeserver if it is NOT from the same homeserver, which means is a external user', async () => {\n\t\t\tbridge.extractHomeserverOrigin.returns('externalDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(user);\n\t\t\tawait service.onDirectMessageRoomCreation({\n\t\t\t\tinvitees,\n\t\t\t\tinternalInviterId: 'internalInviterId',\n\t\t\t\tinternalRoomId: 'internalRoomId',\n\t\t\t} as any);\n\n\t\t\texpect(bridge.createUser.called).to.be.false;\n\t\t});\n\n\t\tit('should throw an error if the invitee is from the same home server but the federated user does not exists and also there is at least one external user', async () => {\n\t\t\tbridge.extractHomeserverOrigin.onCall(0).returns('matrix.com');\n\t\t\tbridge.extractHomeserverOrigin.returns('localDomain');\n\t\t\tuserAdapter.getFederatedUserByInternalId.resolves(user);\n\t\t\troomAdapter.getFederatedRoomByInternalId.resolves(room);\n\t\t\tuserAdapter.getFederatedUserByInternalUsername.resolves(undefined);\n\n\t\t\tawait expect(\n\t\t\t\tservice.onDirectMessageRoomCreation({ invitees, internalInviterId: 'internalInviterId', internalRoomId: 'internalRoomId' } as any),"
        },
        "depth_rank": 15
    },
    {
        "file": "ecdh.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/ecdh.ts",
        "code": {
            "data": "\t\tconst data = await response.json();\n\t\tconst data = await response.json();\n\n\t\tif (data.success === false) {\n\t\t\tresolveSession();\n\t\t\treturn Meteor.connection._stream.allowConnection();\n\t\t}\n\n\t\tawait session.setServerKey(data.publicKeyString);\n\t\tresolveSession(session);\n\t\tinit(session);\n\t} catch (e) {"
        },
        "depth_rank": 8
    },
    {
        "file": "useDeviceLogout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/hooks/useDeviceLogout.tsx",
        "code": {
            "handleCloseContextualBar": "\tconst routeId = useRouteParameter('id');\n\tconst routeId = useRouteParameter('id');\n\n\tconst logoutDevice = useEndpointAction('POST', endpoint);\n\tconst logoutDevice = useEndpointAction('POST', endpoint);\n\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);",
            "handleLogoutDevice": "\tconst isContextualBarOpen = routeId === sessionId;\n\tconst isContextualBarOpen = routeId === sessionId;\n\n\tconst handleLogoutDeviceModal = useCallback(\n\tconst handleLogoutDeviceModal = useCallback(\n\t\t(onReload: () => void) => {\n\t\t\tconst closeModal = (): void => setModal(null);\n\t\t\tconst closeModal = (): void => setModal(null);\n\n\t\t\tconst handleLogoutDevice = async (): Promise<void> => {\n\t\t\tconst handleLogoutDevice = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait logoutDevice({ sessionId });"
        },
        "depth_rank": 9
    },
    {
        "file": "useVoipClient.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/hooks/useVoipClient.ts",
        "code": {
            "empty": "const empty = {};\nconst empty = {};",
            "isSignedResponse": "const isSignedResponse = (data: any): data is { result: string } => typeof data?.result === 'string';\nconst isSignedResponse = (data: any): data is { result: string } => typeof data?.result === 'string';",
            "iceServers": "\tconst iceServers = useWebRtcServers();\n\tconst iceServers = useWebRtcServers();\n\tconst [result, setResult] = useSafely(useState<UseVoipClientResult>({}));\n\tconst [result, setResult] = useSafely(useState<UseVoipClientResult>({}));",
            "result": "\t\t\t\t\tconst result = KJUR.jws.JWS.parse(data.result);\n\t\t\t\t\tconst result = KJUR.jws.JWS.parse(data.result);\n\t\t\t\t\tparsedData = (result.payloadObj as any)?.context as IRegistrationInfo;\n\t\t\t\t} else {",
            "subscription": "\t\t\t\t\t\tconst wsURL = new URL(websocketPath);\n\t\t\t\t\t\tconst wsURL = new URL(websocketPath);\n\t\t\t\t\t\tconst subscription = await membership({ extension });\n\t\t\t\t\t\tconst subscription = await membership({ extension });",
            "config": "\t\t\t\t\t\tconst config = {\n\t\t\t\t\t\tconst config = {\n\t\t\t\t\t\t\tauthUserName: extension,\n\t\t\t\t\t\t\tauthPassword: password,\n\t\t\t\t\t\t\tsipRegistrarHostnameOrIP: wsURL.host,\n\t\t\t\t\t\t\twebSocketURI: websocketPath,\n\t\t\t\t\t\t\tenableVideo: true,\n\t\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\t\tconnectionRetryCount: Number(voipRetryCount),\n\t\t\t\t\t\t\tenableKeepAliveUsingOptionsForUnstableNetworks: Boolean(enableKeepAlive),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tclient = await (isEE ? EEVoipClient.create(config) : VoIPUser.create(config));\n\n\t\t\t\t\t\t// Today we are hardcoding workflow mode.\n\t\t\t\t\t\t// In future, this should be ready from configuration\n\t\t\t\t\t\tclient.setWorkflowMode(WorkflowTypes.CONTACT_CENTER_USER);\n\t\t\t\t\t\tclient.setMembershipSubscription(subscription);\n\t\t\t\t\t\tsetResult({ voipClient: client, registrationInfo: parsedData });"
        },
        "depth_rank": 9
    },
    {
        "file": "useDevicesMenuOption.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/hooks/useDevicesMenuOption.tsx",
        "code": {
            "option": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst option = {\n\tconst option = {\n\t\tlabel: (\n\t\t\t<Box alignItems='center' display='flex'>\n\t\t\t\t<Icon mie={4} name='customize' size='x16' />"
        },
        "depth_rank": 9
    },
    {
        "file": "useCallsRoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/hooks/roomActions/useCallsRoomAction.ts",
        "code": {
            "federated": "\tconst room = useContext(RoomContext)?.room;\n\tconst room = useContext(RoomContext)?.room;\n\tconst federated = room ? isRoomFederated(room) : false;\n\tconst federated = room ? isRoomFederated(room) : false;\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 10
    },
    {
        "file": "orchestrator.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/apps/orchestrator.ts",
        "code": {
            "result": "\t\tconst result = await sdk.rest.get<'/apps/installed'>('/apps/installed');\n\t\tconst result = await sdk.rest.get<'/apps/installed'>('/apps/installed');\n\n\t\tif ('apps' in result) {\n\t\t\t// TODO: chapter day: multiple results are returned, but we only need one\n\t\t\treturn result.apps as App[];\n\t\t}\n\t\tthrow new Error('Invalid response from API');\n\t}\n\n\tpublic async getAppsFromMarketplace(isAdminUser?: boolean): Promise<App[]> {\n\t\tconst result = await sdk.rest.get('/apps/marketplace', { isAdminUser: isAdminUser ? isAdminUser.toString() : 'false' });\n\t\tconst result = await sdk.rest.get('/apps/marketplace', { isAdminUser: isAdminUser ? isAdminUser.toString() : 'false' });"
        },
        "depth_rank": 9
    },
    {
        "file": "GameCenterList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterList.tsx",
        "code": {
            "handleClose": "const GameCenterList = ({ handleClose, handleOpenGame, games, isLoading }: IGameCenterListProps): ReactElement => {\nconst GameCenterList = ({ handleClose, handleOpenGame, games, isLoading }: IGameCenterListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst handleInvitePlayer = useCallback(\n\tconst handleInvitePlayer = useCallback(\n\t\t(game) => {\n\t\t\tconst handleClose = (): void => {\n\t\t\tconst handleClose = (): void => {\n\t\t\t\tsetModal(null);\n\t\t\t};\n\t\t\tsetModal(() => <GameCenterInvitePlayersModal onClose={handleClose} game={game} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "GameCenterContainer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterContainer.tsx",
        "code": {
            "GameCenterContainer": "const GameCenterContainer = ({ handleClose, handleBack, game }: IGameCenterContainerProps): ReactElement => {\nconst GameCenterContainer = ({ handleClose, handleBack, game }: IGameCenterContainerProps): ReactElement => {\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{handleBack && <ContextualbarBack onClick={handleBack} />}"
        },
        "depth_rank": 10
    },
    {
        "file": "GameCenter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenter.tsx",
        "code": {
            "GameCenter": "const GameCenter = (): ReactElement => {\nconst GameCenter = (): ReactElement => {\n\tconst [openedGame, setOpenedGame] = useState<IGame>();\n\tconst [openedGame, setOpenedGame] = useState<IGame>();\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 10
    },
    {
        "file": "GameCenterInvitePlayersModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/apps/gameCenter/GameCenterInvitePlayersModal.tsx",
        "code": {
            "t": "const GameCenterInvitePlayersModal = ({ game, onClose }: IGameCenterInvitePlayersModalProps): ReactElement => {\nconst GameCenterInvitePlayersModal = ({ game, onClose }: IGameCenterInvitePlayersModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [users, setUsers] = useState<Array<Username>>([]);\n\tconst [users, setUsers] = useState<Array<Username>>([]);\n\tconst { name } = game;\n\tconst { name } = game;"
        },
        "depth_rank": 10
    },
    {
        "file": "EEVoipClient.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/lib/voip/EEVoipClient.ts",
        "code": {
            "inviterOptions": "\t\tconst constraints = {\n\t\tconst constraints = {\n\t\t\taudio: true,\n\t\t\tvideo: false,\n\t\t};\n\t\tconst inviterOptions = {\n\t\tconst inviterOptions = {\n\t\t\tsessionDescriptionHandlerOptions: { constraints },\n\t\t\tsessionDescriptionHandlerOptions: { constraints },"
        },
        "depth_rank": 10
    },
    {
        "file": "ContactManagerInfo.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/ContactManagerInfo.js",
        "code": {
            "ContactManagerInfo": "function ContactManagerInfo({ username }) {\nfunction ContactManagerInfo({ username }) {\n\tconst { value: data, phase: state } = useEndpointData('/v1/users.info', { params: useMemo(() => ({ username }), [username]) });\n\tconst { value: data, phase: state } = useEndpointData('/v1/users.info', { params: useMemo(() => ({ username }), [username]) });"
        },
        "depth_rank": 9
    },
    {
        "file": "MonitorsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/monitors/MonitorsPage.tsx",
        "code": {
            "t": "const MonitorsPage = () => {\nconst MonitorsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Livechat_Monitors')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "MonitorsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/monitors/MonitorsTable.tsx",
        "code": {
            "addMonitor": "const MonitorsTable = () => {\nconst MonitorsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst pagination = usePagination();\n\tconst pagination = usePagination();\n\tconst sort = useSort<'name' | 'username' | 'email'>('name');\n\tconst sort = useSort<'name' | 'username' | 'email'>('name');\n\n\tconst getMonitors = useEndpoint('GET', '/v1/livechat/monitors');\n\tconst getMonitors = useEndpoint('GET', '/v1/livechat/monitors');\n\n\t// TODO: implement endpoints for monitors add/remove\n\tconst removeMonitor = useMethod('livechat:removeMonitor');\n\tconst removeMonitor = useMethod('livechat:removeMonitor');\n\tconst addMonitor = useMethod('livechat:addMonitor');\n\tconst addMonitor = useMethod('livechat:addMonitor');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = pagination;\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = pagination;",
            "addMutation": "\tconst addMutation = useMutation({\n\tconst addMutation = useMutation({\n\t\tmutationFn: async (username: string) => {\n\t\t\tawait addMonitor(username);\n\n\t\t\tawait queryClient.invalidateQueries(['omnichannel', 'monitors']);\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tsetUsername('');\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Monitor_added') });",
            "onDeleteMonitor": "\tconst handleAdd = () => {\n\tconst handleAdd = () => {\n\t\taddMutation.mutate(username);\n\t};\n\n\tconst handleRemove = (username: string) => {\n\tconst handleRemove = (username: string) => {\n\t\tconst onDeleteMonitor = async () => {\n\t\tconst onDeleteMonitor = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeMonitor(username);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Monitor_removed') });",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PrioritiesPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesPage.tsx",
        "code": {
            "savePriority": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [isResetting, setResetting] = useState(false);\n\tconst [isResetting, setResetting] = useState(false);\n\n\tconst savePriority = useEndpoint('PUT', `/v1/livechat/priorities/:priorityId`, { priorityId });\n\tconst savePriority = useEndpoint('PUT', `/v1/livechat/priorities/:priorityId`, { priorityId });",
            "resetPriorities": "\tconst resetPriorities = useEndpoint('POST', '/v1/livechat/priorities.reset');\n\tconst resetPriorities = useEndpoint('POST', '/v1/livechat/priorities.reset');\n\n\tconst { data: priorities, isLoading } = useOmnichannelPriorities();\n\tconst { data: priorities, isLoading } = useOmnichannelPriorities();",
            "onReset": "\tconst handleReset = (): void => {\n\tconst handleReset = (): void => {\n\t\tconst onReset = async (): Promise<void> => {\n\t\tconst onReset = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tsetResetting(true);\n\t\t\t\tsetModal(null);\n\n\t\t\t\tawait resetPriorities();\n\t\t\t\tawait queryClient.invalidateQueries(['/v1/livechat/priorities'], { exact: true });",
            "onRowClick": "\tconst onRowClick = useMutableCallback((id: string): void => {\n\tconst onRowClick = useMutableCallback((id: string): void => {\n\t\tprioritiesRoute.push({ context: 'edit', id });",
            "onContextualbarClose": "\tconst onContextualbarClose = (): void => {\n\tconst onContextualbarClose = (): void => {\n\t\tprioritiesRoute.push({});",
            "onSavePriority": "\tconst onSavePriority = async ({ reset, ...payload }: PriorityFormData): Promise<void> => {\n\tconst onSavePriority = async ({ reset, ...payload }: PriorityFormData): Promise<void> => {\n\t\tawait savePriority(reset ? { reset } : payload);"
        },
        "depth_rank": 10
    },
    {
        "file": "PriorityEditForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityEditForm.tsx",
        "code": {
            "t": "const PriorityEditForm = ({ data, onSave, onCancel }: PriorityEditFormProps): ReactElement => {\nconst PriorityEditForm = ({ data, onSave, onCancel }: PriorityEditFormProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [isSaving, setSaving] = useState(false);\n\tconst [isSaving, setSaving] = useState(false);\n\n\tconst { name, i18n, dirty } = data;\n\tconst { name, i18n, dirty } = data;",
            "defaultName": "\tconst defaultName = t(i18n);\n\tconst defaultName = t(i18n);\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tgetValues,\n\t\tsetValue,\n\t\tformState: { errors, isValid, isDirty },",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst { name } = getValues();\n\t\tconst { name } = getValues();"
        },
        "depth_rank": 10
    },
    {
        "file": "PrioritiesTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesTable.tsx",
        "code": {
            "headers": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='icon' w='100px'>\n\t\t\t\t{t('Icon')}"
        },
        "depth_rank": 10
    },
    {
        "file": "PriorityList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityList.tsx",
        "code": {
            "t": "const PriorityList = ({ priorityId, onClose, onSave }: PriorityListProps): ReactElement | null => {\nconst PriorityList = ({ priorityId, onClose, onSave }: PriorityListProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Edit_Priority')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "PrioritiesResetModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PrioritiesResetModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='danger'\n\t\t\ttitle={t('Reset_priorities')}"
        },
        "depth_rank": 10
    },
    {
        "file": "PriorityEditFormWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityEditFormWithData.tsx",
        "code": {
            "t": "function PriorityEditFormWithData({ priorityId, ...props }: PriorityEditFormWithDataProps): ReactElement {\nfunction PriorityEditFormWithData({ priorityId, ...props }: PriorityEditFormWithDataProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(priorityId);\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(priorityId);"
        },
        "depth_rank": 10
    },
    {
        "file": "PriorityIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/priorities/PriorityIcon.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { iconName, color } = PRIORITY_ICONS[level] || {};\n\tconst { iconName, color } = PRIORITY_ICONS[level] || {};",
            "name": "\tconst name = useMemo(() => {\n\tconst name = useMemo(() => {\n\t\tconst { _id, dirty, name, i18n } = priorities.find((p) => p.sortItem === level) || {};\n\t\tconst { _id, dirty, name, i18n } = priorities.find((p) => p.sortItem === level) || {};"
        },
        "depth_rank": 10
    },
    {
        "file": "PrioritiesSelect.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/PrioritiesSelect.tsx",
        "code": {
            "renderOption": "\tconst formattedOptions = useMemo<SelectOption[]>(() => {\n\tconst formattedOptions = useMemo<SelectOption[]>(() => {\n\t\tconst opts: SelectOption[] = options?.map(({ dirty, name, i18n, _id, sortItem }) => {\n\t\tconst opts: SelectOption[] = options?.map(({ dirty, name, i18n, _id, sortItem }) => {\n\t\t\tconst label = dirty && name ? name : t(i18n as TranslationKey);\n\t\t\tconst label = dirty && name ? name : t(i18n as TranslationKey);\n\t\t\tsorting[_id] = sortItem;\n\t\t\treturn [_id, label];\n\t\t});\n\t\treturn [['', t('Unprioritized')], ...opts];\n\t}, [options, sorting, t]);\n\n\tconst renderOption = useCallback(\n\tconst renderOption = useCallback(\n\t\t(label: string, value: string) => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<PriorityIcon level={sorting[value] || LivechatPriorityWeight.NOT_SPECIFIED} showUnprioritized /> {label}",
            "renderOptions": "\tconst renderOptions = forwardRef<HTMLElement, ComponentProps<typeof Options>>(function OptionsWrapper(props, ref) {\n\tconst renderOptions = forwardRef<HTMLElement, ComponentProps<typeof Options>>(function OptionsWrapper(props, ref) {\n\t\treturn <Options ref={ref} {...props} maxHeight={200} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "BusinessHoursMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/BusinessHoursMultiple.tsx",
        "code": {
            "t": "const BusinessHoursMultiple = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\nconst BusinessHoursMultiple = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tformState: { errors },"
        },
        "depth_rank": 10
    },
    {
        "file": "DepartmentForwarding.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/DepartmentForwarding.tsx",
        "code": {
            "debouncedDepartmentsFilter": "\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 10
    },
    {
        "file": "MaxChatsPerAgent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/MaxChatsPerAgent.tsx",
        "code": {
            "t": "const MaxChatsPerAgent = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\nconst MaxChatsPerAgent = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { control } = useFormContext();\n\tconst { control } = useFormContext();"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomFieldsAdditionalForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/additionalForms/CustomFieldsAdditionalForm.tsx",
        "code": {
            "t": "const CustomFieldsAdditionalForm = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\nconst CustomFieldsAdditionalForm = ({ className }: { className?: ComponentProps<typeof Field>['className'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\twatch,\n\t\tformState: { errors },"
        },
        "depth_rank": 10
    },
    {
        "file": "useCannedResponseList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useCannedResponseList.ts",
        "code": {
            "fetchData": "\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\tconst { cannedResponses, total } = await getCannedResponses({\n\t\t\t\t...(options.filter && { text: options.filter }),"
        },
        "depth_rank": 10
    },
    {
        "file": "useCannedResponseFilterOptions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useCannedResponseFilterOptions.ts",
        "code": {
            "fetchData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/department');\n\n\tconst defaultOptions = useMemo(\n\tconst defaultOptions = useMemo(\n\t\t() => [\n\t\t\t['all', t('All')],\n\t\t\t['global', t('Public')],\n\t\t\t['user', t('Private')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst [options, setOptions] = useState(defaultOptions);\n\tconst [options, setOptions] = useState(defaultOptions);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async (): Promise<void> => {\n\t\tconst fetchData = async (): Promise<void> => {\n\t\t\tconst { departments } = await getDepartments({ text: '' });\n\t\t\tconst { departments } = await getDepartments({ text: '' });"
        },
        "depth_rank": 10
    },
    {
        "file": "useOmnichannelPrioritiesMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/hooks/useOmnichannelPrioritiesMenu.tsx",
        "code": {
            "updateRoomPriority": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst updateRoomPriority = useEndpoint('POST', '/v1/livechat/room/:rid/priority', { rid });\n\tconst updateRoomPriority = useEndpoint('POST', '/v1/livechat/room/:rid/priority', { rid });",
            "removeRoomPriority": "\tconst removeRoomPriority = useEndpoint('DELETE', '/v1/livechat/room/:rid/priority', { rid });\n\tconst removeRoomPriority = useEndpoint('DELETE', '/v1/livechat/room/:rid/priority', { rid });",
            "handlePriorityChange": "\tconst handlePriorityChange = useMutableCallback((priorityId: string) => async () => {\n\tconst handlePriorityChange = useMutableCallback((priorityId: string) => async () => {\n\t\ttry {\n\t\t\tpriorityId ? await updateRoomPriority({ priorityId }) : await removeRoomPriority();",
            "renderOption": "\tconst renderOption = useCallback((label: string, weight: LivechatPriorityWeight) => {\n\tconst renderOption = useCallback((label: string, weight: LivechatPriorityWeight) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<PriorityIcon level={weight || LivechatPriorityWeight.NOT_SPECIFIED} showUnprioritized /> {label}",
            "label": "\t\tconst menuHeading = {\n\t\tconst menuHeading = {\n\t\t\ttype: 'heading',\n\t\t\tlabel: t('Priorities'),\n\t\t};\n\n\t\tconst unprioritizedOption = {\n\t\tconst unprioritizedOption = {\n\t\t\ttype: 'option',\n\t\t\taction: handlePriorityChange(''),\n\t\t\tlabel: {\n\t\t\t\tlabel: renderOption(t('Unprioritized'), LivechatPriorityWeight.NOT_SPECIFIED),\n\t\t\t},\n\t\t};\n\n\t\tconst options = priorities.reduce<Record<string, object>>((items, { _id: priorityId, name, i18n, dirty, sortItem }) => {\n\t\tconst options = priorities.reduce<Record<string, object>>((items, { _id: priorityId, name, i18n, dirty, sortItem }) => {\n\t\t\tconst label = dirty && name ? name : i18n;\n\t\t\tconst label = dirty && name ? name : i18n;\n\n\t\t\titems[label] = {\n\t\t\t\taction: handlePriorityChange(priorityId),\n\t\t\t\tlabel: {\n\t\t\t\t\tlabel: renderOption(label, sortItem),\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn items;\n\t\t}, {});\n\n\t\treturn priorities.length ? { menuHeading, Unprioritized: unprioritizedOption, ...options } : {};"
        },
        "depth_rank": 10
    },
    {
        "file": "SlaNew.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaNew.tsx",
        "code": {
            "SlaNew": "function SlaNew({ reload }: { reload: () => void }): ReactElement {\nfunction SlaNew({ reload }: { reload: () => void }): ReactElement {\n\treturn <SlaEdit isNew reload={reload} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "SlaTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaTable.tsx",
        "code": {
            "debouncedFilter": "const SlaTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\nconst SlaTable = ({ reload }: { reload: MutableRefObject<() => void> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "getSlaData": "\tconst getSlaData = useEndpoint('GET', '/v1/livechat/sla');\n\tconst getSlaData = useEndpoint('GET', '/v1/livechat/sla');\n\tconst { data, isSuccess, isLoading, refetch } = useQuery(['/v1/livechat/sla', query], () => getSlaData(query));\n\tconst { data, isSuccess, isLoading, refetch } = useQuery(['/v1/livechat/sla', query], () => getSlaData(query));",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 10
    },
    {
        "file": "SlaPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaPage.tsx",
        "code": {
            "handleCloseContextualbar": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tconst handleReload = useCallback(() => {\n\tconst handleReload = useCallback(() => {\n\t\treload.current();\n\t}, []);\n\n\tconst handleClick = useMutableCallback(() =>\n\tconst handleClick = useMutableCallback(() =>\n\t\tslaPoliciesRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\tconst handleCloseContextualbar = (): void => {\n\tconst handleCloseContextualbar = (): void => {\n\t\tslaPoliciesRoute.push({});"
        },
        "depth_rank": 10
    },
    {
        "file": "SlaEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaEdit.tsx",
        "code": {
            "updateSLA": "\tconst saveSLA = useEndpoint('POST', '/v1/livechat/sla');\n\tconst saveSLA = useEndpoint('POST', '/v1/livechat/sla');\n\tconst updateSLA = useEndpoint('PUT', `/v1/livechat/sla/:slaId`, { slaId: slaId || '' });\n\tconst updateSLA = useEndpoint('PUT', `/v1/livechat/sla/:slaId`, { slaId: slaId || '' });",
            "t": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { name, description, dueTimeInMinutes } = data || {};\n\tconst { name, description, dueTimeInMinutes } = data || {};",
            "handleSave": "\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\tconst { name, description, dueTimeInMinutes } = getValues();\n\t\tconst { name, description, dueTimeInMinutes } = getValues();",
            "payload": "\t\t\tconst payload = { name, description, dueTimeInMinutes: Number(dueTimeInMinutes) };\n\t\t\tconst payload = { name, description, dueTimeInMinutes: Number(dueTimeInMinutes) };"
        },
        "depth_rank": 10
    },
    {
        "file": "RemoveSlaButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/RemoveSlaButton.tsx",
        "code": {
            "removeSLA": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst removeSLA = useEndpoint('DELETE', `/v1/livechat/sla/:slaId`, { slaId: _id });\n\tconst removeSLA = useEndpoint('DELETE', `/v1/livechat/sla/:slaId`, { slaId: _id });",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeSLA();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('SLA_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "SlaEditWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/slaPolicies/SlaEditWithData.tsx",
        "code": {
            "getSLA": "function SlaEditWithData({ slaId, reload }: SlaEditProps): ReactElement {\nfunction SlaEditWithData({ slaId, reload }: SlaEditProps): ReactElement {\n\tconst getSLA = useEndpoint('GET', `/v1/livechat/sla/:slaId`, { slaId });\n\tconst getSLA = useEndpoint('GET', `/v1/livechat/sla/:slaId`, { slaId });"
        },
        "depth_rank": 10
    },
    {
        "file": "useRemoveBusinessHour.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/businessHours/useRemoveBusinessHour.tsx",
        "code": {
            "onDeleteBusinessHour": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeBusinessHour = useMethod('livechat:removeBusinessHour');\n\tconst removeBusinessHour = useMethod('livechat:removeBusinessHour');\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleRemove = useMutableCallback((_id, type) => {\n\tconst handleRemove = useMutableCallback((_id, type) => {\n\t\tconst onDeleteBusinessHour = async () => {\n\t\tconst onDeleteBusinessHour = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeBusinessHour(_id, type);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Business_Hour_Removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "BusinessHoursTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/businessHours/BusinessHoursTable.tsx",
        "code": {
            "t": "const BusinessHoursTable = () => {\nconst BusinessHoursTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\t...(itemsPerPage && { count: itemsPerPage }),",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 10
    },
    {
        "file": "useRemoveUnit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/units/useRemoveUnit.tsx",
        "code": {
            "onDeleteAgent": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst removeUnit = useMethod('livechat:removeUnit');\n\tconst removeUnit = useMethod('livechat:removeUnit');\n\n\tconst handleDelete = useMutableCallback((id) => {\n\tconst handleDelete = useMutableCallback((id) => {\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeUnit(id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Unit_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "UnitsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitsPage.tsx",
        "code": {
            "id": "const UnitsPage = () => {\nconst UnitsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Units')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "UnitsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitsTable.tsx",
        "code": {
            "router": "const UnitsTable = () => {\nconst UnitsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tfields: JSON.stringify({ name: 1 }),",
            "headers": "\tconst handleDelete = useRemoveUnit();\n\tconst handleDelete = useRemoveUnit();\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 10
    },
    {
        "file": "UnitEditWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitEditWithData.tsx",
        "code": {
            "getUnitById": "const UnitEditWithData = ({ unitId }: { unitId: IOmnichannelBusinessUnit['_id'] }) => {\nconst UnitEditWithData = ({ unitId }: { unitId: IOmnichannelBusinessUnit['_id'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getUnitById = useEndpoint('GET', '/v1/livechat/units/:id', { id: unitId });\n\tconst getUnitById = useEndpoint('GET', '/v1/livechat/units/:id', { id: unitId });",
            "getMonitorsByUnitId": "\tconst getMonitorsByUnitId = useEndpoint('GET', '/v1/livechat/units/:unitId/monitors', { unitId });\n\tconst getMonitorsByUnitId = useEndpoint('GET', '/v1/livechat/units/:unitId/monitors', { unitId });",
            "getDepartmentsByUnitId": "\tconst getDepartmentsByUnitId = useEndpoint('GET', '/v1/livechat/units/:unitId/departments', { unitId });\n\tconst getDepartmentsByUnitId = useEndpoint('GET', '/v1/livechat/units/:unitId/departments', { unitId });"
        },
        "depth_rank": 10
    },
    {
        "file": "UnitEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/units/UnitEdit.tsx",
        "code": {
            "debouncedDepartmentsFilter": "const UnitEdit = ({ unitData, unitMonitors, unitDepartments }: UnitEditProps) => {\nconst UnitEdit = ({ unitData, unitMonitors, unitDepartments }: UnitEditProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst saveUnit = useMethod('livechat:saveUnit');\n\tconst saveUnit = useMethod('livechat:saveUnit');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDeleteUnit = useRemoveUnit();\n\tconst handleDeleteUnit = useRemoveUnit();\n\n\tconst [monitorsFilter, setMonitorsFilter] = useState('');\n\tconst [monitorsFilter, setMonitorsFilter] = useState('');\n\tconst debouncedMonitorsFilter = useDebouncedValue(monitorsFilter, 500);\n\tconst debouncedMonitorsFilter = useDebouncedValue(monitorsFilter, 500);\n\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: monitorsList, loadMoreItems: loadMoreMonitors } = useMonitorsList(\n\tconst { itemsList: monitorsList, loadMoreItems: loadMoreMonitors } = useMonitorsList(",
            "currUnitMonitors": "\tconst currUnitDepartments = useMemo(\n\tconst currUnitDepartments = useMemo(\n\t\t() =>\n\t\t\tunitDepartments?.map(({ _id, name }) => ({\n\t\t\t\tvalue: _id,\n\t\t\t\tlabel: name,\n\t\t\t})) || [],\n\t\t[unitDepartments],\n\t);\n\n\tconst currUnitMonitors = useMemo(\n\tconst currUnitMonitors = useMemo(\n\t\t() =>\n\t\t\tunitMonitors?.map(({ _id, username }) => ({\n\t\t\t\tvalue: _id,\n\t\t\t\tlabel: username,\n\t\t\t})) || [],\n\t\t[unitMonitors],\n\t);\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tformState: { errors, isDirty },",
            "departmentsData": "\t\tconst mappedMonitorsItems = monitorsItems?.map(({ _id, name }) => ({\n\t\tconst mappedMonitorsItems = monitorsItems?.map(({ _id, name }) => ({\n\t\t\tvalue: _id,\n\t\t\tlabel: name,\n\t\t}));\n\t\treturn [...mappedMonitorsItems, ...pending];\n\t}, [monitors, monitorsItems]);\n\n\tconst handleSave = useMutableCallback(async ({ name, visibility }) => {\n\tconst handleSave = useMutableCallback(async ({ name, visibility }) => {\n\t\tconst departmentsData = departments.map((department) => ({ departmentId: department.value }));\n\t\tconst departmentsData = departments.map((department) => ({ departmentId: department.value }));",
            "monitorsData": "\t\tconst monitorsData = monitors.map((monitor) => ({\n\t\tconst monitorsData = monitors.map((monitor) => ({\n\t\t\tmonitorId: monitor.value,\n\t\t\tusername: monitor.label,\n\t\t}));\n\n\t\ttry {\n\t\t\tawait saveUnit(_id as unknown as string, { name, visibility }, monitorsData, departmentsData);"
        },
        "depth_rank": 10
    },
    {
        "file": "useStatusSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useStatusSection.tsx",
        "code": {
            "response": "\t\t\tconst response = await getConversationsByStatus({ start: start.toISOString(), end: end.toISOString() });\n\t\t\tconst response = await getConversationsByStatus({ start: start.toISOString(), end: end.toISOString() });",
            "downloadProps": "\tconst title = t('Conversations_by_status');\n\tconst title = t('Conversations_by_status');\n\tconst subtitle = t('__count__conversations__period__', {\n\tconst subtitle = t('__count__conversations__period__', {\n\t\tcount: total ?? 0,\n\t\tperiod: formatPeriodDescription(period, t),\n\t});\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Status_Empty_Subtitle');\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Status_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Status'), title, data, period });\n\tconst downloadProps = useDefaultDownload({ columnName: t('Status'), title, data, period });"
        },
        "depth_rank": 11
    },
    {
        "file": "useDepartmentsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useDepartmentsSection.tsx",
        "code": {
            "formatChartData": "const formatChartData = (data: { label: string; value: number }[] | undefined = []) =>\nconst formatChartData = (data: { label: string; value: number }[] | undefined = []) =>",
            "response": "\t\t\tconst response = await getConversationsByDepartment({ start: start.toISOString(), end: end.toISOString() });\n\t\t\tconst response = await getConversationsByDepartment({ start: start.toISOString(), end: end.toISOString() });",
            "downloadProps": "\tconst emptyStateSubtitle = t('Omnichannel_Reports_Departments_Empty_Subtitle');\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Departments_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Departments'), title, data, period });\n\tconst downloadProps = useDefaultDownload({ columnName: t('Departments'), title, data, period });"
        },
        "depth_rank": 11
    },
    {
        "file": "useAgentsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useAgentsSection.tsx",
        "code": {
            "formatChartData": "const formatChartData = (data: { label: string; value: number }[] | undefined = []) =>\nconst formatChartData = (data: { label: string; value: number }[] | undefined = []) =>",
            "downloadProps": "\tconst emptyStateSubtitle = t('Omnichannel_Reports_Agents_Empty_Subtitle');\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Agents_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Agents'), title, data, period });\n\tconst downloadProps = useDefaultDownload({ columnName: t('Agents'), title, data, period });"
        },
        "depth_rank": 11
    },
    {
        "file": "useTagsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useTagsSection.tsx",
        "code": {
            "formatChartData": "const formatChartData = (data: { label: string; value: number }[] | undefined = []) =>\nconst formatChartData = (data: { label: string; value: number }[] | undefined = []) =>",
            "response": "\t\t\tconst response = await getConversationsByTags({ start: start.toISOString(), end: end.toISOString() });\n\t\t\tconst response = await getConversationsByTags({ start: start.toISOString(), end: end.toISOString() });",
            "downloadProps": "\tconst emptyStateSubtitle = t('Omnichannel_Reports_Tags_Empty_Subtitle');\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Tags_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Tags'), title, data, period });\n\tconst downloadProps = useDefaultDownload({ columnName: t('Tags'), title, data, period });"
        },
        "depth_rank": 11
    },
    {
        "file": "useChannelsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useChannelsSection.tsx",
        "code": {
            "response": "\t\t\tconst response = await getConversationsBySource({ start: start.toISOString(), end: end.toISOString() });\n\t\t\tconst response = await getConversationsBySource({ start: start.toISOString(), end: end.toISOString() });",
            "data": "\t\t\tconst data = formatChartData(response.data, response.total, t);\n\t\t\tconst data = formatChartData(response.data, response.total, t);\n\t\t\tconst displayData: DataItem[] = getTop<DataItem>(5, data, (value) => formatItem({ label: t('Others'), value }, response.total, t));\n\t\t\tconst displayData: DataItem[] = getTop<DataItem>(5, data, (value) => formatItem({ label: t('Others'), value }, response.total, t));",
            "downloadProps": "\tconst title = t('Conversations_by_channel');\n\tconst title = t('Conversations_by_channel');\n\tconst subtitle = t('__count__conversations__period__', {\n\tconst subtitle = t('__count__conversations__period__', {\n\t\tcount: total ?? 0,\n\t\tperiod: formatPeriodDescription(period, t),\n\t});\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Channels_Empty_Subtitle');\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Channels_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Channel'), title, data: rawData, period });\n\tconst downloadProps = useDefaultDownload({ columnName: t('Channel'), title, data: rawData, period });"
        },
        "depth_rank": 11
    },
    {
        "file": "useDefaultDownload.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/hooks/useDefaultDownload.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn useMemo(() => {\n\t\tconst { start, end } = formatPeriodRange(period);\n\t\tconst { start, end } = formatPeriodRange(period);"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/sections/AgentsSection.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { ref, contentBoxSize: { inlineSize: cardWidth = 200 } = {} } = useResizeObserver<HTMLElement>();\n\tconst { ref, contentBoxSize: { inlineSize: cardWidth = 200 } = {} } = useResizeObserver<HTMLElement>();",
            "wrapped": "\tconst wrapped = cardWidth ? cardWidth < BREAKPOINT : false;\n\tconst wrapped = cardWidth ? cardWidth < BREAKPOINT : false;\n\n\treturn (\n\t\t<ReportCard ref={ref} {...config}>"
        },
        "depth_rank": 11
    },
    {
        "file": "ChannelsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/sections/ChannelsSection.tsx",
        "code": {
            "colors": "\tconst colors = useMemo(() => Object.values(COLORS), []);\n\tconst colors = useMemo(() => Object.values(COLORS), []);\n\n\treturn (\n\t\t<ReportCard {...config}>"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/components/AgentsTable.tsx",
        "code": {
            "onHeaderClick": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst onHeaderClick = useMutableCallback((id) => {\n\tconst onHeaderClick = useMutableCallback((id) => {\n\t\tsetSort(id, sortDirection === 'asc' ? 'desc' : 'asc');\n\t});\n\n\treturn (\n\t\t<GenericTable>\n\t\t\t<GenericTableHeader>\n\t\t\t\t<GenericTableHeaderCell sort='name' direction={sortDirection} active={sortBy === 'name'} onClick={onHeaderClick}>"
        },
        "depth_rank": 11
    },
    {
        "file": "BarChart.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/components/BarChart.tsx",
        "code": {
            "horizontalSideLabel": "const horizontalSideLabel = ({ bars, labelSkipWidth }: BarCustomLayerProps<BarDatum>) => (\nconst horizontalSideLabel = ({ bars, labelSkipWidth }: BarCustomLayerProps<BarDatum>) => (",
            "verticalSideLabel": "const verticalSideLabel = ({ bars, labelSkipHeight, innerHeight }: BarCustomLayerProps<BarDatum>) => (\nconst verticalSideLabel = ({ bars, labelSkipHeight, innerHeight }: BarCustomLayerProps<BarDatum>) => (",
            "padding": "\t\tconst padding = data.length <= 4 ? 0.5 : 0.05;\n\t\tconst padding = data.length <= 4 ? 0.5 : 0.05;\n\t\treturn { minHeight, padding };"
        },
        "depth_rank": 11
    },
    {
        "file": "ReportCardEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/reports/components/ReportCardEmptyState.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<States width='100%' height='100%'>\n\t\t\t<StatesIcon name={icon || 'dashboard'} />"
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/components/RoomActivityIcon/index.tsx",
        "code": {
            "isRoomOverMacLimit": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isRoomOverMacLimit = useIsRoomOverMacLimit(room);\n\tconst isRoomOverMacLimit = useIsRoomOverMacLimit(room);\n\n\treturn isRoomOverMacLimit ? (\n\t\t<Icon name='warning' verticalAlign='middle' size='x20' color='danger' title={t('Workspace_exceeded_MAC_limit_disclaimer')} />"
        },
        "depth_rank": 11
    },
    {
        "file": "CannedResponseEditWithDepartmentData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseEditWithDepartmentData.tsx",
        "code": {
            "departmentId": "const CannedResponseEditWithDepartmentData = ({ cannedResponseData }: { cannedResponseData: Serialized<IOmnichannelCannedResponse> }) => {\nconst CannedResponseEditWithDepartmentData = ({ cannedResponseData }: { cannedResponseData: Serialized<IOmnichannelCannedResponse> }) => {\n\tconst departmentId = useMemo(() => cannedResponseData?.departmentId, [cannedResponseData]) as string;\n\tconst departmentId = useMemo(() => cannedResponseData?.departmentId, [cannedResponseData]) as string;\n\tconst { value: departmentData, phase: state, error } = useEndpointData('/v1/livechat/department/:_id', { keys: { _id: departmentId } });\n\tconst { value: departmentData, phase: state, error } = useEndpointData('/v1/livechat/department/:_id', { keys: { _id: departmentId } });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (state === AsyncStatePhase.LOADING) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (error) {\n\t\treturn (\n\t\t\t<Callout m={16} type='danger'>"
        },
        "depth_rank": 10
    },
    {
        "file": "CannedResponseFilter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseFilter.tsx",
        "code": {
            "t": "const CannedResponsesFilter = ({ createdBy, setCreatedBy, sharing, setSharing, text, setText }: CannedResponsesFilterProps) => {\nconst CannedResponsesFilter = ({ createdBy, setCreatedBy, sharing, setSharing, text, setText }: CannedResponsesFilterProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sharingList: SelectOption[] = [\n\tconst sharingList: SelectOption[] = [\n\t\t['', t('All')],\n\t\t['user', t('Private')],\n\t\t['global', t('Public')],\n\t\t['department', t('Department')],\n\t];\n\n\treturn (\n\t\t<Box mb={16} display='flex' flexDirection='row'>"
        },
        "depth_rank": 10
    },
    {
        "file": "CannedResponsesTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponsesTable.tsx",
        "code": {
            "debouncedText": "\tconst [createdBy, setCreatedBy] = useState('all');\n\tconst [createdBy, setCreatedBy] = useState('all');\n\tconst [sharing, setSharing] = useState<'' | 'user' | 'global' | 'department'>('');\n\tconst [sharing, setSharing] = useState<'' | 'user' | 'global' | 'department'>('');\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst handleDelete = useRemoveCannedResponse();\n\tconst handleDelete = useRemoveCannedResponse();\n\n\tconst defaultOptions = useMemo(\n\tconst defaultOptions = useMemo(\n\t\t() => ({\n\t\t\tglobal: t('Public'),\n\t\t\tdepartment: t('Department'),\n\t\t\tuser: t('Private'),\n\t\t}),\n\t\t[t],\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='shortcut' direction={sortDirection} active={sortBy === 'shortcut'} onClick={setSort} sort='shortcut'>"
        },
        "depth_rank": 10
    },
    {
        "file": "CannedResponseEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponseEdit.tsx",
        "code": {
            "methods": "\tconst methods = useForm({ defaultValues: getInitialData(cannedResponseData) });\n\tconst methods = useForm({ defaultValues: getInitialData(cannedResponseData) });",
            "handleSave": "\tconst handleDelete = useRemoveCannedResponse();\n\tconst handleDelete = useRemoveCannedResponse();\n\n\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\tasync ({ departmentId, ...data }) => {\n\t\t\ttry {\n\t\t\t\tawait saveCannedResponse({\n\t\t\t\t\t_id: cannedResponseData?._id,\n\t\t\t\t\t...data,\n\t\t\t\t\t...(departmentId && { departmentId }),",
            "formId": "\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader\n\t\t\t\ttitle={cannedResponseData?._id ? t('Edit_CannedResponse') : t('New_CannedResponse')}"
        },
        "depth_rank": 10
    },
    {
        "file": "CannedResponsesPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/CannedResponsesPage.tsx",
        "code": {
            "id": "const CannedResponsesPage = () => {\nconst CannedResponsesPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tif (context === 'edit' && id) {\n\t\treturn <CannedResponseEditWithData cannedResponseId={id} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "CreateCannedResponseModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/modals/CreateCannedResponse/CreateCannedResponseModal.tsx",
        "code": {
            "getInitialData": "const getInitialData = (\nconst getInitialData = (\n\tcannedResponseData: (IOmnichannelCannedResponse & { departmentName: ILivechatDepartment['name'] }) | undefined,",
            "CreateCannedResponseModal": "const CreateCannedResponseModal = ({\nconst CreateCannedResponseModal = ({\n\tcannedResponseData,\n\tonClose,\n\treloadCannedList,\n}: {",
            "methods": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst methods = useForm({ defaultValues: getInitialData(cannedResponseData) });\n\tconst methods = useForm({ defaultValues: getInitialData(cannedResponseData) });",
            "handleCreate": "\tconst handleCreate = useCallback(\n\tconst handleCreate = useCallback(\n\t\tasync ({ departmentId, ...data }) => {\n\t\t\ttry {\n\t\t\t\tawait saveCannedResponse({\n\t\t\t\t\t_id: cannedResponseData?._id,\n\t\t\t\t\t...data,\n\t\t\t\t\t...(departmentId && { departmentId }),"
        },
        "depth_rank": 12
    },
    {
        "file": "cannedResponseForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/components/cannedResponseForm.tsx",
        "code": {
            "clickable": "\tconst clickable = css`\n\tconst clickable = css`\n\t\tcursor: pointer;\n\t`;\n\n\tconst { text, scope } = watch();\n\tconst { text, scope } = watch();",
            "departmentField": "\tconst [preview, setPreview] = useState(false);\n\tconst [preview, setPreview] = useState(false);\n\n\tconst shortcutField = useUniqueId();\n\tconst shortcutField = useUniqueId();\n\tconst messageField = useUniqueId();\n\tconst messageField = useUniqueId();\n\tconst publicRadioField = useUniqueId();\n\tconst publicRadioField = useUniqueId();\n\tconst departmentRadioField = useUniqueId();\n\tconst departmentRadioField = useUniqueId();\n\tconst privateRadioField = useUniqueId();\n\tconst privateRadioField = useUniqueId();\n\tconst departmentField = useUniqueId();\n\tconst departmentField = useUniqueId();\n\n\treturn (\n\t\t<FieldGroup>\n\t\t\t<Field>\n\t\t\t\t<FieldLabel htmlFor={shortcutField}>{t('Shortcut')}</FieldLabel>"
        },
        "depth_rank": 11
    },
    {
        "file": "CannedResponsesComposer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/components/CannedResponsesComposer/CannedResponsesComposer.tsx",
        "code": {
            "ref": "const CannedResponsesComposer = ({ onChange, ...props }: ComponentProps<typeof MessageComposerInput>) => {\nconst CannedResponsesComposer = ({ onChange, ...props }: ComponentProps<typeof MessageComposerInput>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst useEmojisPreference = useUserPreference('useEmojis');\n\tconst useEmojisPreference = useUserPreference('useEmojis');\n\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null);\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null);\n\tconst ref = useRef<HTMLButtonElement>(null);\n\tconst ref = useRef<HTMLButtonElement>(null);\n\n\tconst [visible, setVisible] = useState(false);\n\tconst [visible, setVisible] = useState(false);\n\n\tconst { open: openEmojiPicker } = useEmojiPicker();\n\tconst { open: openEmojiPicker } = useEmojiPicker();"
        },
        "depth_rank": 12
    },
    {
        "file": "WrapCannedResponseList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/contextualBar/CannedResponse/WrapCannedResponseList.tsx",
        "code": {
            "room": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "debouncedText": "\tconst isRoomOverMacLimit = useIsRoomOverMacLimit(room);\n\tconst isRoomOverMacLimit = useIsRoomOverMacLimit(room);\n\n\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst debouncedText = useDebouncedValue(text, 400);\n\tconst debouncedText = useDebouncedValue(text, 400);\n\n\tconst { cannedList, loadMoreItems, reload } = useCannedResponseList(\n\tconst { cannedList, loadMoreItems, reload } = useCannedResponseList(",
            "onClickItem": "\tconst onClickItem = useMutableCallback((data) => {\n\tconst onClickItem = useMutableCallback((data) => {\n\t\tconst { _id: context } = data;\n\t\tconst { _id: context } = data;",
            "onClickCreate": "\tconst composer = useChat()?.composer;\n\tconst composer = useChat()?.composer;\n\n\tconst onClickUse = (e: MouseEvent<HTMLOrSVGElement>, text: string): void => {\n\tconst onClickUse = (e: MouseEvent<HTMLOrSVGElement>, text: string): void => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tcomposer?.setText(text);\n\t\tcomposer?.focus();\n\t};\n\n\tconst onClickCreate = (): void => {\n\tconst onClickCreate = (): void => {\n\t\tsetModal(<CreateCannedResponse onClose={() => setModal(null)} reloadCannedList={reload} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "CannedResponseList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/contextualBar/CannedResponse/CannedResponseList.tsx",
        "code": {
            "inputRef": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\n\tconst { context: cannedId } = useRoomToolbox();\n\tconst { context: cannedId } = useRoomToolbox();",
            "cannedItem": "\tconst { ref, contentBoxSize: { inlineSize = 378 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\tconst cannedItem = cannedItems.find((canned) => canned._id === cannedId);\n\tconst cannedItem = cannedItems.find((canned) => canned._id === cannedId);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Canned_Responses')}</ContextualbarTitle>"
        },
        "depth_rank": 12
    },
    {
        "file": "CannedResponse.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/contextualBar/CannedResponse/CannedResponse.tsx",
        "code": {
            "scope": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst scope = useScopeDict(dataScope, departmentName);\n\tconst scope = useScopeDict(dataScope, departmentName);\n\n\treturn (\n\t\t<Contextualbar color='default' display='flex' flexDirection='column' width='full' overflow='hidden' zIndex={100} insetBlock={0}>"
        },
        "depth_rank": 12
    },
    {
        "file": "WrapCannedResponse.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/contextualBar/CannedResponse/WrapCannedResponse.tsx",
        "code": {
            "onClickEdit": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst onClickEdit = (): void => {\n\tconst onClickEdit = (): void => {\n\t\tsetModal(<CreateCannedResponse cannedResponseData={cannedItem} onClose={() => setModal(null)} reloadCannedList={reload} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "Item.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/cannedResponses/contextualBar/CannedResponse/Item.tsx",
        "code": {
            "clickable": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst scope = useScopeDict(data.scope, data.departmentName);\n\tconst scope = useScopeDict(data.scope, data.departmentName);\n\n\tconst clickable = css`\n\tconst clickable = css`\n\t\tcursor: pointer;\n\t`;\n\n\tconst [visibility, setVisibility] = useState(false);\n\tconst [visibility, setVisibility] = useState(false);\n\n\treturn (\n\t\t<Box\n\t\t\tpbs={16}"
        },
        "depth_rank": 12
    },
    {
        "file": "AutoCompleteTagsMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/AutoCompleteTagsMultiple.tsx",
        "code": {
            "AutoCompleteTagsMultiple": "const AutoCompleteTagsMultiple = ({\nconst AutoCompleteTagsMultiple = ({\n\tvalue = [],\n\tonlyMyTags = false,\n\tonChange = () => undefined,\n\tdepartment,\n\tviewAll = false,\n}: AutoCompleteTagsMultipleProps) => {",
            "debouncedTagsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [tagsFilter, setTagsFilter] = useState('');\n\tconst [tagsFilter, setTagsFilter] = useState('');\n\n\tconst debouncedTagsFilter = useDebouncedValue(tagsFilter, 500);\n\tconst debouncedTagsFilter = useDebouncedValue(tagsFilter, 500);\n\n\tconst { itemsList: tagsList, loadMoreItems: loadMoreTags } = useTagsList(\n\tconst { itemsList: tagsList, loadMoreItems: loadMoreTags } = useTagsList("
        },
        "depth_rank": 10
    },
    {
        "file": "TagEditWithDepartmentData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEditWithDepartmentData.tsx",
        "code": {
            "getDepartmentsById": "const TagEditWithDepartmentData = ({ tagData }: { tagData: ILivechatTag }) => {\nconst TagEditWithDepartmentData = ({ tagData }: { tagData: ILivechatTag }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getDepartmentsById = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\tconst getDepartmentsById = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\tconst { data, isLoading, isError } = useQuery(\n\tconst { data, isLoading, isError } = useQuery("
        },
        "depth_rank": 10
    },
    {
        "file": "TagEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEdit.tsx",
        "code": {
            "saveTag": "const TagEdit = ({ tagData, currentDepartments }: TagEditProps) => {\nconst TagEdit = ({ tagData, currentDepartments }: TagEditProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst handleDeleteTag = useRemoveTag();\n\tconst handleDeleteTag = useRemoveTag();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst saveTag = useMethod('livechat:saveTag');\n\tconst saveTag = useMethod('livechat:saveTag');\n\n\tconst { _id, name, description } = tagData || {};\n\tconst { _id, name, description } = tagData || {};",
            "departmentsId": "\tconst handleSave = useMutableCallback(async ({ name, description, departments }: TagEditPayload) => {\n\tconst handleSave = useMutableCallback(async ({ name, description, departments }: TagEditPayload) => {\n\t\tconst departmentsId = departments?.map((dep) => dep.value) || [''];\n\t\tconst departmentsId = departments?.map((dep) => dep.value) || [''];\n\n\t\ttry {\n\t\t\tawait saveTag(_id as unknown as string, { name, description }, departmentsId);",
            "departmentsField": "\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst departmentsField = useUniqueId();\n\tconst departmentsField = useUniqueId();\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{_id ? t('Edit_Tag') : t('New_Tag')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "TagEditWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagEditWithData.tsx",
        "code": {
            "getTagById": "const TagEditWithData = ({ tagId }: { tagId: ILivechatTag['_id'] }) => {\nconst TagEditWithData = ({ tagId }: { tagId: ILivechatTag['_id'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getTagById = useEndpoint('GET', '/v1/livechat/tags/:tagId', { tagId });\n\tconst getTagById = useEndpoint('GET', '/v1/livechat/tags/:tagId', { tagId });"
        },
        "depth_rank": 10
    },
    {
        "file": "useRemoveTag.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/useRemoveTag.tsx",
        "code": {
            "handleDelete": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeTag = useMethod('livechat:removeTag');\n\tconst removeTag = useMethod('livechat:removeTag');\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleDeleteTag = useMutableCallback((tagId) => {\n\tconst handleDeleteTag = useMutableCallback((tagId) => {\n\t\tconst handleDelete = async () => {\n\t\tconst handleDelete = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeTag(tagId);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Tag_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "TagsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagsTable.tsx",
        "code": {
            "router": "const TagsTable = () => {\nconst TagsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst handleAddNew = useMutableCallback(() => router.navigate('/omnichannel/tags/new'));\n\tconst handleAddNew = useMutableCallback(() => router.navigate('/omnichannel/tags/new'));\n\tconst handleDeleteTag = useRemoveTag();\n\tconst handleDeleteTag = useRemoveTag();\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tviewAll: 'true' as const,\n\t\t\tviewAll: 'true' as const,\n\t\t\tfields: JSON.stringify({ name: 1 }),",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 10
    },
    {
        "file": "TagsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/omnichannel/tags/TagsPage.tsx",
        "code": {
            "id": "const TagsPage = () => {\nconst TagsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Tags')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "audit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/startup/audit.tsx",
        "code": {
            "canView": "const PermissionGuard = ({ children, permission }: { children: React.ReactNode; permission: string }) => {\nconst PermissionGuard = ({ children, permission }: { children: React.ReactNode; permission: string }) => {\n\tconst canView = hasAllPermission(permission);\n\tconst canView = hasAllPermission(permission);\n\n\treturn <>{canView ? children : <NotAuthorizedPage />}</>;"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceManagementAdminPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminPage.tsx",
        "code": {
            "reloadRef": "const DeviceManagementAdminPage = (): ReactElement => {\nconst DeviceManagementAdminPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst deviceId = useRouteParameter('id');\n\tconst deviceId = useRouteParameter('id');\n\n\tconst reloadRef = useRef(() => null);\n\tconst reloadRef = useRef(() => null);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Device_Management')} />"
        },
        "depth_rank": 11
    },
    {
        "file": "DeviceManagementInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementInfo/DeviceManagementInfo.tsx",
        "code": {
            "handleDeviceLogout": "\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst handleDeviceLogout = useDeviceLogout(sessionId, '/v1/sessions/logout');\n\tconst handleDeviceLogout = useDeviceLogout(sessionId, '/v1/sessions/logout');\n\n\tconst { name: clientName, os, version: rcVersion } = device || {};\n\tconst { name: clientName, os, version: rcVersion } = device || {};",
            "handleCloseContextualBar": "\tconst userPresence = usePresence(userId);\n\tconst userPresence = usePresence(userId);\n\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);\n\tconst handleCloseContextualBar = useCallback((): void => deviceManagementRouter.push({}), [deviceManagementRouter]);"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceManagementInfoWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementInfo/DeviceManagementInfoWithData.tsx",
        "code": {
            "convertSessionFromAPI": "const convertSessionFromAPI = ({\nconst convertSessionFromAPI = ({\n\tloginAt,\n\tlogoutAt,\n\t...rest\n}: Serialized<DeviceManagementPopulatedSession>): DeviceManagementPopulatedSession => ({"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceManagementAdminRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminTable/DeviceManagementAdminRow.tsx",
        "code": {
            "DeviceManagementAdminRow": "const DeviceManagementAdminRow = ({\nconst DeviceManagementAdminRow = ({\n\t_id,\n\tusername,\n\tip,\n\tdeviceName,\n\tdeviceType = 'browser',\n\tdeviceOSName = '',\n\tloginAt,\n\trcVersion,\n\tonReload,\n}: DeviceRowProps): ReactElement => {"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceManagementAdminTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/deviceManagement/DeviceManagementAdminTable/DeviceManagementAdminTable.tsx",
        "code": {
            "t": "const sortMapping = {\nconst sortMapping = {\n\tclient: 'device.name',\n\tusername: '_user.username',\n\tos: 'device.os.name',\n\tloginAt: 'loginAt',\n};\n\nconst isSessionPopulatedSession = (\nconst isSessionPopulatedSession = (\n\tsession: Serialized<DeviceManagementPopulatedSession | DeviceManagementSession>,\n): session is Serialized<DeviceManagementPopulatedSession> => '_user' in session;\n\nconst DeviceManagementAdminTable = ({ reloadRef }: { reloadRef: MutableRefObject<() => void> }): ReactElement => {\nconst DeviceManagementAdminTable = ({ reloadRef }: { reloadRef: MutableRefObject<() => void> }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='client' direction={sortDirection} active={sortBy === 'client'} onClick={setSort} sort='client'>"
        },
        "depth_rank": 12
    },
    {
        "file": "UserPageHeaderContentWithSeatsCap.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/users/UserPageHeaderContentWithSeatsCap.tsx",
        "code": {
            "handleInviteButtonClick": "\tconst openExternalLink = useExternalLink();\n\tconst openExternalLink = useExternalLink();\n\n\tconst handleNewButtonClick = () => {\n\tconst handleNewButtonClick = () => {\n\t\trouter.navigate('/admin/users/new');\n\t};\n\n\tconst handleInviteButtonClick = () => {\n\tconst handleInviteButtonClick = () => {\n\t\trouter.navigate('/admin/users/invite');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Margins inline={16}>"
        },
        "depth_rank": 11
    },
    {
        "file": "EngagementDashboardCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCard.tsx",
        "code": {
            "EngagementDashboardCard": "const EngagementDashboardCard = ({ children, title = undefined }: EngagementDashboardCardProps): ReactElement => (\nconst EngagementDashboardCard = ({ children, title = undefined }: EngagementDashboardCardProps): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "EngagementDashboardCardFilter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCardFilter.tsx",
        "code": {
            "EngagementDashboardCardFilter": "const EngagementDashboardCardFilter = ({ children = <InputBox.Skeleton /> }: EngagementDashboardCardFilterProps): ReactElement => (\nconst EngagementDashboardCardFilter = ({ children = <InputBox.Skeleton /> }: EngagementDashboardCardFilterProps): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "EngagementDashboardCardErrorBoundary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardCardErrorBoundary.tsx",
        "code": {
            "errorHandler": "const EngagementDashboardCardErrorBoundary = ({ children }: EngagementDashboardCardErrorBoundaryProps): ReactElement => {\nconst EngagementDashboardCardErrorBoundary = ({ children }: EngagementDashboardCardErrorBoundaryProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [error, setError] = useState<Error>();\n\tconst [error, setError] = useState<Error>();\n\tconst isError = (error: unknown): error is Error => error instanceof Error;\n\tconst isError = (error: unknown): error is Error => error instanceof Error;\n\n\tconst errorHandler = (error: Error, info: { componentStack: string }): void => {\n\tconst errorHandler = (error: Error, info: { componentStack: string }): void => {\n\t\tsetError(error);\n\t\tconsole.error('Uncaught Error:', error, info);\n\t};\n\n\treturn (\n\t\t<QueryErrorResetBoundary>\n\t\t\t{({ reset }): ReactElement => (\n\t\t\t\t<ErrorBoundary\n\t\t\t\t\tchildren={children}"
        },
        "depth_rank": 11
    },
    {
        "file": "EngagementDashboardPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/EngagementDashboardPage.tsx",
        "code": {
            "handleTabClick": "const EngagementDashboardPage = ({ tab = 'users', onSelectTab }: EngagementDashboardPageProps): ReactElement => {\nconst EngagementDashboardPage = ({ tab = 'users', onSelectTab }: EngagementDashboardPageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst timezoneOptions = useMemo<[timezone: 'utc' | 'local', label: string][]>(\n\tconst timezoneOptions = useMemo<[timezone: 'utc' | 'local', label: string][]>(\n\t\t() => [\n\t\t\t['utc', t('UTC_Timezone')],\n\t\t\t['local', t('Local_Timezone')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst [timezoneId, setTimezoneId] = useState<'utc' | 'local'>('utc');\n\tconst [timezoneId, setTimezoneId] = useState<'utc' | 'local'>('utc');\n\tconst handleTimezoneChange = (timezoneId: string): void => setTimezoneId(timezoneId as 'utc' | 'local');\n\tconst handleTimezoneChange = (timezoneId: string): void => setTimezoneId(timezoneId as 'utc' | 'local');\n\n\tconst handleTabClick = useCallback(\n\tconst handleTabClick = useCallback(\n\t\t(tab: 'users' | 'messages' | 'channels'): undefined | (() => void) => (onSelectTab ? (): void => onSelectTab(tab) : undefined),\n\t\t[onSelectTab],\n\t);\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<PageHeader title={t('Engagement')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "LegendSymbol.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/dataView/LegendSymbol.tsx",
        "code": {
            "LegendSymbol": "const LegendSymbol = ({ color = 'currentColor' }: LegendSymbolProps): ReactElement => (\nconst LegendSymbol = ({ color = 'currentColor' }: LegendSymbolProps): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "MessagesSentSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesSentSection.tsx",
        "code": {
            "t": "const MessagesSentSection = (): ReactElement => {\nconst MessagesSentSection = (): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst periodLabel = usePeriodLabel(period);\n\tconst periodLabel = usePeriodLabel(period);\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data } = useMessagesSent({ period });\n\tconst { data } = useMessagesSent({ period });"
        },
        "depth_rank": 12
    },
    {
        "file": "MessagesTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesTab.tsx",
        "code": {
            "t": "const MessagesTab = (): ReactElement => {\nconst MessagesTab = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCard title={t('Messages_sent')}>"
        },
        "depth_rank": 12
    },
    {
        "file": "MessagesPerChannelSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/messages/MessagesPerChannelSection.tsx",
        "code": {
            "t": "const MessagesPerChannelSection = (): ReactElement => {\nconst MessagesPerChannelSection = (): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data: messageOriginsData } = useMessageOrigins({ period });\n\tconst { data: messageOriginsData } = useMessageOrigins({ period });",
            "pie": "\tconst pie = useMemo(\n\tconst pie = useMemo(\n\t\t() => messageOriginsData?.origins?.reduce<{ [roomType: string]: number }>((obj, { messages, t }) => ({ ...obj, [t]: messages }), {}),",
            "table": "\tconst table = useMemo(\n\tconst table = useMemo(\n\t\t() =>\n\t\t\ttopFivePopularChannelsData?.channels?.reduce<\n\t\t\t\t{\n\t\t\t\t\ti: number;\n\t\t\t\t\tt: string;\n\t\t\t\t\tname?: string;\n\t\t\t\t\tmessages: number;\n\t\t\t\t}[]\n\t\t\t>((entries, { t, messages, name, usernames }, i) => [...entries, { i, t, name: name || usernames?.join(' \u00d7 '), messages }], []),"
        },
        "depth_rank": 12
    },
    {
        "file": "BusiestChatTimesSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/BusiestChatTimesSection.tsx",
        "code": {
            "as": "\tconst Content = (\n\tconst Content = (\n\t\t{\n\t\t\thours: ContentForHours,\n\t\t\tdays: ContentForDays,\n\t\t} as const\n\t\t} as const\n\t)[timeUnit];\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCardFilter>\n\t\t\t\t<Select\n\t\t\t\t\toptions={timeUnitOptions}"
        },
        "depth_rank": 12
    },
    {
        "file": "ContentForDays.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ContentForDays.tsx",
        "code": {
            "utc": "const ContentForDays = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForDaysProps): ReactElement => {\nconst ContentForDays = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForDaysProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useWeeklyChatActivity({ displacement, utc });\n\tconst { data } = useWeeklyChatActivity({ displacement, utc });"
        },
        "depth_rank": 12
    },
    {
        "file": "ContentForHours.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ContentForHours.tsx",
        "code": {
            "utc": "const ContentForHours = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForHoursProps): ReactElement => {\nconst ContentForHours = ({ displacement, onPreviousDateClick, onNextDateClick, timezone }: ContentForHoursProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useHourlyChatActivity({ displacement, utc });\n\tconst { data } = useHourlyChatActivity({ displacement, utc });"
        },
        "depth_rank": 12
    },
    {
        "file": "ActiveUsersSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/ActiveUsersSection.tsx",
        "code": {
            "utc": "const ActiveUsersSection = ({ timezone }: ActiveUsersSectionProps): ReactElement => {\nconst ActiveUsersSection = ({ timezone }: ActiveUsersSectionProps): ReactElement => {\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useActiveUsers({ utc });\n\tconst { data } = useActiveUsers({ utc });",
            "createPoints": "\t\tconst createPoint = (i: number): { x: Date; y: number } => ({\n\t\tconst createPoint = (i: number): { x: Date; y: number } => ({\n\t\t\tx: moment(data.start).add(i, 'days').startOf('day').toDate(),\n\t\t\ty: 0,\n\t\t});\n\n\t\tconst createPoints = (): { x: Date; y: number }[] =>\n\t\tconst createPoints = (): { x: Date; y: number }[] =>",
            "distributeValueOverPoints": "\t\t\tconst dateOffset = date.diff(data.start, 'days');\n\t\t\tconst dateOffset = date.diff(data.start, 'days');\n\t\t\tif (dateOffset >= 0 && dauValuesLocal[dateOffset]) {\n\t\t\t\tmap[dateOffset] = dayData.usersList;\n\t\t\t\tdauValuesLocal[dateOffset].y = dayData.users;\n\t\t\t}\n\t\t\treturn map;\n\t\t}, {});\n\n\t\tconst distributeValueOverPoints = (\n\t\tconst distributeValueOverPoints = (\n\t\t\tusersListsMap: { [x: number]: string[] },"
        },
        "depth_rank": 12
    },
    {
        "file": "UsersTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/UsersTab.tsx",
        "code": {
            "isXxlScreen": "const UsersTab = ({ timezone }: UsersTabProps): ReactElement => {\nconst UsersTab = ({ timezone }: UsersTabProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isXxlScreen = useBreakpoints().includes('xxl');\n\tconst isXxlScreen = useBreakpoints().includes('xxl');\n\n\treturn (\n\t\t<>\n\t\t\t<EngagementDashboardCard title={t('New_users')}>"
        },
        "depth_rank": 12
    },
    {
        "file": "UsersByTimeOfTheDaySection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/UsersByTimeOfTheDaySection.tsx",
        "code": {
            "utc": "const UsersByTimeOfTheDaySection = ({ timezone }: UsersByTimeOfTheDaySectionProps): ReactElement => {\nconst UsersByTimeOfTheDaySection = ({ timezone }: UsersByTimeOfTheDaySectionProps): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\n\tconst { data, isLoading } = useUsersByTimeOfTheDay({ period, utc });\n\tconst { data, isLoading } = useUsersByTimeOfTheDay({ period, utc });",
            "dataPoint": "\t\t\t\tconst dataPoint = values[date.hour()].data.find((point: { x: string }) => point.x === date.endOf('day').toISOString());\n\t\t\t\tconst dataPoint = values[date.hour()].data.find((point: { x: string }) => point.x === date.endOf('day').toISOString());",
            "tooltip": "\tconst tooltip = useCallback(\n\tconst tooltip = useCallback(\n\t\t({ cell }): ReactElement => {\n\t\t\treturn (\n\t\t\t\t<Tooltip>\n\t\t\t\t\t{moment(cell.data.x).format('ddd')}{' '}"
        },
        "depth_rank": 12
    },
    {
        "file": "NewUsersSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/admin/engagementDashboard/users/NewUsersSection.tsx",
        "code": {
            "utc": "const TICK_WIDTH = 45;\nconst TICK_WIDTH = 45;\n\ntype NewUsersSectionProps = {\n\ttimezone: 'utc' | 'local';\n};\n\nconst NewUsersSection = ({ timezone }: NewUsersSectionProps): ReactElement => {\nconst NewUsersSection = ({ timezone }: NewUsersSectionProps): ReactElement => {\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst [period, periodSelectorProps] = usePeriodSelectorState('last 7 days', 'last 30 days', 'last 90 days');\n\tconst periodLabel = usePeriodLabel(period);\n\tconst periodLabel = usePeriodLabel(period);\n\n\tconst utc = timezone === 'utc';\n\tconst utc = timezone === 'utc';\n\tconst { data } = useNewUsers({ period, utc });\n\tconst { data } = useNewUsers({ period, utc });",
            "formatDate": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst { ref: sizeRef, contentBoxSize: { inlineSize = 600 } = {} } = useResizeObserver();\n\tconst { ref: sizeRef, contentBoxSize: { inlineSize = 600 } = {} } = useResizeObserver();"
        },
        "depth_rank": 12
    },
    {
        "file": "AuditLogPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/AuditLogPage.tsx",
        "code": {
            "t": "const AuditLogPage = (): ReactElement => {\nconst AuditLogPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Message_auditing_log')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "AuditPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/AuditPage.tsx",
        "code": {
            "t": "const AuditPage = () => {\nconst AuditPage = () => {\n\tconst [type, setType] = useAuditTab();\n\tconst [type, setType] = useAuditTab();\n\tconst auditMutation = useAuditMutation(type);\n\tconst auditMutation = useAuditMutation(type);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page background='room'>\n\t\t\t<PageHeader title={t('Message_auditing')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "useAuditTab.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/hooks/useAuditTab.ts",
        "code": {
            "setType": "\tconst setType = useMutableCallback((newType: SetStateAction<IAuditLog['fields']['type']>) => {\n\tconst setType = useMutableCallback((newType: SetStateAction<IAuditLog['fields']['type']>) => {\n\t\tauditRoute.replace({ tab: typeToTabMap[typeof newType === 'function' ? newType(type) : newType] ?? 'rooms' });\n\t\tauditRoute.replace({ tab: typeToTabMap[typeof newType === 'function' ? newType(type) : newType] ?? 'rooms' });"
        },
        "depth_rank": 11
    },
    {
        "file": "AuditLogEntry.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditLogEntry.tsx",
        "code": {
            "formatDateAndTime": "const AuditLogEntry = ({ value: { u, results, ts, _id, fields } }: AuditLogEntryProps): ReactElement => {\nconst AuditLogEntry = ({ value: { u, results, ts, _id, fields } }: AuditLogEntryProps): ReactElement => {\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst { username, name, avatarETag } = u;\n\tconst { username, name, avatarETag } = u;"
        },
        "depth_rank": 11
    },
    {
        "file": "AuditForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditForm.tsx",
        "code": {
            "form": "const AuditForm = ({ type, onSubmit }: AuditFormProps) => {\nconst AuditForm = ({ type, onSubmit }: AuditFormProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst form = useAuditForm();\n\tconst form = useAuditForm();\n\tconst { control, handleSubmit, register } = form;\n\tconst { control, handleSubmit, register } = form;",
            "submit": "\tconst sendTelemetryMutation = useSendTelemetryMutation();\n\tconst sendTelemetryMutation = useSendTelemetryMutation();\n\n\tconst submit = () => {\n\tconst submit = () => {\n\t\tsendTelemetryMutation.mutate({\n\t\t\tparams: [{ eventName: 'updateCounter', settingsId: 'Message_Auditing_Apply_Count', timestamp: Date.now() }],"
        },
        "depth_rank": 11
    },
    {
        "file": "AuditMessageList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditMessageList.tsx",
        "code": {
            "system": "\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 11
    },
    {
        "file": "AuditLogTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/AuditLogTable.tsx",
        "code": {
            "getAudits": "const AuditLogTable = (): ReactElement => {\nconst AuditLogTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [dateRange, setDateRange] = useState<DateRange>(() => ({\n\tconst [dateRange, setDateRange] = useState<DateRange>(() => ({\n\t\tstart: createStartOfToday(),\n\t\tend: createEndOfToday(),\n\t}));\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getAudits = useMethod('auditGetAuditions');\n\tconst getAudits = useMethod('auditGetAuditions');\n\n\tconst { data, isLoading, isSuccess } = useQuery(\n\tconst { data, isLoading, isSuccess } = useQuery(",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('User')}</GenericTableHeaderCell>"
        },
        "depth_rank": 11
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/DateRangePicker.tsx",
        "code": {
            "newRange": "\t\t\tconst newState = typeof action === 'function' ? action(state) : action;\n\t\t\tconst newState = typeof action === 'function' ? action(state) : action;\n\t\t\treturn newState;\n\t}\n};\n\ntype DateRangePickerProps = Omit<ComponentProps<typeof Box>, 'value' | 'onChange'> & {\n\tvalue?: DateRange;\n\tonChange?: (dateRange: DateRange) => void;\n};\n\nconst DateRangePicker = ({ value, onChange, ...props }: DateRangePickerProps): ReactElement => {\nconst DateRangePicker = ({ value, onChange, ...props }: DateRangePickerProps): ReactElement => {\n\tconst dispatch = useMutableCallback((action: DateRangeAction): void => {\n\tconst dispatch = useMutableCallback((action: DateRangeAction): void => {\n\t\tconst newRange = dateRangeReducer(value ?? { start: undefined, end: undefined }, action);\n\t\tconst newRange = dateRangeReducer(value ?? { start: undefined, end: undefined }, action);",
            "handleChangeStart": "\tconst handleChangeStart = useMutableCallback(({ currentTarget }) => {\n\tconst handleChangeStart = useMutableCallback(({ currentTarget }) => {\n\t\tdispatch({ newStart: currentTarget.value });",
            "handleChangeEnd": "\tconst handleChangeEnd = useMutableCallback(({ currentTarget }) => {\n\tconst handleChangeEnd = useMutableCallback(({ currentTarget }) => {\n\t\tdispatch({ newEnd: currentTarget.value });"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomAutoComplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/RoomAutoComplete.tsx",
        "code": {
            "roomAutocompleteQueryResult": "const RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps) => {\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst performRoomSearch = useEndpoint('GET', '/v1/rooms.autocomplete.adminRooms');\n\tconst performRoomSearch = useEndpoint('GET', '/v1/rooms.autocomplete.adminRooms');\n\n\tconst roomAutocompleteQueryResult = useQuery(['audit', 'rooms', filter], () =>\n\tconst roomAutocompleteQueryResult = useQuery(['audit', 'rooms', filter], () =>\n\t\tperformRoomSearch({ selector: JSON.stringify({ name: filter ?? '' }) }),",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\troomAutocompleteQueryResult.data?.items.map(({ name, _id, fname, avatarETag, t }) => ({\n\t\t\t\tvalue: _id,\n\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 12
    },
    {
        "file": "VisitorAutoComplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/forms/VisitorAutoComplete.tsx",
        "code": {
            "visitorAutocompleteQueryResult": "const VisitorAutoComplete = ({ value, onChange, ...props }: VisitorAutoCompleteProps): ReactElement => {\nconst VisitorAutoComplete = ({ value, onChange, ...props }: VisitorAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst performVisitorSearch = useEndpoint('GET', '/v1/livechat/visitors.autocomplete');\n\tconst performVisitorSearch = useEndpoint('GET', '/v1/livechat/visitors.autocomplete');\n\n\tconst visitorAutocompleteQueryResult = useQuery(['audit', 'visitors', filter], () =>\n\tconst visitorAutocompleteQueryResult = useQuery(['audit', 'visitors', filter], () =>\n\t\tperformVisitorSearch({ selector: JSON.stringify({ term: filter ?? '' }) }),",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => visitorAutocompleteQueryResult.data?.items.map((user) => ({ value: user._id, label: user.name ?? user.username })) ?? [],"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomsTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/audit/components/tabs/RoomsTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Field flexShrink={1}>"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceManagementAccountPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountPage.tsx",
        "code": {
            "t": "const DeviceManagementAccountPage = (): ReactElement => {\nconst DeviceManagementAccountPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Manage_Devices')} />"
        },
        "depth_rank": 11
    },
    {
        "file": "DeviceManagementAccountTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountTable/DeviceManagementAccountTable.tsx",
        "code": {
            "t": "const sortMapping = {\nconst sortMapping = {\n\tclient: 'device.name',\n\tos: 'device.os.name',\n\tloginAt: 'loginAt',\n};\n\nconst DeviceManagementAccountTable = (): ReactElement => {\nconst DeviceManagementAccountTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setCurrent, setItemsPerPage, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='client' direction={sortDirection} active={sortBy === 'client'} onClick={setSort} sort='client'>"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceManagementAccountRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/views/account/deviceManagement/DeviceManagementAccountTable/DeviceManagementAccountRow.tsx",
        "code": {
            "DeviceManagementAccountRow": "const DeviceManagementAccountRow = ({\nconst DeviceManagementAccountRow = ({\n\t_id,\n\tdeviceName,\n\tdeviceType = 'browser',\n\tdeviceOSName,\n\tloginAt,\n\tonReload,\n}: DevicesRowProps): ReactElement => {",
            "handleDeviceLogout": "\tconst handleDeviceLogout = useDeviceLogout(_id, '/v1/sessions/logout.me');\n\tconst handleDeviceLogout = useDeviceLogout(_id, '/v1/sessions/logout.me');\n\n\treturn (\n\t\t<GenericTableRow key={_id}>"
        },
        "depth_rank": 12
    },
    {
        "file": "DeviceSettingsModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modals/DeviceSettingsModal.tsx",
        "code": {
            "selectedOutputDevice": "const DeviceSettingsModal = (): ReactElement => {\nconst DeviceSettingsModal = (): ReactElement => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst onCancel = (): void => setModal();\n\tconst onCancel = (): void => setModal();\n\tconst isDeviceManagementEnabled = useIsDeviceManagementEnabled();\n\tconst isDeviceManagementEnabled = useIsDeviceManagementEnabled();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst selectedAudioDevices = useSelectedDevices();\n\tconst selectedAudioDevices = useSelectedDevices();\n\n\tconst { handleSubmit, control } = useForm<FieldValues>({\n\tconst { handleSubmit, control } = useForm<FieldValues>({\n\t\tdefaultValues: {\n\t\t\tinputDevice: selectedAudioDevices?.audioInput?.id || '',\n\t\t\toutputDevice: selectedAudioDevices?.audioOutput?.id || '',\n\t\t},\n\t});\n\tconst [setSinkIdAvailable] = useState(() => isSetSinkIdAvailable());\n\tconst [setSinkIdAvailable] = useState(() => isSetSinkIdAvailable());\n\tconst availableDevices = useAvailableDevices();\n\tconst availableDevices = useAvailableDevices();\n\tconst changeAudioInputDevice = useChangeAudioInputDevice();\n\tconst changeAudioInputDevice = useChangeAudioInputDevice();\n\tconst changeAudioOutputDevice = useChangeAudioOutputDevice();\n\tconst changeAudioOutputDevice = useChangeAudioOutputDevice();\n\n\tconst availableInputDevices: SelectOption[] = availableDevices?.audioInput?.map((device) => [device.id, device.label]) || [];\n\tconst availableInputDevices: SelectOption[] = availableDevices?.audioInput?.map((device) => [device.id, device.label]) || [];\n\tconst availableOutputDevices: SelectOption[] = availableDevices?.audioOutput?.map((device) => [device.id, device.label]) || [];\n\tconst availableOutputDevices: SelectOption[] = availableDevices?.audioOutput?.map((device) => [device.id, device.label]) || [];\n\n\tconst onSubmit: SubmitHandler<FieldValues> = async (data) => {\n\tconst onSubmit: SubmitHandler<FieldValues> = async (data) => {\n\t\tconst selectedInputDevice = data.inputDevice && availableDevices?.audioInput?.find((device) => device.id === data.inputDevice);\n\t\tconst selectedInputDevice = data.inputDevice && availableDevices?.audioInput?.find((device) => device.id === data.inputDevice);\n\t\tconst selectedOutputDevice = data.outputDevice && availableDevices?.audioOutput?.find((device) => device.id === data.outputDevice);\n\t\tconst selectedOutputDevice = data.outputDevice && availableDevices?.audioOutput?.find((device) => device.id === data.outputDevice);\n\t\ttry {\n\t\t\tselectedInputDevice && changeAudioInputDevice(selectedInputDevice);\n\t\t\tselectedOutputDevice && changeAudioOutputDevice(selectedOutputDevice);\n\t\t\tsetModal();\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Devices_Set') });"
        },
        "depth_rank": 10
    },
    {
        "file": "WrapUpCallModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/components/modals/WrapUpCallModal.tsx",
        "code": {
            "t": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst closeModal = (): void => setModal(null);\n\tconst closeModal = (): void => setModal(null);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { register, handleSubmit, setValue, watch } = useForm<WrapUpCallPayload>();\n\tconst { register, handleSubmit, setValue, watch } = useForm<WrapUpCallPayload>();",
            "onCancel": "\tconst tags = watch('tags');\n\tconst tags = watch('tags');\n\n\tuseEffect(() => {\n\t\tregister('tags');\n\t}, [register]);\n\n\tconst handleTags = (value: string[]): void => {\n\tconst handleTags = (value: string[]): void => {\n\t\tsetValue('tags', value);\n\t};\n\n\tconst onSubmit: SubmitHandler<WrapUpCallPayload> = (data: { comment?: string; tags?: string[] }): void => {\n\tconst onSubmit: SubmitHandler<WrapUpCallPayload> = (data: { comment?: string; tags?: string[] }): void => {\n\t\tcloseRoom(data);\n\t\tcloseModal();\n\t};\n\n\tconst onCancel = (): void => {\n\tconst onCancel = (): void => {\n\t\tcloseRoom();\n\t\tcloseModal();\n\t};\n\n\treturn (\n\t\t<Modal wrapperFunction={(props) => <Box is='form' onSubmit={handleSubmit(onSubmit)} {...props} />}>"
        },
        "depth_rank": 11
    },
    {
        "file": "DialInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/DialInput.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<TextInput\n\t\t\tref={ref}"
        },
        "depth_rank": 11
    },
    {
        "file": "PadButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/PadButton.tsx",
        "code": {
            "PadButton": "const PadButton = ({\nconst PadButton = ({\n\tchildren,\n\tonClickPadButton,\n\tonLongPressPadButton,\n}: {"
        },
        "depth_rank": 11
    },
    {
        "file": "DialPadModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/DialPadModal.tsx",
        "code": {
            "DialPadModal": "const DialPadModal = ({ initialValue, errorMessage: initialErrorMessage, handleClose }: DialPadModalProps): ReactElement => {\nconst DialPadModal = ({ initialValue, errorMessage: initialErrorMessage, handleClose }: DialPadModalProps): ReactElement => {\n\tconst {\n\tconst {\n\t\tinputName,\n\t\tinputRef,\n\t\tinputError,\n\t\tisButtonDisabled,\n\t\thandleOnChange,\n\t\thandleBackspaceClick,\n\t\thandlePadButtonClick,\n\t\thandlePadButtonLongPressed,\n\t\thandleCallButtonClick,\n\t} = useDialPad({ initialValue, initialErrorMessage });\n\n\tuseEnterKey(handleCallButtonClick, isButtonDisabled);\n\n\treturn (\n\t\t<Modal width='432px'>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title />\n\t\t\t\t<Modal.Close onClick={handleClose} />"
        },
        "depth_rank": 11
    },
    {
        "file": "Pad.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/Pad.tsx",
        "code": {
            "Pad": "const Pad = ({\nconst Pad = ({\n\tonClickPadButton,\n\tonLongPressPadButton,\n}: {"
        },
        "depth_rank": 11
    },
    {
        "file": "useDialPad.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/voip/modal/DialPad/hooks/useDialPad.tsx",
        "code": {
            "outboundClient": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst outboundClient = useOutboundDialer();\n\tconst outboundClient = useOutboundDialer();\n\tconst { closeDialModal } = useDialModal();\n\tconst { closeDialModal } = useDialModal();"
        },
        "depth_rank": 12
    },
    {
        "file": "periods.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/dashboards/periods.ts",
        "code": {
            "end": "\t\tconst start = utc\n\t\tconst start = utc\n\t\t\t? moment.utc().startOf('day').subtract(n, 'days').toDate()\n\t\t\t: moment().subtract(n, 'days').startOf('day').utcOffset(offsetForMoment).toDate();\n\n\t\tconst end = utc ? moment.utc().endOf('day').toDate() : moment().endOf('day').utcOffset(offsetForMoment).toDate();\n\t\tconst end = utc ? moment.utc().endOf('day').toDate() : moment().endOf('day').utcOffset(offsetForMoment).toDate();\n\n\t\treturn { start, end };"
        },
        "depth_rank": 10
    },
    {
        "file": "DownloadDataButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/dashboards/DownloadDataButton.tsx",
        "code": {
            "DownloadDataButton": "const DownloadDataButton = <H extends readonly string[]>({\nconst DownloadDataButton = <H extends readonly string[]>({\n\tattachmentName,\n\theaders,\n\tdataAvailable,\n\tdataExtractor,\n\t...props\n}: DownloadDataButtonProps<H>): ReactElement => {"
        },
        "depth_rank": 10
    },
    {
        "file": "PeriodSelector.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/dashboards/PeriodSelector.tsx",
        "code": {
            "options": "const PeriodSelector = <TPeriod extends Period['key']>({ periods, value, name, onChange }: PeriodSelectorProps<TPeriod>): ReactElement => {\nconst PeriodSelector = <TPeriod extends Period['key']>({ periods, value, name, onChange }: PeriodSelectorProps<TPeriod>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst options = useMemo<[string, string][]>(() => periods.map((period) => [period, t(...getPeriod(period).label)]), [periods, t]);\n\tconst options = useMemo<[string, string][]>(() => periods.map((period) => [period, t(...getPeriod(period).label)]), [periods, t]);\n\n\treturn (\n\t\t<Select\n\t\t\tname={name}"
        },
        "depth_rank": 10
    },
    {
        "file": "DeviceIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/deviceManagement/DeviceIcon.tsx",
        "code": {
            "DeviceIcon": "const DeviceIcon = ({ deviceType }: { deviceType: string }): ReactElement => (\nconst DeviceIcon = ({ deviceType }: { deviceType: string }): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "LoggedOutBanner.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/deviceManagement/LoggedOutBanner.tsx",
        "code": {
            "t": "const LoggedOutBanner = (): ReactElement => {\nconst LoggedOutBanner = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Banner variant='warning' icon={<Icon name='warning' size='x24' />}>"
        },
        "depth_rank": 10
    },
    {
        "file": "DeviceManagementTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/ee/client/components/deviceManagement/DeviceManagementTable/DeviceManagementTable.tsx",
        "code": {
            "DeviceManagementTable": "const DeviceManagementTable = <T extends DeviceManagementSession | DeviceManagementPopulatedSession>({\nconst DeviceManagementTable = <T extends DeviceManagementSession | DeviceManagementPopulatedSession>({\n\tdata,\n\tphase,\n\terror,\n\treload,\n\theaders,\n\trenderRow,\n\tcurrent,\n\titemsPerPage,\n\tsetCurrent,\n\tsetItemsPerPage,\n\tpaginationProps,\n}: DeviceManagementTableProps<T>): ReactElement => {"
        },
        "depth_rank": 11
    },
    {
        "file": "babel-compiler.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/babel-compiler.d.ts",
        "code": {
            "compile": "\t\tfunction getDefaultOptions(options: Record<string, any>): Record<string, any>;\n\t\tfunction getDefaultOptions(options: Record<string, any>): Record<string, any>;\n\t\tfunction compile(script: string, options: Record<string, any>): { code: string };\n\t\tfunction compile(script: string, options: Record<string, any>): { code: string };"
        },
        "depth_rank": 9
    },
    {
        "file": "ddp-rate-limiter.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/ddp-rate-limiter.d.ts",
        "code": {
            "getErrorMessage": "\t\tfunction _increment(number: DDPRateLimiter.Matcher): void;\n\t\tfunction _increment(number: DDPRateLimiter.Matcher): void;\n\t\tfunction _check(number: DDPRateLimiter.Matcher): {\n\t\tfunction _check(number: DDPRateLimiter.Matcher): {\n\t\t\tallowed: boolean;\n\t\t\ttimeToReset: number;\n\t\t};\n\t\tfunction getErrorMessage(result: { allowed: boolean }): string;\n\t\tfunction getErrorMessage(result: { allowed: boolean }): string;"
        },
        "depth_rank": 9
    },
    {
        "file": "meteor.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/meteor.d.ts",
        "code": {
            "on": "\t\tfunction getBinaryAsync(assetPath: string): Promise<EJSON | undefined>;\n\t\tfunction getBinaryAsync(assetPath: string): Promise<EJSON | undefined>;\n\n\t\tfunction getTextAsync(assetPath: string): Promise<string | undefined>;\n\t\tfunction getTextAsync(assetPath: string): Promise<string | undefined>;\n\t}\n}\n\ndeclare module 'meteor/meteor' {\n\tnamespace Meteor {\n\t\tconst Streamer: IStreamerConstructor & IStreamer;\n\t\tconst Streamer: IStreamerConstructor & IStreamer;\n\n\t\tnamespace StreamerCentral {\n\t\t\tconst instances: {\n\t\t\tconst instances: {\n\t\t\t\t[name: string]: IStreamer;\n\t\t\t};\n\n\t\t\tfunction on(name: string, callback: (...args: any[]) => void): void;\n\t\t\tfunction on(name: string, callback: (...args: any[]) => void): void;\n\t\t}\n\n\t\tinterface ErrorStatic {\n\t\t\tnew (error: string | number, reason?: string, details?: any): Error;\n\t\t}\n\n\t\tinterface Error extends globalThis.Error {\n\t\t\terror: string | number;\n\t\t\treason?: string;\n\t\t}\n\n\t\tinterface Device {\n\t\t\tisDesktop: () => boolean;\n\t\t}\n\n\t\tconst server: any;\n\t\tconst server: any;\n\n\t\tconst runAsUser: <T>(userId: string, scope: () => T) => T;\n\t\tconst runAsUser: <T>(userId: string, scope: () => T) => T;\n\n\t\tinterface MethodThisType {\n\t\t\ttwoFactorChecked: boolean | undefined;\n\t\t}\n\n\t\tinterface IDDPMessage {\n\t\t\tmsg: 'method';\n\t\t\tmethod: string;\n\t\t\tparams: EJSON[];\n\t\t\tid: string;\n\t\t}\n\n\t\tinterface IDDPUpdatedMessage {\n\t\t\tmsg: 'updated';\n\t\t\tmethods: string[];\n\t\t}\n\n\t\tinterface IMeteorConnection {\n\t\t\t_send(message: IDDPMessage): void;\n\n\t\t\t_methodInvokers: Record<string, any>;\n\n\t\t\t_livedata_data(message: IDDPUpdatedMessage): void;\n\n\t\t\t_stream: {\n\t\t\t\teventCallbacks: {\n\t\t\t\t\tmessage: Array<(data: string) => void>;\n\t\t\t\t};\n\t\t\t\tsocket: {\n\t\t\t\t\tonmessage: (data: { type: string; data: string }) => void;",
            "_relativeToSiteRootUrl": "\t\tconst connection: IMeteorConnection;\n\t\tconst connection: IMeteorConnection;\n\n\t\tfunction _relativeToSiteRootUrl(path: string): string;\n\t\tfunction _relativeToSiteRootUrl(path: string): string;\n\t\tconst _localStorage: Window['localStorage'];\n\t\tconst _localStorage: Window['localStorage'];\n\n\t\tfunction methods<TServerMethods extends ServerMethods>(methods: {\n\t\tfunction methods<TServerMethods extends ServerMethods>(methods: {\n\t\t\t[TMethodName in keyof TServerMethods]?: (\n\t\t\t\tthis: MethodThisType,\n\t\t\t\t...args: StringifyBuffers<Parameters<TServerMethods[TMethodName]>>\n\t\t\t) => ReturnType<TServerMethods[TMethodName]> | Promise<ReturnType<TServerMethods[TMethodName]>>;\n\t\t}): void;\n\n\t\tconst AppCache:\n\t\tconst AppCache:\n\t\t\t| {\n\t\t\t\t\tconfig: (config: { onlineOnly: string[] }) => void;"
        },
        "depth_rank": 9
    },
    {
        "file": "accounts-base.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/accounts-base.d.ts",
        "code": {
            "_generateStampedLoginToken": "\t\tfunction createUser(\n\t\tfunction createUser(\n\t\t\toptions: {\n\t\t\t\tusername?: string;\n\t\t\t\temail?: string;\n\t\t\t\tpassword?: string;\n\t\t\t\tprofile?: Record<string, unknown>;\n\t\t\t\tjoinDefaultChannelsSilenced?: boolean;\n\t\t\t\tskipEmailValidation?: boolean;\n\t\t\t},\n\t\t\tcallback?: (error?: Error | Meteor.Error | Meteor.TypedError) => void,\n\t\t): string;\n\n\t\tfunction _bcryptRounds(): number;\n\t\tfunction _bcryptRounds(): number;\n\n\t\tfunction _getLoginToken(connectionId: string): string | undefined;\n\t\tfunction _getLoginToken(connectionId: string): string | undefined;\n\n\t\tfunction insertUserDoc(options: Record<string, any>, user: Record<string, any>): string;\n\t\tfunction insertUserDoc(options: Record<string, any>, user: Record<string, any>): string;\n\n\t\tfunction _generateStampedLoginToken(): { token: string; when: Date };\n\t\tfunction _generateStampedLoginToken(): { token: string; when: Date };",
            "_insertLoginToken": "\t\tfunction _insertLoginToken(userId: string, token: { token: string; when: Date }): void;\n\t\tfunction _insertLoginToken(userId: string, token: { token: string; when: Date }): void;",
            "_checkPasswordAsync": "\t\tfunction _runLoginHandlers<T>(methodInvocation: T, loginRequest: Record<string, any>): LoginMethodResult | undefined;\n\t\tfunction _runLoginHandlers<T>(methodInvocation: T, loginRequest: Record<string, any>): LoginMethodResult | undefined;\n\n\t\tfunction registerLoginHandler(name: string, handler: (options: any) => undefined | object): void;\n\t\tfunction registerLoginHandler(name: string, handler: (options: any) => undefined | object): void;\n\n\t\tfunction _storedLoginToken(): unknown;\n\t\tfunction _storedLoginToken(): unknown;\n\n\t\tfunction _unstoreLoginToken(): void;\n\t\tfunction _unstoreLoginToken(): void;\n\n\t\tfunction _setAccountData(connectionId: string, key: string, token: string): void;\n\t\tfunction _setAccountData(connectionId: string, key: string, token: string): void;\n\n\t\tfunction _checkPasswordAsync(user: Meteor.User, password: Password): Promise<{ userId: string; error?: any }>;\n\t\tfunction _checkPasswordAsync(user: Meteor.User, password: Password): Promise<{ userId: string; error?: any }>;",
            "_clearAllLoginTokens": "\t\tfunction updateOrCreateUserFromExternalService(\n\t\tfunction updateOrCreateUserFromExternalService(\n\t\t\tserviceName: string,\n\t\t\tserviceData: Record<string, unknown>,\n\t\t\toptions: Record<string, unknown>,\n\t\t): Record<string, unknown>;\n\n\t\tfunction _clearAllLoginTokens(userId: string | null): void;\n\t\tfunction _clearAllLoginTokens(userId: string | null): void;\n\n\t\tclass ConfigError extends Error {}"
        },
        "depth_rank": 9
    },
    {
        "file": "oauth.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/oauth.d.ts",
        "code": {
            "_redirectUri": "\t\tfunction _retrievePendingCredential(key: string, ...args: string[]): void;\n\t\tfunction _retrievePendingCredential(key: string, ...args: string[]): void;\n\t\tfunction openSecret(secret: string): string;\n\t\tfunction openSecret(secret: string): string;\n\t\tfunction retrieveCredential(credentialToken: string, credentialSecret: string);\n\t\tfunction retrieveCredential(credentialToken: string, credentialSecret: string);\n\t\tfunction _retrieveCredentialSecret(credentialToken: string): string | null;\n\t\tfunction _retrieveCredentialSecret(credentialToken: string): string | null;\n\t\tconst _pendingCredentials: Mongo.Collection<IOauthCredentials>;\n\t\tconst _pendingCredentials: Mongo.Collection<IOauthCredentials>;\n\t\tconst _storageTokenPrefix: string;\n\t\tconst _storageTokenPrefix: string;\n\n\t\tfunction launchLogin(options: {\n\t\tfunction launchLogin(options: {\n\t\t\tloginService: string;\n\t\t\tloginStyle: string;\n\t\t\tloginUrl: string;\n\t\t\tcredentialRequestCompleteCallback?: (credentialTokenOrError?: string | Error) => void;\n\t\t\tcredentialToken: string;\n\t\t\tpopupOptions?: {\n\t\t\t\twidth?: number;\n\t\t\t\theight?: number;\n\t\t\t};\n\t\t}): void;\n\n\t\tfunction _stateParam(loginStyle: string, credentialToken: string, redirectUrl?: string): string;\n\t\tfunction _stateParam(loginStyle: string, credentialToken: string, redirectUrl?: string): string;\n\n\t\tfunction _redirectUri(\n\t\tfunction _redirectUri(\n\t\t\tserviceName: string,\n\t\t\tconfig: { loginStyle?: string },",
            "_loginStyle": "\t\tfunction _loginStyle(serviceName: string, config: { loginStyle?: string }, options?: Meteor.LoginWithExternalServiceOptions): string;\n\t\tfunction _loginStyle(serviceName: string, config: { loginStyle?: string }, options?: Meteor.LoginWithExternalServiceOptions): string;"
        },
        "depth_rank": 9
    },
    {
        "file": "mongo.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/definition/externals/meteor/mongo.d.ts",
        "code": {
            "defaultRemoteCollectionDriver": "\t\tfunction defaultRemoteCollectionDriver(): RemoteCollectionDriver;\n\t\tfunction defaultRemoteCollectionDriver(): RemoteCollectionDriver;\n\n\t\tclass ConnectionClass {}"
        },
        "depth_rank": 9
    },
    {
        "file": "useAnalyticsEventTracking.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useAnalyticsEventTracking.ts",
        "code": {
            "trackEvent": "function trackEvent(category: string, action: string, label?: unknown) {\nfunction trackEvent(category: string, action: string, label?: unknown) {\n\tconst { _paq, ga } = window;\n\tconst { _paq, ga } = window;",
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tuseEffect(\n\t\t() =>\n\t\t\trouter.subscribeToRouteChange(() => {\n\t\t\t\tconst { _paq, ga } = window;\n\t\t\t\tconst { _paq, ga } = window;"
        },
        "depth_rank": 8
    },
    {
        "file": "useRoomsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useRoomsList.ts",
        "code": {
            "fetchData": "\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoomClient>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoomClient>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoomClient>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoomClient>()), []);\n\n\tconst getRooms = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate.withPagination');\n\tconst getRooms = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate.withPagination');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\t\tselector: JSON.stringify({ name: options.text || '' }),",
            "items": "\t\t\tconst items = rooms.map((room: any) => ({\n\t\t\tconst items = rooms.map((room: any) => ({\n\t\t\t\t_id: room._id,\n\t\t\t\t_updatedAt: new Date(room._updatedAt),\n\t\t\t\tlabel: room.name ?? '',\n\t\t\t\tvalue: room.name ?? '',\n\t\t\t}));\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getRooms, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);"
        },
        "depth_rank": 8
    },
    {
        "file": "useUserData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useUserData.ts",
        "code": {
            "userPresence": "\tconst userPresence = useContext(UserPresenceContext);\n\tconst userPresence = useContext(UserPresenceContext);\n\n\tconst { subscribe, get } = useMemo(\n\tconst { subscribe, get } = useMemo("
        },
        "depth_rank": 8
    },
    {
        "file": "useClipboardWithToast.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useClipboardWithToast.ts",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useClipboard(text, {\n\t\tonCopySuccess: useMutableCallback(() => dispatchToastMessage({ type: 'success', message: t('Copied') })),"
        },
        "depth_rank": 8
    },
    {
        "file": "useRoomName.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useRoomName.ts",
        "code": {
            "username": "\tconst subscription = useUserSubscription(room._id);\n\tconst subscription = useUserSubscription(room._id);\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });"
        },
        "depth_rank": 8
    },
    {
        "file": "useApplyButtonFilters.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useApplyButtonFilters.ts",
        "code": {
            "applyRoomFilter": "const enumToFilter: { [k in RoomTypeFilter]: (room: IRoom) => boolean } = {\nconst enumToFilter: { [k in RoomTypeFilter]: (room: IRoom) => boolean } = {\n\t[RoomTypeFilter.PUBLIC_CHANNEL]: (room) => room.t === 'c',\n\t[RoomTypeFilter.PRIVATE_CHANNEL]: (room) => room.t === 'p',\n\t[RoomTypeFilter.PUBLIC_TEAM]: isPublicTeamRoom,\n\t[RoomTypeFilter.PRIVATE_TEAM]: isPrivateTeamRoom,\n\t[RoomTypeFilter.PUBLIC_DISCUSSION]: isPublicDiscussion,\n\t[RoomTypeFilter.PRIVATE_DISCUSSION]: isPrivateDiscussion,\n\t[RoomTypeFilter.DIRECT]: isDirectMessageRoom,\n\t[RoomTypeFilter.DIRECT_MULTIPLE]: isMultipleDirectMessageRoom,\n\t[RoomTypeFilter.LIVE_CHAT]: isOmnichannelRoom,\n};\n\nconst applyRoomFilter = (button: IUIActionButton, room: IRoom): boolean => {\nconst applyRoomFilter = (button: IUIActionButton, room: IRoom): boolean => {\n\tconst { roomTypes } = button.when || {};\n\tconst { roomTypes } = button.when || {};",
            "uid": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst { queryAllPermissions, queryAtLeastOnePermission, queryRole } = useContext(AuthorizationContext);\n\tconst { queryAllPermissions, queryAtLeastOnePermission, queryRole } = useContext(AuthorizationContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "useTranslationsForApps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useTranslationsForApps.ts",
        "code": {
            "getAppsLanguages": "\tconst getAppsLanguages = useEndpoint('GET', '/apps/languages');\n\tconst getAppsLanguages = useEndpoint('GET', '/apps/languages');\n\n\tconst { isSuccess, data } = useQuery({\n\tconst { isSuccess, data } = useQuery({\n\t\tqueryKey: ['apps', 'translations'] as const,\n\t\tqueryKey: ['apps', 'translations'] as const,\n\t\tqueryFn: () => getAppsLanguages(),\n\t\tstaleTime: Infinity,\n\t});\n\n\tconst { i18n } = useTranslation();\n\tconst { i18n } = useTranslation();"
        },
        "depth_rank": 8
    },
    {
        "file": "useEndpointAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useEndpointAction.ts",
        "code": {
            "mutation": "\tconst sendData = useEndpoint(method, pathPattern, options.keys as UrlParams<TPathPattern>);\n\tconst sendData = useEndpoint(method, pathPattern, options.keys as UrlParams<TPathPattern>);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst mutation = useMutation(sendData, {\n\tconst mutation = useMutation(sendData, {\n\t\tonSuccess: () => {\n\t\t\tif (options.successMessage) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: options.successMessage });"
        },
        "depth_rank": 8
    },
    {
        "file": "useAppActionButtons.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useAppActionButtons.ts",
        "code": {
            "dispatchToastMessage": "\tconst result = useAppActionButtons('messageAction');\n\tconst result = useAppActionButtons('messageAction');\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "data": "\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\n\tconst data = useMemo(\n\tconst data = useMemo(\n\t\t() =>\n\t\t\tresult.data\n\t\t\t\t?.filter((action) => {\n\t\t\t\t\treturn applyButtonFilters(action);\n\t\t\t\t})\n\t\t\t\t.map((action) => {\n\t\t\t\t\tconst item: Omit<MessageBoxAction, 'icon'> = {\n\t\t\t\t\tconst item: Omit<MessageBoxAction, 'icon'> = {\n\t\t\t\t\t\tid: getIdForActionButton(action),\n\t\t\t\t\t\tlabel: Utilities.getI18nKeyForApp(action.labelI18n, action.appId),\n\t\t\t\t\t\taction: (params) => {\n\t\t\t\t\t\t\tvoid actionManager\n\t\t\t\t\t\t\t\t.emitInteraction(action.appId, {\n\t\t\t\t\t\t\t\t\ttype: 'actionButton',\n\t\t\t\t\t\t\t\t\trid: params.rid,\n\t\t\t\t\t\t\t\t\ttmid: params.tmid,\n\t\t\t\t\t\t\t\t\tactionId: action.actionId,\n\t\t\t\t\t\t\t\t\tpayload: { context: action.context, message: params.chat.composer?.text ?? '' },"
        },
        "depth_rank": 8
    },
    {
        "file": "useReactiveQuery.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useReactiveQuery.ts",
        "code": {
            "data": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useQuery(\n\t\tqueryKey,\n\t\t(): Promise<TQueryFnData> =>\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tTracker.autorun((c) => {\n\t\t\t\t\t\tconst data = reactiveQueryFn();\n\t\t\t\t\t\tconst data = reactiveQueryFn();\n\n\t\t\t\t\t\tif (c.firstRun) {\n\t\t\t\t\t\t\tif (data === undefined) {\n\t\t\t\t\t\t\t\treject(new Error('Reactive query returned undefined'));\n\t\t\t\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "useFormatNumber.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useFormatNumber.ts",
        "code": {
            "language": "\tconst language = useLanguage();\n\tconst language = useLanguage();\n\treturn useCallback(\n\t\t(value: number) => {\n\t\t\ttry {\n\t\t\t\treturn new Intl.NumberFormat(language, options).format(value);\n\t\t\t} catch (_error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "useUserCustomFields.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useUserCustomFields.ts",
        "code": {
            "customFieldsToShowSetting": "\tconst customFieldsToShowSetting = useSetting('Accounts_CustomFieldsToShowInUserInfo');\n\tconst customFieldsToShowSetting = useSetting('Accounts_CustomFieldsToShowInUserInfo');\n\n\tlet customFieldsToShowObj: CustomField[] | undefined;\n\ttry {\n\t\tcustomFieldsToShowObj = JSON.parse(customFieldsToShowSetting as string);\n\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "useUpdateAvatar.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/useUpdateAvatar.ts",
        "code": {
            "saveAvatarUrlAction": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst avatarUrl = isAvatarUrl(avatarObj) ? avatarObj.avatarUrl : '';\n\tconst avatarUrl = isAvatarUrl(avatarObj) ? avatarObj.avatarUrl : '';\n\n\tconst successMessage = t('Avatar_changed_successfully');\n\tconst successMessage = t('Avatar_changed_successfully');\n\tconst setAvatarFromService = useMethod('setAvatarFromService');\n\tconst setAvatarFromService = useMethod('setAvatarFromService');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', successMessage);\n\tconst saveAvatarAction = useEndpointUpload('/v1/users.setAvatar', successMessage);\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage });\n\tconst saveAvatarUrlAction = useEndpointAction('POST', '/v1/users.setAvatar', { successMessage });",
            "resetAvatarAction": "\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage });\n\tconst resetAvatarAction = useEndpointAction('POST', '/v1/users.resetAvatar', { successMessage });",
            "updateAvatar": "\tconst updateAvatar = useCallback(async () => {\n\tconst updateAvatar = useCallback(async () => {\n\t\tif (isAvatarReset(avatarObj)) {\n\t\t\treturn resetAvatarAction({\n\t\t\t\tuserId,\n\t\t\t});\n\t\t}\n\t\tif (isAvatarUrl(avatarObj)) {\n\t\t\treturn saveAvatarUrlAction({\n\t\t\t\tuserId,\n\t\t\t\t...(avatarUrl && { avatarUrl }),"
        },
        "depth_rank": 8
    },
    {
        "file": "useWebRTCVideoRoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/useWebRTCVideoRoomAction.ts",
        "code": {
            "allowed": "\tconst allowed = enabled && callProvider === 'WebRTC' && room.servedBy;\n\tconst allowed = enabled && callProvider === 'WebRTC' && room.servedBy;\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "useStartCallRoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/useStartCallRoomAction.ts",
        "code": {
            "isRinging": "\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isRinging = useVideoConfIsRinging();\n\tconst isRinging = useVideoConfIsRinging();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "handleOpenVideoConf": "\tconst handleOpenVideoConf = useMutableCallback(async () => {\n\tconst handleOpenVideoConf = useMutableCallback(async () => {\n\t\tif (isCalling || isRinging) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait VideoConfManager.loadCapabilities();\n\t\t\tdispatchPopup({ rid: room._id });"
        },
        "depth_rank": 9
    },
    {
        "file": "useE2EERoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/useE2EERoomAction.ts",
        "code": {
            "federated": "\tconst permitted = (room.t === 'd' || (permittedToEditRoom && permittedToToggleEncryption)) && readyToEncrypt;\n\tconst permitted = (room.t === 'd' || (permittedToEditRoom && permittedToToggleEncryption)) && readyToEncrypt;\n\tconst federated = isRoomFederated(room);\n\tconst federated = isRoomFederated(room);\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "useDiscussionsRoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/useDiscussionsRoomAction.ts",
        "code": {
            "enabled": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst federated = isRoomFederated(room);\n\tconst federated = isRoomFederated(room);\n\tconst enabled = useSetting('Discussion_enabled', false);\n\tconst enabled = useSetting('Discussion_enabled', false);\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "usePinnedMessagesRoomAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/usePinnedMessagesRoomAction.ts",
        "code": {
            "enabled": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst federated = isRoomFederated(room);\n\tconst federated = isRoomFederated(room);\n\tconst enabled = useSetting('Message_AllowPinning', false);\n\tconst enabled = useSetting('Message_AllowPinning', false);\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "useThreadRoomAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/roomActions/useThreadRoomAction.tsx",
        "code": {
            "variant": "\tconst variant = getVariant(tunreadUser, tunreadGroup);\n\tconst variant = getVariant(tunreadUser, tunreadGroup);\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "useStreamUpdatesForMessageList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/lists/useStreamUpdatesForMessageList.ts",
        "code": {
            "createDeleteCriteria": "const createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = {};\n\tconst query: Query<IMessage> = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "useRecordList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/lists/useRecordList.ts",
        "code": {
            "disconnectErroredEvent": "\tconst [state, setState] = useState<RecordListValue<T>>(() => ({\n\tconst [state, setState] = useState<RecordListValue<T>>(() => ({\n\t\tphase: recordList.phase,\n\t\titems: recordList.items,\n\t\titemCount: recordList.itemCount,\n\t\terror: undefined,\n\t}));\n\n\tuseEffect(() => {\n\t\tconst disconnectMutatingEvent = recordList.on('mutating', () => {\n\t\tconst disconnectMutatingEvent = recordList.on('mutating', () => {\n\t\t\tsetState(() => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: undefined,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectMutatedEvent = recordList.on('mutated', () => {\n\t\tconst disconnectMutatedEvent = recordList.on('mutated', () => {\n\t\t\tsetState((prevState) => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: prevState.error,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectClearedEvent = recordList.on('cleared', () => {\n\t\tconst disconnectClearedEvent = recordList.on('cleared', () => {\n\t\t\tsetState(() => ({\n\t\t\t\tphase: recordList.phase,\n\t\t\t\titems: recordList.items,\n\t\t\t\titemCount: recordList.itemCount,\n\t\t\t\terror: undefined,\n\t\t\t}));\n\t\t});\n\n\t\tconst disconnectErroredEvent = recordList.on('errored', (error) => {\n\t\tconst disconnectErroredEvent = recordList.on('errored', (error) => {\n\t\t\tsetState((state) => ({ ...state, error }));"
        },
        "depth_rank": 9
    },
    {
        "file": "useScrollableMessageList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/hooks/lists/useScrollableMessageList.ts",
        "code": {
            "batchChanges": "\tconst fetchItems = useCallback(\n\tconst fetchItems = useCallback(\n\t\tasync (start: number, end: number): Promise<RecordListBatchChanges<IMessage>> => {\n\t\t\tconst batchChanges = await fetchMessages(start, end);\n\t\t\tconst batchChanges = await fetchMessages(start, end);\n\t\t\treturn {\n\t\t\t\t...(batchChanges.items && { items: batchChanges.items.map(mapMessageFromApi) }),"
        },
        "depth_rank": 9
    },
    {
        "file": "useMessageBlockContextValue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/uikit/hooks/useMessageBlockContextValue.ts",
        "code": {
            "handleOpenVideoConf": "\tconst joinCall = useVideoConfJoinCall();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isCalling = useVideoConfIsCalling();\n\tconst isRinging = useVideoConfIsRinging();\n\tconst isRinging = useVideoConfIsRinging();\n\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchWarning = useVideoConfWarning();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\tconst dispatchPopup = useVideoConfDispatchOutgoing();\n\n\tconst videoConfManager = useVideoConfManager();\n\tconst videoConfManager = useVideoConfManager();\n\n\tconst handleOpenVideoConf = useMutableCallback(async (rid: IRoom['_id']) => {\n\tconst handleOpenVideoConf = useMutableCallback(async (rid: IRoom['_id']) => {\n\t\tif (isCalling || isRinging) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait videoConfManager?.loadCapabilities();\n\t\t\tdispatchPopup({ rid });"
        },
        "depth_rank": 9
    },
    {
        "file": "useUiKitView.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/uikit/hooks/useUiKitView.ts",
        "code": {
            "reduceValues": "const reduceValues = (\nconst reduceValues = (\n\tvalues: { [actionId: string]: { value: unknown; blockId?: string } },",
            "getViewFromInteraction": "const getViewId = (view: UiKit.View): string => {\nconst getViewId = (view: UiKit.View): string => {\n\tif ('id' in view && typeof view.id === 'string') {\n\t\treturn view.id;\n\t}\n\n\tif ('viewId' in view && typeof view.viewId === 'string') {\n\t\treturn view.viewId;\n\t}\n\n\tthrow new Error('Invalid view');\n};\n\nconst getViewFromInteraction = (interaction: UiKit.ServerInteraction): UiKit.View | undefined => {\nconst getViewFromInteraction = (interaction: UiKit.ServerInteraction): UiKit.View | undefined => {\n\tif ('view' in interaction && typeof interaction.view === 'object') {\n\t\treturn interaction.view;\n\t}\n\n\tif (interaction.type === 'banner.open') {\n\t\treturn interaction;\n\t}\n\n\treturn undefined;\n};\n\ntype UseUiKitViewReturnType<TView extends UiKit.View> = {\n\tview: TView;\n\terrors?: { [field: string]: string }[];",
            "handleUpdate": "\tconst viewId = getViewId(view);\n\tconst viewId = getViewId(view);\n\n\tuseEffect(() => {\n\t\tconst handleUpdate = (interaction: UiKit.ServerInteraction): void => {\n\t\tconst handleUpdate = (interaction: UiKit.ServerInteraction): void => {\n\t\t\tif (interaction.type === 'errors') {\n\t\t\t\tsetErrors(interaction.errors);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdateView((view) => ({ ...view, ...getViewFromInteraction(interaction) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "clickableItem.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/clickableItem.js",
        "code": {
            "WrappedComponent": "\tconst WrappedComponent = (props) => <Component className={clickable} tabIndex={0} {...props} />;\n\tconst WrappedComponent = (props) => <Component className={clickable} tabIndex={0} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "normalizeThreadMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/normalizeThreadMessage.tsx",
        "code": {
            "tokens": "\t\tconst tokens = message.msg ? parse(message.msg, { emoticons: true }) : undefined;\n\t\tconst tokens = message.msg ? parse(message.msg, { emoticons: true }) : undefined;",
            "attachment": "\t\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\n\t\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\n\n\t\tif (attachment?.description) {\n\t\t\treturn <>{attachment.description}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfManager.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/VideoConfManager.ts",
        "code": {
            "userId": "\t\tconst userId = Meteor.userId();\n\t\tconst userId = Meteor.userId();\n\n\t\tif (this.userId === userId) {\n\t\t\tdebug && console.log(`[VideoConf] Logged user has not changed, so we're not changing the hooks.`);\n\t\t\treturn;\n\t\t}\n\n\t\tdebug && console.log(`[VideoConf] Logged user has changed.`);\n\n\t\tif (this.userId) {\n\t\t\tthis.disconnect();\n\t\t}\n\n\t\tif (userId) {\n\t\t\tthis.connectUser(userId);\n\t\t}\n\t}\n\n\tpublic changePreference(key: keyof CallPreferences, value: boolean): void {\n\t\tthis._preferences[key] = value;\n\t\tthis.emit('preference/changed', { key, value });"
        },
        "depth_rank": 8
    },
    {
        "file": "loginServices.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/loginServices.ts",
        "code": {
            "timeout": "const maxRetries = 3;\nconst maxRetries = 3;\nconst timeout = 10000;\nconst timeout = 10000;\n\nclass LoginServices extends Emitter<LoginServicesEvents> {\n\tprivate retries = 0;\n\n\tprivate services: LoginServiceConfiguration[] = [];\n\n\tprivate serviceButtons: LoginService[] = [];\n\n\tprivate state: LoadState = 'none';\n\n\tprivate config: Record<string, Partial<LoginService>> = {\n\t\t'apple': { title: 'Apple', icon: 'apple' },",
            "sorted": "\t\tconst sorted = filtered.sort(({ service: service1 }, { service: service2 }) => service1.localeCompare(service2));\n\t\tconst sorted = filtered.sort(({ service: service1 }, { service: service2 }) => service1.localeCompare(service2));"
        },
        "depth_rank": 8
    },
    {
        "file": "download.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/download.ts",
        "code": {
            "hasMsSaveOrOpenBlob": "\tconst anchorElement = document.createElement('a');\n\tconst anchorElement = document.createElement('a');\n\tanchorElement.download = filename;\n\tanchorElement.href = href;\n\tanchorElement.target = '_blank';\n\tdocument.body.appendChild(anchorElement);\n\tanchorElement.click();\n\tdocument.body.removeChild(anchorElement);\n};\n\nconst hasMsSaveOrOpenBlob = (navigator: Navigator): navigator is Navigator & { msSaveOrOpenBlob: (blob: Blob) => void } =>\nconst hasMsSaveOrOpenBlob = (navigator: Navigator): navigator is Navigator & { msSaveOrOpenBlob: (blob: Blob) => void } =>"
        },
        "depth_rank": 8
    },
    {
        "file": "parseMessageTextToAstMarkdown.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/parseMessageTextToAstMarkdown.ts",
        "code": {
            "msg": "\tconst msg = removePossibleNullMessageValues(message);\n\tconst msg = removePossibleNullMessageValues(message);\n\tconst { showAutoTranslate, autoTranslateLanguage } = autoTranslateOptions;\n\tconst { showAutoTranslate, autoTranslateLanguage } = autoTranslateOptions;",
            "text": "\tconst translations = autoTranslateLanguage && isTranslatedMessage(msg) && msg.translations;\n\tconst translations = autoTranslateLanguage && isTranslatedMessage(msg) && msg.translations;\n\tconst translated = showAutoTranslate(message);\n\tconst translated = showAutoTranslate(message);\n\n\tconst text = (translated && translations && translations[autoTranslateLanguage]) || msg.msg;\n\tconst text = (translated && translations && translations[autoTranslateLanguage]) || msg.msg;\n\n\treturn {\n\t\t...msg,\n\t\tmd:\n\t\t\tisE2EEMessage(message) || isOTRMessage(message) || isOTRAckMessage(message) || translated\n\t\t\t\t? textToMessageToken(text, parseOptions)\n\t\t\t\t: msg.md ?? textToMessageToken(text, parseOptions),\n\t\t...(msg.attachments && {\n\t\t\tattachments: parseMessageAttachments(msg.attachments, parseOptions, { autoTranslateLanguage, translated }),"
        },
        "depth_rank": 8
    },
    {
        "file": "presence.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/presence.ts",
        "code": {
            "uids": "const uids = new Set<UserPresence['_id']>();\nconst uids = new Set<UserPresence['_id']>();\n\nconst update: EventHandlerOf<ExternalEvents, string> = (update) => {\nconst update: EventHandlerOf<ExternalEvents, string> = (update) => {\n\tif (update?._id) {\n\t\tstore.set(update._id, { ...store.get(update._id), ...update, ...(status === 'disabled' && { status: UserStatus.DISABLED }) });",
            "params": "\t\t\t\tconst params = {\n\t\t\t\tconst params = {\n\t\t\t\t\tids: [...currentUids],\n\t\t\t\t};\n\n\t\t\t\tconst { users } = await sdk.rest.get('/v1/users.presence', params);\n\t\t\t\tconst { users } = await sdk.rest.get('/v1/users.presence', params);"
        },
        "depth_rank": 8
    },
    {
        "file": "userData.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/userData.ts",
        "code": {
            "user": "const updateUser = (userData: IUser): void => {\nconst updateUser = (userData: IUser): void => {\n\tconst user = Users.findOne({ _id: userData._id }) as IUser | undefined;\n\tconst user = Users.findOne({ _id: userData._id }) as IUser | undefined;"
        },
        "depth_rank": 8
    },
    {
        "file": "getPermaLink.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/getPermaLink.ts",
        "code": {
            "subData": "\tconst subData = ChatSubscription.findOne({ 'rid': roomData._id, 'u._id': Meteor.userId() });\n\tconst subData = ChatSubscription.findOne({ 'rid': roomData._id, 'u._id': Meteor.userId() });",
            "roomURL": "\tconst roomURL = roomCoordinator.getURL(roomData.t, { ...(subData || roomData), tab: '' });\n\tconst roomURL = roomCoordinator.getURL(roomData.t, { ...(subData || roomData), tab: '' });"
        },
        "depth_rank": 8
    },
    {
        "file": "errorHandling.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/errorHandling.ts",
        "code": {
            "hasProperty": "const hasProperty = <TProperty extends number | string | symbol>(\nconst hasProperty = <TProperty extends number | string | symbol>(\n\tobj: unknown,\n\tproperty: TProperty,\n): obj is { [key in TProperty]: unknown } => isObject(obj) && property in obj;",
            "details": "\tconst message =\n\tconst message =\n\t\t(hasProperty(error, 'reason') && typeof error.reason === 'string' ? error.reason : undefined) ??\n\t\t(hasProperty(error, 'error') && typeof error.error === 'string' ? error.error : undefined) ??\n\t\t(hasProperty(error, 'message') && typeof error.message === 'string' ? error.message : undefined) ??\n\t\tdefaultMessage;\n\tconst details = hasProperty(error, 'details') && isObject(error.details) ? error.details : undefined;\n\tconst details = hasProperty(error, 'details') && isObject(error.details) ? error.details : undefined;\n\n\tif (message) return t(message, Object.fromEntries(Object.entries(details ?? {}).map(([key, value]) => [key, t(value)])));"
        },
        "depth_rank": 8
    },
    {
        "file": "process2faReturn.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/2fa/process2faReturn.ts",
        "code": {
            "assertModalProps": "function assertModalProps(props: {\nfunction assertModalProps(props: {\n\tmethod: TwoFactorMethod;\n\temailOrUsername?: string;\n}): asserts props is { method: 'totp' } | { method: 'password' } | { method: 'email'; emailOrUsername: string } {",
            "getProps": "const getProps = (\nconst getProps = (\n\tmethod: 'totp' | 'email' | 'password',\n\temailOrUsername?: { username: string } | { email: string } | { id: string } | string,",
            "code": "\t\tconst code = await invokeTwoFactorModal(props);\n\t\tconst code = await invokeTwoFactorModal(props);\n\n\t\treturn onCode(code, props.method);\n\t} catch (error) {"
        },
        "depth_rank": 9
    },
    {
        "file": "portalsSubscription.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/portals/portalsSubscription.ts",
        "code": {
            "emitter": "const createPortalsSubscription = (): PortalsSubscription => {\nconst createPortalsSubscription = (): PortalsSubscription => {\n\tconst portalsMap = new Map<unknown, SubscribedPortal>();\n\tconst portalsMap = new Map<unknown, SubscribedPortal>();\n\tlet portals = Array.from(portalsMap.values());\n\tconst emitter = new Emitter<{ update: void }>();\n\tconst emitter = new Emitter<{ update: void }>();"
        },
        "depth_rank": 9
    },
    {
        "file": "roomCoordinator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/rooms/roomCoordinator.tsx",
        "code": {
            "fields": "\t\tconst fields = {\n\t\tconst fields = {\n\t\t\tro: 1,\n\t\t\tt: 1,\n\t\t\t...(user && { muted: 1, unmuted: 1 }),",
            "room": "\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, federated: 1 } });\n\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, federated: 1 } });",
            "new": "\t\t\tthrow new Error('The route link must be a function.');\n\t\t\tthrow new Error('The route link must be a function.');\n\t\t}\n\t}\n\n\tprotected validateRoomConfig(roomConfig: IRoomTypeClientConfig): void {\n\t\tsuper.validateRoomConfig(roomConfig);\n\n\t\tconst { route, label } = roomConfig;\n\t\tconst { route, label } = roomConfig;"
        },
        "depth_rank": 9
    },
    {
        "file": "direct.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/rooms/roomTypes/direct.ts",
        "code": {
            "sub": "\t\t\tconst sub = Subscriptions.findOne({ rid: room._id }, { fields: { name: 1 } });\n\t\t\tconst sub = Subscriptions.findOne({ rid: room._id }, { fields: { name: 1 } });",
            "user": "\t\t\t\tconst user = Users.findOne({ username: sub.name }, { fields: { username: 1, avatarETag: 1 } }) as IUser | undefined;\n\t\t\t\tconst user = Users.findOne({ username: sub.name }, { fields: { username: 1, avatarETag: 1 } }) as IUser | undefined;"
        },
        "depth_rank": 10
    },
    {
        "file": "livechat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/rooms/roomTypes/livechat.ts",
        "code": {
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { open: 1, servedBy: 1 } });\n\t\t\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { open: 1, servedBy: 1 } });",
            "subscription": "\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });"
        },
        "depth_rank": 10
    },
    {
        "file": "VoIPUser.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/voip/VoIPUser.ts",
        "code": {
            "sdpFactoryOptions": "\t\tconst transportOptions = {\n\t\tconst transportOptions = {\n\t\t\tserver: this.config.webSocketURI,\n\t\t\tconnectionTimeout: 100, // Replace this with config\n\t\t\tkeepAliveInterval: 20,\n\t\t\t// traceSip: true,\n\t\t};\n\t\tconst sdpFactoryOptions = {\n\t\tconst sdpFactoryOptions = {\n\t\t\ticeGatheringTimeout: 10,\n\t\t\tpeerConnectionConfiguration: {\n\t\t\t\ticeServers: this.config.iceServers,\n\t\t\t},\n\t\t};\n\t\tthis.userAgentOptions = {\n\t\t\tdelegate: {\n\t\t\t\tonInvite: async (invitation: Invitation): Promise<void> => {\n\t\t\t\t\tawait this.handleIncomingCall(invitation);\n\t\t\t\t},\n\t\t\t},\n\t\t\tauthorizationPassword: this.config.authPassword,\n\t\t\tauthorizationUsername: this.config.authUserName,\n\t\t\turi: UserAgent.makeURI(sipUri),\n\t\t\ttransportOptions,\n\t\t\tsessionDescriptionHandlerFactoryOptions: sdpFactoryOptions,\n\t\t\tlogConfiguration: false,\n\t\t\tlogLevel: 'error',\n\t\t};\n\n\t\tthis.userAgent = new UserAgent(this.userAgentOptions);\n\t\tthis.userAgent.transport.isConnected();\n\t\tthis._opInProgress = Operation.OP_CONNECT;\n\t\ttry {\n\t\t\tthis.registerer = new Registerer(this.userAgent);\n\n\t\t\tthis.userAgent.transport.onConnect = this.onConnected.bind(this);\n\t\t\tthis.userAgent.transport.onDisconnect = this.onDisconnected.bind(this);\n\t\t\twindow.addEventListener('online', this.onlineNetworkHandler);\n\t\t\twindow.addEventListener('offline', this.offlineNetworkHandler);\n\t\t\tawait this.userAgent.start();\n\t\t\tif (this.config.enableKeepAliveUsingOptionsForUnstableNetworks) {\n\t\t\t\tthis.startOptionsPingForUnstableNetworks();\n\t\t\t}\n\t\t} catch (error) {",
            "sessionDescriptionHandlerOptions": "\t\tconst sessionDescriptionHandlerOptions = session.sessionDescriptionHandlerOptionsReInvite as SessionDescriptionHandlerOptions;\n\t\tconst sessionDescriptionHandlerOptions = session.sessionDescriptionHandlerOptionsReInvite as SessionDescriptionHandlerOptions;\n\t\tsessionDescriptionHandlerOptions.hold = holdState;\n\t\tsession.sessionDescriptionHandlerOptionsReInvite = sessionDescriptionHandlerOptions;\n\n\t\tconst { peerConnection } = sessionDescriptionHandler;\n\t\tconst { peerConnection } = sessionDescriptionHandler;",
            "outgoingMessage": "\t\tconst uri = new URI('sip', this.config.authUserName, this.config.sipRegistrarHostnameOrIP);\n\t\tconst uri = new URI('sip', this.config.authUserName, this.config.sipRegistrarHostnameOrIP);\n\t\tconst outgoingMessage = this.userAgent?.userAgentCore.makeOutgoingRequestMessage('OPTIONS', uri, uri, uri, {});\n\t\tconst outgoingMessage = this.userAgent?.userAgentCore.makeOutgoingRequestMessage('OPTIONS', uri, uri, uri, {});",
            "const": "\t// \tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;\n\t// \tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;"
        },
        "depth_rank": 9
    },
    {
        "file": "sort.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/minimongo/sort.ts",
        "code": {
            "createSortSpecParts": "const createSortSpecParts = <T>(\nconst createSortSpecParts = <T>(\n\tspec: Sort,\n): {\n\tlookup: (doc: T) => unknown[];\n\tascending: boolean;\n}[] => {"
        },
        "depth_rank": 9
    },
    {
        "file": "Federation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/federation/Federation.ts",
        "code": {
            "displayingUserRoomRoles": "\tconst myself = userSubscription.u?._id === displayingUserId;\n\tconst myself = userSubscription.u?._id === displayingUserId;\n\tconst removingMyself = action === RoomMemberActions.REMOVE_USER && myself;\n\tconst removingMyself = action === RoomMemberActions.REMOVE_USER && myself;\n\n\tif (removingMyself) {\n\t\treturn false;\n\t}\n\n\tconst displayingUserRoomRoles = RoomRoles.findOne({ 'rid': room._id, 'u._id': displayingUserId })?.roles || [];\n\tconst displayingUserRoomRoles = RoomRoles.findOne({ 'rid': room._id, 'u._id': displayingUserId })?.roles || [];"
        },
        "depth_rank": 9
    },
    {
        "file": "ImagesList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/lists/ImagesList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: ImagesListOptions) {\n\tpublic constructor(private _options: ImagesListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ImagesListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ImagesListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IUpload): boolean {\n\t\tconst { roomId } = this._options;\n\t\tconst { roomId } = this._options;"
        },
        "depth_rank": 9
    },
    {
        "file": "ThreadsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/lists/ThreadsList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: ThreadsListOptions) {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 9
    },
    {
        "file": "FilesList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/lists/FilesList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: FilesListOptions) {\n\tpublic constructor(private _options: FilesListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): FilesListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: FilesListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IUpload): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 9
    },
    {
        "file": "DiscussionsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/lists/DiscussionsList.ts",
        "code": {
            "constructor": "\tpublic constructor(private _options: DiscussionsListOptions) {\n\tpublic constructor(private _options: DiscussionsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): DiscussionsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: DiscussionsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\t\tconst { rid } = this._options;"
        },
        "depth_rank": 9
    },
    {
        "file": "data.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/chats/data.ts",
        "code": {
            "composeMessage": "\tconst composeMessage = async (\n\tconst composeMessage = async (\n\t\ttext: string,\n\t\t{ sendToChannel, quotedMessages, originalMessage }: { sendToChannel?: boolean; quotedMessages: IMessage[]; originalMessage?: IMessage },",
            "effectiveTMID": "\t\tconst msg = await prependReplies(text, quotedMessages);\n\t\tconst msg = await prependReplies(text, quotedMessages);\n\n\t\tconst effectiveRID = originalMessage?.rid ?? rid;\n\t\tconst effectiveRID = originalMessage?.rid ?? rid;\n\t\tconst effectiveTMID = originalMessage ? originalMessage.tmid : tmid;\n\t\tconst effectiveTMID = originalMessage ? originalMessage.tmid : tmid;\n\n\t\treturn (await onClientBeforeSendMessage({\n\t\t\t_id: originalMessage?._id ?? Random.id(),\n\t\t\trid: effectiveRID,\n\t\t\t...(effectiveTMID && {\n\t\t\t\ttmid: effectiveTMID,\n\t\t\t\t...(sendToChannel && { tshow: sendToChannel }),",
            "deleteMessage": "\tconst deleteMessage = async (mid: IMessage['_id']): Promise<void> => {\n\tconst deleteMessage = async (mid: IMessage['_id']): Promise<void> => {\n\t\tawait sdk.call('deleteMessage', { _id: mid });",
            "findRoom": "\tconst drafts = new Map<IMessage['_id'] | undefined, string>();\n\tconst drafts = new Map<IMessage['_id'] | undefined, string>();\n\n\tconst getDraft = async (mid: IMessage['_id'] | undefined): Promise<string | undefined> => drafts.get(mid);\n\tconst getDraft = async (mid: IMessage['_id'] | undefined): Promise<string | undefined> => drafts.get(mid);\n\n\tconst discardDraft = async (mid: IMessage['_id'] | undefined): Promise<void> => {\n\tconst discardDraft = async (mid: IMessage['_id'] | undefined): Promise<void> => {\n\t\tdrafts.delete(mid);\n\t};\n\n\tconst saveDraft = async (mid: IMessage['_id'] | undefined, draft: string): Promise<void> => {\n\tconst saveDraft = async (mid: IMessage['_id'] | undefined, draft: string): Promise<void> => {\n\t\tdrafts.set(mid, draft);\n\t};\n\n\tconst findRoom = async (): Promise<IRoom | undefined> => ChatRoom.findOne({ _id: rid }, { reactive: false });\n\tconst findRoom = async (): Promise<IRoom | undefined> => ChatRoom.findOne({ _id: rid }, { reactive: false });",
            "findSubscription": "\tconst findSubscription = async (): Promise<ISubscription | undefined> => {\n\tconst findSubscription = async (): Promise<ISubscription | undefined> => {\n\t\treturn ChatSubscription.findOne({ rid }, { reactive: false });",
            "findSubscriptionFromMessage": "\tconst getSubscription = createStrictGetter(findSubscription, 'Subscription not found');\n\tconst getSubscription = createStrictGetter(findSubscription, 'Subscription not found');\n\n\tconst findSubscriptionFromMessage = async (message: IMessage): Promise<ISubscription | undefined> => {\n\tconst findSubscriptionFromMessage = async (message: IMessage): Promise<ISubscription | undefined> => {\n\t\treturn ChatSubscription.findOne({ rid: message.rid }, { reactive: false });"
        },
        "depth_rank": 9
    },
    {
        "file": "uploads.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/chats/uploads.ts",
        "code": {
            "send": "const send = async (\nconst send = async (\n\tfile: File,\n\t{\n\t\tdescription,\n\t\tmsg,\n\t\trid,\n\t\ttmid,\n\t}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "processTooLongMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/chats/flows/processTooLongMessage.ts",
        "code": {
            "messageBlob": "\t\tconst onConfirm = async (): Promise<void> => {\n\t\tconst onConfirm = async (): Promise<void> => {\n\t\t\tconst contentType = 'text/plain';\n\t\t\tconst contentType = 'text/plain';\n\t\t\tconst messageBlob = new Blob([msg], { type: contentType });\n\t\t\tconst messageBlob = new Blob([msg], { type: contentType });"
        },
        "depth_rank": 10
    },
    {
        "file": "sendMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/chats/flows/sendMessage.ts",
        "code": {
            "message": "\t\tconst message = await chat.data.composeMessage(text, {\n\t\tconst message = await chat.data.composeMessage(text, {\n\t\t\tsendToChannel: tshow,\n\t\t\tquotedMessages: chat.composer?.quotedMessages.get() ?? [],\n\t\t\toriginalMessage: chat.currentEditing ? await chat.data.findMessageByID(chat.currentEditing.mid) : null,\n\t\t});\n\n\t\ttry {\n\t\t\tawait process(chat, message, previewUrls);\n\t\t\tchat.composer?.dismissAllQuotedMessages();\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "processSlashCommand.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/chats/flows/processSlashCommand.ts",
        "code": {
            "result": "\tconst triggerId = chat.ActionManager.generateTriggerId(appId);\n\tconst triggerId = chat.ActionManager.generateTriggerId(appId);\n\n\tconst data = {\n\tconst data = {\n\t\tcmd: commandName,\n\t\tparams,\n\t\tmsg: message,\n\t\tuserId: chat.uid,\n\t} as const;\n\t} as const;\n\n\ttry {\n\t\tif (appId) {\n\t\t\tchat.ActionManager.notifyBusy();\n\t\t}\n\n\t\tconst result = await sdk.call('slashCommand', { cmd: commandName, params, msg: message, triggerId });\n\t\tconst result = await sdk.call('slashCommand', { cmd: commandName, params, msg: message, triggerId });"
        },
        "depth_rank": 10
    },
    {
        "file": "detectEmoji.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/utils/detectEmoji.ts",
        "code": {
            "html": "\tconst html = Object.values(emoji.packages)\n\tconst html = Object.values(emoji.packages)\n\t\t.reverse()\n\t\t.reduce((html, { render }) => render(html), text);"
        },
        "depth_rank": 9
    },
    {
        "file": "getUidDirectMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/utils/getUidDirectMessage.ts",
        "code": {
            "room": "\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, uids: 1 } });\n\tconst room = ChatRoom.findOne({ _id: rid }, { fields: { t: 1, uids: 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "renderEmoji.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/utils/renderEmoji.ts",
        "code": {
            "emojiList": "const emojiList = emoji.list as Record<string, { emojiPackage: string }>;\nconst emojiList = emoji.list as Record<string, { emojiPackage: string }>;",
            "emojiPackages": "const emojiPackages = emoji.packages as Record<string, { render(emojiName: string): string }>;\nconst emojiPackages = emoji.packages as Record<string, { render(emojiName: string): string }>;"
        },
        "depth_rank": 9
    },
    {
        "file": "goToRoomById.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/lib/utils/goToRoomById.ts",
        "code": {
            "room": "\tconst room = await getRoomById(rid);\n\tconst room = await getRoomById(rid);\n\troomCoordinator.openRouteLink(room.t, { rid: room._id, ...room }, router.getSearchParameters());"
        },
        "depth_rank": 9
    },
    {
        "file": "cssVars.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/polyfills/cssVars.ts",
        "code": {
            "code": "\t\tconst url = linkElement.getAttribute('href');\n\t\tconst url = linkElement.getAttribute('href');\n\n\t\tif (url === null) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst response = await fetch(url);\n\t\t\tconst code = await response.text();\n\t\t\tconst code = await response.text();\n\t\t\toriginalCodes.set(linkElement, code);\n\t\t} catch (error) {",
            "cssVariablesElementObserver": "\tconst cssVariablesElementObserver = new MutationObserver(() => {\n\tconst cssVariablesElementObserver = new MutationObserver(() => {\n\t\tupdate();\n\t});\n\n\tcssVariablesElementObserver.observe(cssVariablesElement, { childList: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "customEventPolyfill.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/polyfills/customEventPolyfill.ts",
        "code": {
            "CustomEvent": "\tif (typeof window.CustomEvent === 'function') {\n\tif (typeof window.CustomEvent === 'function') {\n\t\treturn;\n\t}\n\n\tconst CustomEvent = function <T>(\n\tconst CustomEvent = function <T>(\n\t\ttype: string,\n\t\t{ bubbles = false, cancelable = false, detail = null as unknown as T }: CustomEventInit<T> = {},",
            "evt": "\t\tconst evt = document.createEvent('CustomEvent') as CustomEvent<T>;\n\t\tconst evt = document.createEvent('CustomEvent') as CustomEvent<T>;\n\t\tevt.initCustomEvent(type, bubbles, cancelable, detail);\n\t\treturn evt;\n\t} as unknown as {"
        },
        "depth_rank": 8
    },
    {
        "file": "loadMissedMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/loadMissedMessages.ts",
        "code": {
            "subscription": "\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tconst result = await callWithErrorHandling('loadMissedMessages', rid, lastMessage.ts);\n\t\tif (result) {\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });\n\t\t\tconst subscription = ChatSubscription.findOne({ rid });"
        },
        "depth_rank": 8
    },
    {
        "file": "rootUrlChange.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/rootUrlChange.ts",
        "code": {
            "confirm": "\t\t\tconst confirm = (): void => {\n\t\t\tconst confirm = (): void => {\n\t\t\t\timperativeModal.close();\n\t\t\t\tvoid sdk.call('saveSetting', 'Site_Url', currentUrl).then(() => {\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });"
        },
        "depth_rank": 8
    },
    {
        "file": "unread.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/unread.ts",
        "code": {
            "room": "\t\tconst userUnreadAlert = getUserPreference(Meteor.userId(), 'unreadAlert');\n\t\tconst userUnreadAlert = getUserPreference(Meteor.userId(), 'unreadAlert');\n\n\t\tlet unreadAlert: false | '\u2022' = false;\n\n\t\tconst unreadCount = fetchSubscriptions().reduce(\n\t\tconst unreadCount = fetchSubscriptions().reduce(\n\t\t\t(ret, subscription) =>\n\t\t\t\tTracker.nonreactive(() => {\n\t\t\t\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, { fields: { usersCount: 1 } });\n\t\t\t\t\tconst room = ChatRoom.findOne({ _id: subscription.rid }, { fields: { usersCount: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "e2e.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/e2e.ts",
        "code": {
            "subscription": "\t\t\tconst subscription = await waitUntilFind(() => ChatRoom.findOne({ _id: message.rid }));\n\t\t\tconst subscription = await waitUntilFind(() => ChatRoom.findOne({ _id: message.rid }));"
        },
        "depth_rank": 8
    },
    {
        "file": "otr.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/otr.ts",
        "code": {
            "msg": "\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst msg = await otrRoom.encrypt(message);\n\t\t\tconst msg = await otrRoom.encrypt(message);\n\t\t\treturn { ...message, msg, t: 'otr' };",
            "decrypted": "\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst decrypted = await otrRoom.decrypt(message.msg);\n\t\t\tconst decrypted = await otrRoom.decrypt(message.msg);\n\t\t\tif (typeof decrypted === 'string') {\n\t\t\t\treturn { ...message, msg: decrypted };",
            "otrAck": "\t\t\t\tconst otrAck = await otrRoom.decrypt(message.otrAck);\n\t\t\t\tconst otrAck = await otrRoom.decrypt(message.otrAck);\n\t\t\t\tif (typeof otrAck === 'string') {\n\t\t\t\t\treturn { ...message, msg: otrAck };",
            "encryptedAck": "\t\t\t\tconst encryptedAck = await otrRoom.encryptText(ack);\n\t\t\t\tconst encryptedAck = await otrRoom.encryptText(ack);\n\n\t\t\t\tvoid sdk.call('updateOTRAck', { message, ack: encryptedAck });"
        },
        "depth_rank": 8
    },
    {
        "file": "iframeCommands.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/iframeCommands.ts",
        "code": {
            "customRedirectUri": "\t\t\t\tconst customRedirectUri = data.redirectUrl || siteUrl;\n\t\t\t\tconst customRedirectUri = data.redirectUrl || siteUrl;\n\t\t\t\tcustomLoginWith.call(Meteor, { redirectUrl: customRedirectUri }, customOAuthCallback);"
        },
        "depth_rank": 8
    },
    {
        "file": "permalinkStar.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/actionButtons/permalinkStar.ts",
        "code": {
            "permalink": "\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tnavigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 9
    },
    {
        "file": "permalinkPinned.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/startup/actionButtons/permalinkPinned.ts",
        "code": {
            "permalink": "\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tconst permalink = await getPermaLink(message._id);\n\t\t\t\tnavigator.clipboard.writeText(permalink);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Copied') });"
        },
        "depth_rank": 9
    },
    {
        "file": "CustomHomePageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/CustomHomePageContent.tsx",
        "code": {
            "body": "const CustomHomePageContent = (props: ComponentProps<typeof Box>): ReactElement => {\nconst CustomHomePageContent = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst body = String(useSetting('Layout_Home_Body'));\n\tconst body = String(useSetting('Layout_Home_Body'));\n\n\treturn <Box withRichContent dangerouslySetInnerHTML={{ __html: body }} {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "CustomContentCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/CustomContentCard.tsx",
        "code": {
            "router": "const CustomContentCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement | null => {\nconst CustomContentCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "userVisibilityTooltipText": "\tconst userVisibilityTooltipText = isCustomContentVisible ? t('Now_Its_Visible_For_Everyone') : t('Now_Its_Visible_Only_For_Admins');\n\tconst userVisibilityTooltipText = isCustomContentVisible ? t('Now_Its_Visible_For_Everyone') : t('Now_Its_Visible_Only_For_Admins');\n\n\tlet customContentOnlyTooltipText = t('It_Will_Hide_All_Other_Content_Blocks_In_The_Homepage');\n\tif (willNotShowCustomContent) {\n\t\tcustomContentOnlyTooltipText = t('Action_Available_After_Custom_Content_Added_And_Visible');\n\t} else if (isCustomContentOnly) {"
        },
        "depth_rank": 10
    },
    {
        "file": "CreateChannelsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/CreateChannelsCard.tsx",
        "code": {
            "openCreateChannelModal": "const CreateChannelsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst CreateChannelsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst openCreateChannelModal = (): void => setModal(<CreateChannelWithData onClose={(): void => setModal(null)} />);\n\tconst openCreateChannelModal = (): void => setModal(<CreateChannelWithData onClose={(): void => setModal(null)} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "JoinRoomsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/JoinRoomsCard.tsx",
        "code": {
            "handleDirectory": "const JoinRoomsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst JoinRoomsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst handleDirectory = (): void => {\n\tconst handleDirectory = (): void => {\n\t\trouter.navigate('/directory');\n\t};\n\n\treturn (\n\t\t<GenericCard\n\t\t\ttitle={t('Join_rooms')}"
        },
        "depth_rank": 10
    },
    {
        "file": "AddUsersCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/AddUsersCard.tsx",
        "code": {
            "handleOpenUsersRoute": "const AddUsersCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst AddUsersCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst handleOpenUsersRoute = (): void => {\n\tconst handleOpenUsersRoute = (): void => {\n\t\trouter.navigate('/admin/users');\n\t};\n\n\treturn (\n\t\t<GenericCard\n\t\t\ttitle={t('Add_users')}"
        },
        "depth_rank": 10
    },
    {
        "file": "DocumentationCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/DocumentationCard.tsx",
        "code": {
            "handleOpenLink": "const DocumentationCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst DocumentationCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleOpenLink = useExternalLink();\n\tconst handleOpenLink = useExternalLink();\n\n\treturn (\n\t\t<GenericCard\n\t\t\ttitle={t('Documentation')}"
        },
        "depth_rank": 10
    },
    {
        "file": "MobileAppsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/MobileAppsCard.tsx",
        "code": {
            "handleOpenLink": "const MobileAppsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst MobileAppsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleOpenLink = useExternalLink();\n\tconst handleOpenLink = useExternalLink();\n\n\treturn (\n\t\t<GenericCard\n\t\t\ttitle={t('Mobile_apps')}"
        },
        "depth_rank": 10
    },
    {
        "file": "DesktopAppsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/home/cards/DesktopAppsCard.tsx",
        "code": {
            "handleOpenLink": "const DesktopAppsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\nconst DesktopAppsCard = (props: Omit<ComponentProps<typeof Card>, 'type'>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleOpenLink = useExternalLink();\n\tconst handleOpenLink = useExternalLink();\n\n\treturn (\n\t\t<GenericCard\n\t\t\ttitle={t('Desktop_apps')}"
        },
        "depth_rank": 10
    },
    {
        "file": "BaseConvertToChannelModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/BaseConvertToChannelModal.tsx",
        "code": {
            "STEPS": "const STEPS = {\nconst STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_CONVERT: 'CONFIRM_CONVERT',\n};\n\ntype BaseConvertToChannelModalProps = {\n\tonClose: () => void;\n\tonCancel: () => void;\n\tonConfirm: () => Serialized<IRoom>[];\n\tcurrentStep?: string;\n\trooms?: (Serialized<IRoom> & { isLastOwner?: boolean })[];",
            "onChangeRoomSelection": "\tconst onContinue = useMutableCallback(() => setStep(STEPS.CONFIRM_CONVERT));\n\tconst onContinue = useMutableCallback(() => setStep(STEPS.CONFIRM_CONVERT));\n\tconst onReturn = useMutableCallback(() => setStep(STEPS.LIST_ROOMS));\n\tconst onReturn = useMutableCallback(() => setStep(STEPS.LIST_ROOMS));\n\n\tconst eligibleRooms = rooms;\n\tconst eligibleRooms = rooms;\n\n\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(selectedRooms).filter(Boolean).length === 0 && eligibleRooms) {\n\t\t\treturn setSelectedRooms(Object.fromEntries(eligibleRooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetSelectedRooms({});"
        },
        "depth_rank": 10
    },
    {
        "file": "FirstStep.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/ModalSteps/FirstStep.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Converting_team_to_channel')}"
        },
        "depth_rank": 11
    },
    {
        "file": "SecondStep.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/ConvertToChannelModal/ModalSteps/SecondStep.tsx",
        "code": {
            "t": "const SecondStep: FC<SecondStepsProps> = ({ onClose, onCancel, onConfirm, deletedRooms = {}, rooms = [], ...props }) => {\nconst SecondStep: FC<SecondStepsProps> = ({ onClose, onCancel, onConfirm, deletedRooms = {}, rooms = [], ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\t{...props}"
        },
        "depth_rank": 11
    },
    {
        "file": "ChannelDesertionTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/ChannelDesertionTable/ChannelDesertionTableRow.tsx",
        "code": {
            "ChannelDesertionTableRow": "const ChannelDesertionTableRow = ({ room, onChange, selected, lastOwnerWarning }: ChannelDesertionTableRowProps): ReactElement => {\nconst ChannelDesertionTableRow = ({ room, onChange, selected, lastOwnerWarning }: ChannelDesertionTableRowProps): ReactElement => {\n\tconst { name, fname, ts, isLastOwner } = room;\n\tconst { name, fname, ts, isLastOwner } = room;",
            "handleChange": "\tconst formatDate = useFormatDateAndTime();\n\tconst formatDate = useFormatDateAndTime();\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\n\treturn (\n\t\t<GenericTableRow action>\n\t\t\t<GenericTableCell maxWidth='x300' withTruncatedText>\n\t\t\t\t<CheckBox checked={selected} onChange={handleChange} disabled={room.isLastOwner} />"
        },
        "depth_rank": 10
    },
    {
        "file": "TeamsInfoWithRooms.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfoWithRooms.tsx",
        "code": {
            "onClickBack": "const TeamsInfoWithRooms = () => {\nconst TeamsInfoWithRooms = () => {\n\tconst [editing, setEditing] = useState(false);\n\tconst [editing, setEditing] = useState(false);\n\tconst onClickBack = useMutableCallback(() => setEditing(false));\n\tconst onClickBack = useMutableCallback(() => setEditing(false));\n\n\tif (editing) {\n\t\treturn <EditChannelWithData onClickBack={onClickBack} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "TeamsInfoWithData.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfoWithData.js",
        "code": {
            "room": "const retentionPolicyMaxAge = {\nconst retentionPolicyMaxAge = {\n\tc: 'RetentionPolicy_MaxAge_Channels',\n\tp: 'RetentionPolicy_MaxAge_Groups',\n\td: 'RetentionPolicy_MaxAge_DMs',\n};\n\nconst retentionPolicyAppliesTo = {\nconst retentionPolicyAppliesTo = {\n\tc: 'RetentionPolicy_AppliesToChannels',\n\tp: 'RetentionPolicy_AppliesToGroups',\n\td: 'RetentionPolicy_AppliesToDMs',\n};\n\nconst TeamsInfoWithLogic = ({ openEditing }) => {\nconst TeamsInfoWithLogic = ({ openEditing }) => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { openTab, closeTab } = useRoomToolbox();\n\tconst { openTab, closeTab } = useRoomToolbox();",
            "roomsToLeave": "\tconst onClickLeave = useMutableCallback(() => {\n\tconst onClickLeave = useMutableCallback(() => {\n\t\tconst onConfirm = async (roomsLeft) => {\n\t\tconst onConfirm = async (roomsLeft) => {\n\t\t\troomsLeft = Object.keys(roomsLeft);\n\t\t\tconst roomsToLeave = Array.isArray(roomsLeft) && roomsLeft.length > 0 ? roomsLeft : [];\n\t\t\tconst roomsToLeave = Array.isArray(roomsLeft) && roomsLeft.length > 0 ? roomsLeft : [];\n\n\t\t\ttry {\n\t\t\t\tawait leaveTeam({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\t...(roomsToLeave.length && { rooms: roomsToLeave }),",
            "hide": "\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async () => {\n\t\tconst hide = async () => {\n\t\t\ttry {\n\t\t\t\tawait hideTeam(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tif (dontAskHideRoom) {\n\t\t\treturn hide();\n\t\t}\n\n\t\tsetModal(\n\t\t\t<GenericModalDoNotAskAgain\n\t\t\t\tvariant='danger'\n\t\t\t\tconfirmText={t('Yes_hide_it')}",
            "onConfirm": "\tconst onClickConvertToChannel = useMutableCallback(() => {\n\tconst onClickConvertToChannel = useMutableCallback(() => {\n\t\tconst onConfirm = async (roomsToRemove) => {\n\t\tconst onConfirm = async (roomsToRemove) => {\n\t\t\ttry {\n\t\t\t\tawait convertTeamToChannel({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\troomsToRemove: Object.keys(roomsToRemove),\n\t\t\t\t});\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Success') });"
        },
        "depth_rank": 11
    },
    {
        "file": "TeamsInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/TeamsInfo.tsx",
        "code": {
            "TeamsInfo": "const TeamsInfo = ({\nconst TeamsInfo = ({\n\troom,\n\tretentionPolicy,\n\tonClickHide,\n\tonClickClose,\n\tonClickLeave,\n\tonClickEdit,\n\tonClickDelete,\n\tonClickViewChannels,\n\tonClickConvertToChannel,\n}: TeamsInfoProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { retentionPolicyEnabled, filesOnlyDefault, excludePinnedDefault, maxAgeDefault } = retentionPolicy;\n\tconst { retentionPolicyEnabled, filesOnlyDefault, excludePinnedDefault, maxAgeDefault } = retentionPolicy;",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ChannelDeletionTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/ChannelDeletionTableRow.tsx",
        "code": {
            "ChannelDeletionTableRow": "const ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\nconst ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\n\tconst { name, fname, usersCount } = room;\n\tconst { name, fname, usersCount } = room;",
            "handleChange": "\tconst handleChange = useMutableCallback(() => onChange(room));\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\n\treturn (\n\t\t<GenericTableRow action>\n\t\t\t<GenericTableCell maxWidth='x300' withTruncatedText>\n\t\t\t\t<CheckBox checked={selected} onChange={handleChange} />"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelDeletionTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/Delete/ChannelDeletionTable.tsx",
        "code": {
            "t": "const ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\nconst ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');",
            "headers": "\tconst sortedRooms = getSortedChannels();\n\tconst sortedRooms = getSortedChannels();\n\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' sort='name' onClick={setSort} direction={sortDirection} active={sortBy === 'name'}>"
        },
        "depth_rank": 12
    },
    {
        "file": "LeaveTeamWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamWithData.tsx",
        "code": {
            "getRoomsOfUser": "\tconst getRoomsOfUser = useEndpoint('GET', '/v1/teams.listRoomsOfUser');\n\tconst getRoomsOfUser = useEndpoint('GET', '/v1/teams.listRoomsOfUser');\n\tconst { data, isLoading } = useQuery(['teams.listRoomsOfUser'], () => getRoomsOfUser({ teamId, userId }));\n\tconst { data, isLoading } = useQuery(['teams.listRoomsOfUser'], () => getRoomsOfUser({ teamId, userId }));"
        },
        "depth_rank": 12
    },
    {
        "file": "LeaveTeamModalChannels.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModalChannels.tsx",
        "code": {
            "LeaveTeamModalChannels": "const LeaveTeamModalChannels = ({\nconst LeaveTeamModalChannels = ({\n\trooms,\n\tonToggleAllRooms,\n\tonChangeRoomSelection,\n\tonConfirm,\n\tonCancel,\n\teligibleRoomsLength,\n\tselectedRooms,\n}: LeaveTeamModalChannelsProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Teams_leave')}"
        },
        "depth_rank": 13
    },
    {
        "file": "LeaveTeamModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModal.tsx",
        "code": {
            "as": "const LEAVE_TEAM_STEPS = {\nconst LEAVE_TEAM_STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_LEAVE: 'CONFIRM_LEAVE',\n} as const;\n} as const;\n\ntype LeaveTeamModalProps = {\n\trooms: (Serialized<IRoom> & { isLastOwner?: boolean })[];",
            "memoizedRooms": "const LeaveTeamModal = ({ rooms, onCancel, onConfirm }: LeaveTeamModalProps): ReactElement => {\nconst LeaveTeamModal = ({ rooms, onCancel, onConfirm }: LeaveTeamModalProps): ReactElement => {\n\tconst memoizedRooms = useMemo(() => rooms, [rooms]);\n\tconst memoizedRooms = useMemo(() => rooms, [rooms]);\n\tconst [step, setStep] = useState(memoizedRooms.length === 0 ? LEAVE_TEAM_STEPS.CONFIRM_LEAVE : LEAVE_TEAM_STEPS.LIST_ROOMS);\n\tconst [step, setStep] = useState(memoizedRooms.length === 0 ? LEAVE_TEAM_STEPS.CONFIRM_LEAVE : LEAVE_TEAM_STEPS.LIST_ROOMS);\n\n\tconst [selectedRooms, setSelectedRooms] = useState<{ [key: string]: Serialized<IRoom> & { isLastOwner?: boolean } }>({});\n\tconst [selectedRooms, setSelectedRooms] = useState<{ [key: string]: Serialized<IRoom> & { isLastOwner?: boolean } }>({});",
            "lastOwnerRooms": "\tconst lastOwnerRooms = rooms.filter(({ isLastOwner }) => isLastOwner);\n\tconst lastOwnerRooms = rooms.filter(({ isLastOwner }) => isLastOwner);",
            "onChangeRoomSelection": "\tconst handleContinue = useCallback(() => setStep(LEAVE_TEAM_STEPS.CONFIRM_LEAVE), []);\n\tconst handleContinue = useCallback(() => setStep(LEAVE_TEAM_STEPS.CONFIRM_LEAVE), []);\n\tconst handleReturn = useCallback(() => setStep(LEAVE_TEAM_STEPS.LIST_ROOMS), []);\n\tconst handleReturn = useCallback(() => setStep(LEAVE_TEAM_STEPS.LIST_ROOMS), []);\n\n\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };"
        },
        "depth_rank": 13
    },
    {
        "file": "LeaveTeamModalConfirmation.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/LeaveTeam/LeaveTeamModal/LeaveTeamModalConfirmation.tsx",
        "code": {
            "t": "const LeaveTeamModalConfirmation = ({ selectedRooms, onConfirm, onCancel, onClose }: LeaveTeamModalConfirmationProps): ReactElement => {\nconst LeaveTeamModalConfirmation = ({ selectedRooms, onConfirm, onCancel, onClose }: LeaveTeamModalConfirmationProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='danger'\n\t\t\ttitle={t('Confirmation')}"
        },
        "depth_rank": 13
    },
    {
        "file": "DeleteTeamConfirmation.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/DeleteTeamConfirmation.tsx",
        "code": {
            "roomIds": "const DeleteTeamConfirmation = ({ deletedRooms, keptRooms, onConfirm, onReturn, onCancel }: DeleteTeamConfirmationProps) => {\nconst DeleteTeamConfirmation = ({ deletedRooms, keptRooms, onConfirm, onReturn, onCancel }: DeleteTeamConfirmationProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst roomIds = Object.values(deletedRooms).map(({ _id }) => _id);\n\tconst roomIds = Object.values(deletedRooms).map(({ _id }) => _id);"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomLinkList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/RoomLinkList.tsx",
        "code": {
            "roomLink": "const RoomLinkList = ({ rooms }: { rooms: { [key: string]: Serialized<IRoom> } }) => {\nconst RoomLinkList = ({ rooms }: { rooms: { [key: string]: Serialized<IRoom> } }) => {\n\tconst roomsArray = Object.values(rooms);\n\tconst roomsArray = Object.values(rooms);\n\n\treturn (\n\t\t<>\n\t\t\t{roomsArray.map((room, i) => {\n\t\t\t\tconst roomLink = roomCoordinator.getRouteLink(room.t, room);\n\t\t\t\tconst roomLink = roomCoordinator.getRouteLink(room.t, room);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment key={i}>"
        },
        "depth_rank": 12
    },
    {
        "file": "DeleteTeamModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/DeleteTeamModal.tsx",
        "code": {
            "STEPS": "const STEPS = { LIST_ROOMS: 'LIST_ROOMS', CONFIRM_DELETE: 'CONFIRM_DELETE' };\nconst STEPS = { LIST_ROOMS: 'LIST_ROOMS', CONFIRM_DELETE: 'CONFIRM_DELETE' };",
            "hasRooms": "const DeleteTeamModal = ({ onCancel, onConfirm, rooms }: DeleteTeamModalProps) => {\nconst DeleteTeamModal = ({ onCancel, onConfirm, rooms }: DeleteTeamModalProps) => {\n\tconst hasRooms = rooms && rooms.length > 0;\n\tconst hasRooms = rooms && rooms.length > 0;\n\n\tconst [step, setStep] = useState(hasRooms ? STEPS.LIST_ROOMS : STEPS.CONFIRM_DELETE);\n\tconst [step, setStep] = useState(hasRooms ? STEPS.LIST_ROOMS : STEPS.CONFIRM_DELETE);\n\tconst [deletedRooms, setDeletedRooms] = useState<{ [key: string]: Serialized<IRoom> }>({});\n\tconst [deletedRooms, setDeletedRooms] = useState<{ [key: string]: Serialized<IRoom> }>({});",
            "onChangeRoomSelection": "\tconst onChangeRoomSelection = useMutableCallback((room) => {\n\tconst onChangeRoomSelection = useMutableCallback((room) => {\n\t\tif (deletedRooms[room._id]) {\n\t\t\tsetDeletedRooms((deletedRooms) => {\n\t\t\t\tdelete deletedRooms[room._id];\n\t\t\t\treturn { ...deletedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(deletedRooms).filter(Boolean).length === 0) {\n\t\t\treturn setDeletedRooms(Object.fromEntries(rooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetDeletedRooms({});"
        },
        "depth_rank": 12
    },
    {
        "file": "DeleteTeamModalWithRooms.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/DeleteTeamModalWithRooms.tsx",
        "code": {
            "query": "const DeleteTeamModalWithRooms = ({ teamId, onConfirm, onCancel }: DeleteTeamModalWithRoomsProps): ReactElement => {\nconst DeleteTeamModalWithRooms = ({ teamId, onConfirm, onCancel }: DeleteTeamModalWithRoomsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst query = useMemo(() => ({ teamId }), [teamId]);\n\tconst query = useMemo(() => ({ teamId }), [teamId]);",
            "getTeamsListRooms": "\tconst getTeamsListRooms = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst getTeamsListRooms = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst { data, isLoading } = useQuery(['getTeamsListRooms', query], async () => getTeamsListRooms(query));\n\tconst { data, isLoading } = useQuery(['getTeamsListRooms', query], async () => getTeamsListRooms(query));"
        },
        "depth_rank": 12
    },
    {
        "file": "DeleteTeamChannels.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/DeleteTeamChannels.tsx",
        "code": {
            "DeleteTeamChannels": "const DeleteTeamChannels = ({\nconst DeleteTeamChannels = ({\n\trooms,\n\tonCancel,\n\tselectedRooms,\n\tonToggleAllRooms,\n\tonConfirm,\n\tonChangeRoomSelection,\n}: DeleteTeamChannelsProps) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Teams_about_the_channels')}"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelDeletionTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/ChannelDeletionTable/ChannelDeletionTableRow.tsx",
        "code": {
            "ChannelDeletionTableRow": "const ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\nconst ChannelDeletionTableRow = ({ room, onChange, selected }: ChannelDeletionTableRowProps) => {\n\tconst { name, fname, usersCount } = room;\n\tconst { name, fname, usersCount } = room;",
            "handleChange": "\tconst handleChange = useMutableCallback(() => onChange(room));\n\tconst handleChange = useMutableCallback(() => onChange(room));\n\n\treturn (\n\t\t<GenericTableRow action>\n\t\t\t<GenericTableCell maxWidth='x300' withTruncatedText>\n\t\t\t\t<CheckBox checked={selected} onChange={handleChange} />"
        },
        "depth_rank": 13
    },
    {
        "file": "ChannelDeletionTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/info/DeleteTeam/ChannelDeletionTable/ChannelDeletionTable.tsx",
        "code": {
            "t": "const ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\nconst ChannelDeletionTable = ({ rooms, onChangeRoomSelection, selectedRooms, onToggleAllRooms }: ChannelDeletationTable) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'usersCount'>('name');",
            "headers": "\tconst sortedRooms = getSortedChannels();\n\tconst sortedRooms = getSortedChannels();\n\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst checked = rooms.length === selectedRoomsLength;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\tconst indeterminate = rooms.length > selectedRoomsLength && selectedRoomsLength > 0;\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' sort='name' onClick={setSort} direction={sortDirection} active={sortBy === 'name'}>"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomActions.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/RoomActions.js",
        "code": {
            "handleClose": "const useReactModal = (Component, props) => {\nconst useReactModal = (Component, props) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback(() => {\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} {...props} />);",
            "removeRoomEndpoint": "\tconst updateRoomEndpoint = useEndpointAction('POST', '/v1/teams.updateRoom');\n\tconst updateRoomEndpoint = useEndpointAction('POST', '/v1/teams.updateRoom');\n\tconst removeRoomEndpoint = useEndpointAction('POST', '/v1/teams.removeRoom', { successMessage: t('Room_has_been_removed') });\n\tconst removeRoomEndpoint = useEndpointAction('POST', '/v1/teams.removeRoom', { successMessage: t('Room_has_been_removed') });",
            "RemoveFromTeamAction": "\tconst deleteRoomEndpoint = useEndpointAction('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete', {\n\tconst deleteRoomEndpoint = useEndpointAction('POST', room.t === 'c' ? '/v1/channels.delete' : '/v1/groups.delete', {\n\t\tsuccessMessage: t('Room_has_been_deleted'),\n\t});\n\n\tconst RemoveFromTeamAction = useReactModal(ConfirmationModal, {\n\tconst RemoveFromTeamAction = useReactModal(ConfirmationModal, {\n\t\tonConfirmAction: async () => {\n\t\t\ttry {\n\t\t\t\tawait removeRoomEndpoint({ teamId: room.teamId, roomId: room._id });",
            "DeleteChannelAction": "\tconst DeleteChannelAction = useReactModal(ConfirmationModal, {\n\tconst DeleteChannelAction = useReactModal(ConfirmationModal, {\n\t\tonConfirmAction: async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteRoomEndpoint({ roomId: room._id });"
        },
        "depth_rank": 11
    },
    {
        "file": "TeamsChannels.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/TeamsChannels.tsx",
        "code": {
            "handleClose": "const useReactModal = (Component: FC<any>, teamId: string, reload: () => void) => {\nconst useReactModal = (Component: FC<any>, teamId: string, reload: () => void) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback((e: SyntheticEvent) => {\n\t\te.preventDefault();\n\n\t\tconst handleClose = () => {\n\t\tconst handleClose = () => {\n\t\t\tsetModal(null);\n\t\t\treload();\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} teamId={teamId} />);",
            "room": "const TeamsChannels = () => {\nconst TeamsChannels = () => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { teamId } = room;\n\tconst { teamId } = room;",
            "debouncedText": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst debouncedText = useDebouncedValue(text, 800);\n\tconst debouncedText = useDebouncedValue(text, 800);\n\n\tconst { teamsChannelList, loadMoreItems, reload } = useTeamsChannelList(\n\tconst { teamsChannelList, loadMoreItems, reload } = useTeamsChannelList(",
            "handleBack": "\tconst addExisting = useReactModal(AddExistingModal, teamId, reload);\n\tconst addExisting = useReactModal(AddExistingModal, teamId, reload);\n\tconst createNew = useReactModal(CreateChannelWithData, teamId, reload);\n\tconst createNew = useReactModal(CreateChannelWithData, teamId, reload);\n\n\tconst goToRoom = useCallback((room) => roomCoordinator.openRouteLink(room.t, room), []);\n\tconst goToRoom = useCallback((room) => roomCoordinator.openRouteLink(room.t, room), []);\n\tconst handleBack = useCallback(() => setState({}), [setState]);\n\tconst handleBack = useCallback(() => setState({}), [setState]);",
            "viewRoom": "\tconst viewRoom = useMutableCallback((room: IRoom) => {\n\tconst viewRoom = useMutableCallback((room: IRoom) => {\n\t\tgoToRoom(room);\n\t});\n\n\tif (state?.tab === 'RoomInfo' && state?.rid) {\n\t\treturn <RoomInfo onClickBack={handleBack} onEnterRoom={goToRoom} resetState={() => setState({})} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "BaseTeamsChannels.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/BaseTeamsChannels.tsx",
        "code": {
            "BaseTeamsChannels": "const BaseTeamsChannels = ({\nconst BaseTeamsChannels = ({\n\tloading,\n\tchannels = [],\n\ttext,\n\ttype,\n\tsetText,\n\tsetType,\n\tonClickClose,\n\tonClickAddExisting,\n\tonClickCreateNew,\n\ttotal,\n\tloadMoreItems,\n\tonClickView,\n\treload,\n}: BaseTeamsChannelsProps) => {",
            "loadMoreChannels": "\tconst loadMoreChannels = useDebouncedCallback(\n\tconst loadMoreChannels = useDebouncedCallback(\n\t\t() => {\n\t\t\tif (channels.length >= total) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlm(channels.length);\n\t\t},\n\t\t300,\n\t\t[lm, channels],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='hash' />\n\t\t\t\t<ContextualbarTitle>{t('Team_Channels')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "useTeamsChannelList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts",
        "code": {
            "fetchData": "\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, webRtcCallStartTime, ...room }) => ({\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),"
        },
        "depth_rank": 12
    },
    {
        "file": "AddExistingModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/AddExistingModal/AddExistingModal.tsx",
        "code": {
            "addRoomEndpoint": "const AddExistingModal = ({ onClose, teamId }: AddExistingModalProps) => {\nconst AddExistingModal = ({ onClose, teamId }: AddExistingModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst addRoomEndpoint = useEndpoint('POST', '/v1/teams.addRooms');\n\tconst addRoomEndpoint = useEndpoint('POST', '/v1/teams.addRooms');\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\tformState: { isDirty },",
            "handleAddChannels": "\tconst handleAddChannels = useCallback(\n\tconst handleAddChannels = useCallback(\n\t\tasync ({ rooms }) => {\n\t\t\ttry {\n\t\t\t\tawait addRoomEndpoint({\n\t\t\t\t\trooms,\n\t\t\t\t\tteamId,\n\t\t\t\t});\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Channels_added') });"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomsAvailableForTeamsAutoComplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/AddExistingModal/RoomsAvailableForTeamsAutoComplete.tsx",
        "code": {
            "roomsAvailableForTeamsAutoCompleteEndpoint": "const RoomsAvailableForTeamsAutoComplete = ({ value, onChange, ...props }: RoomsAvailableForTeamsAutoCompleteProps) => {\nconst RoomsAvailableForTeamsAutoComplete = ({ value, onChange, ...props }: RoomsAvailableForTeamsAutoCompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\n\tconst roomsAvailableForTeamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/rooms.autocomplete.availableForTeams');\n\tconst roomsAvailableForTeamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/rooms.autocomplete.availableForTeams');\n\n\tconst { data } = useQuery(\n\tconst { data } = useQuery("
        },
        "depth_rank": 12
    },
    {
        "file": "TeamAutocomplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/TeamAutocomplete/TeamAutocomplete.tsx",
        "code": {
            "teamsAutoCompleteEndpoint": "const TeamAutocomplete = ({ value, onChange, ...props }: TeamAutocompleteProps) => {\nconst TeamAutocomplete = ({ value, onChange, ...props }: TeamAutocompleteProps) => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst teamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/teams.autocomplete');\n\tconst teamsAutoCompleteEndpoint = useEndpoint('GET', '/v1/teams.autocomplete');\n\tconst { data, isSuccess } = useQuery(['teamsAutoComplete', filter], async () => teamsAutoCompleteEndpoint({ name: filter }));\n\tconst { data, isSuccess } = useQuery(['teamsAutoComplete', filter], async () => teamsAutoCompleteEndpoint({ name: filter }));",
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tisSuccess\n\t\t\t\t? data?.teams.map(({ name, teamId, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: teamId as string,\n\t\t\t\t\t\tlabel: { name, avatarETag, type: t, _id },"
        },
        "depth_rank": 11
    },
    {
        "file": "Avatar.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/TeamAutocomplete/Avatar.js",
        "code": {
            "Avatar": "const Avatar = ({ _id, type, avatarETag, ...props }) => (\nconst Avatar = ({ _id, type, avatarETag, ...props }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "RemoveUsersModal.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/RemoveUsersModal.js",
        "code": {
            "initialData": "const initialData = { user: { username: '' } };\nconst initialData = { user: { username: '' } };",
            "t": "const RemoveUsersModal = ({ teamId, userId, onClose, onCancel, onConfirm }) => {\nconst RemoveUsersModal = ({ teamId, userId, onClose, onCancel, onConfirm }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { value, phase } = useEndpointData('/v1/teams.listRoomsOfUser', { params: useMemo(() => ({ teamId, userId }), [teamId, userId]) });\n\tconst { value, phase } = useEndpointData('/v1/teams.listRoomsOfUser', { params: useMemo(() => ({ teamId, userId }), [teamId, userId]) });",
            "userDataFetch": "\tconst userDataFetch = useEndpointData('/v1/users.info', { params: useMemo(() => ({ userId }), [userId]), initialValue: initialData });\n\tconst userDataFetch = useEndpointData('/v1/users.info', { params: useMemo(() => ({ userId }), [userId]), initialValue: initialData });"
        },
        "depth_rank": 12
    },
    {
        "file": "BaseRemoveUsersModal.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/BaseRemoveUsersModal.js",
        "code": {
            "BaseRemoveUsersModal": "const STEPS = {\nconst STEPS = {\n\tLIST_ROOMS: 'LIST_ROOMS',\n\tCONFIRM_DELETE: 'CONFIRM_DELETE',\n};\n\nconst BaseRemoveUsersModal = ({\nconst BaseRemoveUsersModal = ({\n\tonClose,\n\tonCancel,\n\tonConfirm,\n\trooms,\n\tcurrentStep = rooms?.length === 0 ? STEPS.CONFIRM_DELETE : STEPS.LIST_ROOMS,\n\tusername,\n}) => {",
            "onChangeRoomSelection": "\tconst onChangeRoomSelection = useCallback((room) => {\n\tconst onChangeRoomSelection = useCallback((room) => {\n\t\tsetSelectedRooms((selectedRooms) => {\n\t\t\tif (selectedRooms[room._id]) {\n\t\t\t\tdelete selectedRooms[room._id];\n\t\t\t\treturn { ...selectedRooms };",
            "onToggleAllRooms": "\tconst onToggleAllRooms = useMutableCallback(() => {\n\tconst onToggleAllRooms = useMutableCallback(() => {\n\t\tif (Object.values(selectedRooms).filter(Boolean).length === 0) {\n\t\t\treturn setSelectedRooms(Object.fromEntries(eligibleRooms.map((room) => [room._id, room])));\n\t\t}\n\t\tsetSelectedRooms({});"
        },
        "depth_rank": 12
    },
    {
        "file": "RemoveUsersFirstStep.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/members/RemoveUsersModal/RemoveUsersFirstStep.js",
        "code": {
            "RemoveUsersFirstStep": "const RemoveUsersFirstStep = ({\nconst RemoveUsersFirstStep = ({\n\tonClose,\n\tonCancel,\n\tonConfirm,\n\tusername,\n\tresults,\n\trooms,\n\t// params,\n\t// onChangeParams,\n\tonToggleAllRooms,\n\tonChangeRoomSelection,\n\tselectedRooms,\n\t// onChangeParams={(...args) => console.log(args)}",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Teams_removing_member')}"
        },
        "depth_rank": 12
    },
    {
        "file": "MarketplaceRouter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/MarketplaceRouter.tsx",
        "code": {
            "initialize": "\t\tconst initialize = async () => {\n\t\tconst initialize = async () => {\n\t\t\t// The currentContext === 'all' verification is for users who bookmarked\n\t\t\t// the old marketplace\n\t\t\t// TODO: Remove the all verification in the future;\n\t\t\tif (currentContext === 'all') {\n\t\t\t\tmarketplaceRoute.replace({ context: 'explore', page: 'list' });"
        },
        "depth_rank": 9
    },
    {
        "file": "AppPermissionsReviewModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppPermissionsReviewModal.tsx",
        "code": {
            "t": "const AppPermissionsReviewModal: FC<AppPermissionsReviewModalProps> = ({ appPermissions, onCancel, onConfirm }) => {\nconst AppPermissionsReviewModal: FC<AppPermissionsReviewModalProps> = ({ appPermissions, onCancel, onConfirm }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Apps_Permissions_Review_Modal_Title')}"
        },
        "depth_rank": 9
    },
    {
        "file": "MarketplaceSidebar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/MarketplaceSidebar.tsx",
        "code": {
            "t": "const MarketplaceSidebar = (): ReactElement => {\nconst MarketplaceSidebar = (): ReactElement => {\n\tconst items = useSyncExternalStore(subscribeToMarketplaceSidebarItems, getMarketplaceSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToMarketplaceSidebarItems, getMarketplaceSidebarItems);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Marketplace')} />"
        },
        "depth_rank": 9
    },
    {
        "file": "AppMenu.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppMenu.js",
        "code": {
            "button": "\tconst appCountQuery = useAppsCountQuery(context);\n\tconst appCountQuery = useAppsCountQuery(context);\n\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\tconst openIncompatibleModal = useOpenIncompatibleModal();\n\n\tconst button = appButtonProps({ ...app, isAdminUser });\n\tconst button = appButtonProps({ ...app, isAdminUser });",
            "installationSuccess": "\tconst action = button?.action || '';\n\tconst action = button?.action || '';\n\n\tconst closeModal = useCallback(() => {\n\tconst closeModal = useCallback(() => {\n\t\tsetModal(null);\n\t\tsetLoading(false);\n\t}, [setModal, setLoading]);\n\n\tconst installationSuccess = useCallback(\n\tconst installationSuccess = useCallback(\n\t\tasync (action, permissionsGranted) => {\n\t\t\tif (action === 'purchase') {\n\t\t\t\tsetPurchased(true);\n\t\t\t}\n\n\t\t\tif (action === 'request') {\n\t\t\t\tsetRequestedEndUser(true);\n\t\t\t} else {",
            "confirm": "\t\t\tconst confirm = async () => {\n\t\t\tconst confirm = async () => {\n\t\t\t\tawait handleSubscription();\n\t\t\t};\n\n\t\t\tsetModal(\n\t\t\t\t<WarningModal\n\t\t\t\t\tclose={closeModal}",
            "handleEnable": "\tconst handleEnable = useCallback(async () => {\n\tconst handleEnable = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { status } = await setAppStatus({ status: 'manually_enabled' });\n\t\t\tconst { status } = await setAppStatus({ status: 'manually_enabled' });",
            "uninstall": "\tconst handleUninstall = useCallback(() => {\n\tconst handleUninstall = useCallback(() => {\n\t\tconst uninstall = async () => {\n\t\tconst uninstall = async () => {\n\t\t\tcloseModal();\n\t\t\ttry {\n\t\t\t\tconst { success } = await uninstallApp();\n\t\t\t\tconst { success } = await uninstallApp();",
            "bothAppStatusOptions": "\tconst handleUpdate = useCallback(async () => {\n\tconst handleUpdate = useCallback(async () => {\n\t\tsetLoading(true);\n\n\t\tif (app?.versionIncompatible) {\n\t\t\topenIncompatibleModal(app, 'update', closeModal);\n\t\t\treturn;\n\t\t}\n\n\t\topenPermissionModal();\n\t}, [app, openPermissionModal, openIncompatibleModal, closeModal]);\n\n\tconst canUpdate = app.installed && app.version && app.marketplaceVersion && semver.lt(app.version, app.marketplaceVersion);\n\tconst canUpdate = app.installed && app.version && app.marketplaceVersion && semver.lt(app.version, app.marketplaceVersion);\n\n\tconst menuOptions = useMemo(() => {\n\tconst menuOptions = useMemo(() => {\n\t\tconst bothAppStatusOptions = {\n\t\tconst bothAppStatusOptions = {\n\t\t\t...(canAppBeSubscribed &&\n\t\t\t\tisSubscribed &&\n\t\t\t\tisAdminUser && {\n\t\t\t\t\tsubscribe: {\n\t\t\t\t\t\tlabel: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Icon name={incompatibleIconName(app, 'subscribe')} size='x16' mie={4} />"
        },
        "depth_rank": 9
    },
    {
        "file": "BundleChips.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/BundleChips.tsx",
        "code": {
            "handledName": "const BundleChips = ({ bundledIn }: BundleChipsProps): ReactElement => {\nconst BundleChips = ({ bundledIn }: BundleChipsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handlePlanName = (label: string): string => {\n\tconst handlePlanName = (label: string): string => {\n\t\tif (label === 'Enterprise') {\n\t\t\treturn 'Premium';\n\t\t}\n\t\treturn label;\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{bundledIn.map(({ bundleId, bundleName }) => {\n\t\t\t\t// this is a workaround to not change plan name for versions lower than 6.5.0\n\t\t\t\tconst handledName = handlePlanName(bundleName);\n\t\t\t\tconst handledName = handlePlanName(bundleName);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Tag\n\t\t\t\t\t\tkey={bundleId}"
        },
        "depth_rank": 9
    },
    {
        "file": "AppUpdateModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppUpdateModal.tsx",
        "code": {
            "handleConfirmButtonClick": "const AppUpdateModal: FC<AppUpdateModalProps> = ({ confirm, cancel, ...props }) => {\nconst AppUpdateModal: FC<AppUpdateModalProps> = ({ confirm, cancel, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCloseButtonClick = (): void => {\n\tconst handleCloseButtonClick = (): void => {\n\t\tcancel();\n\t};\n\n\tconst handleCancelButtonClick = (): void => {\n\tconst handleCancelButtonClick = (): void => {\n\t\tcancel();\n\t};\n\n\tconst handleConfirmButtonClick = (): void => {\n\tconst handleConfirmButtonClick = (): void => {\n\t\tconfirm();\n\t};\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "UnlimitedAppsUpsellModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/UnlimitedAppsUpsellModal.tsx",
        "code": {
            "t": "const UnlimitedAppsUpsellModal = ({ onClose }: { onClose: () => void }) => {\nconst UnlimitedAppsUpsellModal = ({ onClose }: { onClose: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { handleManageSubscription, cloudWorkspaceHadTrial } = useUpsellActions();\n\tconst { handleManageSubscription, cloudWorkspaceHadTrial } = useUpsellActions();"
        },
        "depth_rank": 9
    },
    {
        "file": "IframeModal.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/IframeModal.js",
        "code": {
            "iframeMsgListener": "const iframeMsgListener = (confirm, cancel) => (e) => {\nconst iframeMsgListener = (confirm, cancel) => (e) => {\n\tlet data;\n\ttry {\n\t\tdata = JSON.parse(e.data);\n\t} catch (e) {",
            "listener": "const IframeModal = ({ url, confirm, cancel, wrapperHeight = 'x360', ...props }) => {\nconst IframeModal = ({ url, confirm, cancel, wrapperHeight = 'x360', ...props }) => {\n\tuseEffect(() => {\n\t\tconst listener = iframeMsgListener(confirm, cancel);\n\t\tconst listener = iframeMsgListener(confirm, cancel);\n\n\t\twindow.addEventListener('message', listener);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('message', listener);\n\t\t};\n\t}, [confirm, cancel]);\n\n\treturn (\n\t\t<Modal height={wrapperHeight} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "AppInstallPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppInstallPage.tsx",
        "code": {
            "queryUrl": "const PLACEHOLDER_URL = 'https://rocket.chat/apps/package.zip';\nconst PLACEHOLDER_URL = 'https://rocket.chat/apps/package.zip';\n\nconst AppInstallPage = () => {\nconst AppInstallPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst queryUrl = useSearchParameter('url');\n\tconst queryUrl = useSearchParameter('url');\n\n\tconst { control, setValue, watch } = useForm<{ file: File; url: string }>({ defaultValues: { url: queryUrl || '' } });\n\tconst { control, setValue, watch } = useForm<{ file: File; url: string }>({ defaultValues: { url: queryUrl || '' } });",
            "fileField": "\tconst [handleUploadButtonClick] = useSingleFileInput((value) => setValue('file', value), 'app');\n\tconst [handleUploadButtonClick] = useSingleFileInput((value) => setValue('file', value), 'app');\n\n\tconst handleCancel = useCallback(() => {\n\tconst handleCancel = useCallback(() => {\n\t\trouter.navigate({\n\t\t\tname: 'marketplace',\n\t\t\tparams: {\n\t\t\t\tcontext: 'private',\n\t\t\t\tpage: 'list',\n\t\t\t},\n\t\t});\n\t}, [router]);\n\n\tconst urlField = useUniqueId();\n\tconst urlField = useUniqueId();\n\tconst fileField = useUniqueId();\n\tconst fileField = useUniqueId();\n\n\treturn (\n\t\t<Page flexDirection='column'>\n\t\t\t<PageHeader title={t('App_Installation')} />"
        },
        "depth_rank": 9
    },
    {
        "file": "useOpenIncompatibleModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useOpenIncompatibleModal.tsx",
        "code": {
            "incompatibleData": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useCallback(\n\t\tasync (app, actionName, cancelAction) => {\n\t\t\tconst handleCancel = () => {\n\t\t\tconst handleCancel = () => {\n\t\t\t\tsetModal(null);\n\t\t\t\tcancelAction();\n\t\t\t};\n\n\t\t\tconst handleConfirm = () => {\n\t\t\tconst handleConfirm = () => {\n\t\t\t\tsetModal(null);\n\t\t\t\tcancelAction();\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst incompatibleData = await AppClientOrchestratorInstance.buildIncompatibleExternalUrl(\n\t\t\t\tconst incompatibleData = await AppClientOrchestratorInstance.buildIncompatibleExternalUrl(\n\t\t\t\t\tapp.id,\n\t\t\t\t\tapp.marketplaceVersion,\n\t\t\t\t\tactionName,\n\t\t\t\t);\n\t\t\t\tsetModal(<IframeModal url={incompatibleData.url} cancel={handleCancel} confirm={handleConfirm} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "useOpenAppPermissionsReviewModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useOpenAppPermissionsReviewModal.tsx",
        "code": {
            "handleCancel": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useCallback(() => {\n\t\tconst handleCancel = () => {\n\t\tconst handleCancel = () => {\n\t\t\tsetModal(null);\n\t\t\tonCancel();\n\t\t};\n\n\t\tconst handleConfirm: typeof onConfirm = (appPermissions) => {\n\t\tconst handleConfirm: typeof onConfirm = (appPermissions) => {\n\t\t\tsetModal(null);\n\t\t\tonConfirm(appPermissions);\n\t\t};\n\n\t\treturn setModal(<AppPermissionsReviewModal appPermissions={app.permissions} onCancel={handleCancel} onConfirm={handleConfirm} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "useRadioToggle.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useRadioToggle.ts",
        "code": {
            "onSelected": "\tconst onSelected = useCallback(\n\tconst onSelected = useCallback(\n\t\t(item: RadioDropDownItem) => {\n\t\t\tsetData((prevState) => {\n\t\t\t\tprevState.items.forEach((currentItem) => {\n\t\t\t\t\tcurrentItem.checked = currentItem === item;\n\t\t\t\t});\n\t\t\t\treturn { ...prevState };"
        },
        "depth_rank": 10
    },
    {
        "file": "useLogs.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useLogs.ts",
        "code": {
            "logs": "\tconst logs = useEndpoint('GET', '/apps/:id/logs', { id: appId });\n\tconst logs = useEndpoint('GET', '/apps/:id/logs', { id: appId });"
        },
        "depth_rank": 10
    },
    {
        "file": "useCategoryToggle.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useCategoryToggle.ts",
        "code": {
            "allCategoriesOption": "\t\t\t\tconst allCategoriesOption = categories.find(({ id }) => id === 'all');\n\t\t\t\tconst allCategoriesOption = categories.find(({ id }) => id === 'all');",
            "toggledCategory": "\t\t\t\tconst toggledCategory = categories.find(({ id }) => id === item.id);\n\t\t\t\tconst toggledCategory = categories.find(({ id }) => id === item.id);"
        },
        "depth_rank": 10
    },
    {
        "file": "useCategories.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useCategories.ts",
        "code": {
            "selectedCategories": "\t\tconst fetchCategoriesWrapper = async (): Promise<void> => {\n\t\tconst fetchCategoriesWrapper = async (): Promise<void> => {\n\t\t\tawait fetchCategories();\n\t\t};\n\n\t\tfetchCategoriesWrapper();\n\t}, [fetchCategories]);\n\n\tconst onSelected = useCategoryToggle(setCategories);\n\tconst onSelected = useCategoryToggle(setCategories);\n\tconst flatCategories = useCategoryFlatList(categories);\n\tconst flatCategories = useCategoryFlatList(categories);\n\tconst originalSize = useCategoryFlatList(categories).length;\n\tconst originalSize = useCategoryFlatList(categories).length;\n\n\tconst selectedCategories = useMemo(\n\tconst selectedCategories = useMemo(\n\t\t() => flatCategories.filter((category) => Boolean(category.checked)),\n\t\t[flatCategories],\n\t) as (CategoryDropdownItem & { checked: true })[];"
        },
        "depth_rank": 10
    },
    {
        "file": "useFilteredApps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useFilteredApps.ts",
        "code": {
            "value": "\tconst value = useMemo(() => {\n\tconst value = useMemo(() => {\n\t\tif (appsData.value === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { apps } = appsData.value;\n\t\tconst { apps } = appsData.value;",
            "filtered": "\t\tconst pipeAppsFilter =\n\t\tconst pipeAppsFilter =\n\t\t\t(...functions: appsFilterFunction[]) =>\n\t\t\t(...functions: appsFilterFunction[]) =>\n\t\t\t(initialValue: App[]) =>\n\t\t\t\tfunctions.reduce((currentAppsList, currentFilterFunction) => currentFilterFunction(currentAppsList), initialValue);\n\t\t\t\tfunctions.reduce((currentAppsList, currentFilterFunction) => currentFilterFunction(currentAppsList), initialValue);\n\n\t\tconst filtered = pipeAppsFilter(\n\t\tconst filtered = pipeAppsFilter(\n\t\t\tcontext ? filterByContext[context] : fallback,\n\t\t\tfilterByPurchaseType[purchaseType],\n\t\t\tfilterByStatus[status],\n\t\t\tcategories.length ? (apps: App[]) => apps.filter((app) => filterAppsByCategories(app, categories)) : fallback,\n\t\t\ttext ? (apps: App[]) => apps.filter(({ name }) => filterAppsByText(name, text)) : fallback,"
        },
        "depth_rank": 10
    },
    {
        "file": "useInstallApp.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useInstallApp.tsx",
        "code": {
            "downloadPrivateAppFromUrl": "\tconst uploadAppEndpoint = useUpload('/apps');\n\tconst uploadAppEndpoint = useUpload('/apps');\n\tconst uploadUpdateEndpoint = useUpload('/apps/update');\n\tconst uploadUpdateEndpoint = useUpload('/apps/update');\n\n\t// TODO: This function should not be called in a next major version, it will be changed by an endpoint deprecation.\n\t// TODO: This function should not be called in a next major version, it will be changed by an endpoint deprecation.\n\tconst downloadPrivateAppFromUrl = useEndpoint('POST', '/apps');\n\tconst downloadPrivateAppFromUrl = useEndpoint('POST', '/apps');\n\n\tconst [isInstalling, setInstalling] = useState(false);\n\tconst [isInstalling, setInstalling] = useState(false);\n\n\tconst { mutate: sendFile } = useMutation(\n\tconst { mutate: sendFile } = useMutation(",
            "handleAppPermissionsReview": "\tconst handleAppPermissionsReview = async (permissions: AppPermission[], appFile: File, appId?: string) => {\n\tconst handleAppPermissionsReview = async (permissions: AppPermission[], appFile: File, appId?: string) => {\n\t\tsetModal(\n\t\t\t<AppPermissionsReviewModal\n\t\t\t\tappPermissions={permissions}",
            "isInstalled": "\tconst uploadFile = async (appFile: File, { id, permissions }: { id: string; permissions: AppPermission[] }) => {\n\tconst uploadFile = async (appFile: File, { id, permissions }: { id: string; permissions: AppPermission[] }) => {\n\t\tconst isInstalled = await isAppInstalled(id);\n\t\tconst isInstalled = await isAppInstalled(id);\n\n\t\tif (isInstalled) {\n\t\t\treturn setModal(<AppUpdateModal cancel={cancelAction} confirm={() => handleAppPermissionsReview(permissions, appFile, id)} />);",
            "getAppFile": "\tconst getAppFile = async (): Promise<File | undefined> => {\n\tconst getAppFile = async (): Promise<File | undefined> => {\n\t\ttry {\n\t\t\tconst { buff } = (await downloadPrivateAppFromUrl({ url, downloadOnly: true })) as { buff: { data: ArrayLike<number> } };\n\t\t\tconst { buff } = (await downloadPrivateAppFromUrl({ url, downloadOnly: true })) as { buff: { data: ArrayLike<number> } };"
        },
        "depth_rank": 10
    },
    {
        "file": "useAppInstallationHandler.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useAppInstallationHandler.tsx",
        "code": {
            "openPermissionModal": "\tconst closeModal = useCallback(() => {\n\tconst closeModal = useCallback(() => {\n\t\tsetModal(null);\n\t\tonDismiss();\n\t}, [onDismiss, setModal]);\n\n\tconst success = useCallback(\n\tconst success = useCallback(\n\t\t(appPermissions?: App['permissions']) => {\n\t\t\tsetModal(null);\n\t\t\tonSuccess(action, appPermissions);\n\t\t},\n\t\t[action, onSuccess, setModal],\n\t);\n\n\tconst openPermissionModal = useOpenAppPermissionsReviewModal({ app, onCancel: closeModal, onConfirm: success });\n\tconst openPermissionModal = useOpenAppPermissionsReviewModal({ app, onCancel: closeModal, onConfirm: success });",
            "data": "\t\t\t\tconst data = await AppClientOrchestratorInstance.buildExternalAppRequest(app.id);\n\t\t\t\tconst data = await AppClientOrchestratorInstance.buildExternalAppRequest(app.id);\n\t\t\t\tsetModal(<IframeModal url={data.url} wrapperHeight='x460' cancel={onDismiss} confirm={requestConfirmAction} />);",
            "requestConfirmAction": "\t\t\tconst requestConfirmAction = (postMessage: Record<string, unknown>) => {\n\t\t\tconst requestConfirmAction = (postMessage: Record<string, unknown>) => {\n\t\t\t\tsetModal(null);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: 'App request submitted' });"
        },
        "depth_rank": 10
    },
    {
        "file": "useAppInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/hooks/useAppInfo.ts",
        "code": {
            "getBundledInApp": "const getBundledInApp = async (app: App): Promise<App['bundledIn']> => {\nconst getBundledInApp = async (app: App): Promise<App['bundledIn']> => {\n\tconst { bundledIn = [] } = app;\n\tconst { bundledIn = [] } = app;",
            "getSettings": "\tconst [appData, setAppData] = useState<AppInfo>();\n\tconst [appData, setAppData] = useState<AppInfo>();\n\n\tconst getSettings = useEndpoint('GET', '/apps/:id/settings', { id: appId });\n\tconst getSettings = useEndpoint('GET', '/apps/:id/settings', { id: appId });",
            "getScreenshots": "\tconst getScreenshots = useEndpoint('GET', '/apps/:id/screenshots', { id: appId });\n\tconst getScreenshots = useEndpoint('GET', '/apps/:id/screenshots', { id: appId });",
            "getApis": "\tconst getApis = useEndpoint('GET', '/apps/:id/apis', { id: appId });\n\tconst getApis = useEndpoint('GET', '/apps/:id/apis', { id: appId });",
            "getBundledIn": "\tconst getBundledIn = useEndpoint('GET', '/apps/:id', { id: appId });\n\tconst getBundledIn = useEndpoint('GET', '/apps/:id', { id: appId });"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsFilters.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsFilters.tsx",
        "code": {
            "AppsFilters": "const AppsFilters = ({\nconst AppsFilters = ({\n\tsetText,\n\tfreePaidFilterStructure,\n\tfreePaidFilterOnSelected,\n\tcategories,\n\tselectedCategories,\n\tonSelected,\n\tsortFilterStructure,\n\tsortFilterOnSelected,\n\tcategoryTagList,\n\tstatusFilterStructure,\n\tstatusFilterOnSelected,\n\tcontext,\n}: AppsFiltersProps): ReactElement => {",
            "fixFiltersSize": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isPrivateAppsPage = context === 'private';\n\tconst isPrivateAppsPage = context === 'private';\n\tconst breakpoints = useBreakpoints();\n\tconst breakpoints = useBreakpoints();\n\n\tconst appsSearchPlaceholders: { [key: string]: string } = {\n\tconst appsSearchPlaceholders: { [key: string]: string } = {\n\t\texplore: t('Search_Apps'),\n\t\tenterprise: t('Search_Premium_Apps'),\n\t\tinstalled: t('Search_Installed_Apps'),\n\t\trequested: t('Search_Requested_Apps'),\n\t\tprivate: t('Search_Private_apps'),\n\t};\n\n\tconst fixFiltersSize = breakpoints.includes('lg') ? { maxWidth: 'x200', minWidth: 'x200' } : null;\n\tconst fixFiltersSize = breakpoints.includes('lg') ? { maxWidth: 'x200', minWidth: 'x200' } : null;"
        },
        "depth_rank": 10
    },
    {
        "file": "NoAppRequestsEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoAppRequestsEmptyState.tsx",
        "code": {
            "t": "const NoAppRequestsEmptyState = () => {\nconst NoAppRequestsEmptyState = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='24px'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='cube' />\n\t\t\t\t<StatesTitle>{t('No_requested_apps')}</StatesTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "NoInstalledAppMatchesEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoInstalledAppMatchesEmptyState.tsx",
        "code": {
            "NoInstalledAppMatchesEmptyState": "const NoInstalledAppMatchesEmptyState = ({\nconst NoInstalledAppMatchesEmptyState = ({\n\tshouldShowSearchText,\n\ttext,\n\tonButtonClick,\n}: NoInstalledAppMatchesEmptyStateProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs={20}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PrivateEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/PrivateEmptyState.tsx",
        "code": {
            "t": "const PrivateEmptyState = () => {\nconst PrivateEmptyState = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs='24px'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='lock' />\n\t\t\t\t<StatesTitle>{t('No_private_apps_installed')}</StatesTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "NoMarketplaceOrInstalledAppMatchesEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoMarketplaceOrInstalledAppMatchesEmptyState.tsx",
        "code": {
            "NoMarketplaceOrInstalledAppMatchesEmptyState": "const NoMarketplaceOrInstalledAppMatchesEmptyState = ({\nconst NoMarketplaceOrInstalledAppMatchesEmptyState = ({\n\tshouldShowSearchText,\n\ttext,\n}: NoMarketplaceOrInstalledAppMatchesEmptyStateProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs={20}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsPageContentBody.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContentBody.tsx",
        "code": {
            "AppsPageContentBody": "const AppsPageContentBody = ({\nconst AppsPageContentBody = ({\n\tisMarketplace,\n\tisFiltered,\n\tappsResult,\n\titemsPerPage,\n\tcurrent,\n\tonSetItemsPerPage,\n\tonSetCurrent,\n\tpaginationProps,\n\tnoErrorsOcurred,\n}: AppsPageContentBodyProps) => {",
            "appsListId": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst scrollableRef = useRef<HTMLDivElement>(null);\n\tconst scrollableRef = useRef<HTMLDivElement>(null);\n\tconst appsListId = useUniqueId();\n\tconst appsListId = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' overflow='hidden' height='100%' pi={24}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsPageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContent.tsx",
        "code": {
            "t": "const AppsPageContent = (): ReactElement => {\nconst AppsPageContent = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { marketplaceApps, installedApps, privateApps, reload } = useAppsResult();\n\tconst { marketplaceApps, installedApps, privateApps, reload } = useAppsResult();",
            "isRequested": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst isMarketplace = context === 'explore';\n\tconst isMarketplace = context === 'explore';\n\tconst isPremium = context === 'premium';\n\tconst isPremium = context === 'premium';\n\tconst isRequested = context === 'requested';\n\tconst isRequested = context === 'requested';\n\n\tconst [freePaidFilterStructure, setFreePaidFilterStructure] = useState({\n\tconst [freePaidFilterStructure, setFreePaidFilterStructure] = useState({\n\t\tlabel: t('Filter_By_Price'),\n\t\titems: [\n\t\t\t{ id: 'all', label: t('All_Prices'), checked: true },",
            "freePaidFilterOnSelected": "\tconst freePaidFilterOnSelected = useRadioToggle(setFreePaidFilterStructure);\n\tconst freePaidFilterOnSelected = useRadioToggle(setFreePaidFilterStructure);\n\n\tconst [statusFilterStructure, setStatusFilterStructure] = useState({\n\tconst [statusFilterStructure, setStatusFilterStructure] = useState({\n\t\tlabel: t('Filter_By_Status'),\n\t\titems: [\n\t\t\t{ id: 'all', label: t('All_status'), checked: true },",
            "requestedFilterItems": "\tconst requestedFilterItems = [\n\tconst requestedFilterItems = [\n\t\t{ id: 'urf', label: t('Unread_Requested_First'), checked: false },",
            "possibleSort": "\tconst createFilterStructureItems = () => {\n\tconst createFilterStructureItems = () => {\n\t\treturn isRequested ? [...requestedFilterItems, ...baseFilterStructureItems] : baseFilterStructureItems;\n\t};\n\n\tconst [sortFilterStructure, setSortFilterStructure] = useState<RadioDropDownGroup>(() => {\n\tconst [sortFilterStructure, setSortFilterStructure] = useState<RadioDropDownGroup>(() => {\n\t\treturn {\n\t\t\tlabel: t('Sort_By'),\n\t\t\titems: createFilterStructureItems(),\n\t\t};\n\t});\n\n\tuseEffect(() => {\n\t\tsetSortFilterStructure({\n\t\t\tlabel: t('Sort_By'),\n\t\t\titems: createFilterStructureItems(),\n\t\t});\n\t}, [isRequested]);\n\n\tconst sortFilterOnSelected = useRadioToggle(setSortFilterStructure);\n\tconst sortFilterOnSelected = useRadioToggle(setSortFilterStructure);\n\n\tconst getAppsData = useCallback((): appsDataType => {\n\tconst getAppsData = useCallback((): appsDataType => {\n\t\tswitch (context) {\n\t\t\tcase 'premium':\n\t\t\tcase 'explore':\n\t\t\tcase 'requested':\n\t\t\t\treturn marketplaceApps;\n\t\t\tcase 'private':\n\t\t\t\treturn privateApps;\n\t\t\tdefault:\n\t\t\t\treturn installedApps;\n\t\t}\n\t}, [context, marketplaceApps, installedApps, privateApps]);\n\n\tconst findSort = () => {\n\tconst findSort = () => {\n\t\tconst possibleSort = sortFilterStructure.items.find(({ checked }) => checked);\n\t\tconst possibleSort = sortFilterStructure.items.find(({ checked }) => checked);",
            "possiblePurchaseType": "\tconst findPurchaseType = () => {\n\tconst findPurchaseType = () => {\n\t\tconst possiblePurchaseType = freePaidFilterStructure.items.find(({ checked }) => checked);\n\t\tconst possiblePurchaseType = freePaidFilterStructure.items.find(({ checked }) => checked);",
            "possibleStatus": "\tconst findStatus = () => {\n\tconst findStatus = () => {\n\t\tconst possibleStatus = statusFilterStructure.items.find(({ checked }) => checked);\n\t\tconst possibleStatus = statusFilterStructure.items.find(({ checked }) => checked);",
            "appsResult": "\tconst [categories, selectedCategories, categoryTagList, onSelected] = useCategories();\n\tconst [categories, selectedCategories, categoryTagList, onSelected] = useCategories();\n\tconst appsResult = useFilteredApps({\n\tconst appsResult = useFilteredApps({\n\t\tappsData: getAppsData(),\n\t\ttext,\n\t\tcurrent,\n\t\titemsPerPage,\n\t\tcategories: useMemo(() => selectedCategories.map(({ label }) => label), [selectedCategories]),"
        },
        "depth_rank": 10
    },
    {
        "file": "NoInstalledAppsEmptyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/NoInstalledAppsEmptyState.tsx",
        "code": {
            "t": "const NoInstalledAppsEmptyState = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\nconst NoInstalledAppsEmptyState = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs={20}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsPageConnectionError.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageConnectionError.tsx",
        "code": {
            "t": "const AppsPageContentError = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\nconst AppsPageContentError = ({ onButtonClick }: { onButtonClick: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mbs={20}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsPageContentSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsPage/AppsPageContentSkeleton.tsx",
        "code": {
            "loadingRows": "const AppsPageContentSkeleton = (): ReactElement => {\nconst AppsPageContentSkeleton = (): ReactElement => {\n\tconst loadingRows = Array.from({ length: 3 }, (_, i) => <Skeleton key={i} height='x56' mbe={8} width='100%' variant='rect' />);\n\tconst loadingRows = Array.from({ length: 3 }, (_, i) => <Skeleton key={i} height='x56' mbe={8} width='100%' variant='rect' />);"
        },
        "depth_rank": 10
    },
    {
        "file": "getManifestFromZippedApp.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/lib/getManifestFromZippedApp.ts",
        "code": {
            "function": "async function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\nasync function unzipZippedApp(zippedApp: File | Uint8Array): Promise<Uint8ArrayObject> {\n\ttry {\n\t\tif (zippedApp instanceof File) {\n\t\t\tzippedApp = await fileToUint8Array(zippedApp);\n\t\t}\n\n\t\treturn unzipAppBuffer(zippedApp);\n\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "AppRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsList/AppRow.tsx",
        "code": {
            "AppRow": "const AppRow = ({ className, ...props }: App & { className?: string }): ReactElement => {\nconst AppRow = ({ className, ...props }: App & { className?: string }): ReactElement => {\n\tconst { name, id, shortDescription, iconFileData, marketplaceVersion, iconFileContent, installed, bundledIn, version } = props;\n\tconst { name, id, shortDescription, iconFileData, marketplaceVersion, iconFileContent, installed, bundledIn, version } = props;",
            "canUpdate": "\tconst preventClickPropagation = (e: MouseEvent<HTMLOrSVGElement>) => {\n\tconst preventClickPropagation = (e: MouseEvent<HTMLOrSVGElement>) => {\n\t\te.stopPropagation();\n\t};\n\n\tconst canUpdate = installed && version && marketplaceVersion && semver.lt(version, marketplaceVersion);\n\tconst canUpdate = installed && version && marketplaceVersion && semver.lt(version, marketplaceVersion);\n\n\treturn (\n\t\t<div role='listitem' className={className} key={id}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppsList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppsList/AppsList.tsx",
        "code": {
            "AppsList": "const AppsList = ({ apps, title, appsListId }: AppsListProps): ReactElement => {\nconst AppsList = ({ apps, title, appsListId }: AppsListProps): ReactElement => {\n\treturn (\n\t\t<Box mbe={16}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MarketplaceHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/MarketplaceHeader.tsx",
        "code": {
            "handleUploadButtonClick": "\tconst context = (useRouteParameter('context') || 'explore') as 'private' | 'explore' | 'installed' | 'premium' | 'requested';\n\tconst context = (useRouteParameter('context') || 'explore') as 'private' | 'explore' | 'installed' | 'premium' | 'requested';\n\tconst route = useRoute('marketplace');\n\tconst route = useRoute('marketplace');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst result = useAppsCountQuery(context);\n\tconst result = useAppsCountQuery(context);\n\n\tconst handleUploadButtonClick = useCallback((): void => {\n\tconst handleUploadButtonClick = useCallback((): void => {\n\t\troute.push({ context, page: 'install' });"
        },
        "depth_rank": 10
    },
    {
        "file": "DropDownListWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/DropDownListWrapper.tsx",
        "code": {
            "DropDownListWrapper": "} as const;\n} as const;\n\nconst hidden = {\nconst hidden = {\n\tvisibility: 'hidden',\n\topacity: 0,\n\tposition: 'fixed',\n} as const;\n} as const;\n\nconst DropDownListWrapper = forwardRef<Element, ComponentProps<typeof Box> & { onClose: (e: MouseEvent) => void }>(\nconst DropDownListWrapper = forwardRef<Element, ComponentProps<typeof Box> & { onClose: (e: MouseEvent) => void }>(",
            "target": "\tfunction CategoryDropDownListWrapper({ children, onClose }, ref) {\n\tfunction CategoryDropDownListWrapper({ children, onClose }, ref) {\n\t\tconst target = useRef<HTMLElement>(null);\n\t\tconst target = useRef<HTMLElement>(null);\n\t\tuseOutsideClick([target], onClose);\n\t\tconst { style = hidden } = usePosition(ref as Parameters<typeof usePosition>[0], target, options);\n\t\tconst { style = hidden } = usePosition(ref as Parameters<typeof usePosition>[0], target, options);"
        },
        "depth_rank": 10
    },
    {
        "file": "EnabledAppsCount.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/EnabledAppsCount.tsx",
        "code": {
            "EnabledAppsCount": "const EnabledAppsCount = ({\nconst EnabledAppsCount = ({\n\tvariant,\n\tpercentage,\n\tlimit,\n\tenabled,\n\tcontext,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericResourceUsage\n\t\t\ttitle={context === 'private' ? t('Private_Apps_Count_Enabled', { count: enabled }) : t('Apps_Count_Enabled', { count: enabled })}"
        },
        "depth_rank": 10
    },
    {
        "file": "ScreenshotCarousel.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/ScreenshotCarousel.tsx",
        "code": {
            "ScreenshotCarousel": "const ScreenshotCarousel = ({\nconst ScreenshotCarousel = ({\n\tAppScreenshots,\n\tsetViewCarousel,\n\thandleNextSlide,\n\thandlePrevSlide,\n\tisFirstSlide,\n\tisLastSlide,\n\tcurrentSlideIndex,\n}: ScreenshotCarouselProps): ReactElement => {",
            "screenshotWrapperStyle": "\tconst handleScreenshotRender = (): JSX.Element[] =>\n\tconst handleScreenshotRender = (): JSX.Element[] =>\n\t\tAppScreenshots.map((currentScreenshot, index) => {\n\t\t\tconst isCurrentImageOnScreen = index === currentSlideIndex;\n\t\t\tconst isCurrentImageOnScreen = index === currentSlideIndex;\n\t\t\tconst screenshotWrapperStyle = isCurrentImageOnScreen\n\t\t\tconst screenshotWrapperStyle = isCurrentImageOnScreen\n\t\t\t\t? {\n\t\t\t\t\t\topacity: '1',\n\t\t\t\t\t\ttransitionDuration: '1s',\n\t\t\t\t\t\ttransform: 'scale(1.08)',\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\topacity: '0',\n\t\t\t\t\t\ttransitionDuration: '1s ease',\n\t\t\t\t  };\n\n\t\t\treturn (\n\t\t\t\t<Box style={screenshotWrapperStyle} key={currentScreenshot.id}>"
        },
        "depth_rank": 10
    },
    {
        "file": "BannerEnterpriseTrialEnded.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/BannerEnterpriseTrialEnded.tsx",
        "code": {
            "cloudWorkspaceHadTrial": "\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\tconst cloudWorkspaceHadTrial = useSetting('Cloud_Workspace_Had_Trial') as boolean;\n\n\tconst [showTrialBanner, setShowTrialBanner] = useLocalStorage('showAppsTrialEndBanner', cloudWorkspaceHadTrial);\n\tconst [showTrialBanner, setShowTrialBanner] = useLocalStorage('showAppsTrialEndBanner', cloudWorkspaceHadTrial);\n\n\treturn (\n\t\t<>\n\t\t\t{showTrialBanner && (\n\t\t\t\t<Banner\n\t\t\t\t\tcloseable\n\t\t\t\t\ticon={<Icon name='store' size='x24' />}"
        },
        "depth_rank": 10
    },
    {
        "file": "AccordionLoading.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/AccordionLoading.tsx",
        "code": {
            "AccordionLoading": "const SKELETON_ITEMS = 3;\nconst SKELETON_ITEMS = 3;\n\nconst AccordionLoading = () => (\nconst AccordionLoading = () => (\n\t<>\n\t\t{Array.from({ length: SKELETON_ITEMS }, (_v, k) => (\n\t\t\t<Skeleton key={k} variant='rect' height='80px' m='2px' />"
        },
        "depth_rank": 10
    },
    {
        "file": "ScreenshotCarouselAnchor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/ScreenshotCarouselAnchor.tsx",
        "code": {
            "ScreenshotCarouselAnchor": "const ScreenshotCarouselAnchor = ({ screenshots }: ScreenshotCarouselAnchorProps): ReactElement => {\nconst ScreenshotCarouselAnchor = ({ screenshots }: ScreenshotCarouselAnchorProps): ReactElement => {\n\tconst [viewCarousel, setViewCarousel] = useState(false);\n\tconst [viewCarousel, setViewCarousel] = useState(false);\n\n\tconst [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n\tconst [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n\n\tconst [currentPreviewIndex, setCurrentPreviewIndex] = useState(0);\n\tconst [currentPreviewIndex, setCurrentPreviewIndex] = useState(0);\n\n\tconst { length } = screenshots;\n\tconst { length } = screenshots;",
            "carouselPortal": "\tconst carouselPortal = createPortal(\n\tconst carouselPortal = createPortal(\n\t\t<ScreenshotCarousel\n\t\t\tAppScreenshots={screenshots}"
        },
        "depth_rank": 10
    },
    {
        "file": "RadioButtonList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioButtonList.tsx",
        "code": {
            "RadioButtonList": "const RadioButtonList = ({ group, onSelected }: RadioDropDownProps): ReactElement => (\nconst RadioButtonList = ({ group, onSelected }: RadioDropDownProps): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "AppInstallModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/AppInstallModal/AppInstallModal.tsx",
        "code": {
            "AppInstallationModal": "const AppInstallationModal = ({\nconst AppInstallationModal = ({\n\tcontext,\n\tenabled,\n\tlimit,\n\tappName,\n\thandleClose,\n\thandleConfirm,\n\thandleEnableUnlimitedApps,\n}: AppsInstallationModalProps) => {",
            "getTitle": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getTitle = () => {\n\tconst getTitle = () => {\n\t\tif (enabled === limit) {\n\t\t\treturn context === 'private' ? t('Private_apps_limit_reached') : t('App_limit_reached');\n\t\t}\n\n\t\tif (enabled > limit) {\n\t\t\treturn context === 'private' ? t('Private_apps_limit_exceeded') : t('App_limit_exceeded');\n\t\t}\n\n\t\treturn t('Apps_Currently_Enabled', { context: context === 'private' ? context : '', enabled, limit });",
            "getContent": "\tconst getContent = () => {\n\tconst getContent = () => {\n\t\tif (enabled === limit) {\n\t\t\treturn t('Enable_of_limit_apps_currently_enabled', { context: context === 'private' ? context : '', enabled, limit, appName });",
            "confirmButtonOverlimitLabel": "\tconst confirmButtonOverlimitLabel = context === 'private' ? t('Upload_anyway') : t('Install_anyway');\n\tconst confirmButtonOverlimitLabel = context === 'private' ? t('Upload_anyway') : t('Install_anyway');\n\n\treturn (\n\t\t<>\n\t\t\t<Modal>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t\t<Modal.Title>{getTitle()}</Modal.Title>"
        },
        "depth_rank": 11
    },
    {
        "file": "RadioDownAnchor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDownAnchor.tsx",
        "code": {
            "selected": "const RadioDownAnchor = forwardRef<HTMLElement, RadioDropdownAnchorProps>(function SortDropDownAnchor({ onClick, group, ...props }, ref) {\nconst RadioDownAnchor = forwardRef<HTMLElement, RadioDropdownAnchorProps>(function SortDropDownAnchor({ onClick, group, ...props }, ref) {\n\tconst selected = group?.items.find((item) => item.checked)?.label;\n\tconst selected = group?.items.find((item) => item.checked)?.label;\n\n\treturn (\n\t\t<Box\n\t\t\tis='button'\n\t\t\tref={ref}"
        },
        "depth_rank": 11
    },
    {
        "file": "RadioDropDown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDropDown.tsx",
        "code": {
            "onClose": "const RadioDropDown = ({ group, onSelected, ...props }: RadioDropDownProps & ComponentProps<typeof Button>): ReactElement => {\nconst RadioDropDown = ({ group, onSelected, ...props }: RadioDropDownProps & ComponentProps<typeof Button>): ReactElement => {\n\tconst reference = useRef<HTMLElement>(null);\n\tconst reference = useRef<HTMLElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (isValidReference(reference, e)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonMouseEventPreventSideEffects(e);\n\n\t\t\treturn false;\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<RadioDropDownAnchor ref={reference} group={group} onClick={toggleCollapsed as any} {...props} />"
        },
        "depth_rank": 11
    },
    {
        "file": "RadioDropDown.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/RadioDropDown/RadioDropDown.stories.tsx",
        "code": {
            "onSelected": "\tconst [data, setData] = useState(() => testGroup);\n\tconst [data, setData] = useState(() => testGroup);\n\n\tconst onSelected = useRadioToggle(setData);\n\tconst onSelected = useRadioToggle(setData);\n\n\treturn (\n\t\t<>\n\t\t\t<RadioDropDown group={data} onSelected={onSelected} />"
        },
        "depth_rank": 11
    },
    {
        "file": "CategoryDropDown.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDown.stories.tsx",
        "code": {
            "onSelected": "\tconst [, selectedCategories, categoryTagList] = useCategories();\n\tconst [, selectedCategories, categoryTagList] = useCategories();\n\n\tconst [data, setData] = useState(testCategories);\n\tconst [data, setData] = useState(testCategories);\n\n\tconst onSelected = useCategoryToggle(setData);\n\tconst onSelected = useCategoryToggle(setData);\n\n\treturn (\n\t\t<Box w='x144'>\n\t\t\t<ButtonGroup>\n\t\t\t\t<CategoryDropDown categories={data} selectedCategories={selectedCategories} onSelected={onSelected} />"
        },
        "depth_rank": 11
    },
    {
        "file": "CategoryDropDownList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDownList.tsx",
        "code": {
            "CategoryDropDownList": "const CategoryDropDownList = ({ categories, onSelected }: CategoryDropDownListProps): ReactElement => {\nconst CategoryDropDownList = ({ categories, onSelected }: CategoryDropDownListProps): ReactElement => {\n\treturn (\n\t\t<Tile overflow='auto' pb={12} pi={0} elevation='2' w='full' bg='light' borderRadius='x2'>"
        },
        "depth_rank": 11
    },
    {
        "file": "CategoryDropDown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDown.tsx",
        "code": {
            "onClose": "const CategoryDropDown = ({ categories, onSelected, selectedCategories, ...props }: CategoryDropDownProps): ReactElement => {\nconst CategoryDropDown = ({ categories, onSelected, selectedCategories, ...props }: CategoryDropDownProps): ReactElement => {\n\tconst reference = useRef<HTMLInputElement>(null);\n\tconst reference = useRef<HTMLInputElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (isValidReference(reference, e)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonMouseEventPreventSideEffects(e);\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<CategoryDropDownAnchor\n\t\t\t\tref={reference}"
        },
        "depth_rank": 11
    },
    {
        "file": "CategoryDropDownAnchor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/CategoryFilter/CategoryDropDownAnchor.tsx",
        "code": {
            "CategoryDropDownAnchor": "const CategoryDropDownAnchor = forwardRef<HTMLElement, CategoryDropDownAnchorProps>(function CategoryDropDownAnchor(\nconst CategoryDropDownAnchor = forwardRef<HTMLElement, CategoryDropDownAnchorProps>(function CategoryDropDownAnchor(\n\t{ onClick, selectedCategoriesCount, ...props },",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box\n\t\t\tis='button'\n\t\t\tref={ref}"
        },
        "depth_rank": 11
    },
    {
        "file": "UninstallGrandfatheredAppModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/components/UninstallGrandfatheredAppModal/UninstallGrandfatheredAppModal.tsx",
        "code": {
            "t": "const UninstallGrandfatheredAppModal = ({ context, limit, appName, handleUninstall, handleClose }: UninstallGrandfatheredAppModalProps) => {\nconst UninstallGrandfatheredAppModal = ({ context, limit, appName, handleUninstall, handleClose }: UninstallGrandfatheredAppModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t<Modal.Title>{t('Uninstall_grandfathered_app', { appName })}</Modal.Title>"
        },
        "depth_rank": 11
    },
    {
        "file": "AppDetailsPageHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPageHeader.tsx",
        "code": {
            "versioni18nKey": "const versioni18nKey = (app: App): string => {\nconst versioni18nKey = (app: App): string => {\n\tconst { version, marketplaceVersion, installed } = app;\n\tconst { version, marketplaceVersion, installed } = app;",
            "incompatibleStatus": "const AppDetailsPageHeader = ({ app }: { app: App }): ReactElement => {\nconst AppDetailsPageHeader = ({ app }: { app: App }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\ticonFileData,\n\t\tname,\n\t\tauthor,\n\t\ticonFileContent,\n\t\tinstalled,\n\t\tmodifiedAt,\n\t\tbundledIn,\n\t\tversionIncompatible,\n\t\tisSubscribed,\n\t\tshortDescription,\n\t} = app;\n\n\tconst lastUpdated = modifiedAt && moment(modifiedAt).fromNow();\n\tconst lastUpdated = modifiedAt && moment(modifiedAt).fromNow();\n\tconst incompatibleStatus = versionIncompatible ? appIncompatibleStatusProps() : undefined;\n\tconst incompatibleStatus = versionIncompatible ? appIncompatibleStatusProps() : undefined;\n\n\treturn (\n\t\t<Box color='default' display='flex' flexDirection='row' mbe={20} w='full'>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppDetailsPageTabs.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPageTabs.tsx",
        "code": {
            "handleTabClick": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleTabClick = (tab: 'details' | 'security' | 'releases' | 'settings' | 'logs' | 'requests') => {\n\tconst handleTabClick = (tab: 'details' | 'security' | 'releases' | 'settings' | 'logs' | 'requests') => {\n\t\trouter.navigate(\n\t\t\t{\n\t\t\t\tname: 'marketplace',\n\t\t\t\tparams: { ...router.getRouteParameters(), tab },"
        },
        "depth_rank": 10
    },
    {
        "file": "AppDetailsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/AppDetailsPage.tsx",
        "code": {
            "reducedSettings": "\tconst reducedSettings = useMemo(() => {\n\tconst reducedSettings = useMemo(() => {\n\t\treturn Object.values(settings || {}).reduce((ret, { id, value, packageValue }) => ({ ...ret, [id]: value ?? packageValue }), {});",
            "methods": "\tconst methods = useForm({ values: reducedSettings });\n\tconst methods = useForm({ values: reducedSettings });"
        },
        "depth_rank": 10
    },
    {
        "file": "AppSecurity.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSecurity/AppSecurity.tsx",
        "code": {
            "t": "const AppSecurity = ({ privacyPolicySummary, appPermissions, tosLink, privacyLink }: AppSecurityProps): ReactElement => {\nconst AppSecurity = ({ privacyPolicySummary, appPermissions, tosLink, privacyLink }: AppSecurityProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box maxWidth='x640' w='full' marginInline='auto' color='default'>\n\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t<Margins block={16}>"
        },
        "depth_rank": 12
    },
    {
        "file": "AppSecurityLabel.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSecurity/AppSecurityLabel.tsx",
        "code": {
            "AppSecurityLabel": "const AppSecurityLabel = ({ children }: { children: string }): ReactElement => (\nconst AppSecurityLabel = ({ children }: { children: string }): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "AppReleases.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppReleases/AppReleases.tsx",
        "code": {
            "getVersions": "const AppReleases = ({ id }: { id: App['id'] }): ReactElement => {\nconst AppReleases = ({ id }: { id: App['id'] }): ReactElement => {\n\tconst getVersions = useEndpoint('GET', '/apps/:id/versions', { id });\n\tconst getVersions = useEndpoint('GET', '/apps/:id/versions', { id });",
            "t": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data, isLoading, isFetched } = useQuery(\n\tconst { data, isLoading, isFetched } = useQuery("
        },
        "depth_rank": 12
    },
    {
        "file": "AppReleasesItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppReleases/AppReleasesItem.tsx",
        "code": {
            "title": "const AppReleasesItem = ({ release, ...props }: ReleaseItemProps): ReactElement => {\nconst AppReleasesItem = ({ release, ...props }: ReleaseItemProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\n\tconst title = (\n\tconst title = (\n\t\t<Box display='flex' flexDirection='row'>\n\t\t\t<Box is='h4' fontScale='p1b' color='default' mie={24}>"
        },
        "depth_rank": 12
    },
    {
        "file": "AppStatus.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppStatus/AppStatus.tsx",
        "code": {
            "context": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst { price, purchaseType, pricingPlans } = app;\n\tconst { price, purchaseType, pricingPlans } = app;",
            "button": "\tconst button = appButtonProps({ ...app, isAdminUser, endUserRequested });\n\tconst button = appButtonProps({ ...app, isAdminUser, endUserRequested });",
            "canUpdate": "\tconst canUpdate = installed && app?.version && app?.marketplaceVersion && semver.lt(app?.version, app?.marketplaceVersion);\n\tconst canUpdate = installed && app?.version && app?.marketplaceVersion && semver.lt(app?.version, app?.marketplaceVersion);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 12
    },
    {
        "file": "AppStatusPriceDisplay.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppStatus/AppStatusPriceDisplay.tsx",
        "code": {
            "t": "const AppStatusPriceDisplay: FC<AppStatusPriceDisplayProps> = ({ purchaseType, pricingPlans, price, showType = true }) => {\nconst AppStatusPriceDisplay: FC<AppStatusPriceDisplayProps> = ({ purchaseType, pricingPlans, price, showType = true }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { type, price: formattedPrice } = useMemo(\n\tconst { type, price: formattedPrice } = useMemo("
        },
        "depth_rank": 12
    },
    {
        "file": "AppSettings.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSettings/AppSettings.tsx",
        "code": {
            "t": "const AppSettings = ({ settings }: { settings: ISettings }) => {\nconst AppSettings = ({ settings }: { settings: ISettings }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' maxWidth='x640' w='full' marginInline='auto'>\n\t\t\t\t<Box fontScale='h4' mb={12}>"
        },
        "depth_rank": 12
    },
    {
        "file": "AppSetting.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppSettings/AppSetting.tsx",
        "code": {
            "hint": "const AppSetting = ({ id, type, i18nLabel, i18nDescription, values, value, packageValue, ...props }: ISetting): ReactElement => {\nconst AppSetting = ({ id, type, i18nLabel, i18nDescription, values, value, packageValue, ...props }: ISetting): ReactElement => {\n\tconst appId = useRouteParameter('id');\n\tconst appId = useRouteParameter('id');\n\tconst tApp = useAppTranslation(appId || '');\n\tconst tApp = useAppTranslation(appId || '');\n\n\tconst label = (i18nLabel && tApp(i18nLabel)) || id || tApp(id);\n\tconst label = (i18nLabel && tApp(i18nLabel)) || id || tApp(id);\n\tconst hint = useMemo(() => i18nDescription && <MarkdownText content={tApp(i18nDescription)} />, [i18nDescription, tApp]);\n\tconst hint = useMemo(() => i18nDescription && <MarkdownText content={tApp(i18nDescription)} />, [i18nDescription, tApp]);"
        },
        "depth_rank": 12
    },
    {
        "file": "AppRequestsLoading.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppRequests/AppRequestsLoading.tsx",
        "code": {
            "appRequestsLoading": "const AppRequestsLoading = (): ReactElement => {\nconst AppRequestsLoading = (): ReactElement => {\n\tconst appRequestsLoading = Array.from({ length: 5 }, (_, i) => (\n\tconst appRequestsLoading = Array.from({ length: 5 }, (_, i) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "AppLogsItemEntry.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogsItemEntry.tsx",
        "code": {
            "t": "const AppLogsItemEntry: FC<AppLogsItemEntryProps> = ({ severity, timestamp, caller, args }) => {\nconst AppLogsItemEntry: FC<AppLogsItemEntryProps> = ({ severity, timestamp, caller, args }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box color='default'>\n\t\t\t<Box>\n\t\t\t\t{severity}: {timestamp} {t('Caller')}: {caller}"
        },
        "depth_rank": 12
    },
    {
        "file": "AppLogs.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogs.tsx",
        "code": {
            "formatDateAndTime": "const AppLogs = ({ id }: { id: string }): ReactElement => {\nconst AppLogs = ({ id }: { id: string }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst { data, isSuccess, isError, isLoading } = useLogs(id);\n\tconst { data, isSuccess, isError, isLoading } = useLogs(id);"
        },
        "depth_rank": 12
    },
    {
        "file": "AppLogsItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppLogs/AppLogsItem.tsx",
        "code": {
            "t": "const AppLogsItem: FC<AppLogsItemProps> = ({ entries, instanceId, title, ...props }) => {\nconst AppLogsItem: FC<AppLogsItemProps> = ({ entries, instanceId, title, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Accordion.Item title={title} {...props}>"
        },
        "depth_rank": 12
    },
    {
        "file": "AppDetailsAPIs.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppDetails/AppDetailsAPIs.tsx",
        "code": {
            "getApiCurl": "const AppDetailsAPIs: FC<AppDetailsAPIsProps> = ({ apis }) => {\nconst AppDetailsAPIs: FC<AppDetailsAPIsProps> = ({ apis }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst getApiCurl = apiCurlGetter(absoluteUrl);\n\tconst getApiCurl = apiCurlGetter(absoluteUrl);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t<Box fontScale='h4' mb={12}>"
        },
        "depth_rank": 12
    },
    {
        "file": "AppDetails.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/marketplace/AppDetailsPage/tabs/AppDetails/AppDetails.tsx",
        "code": {
            "t": "const AppDetails = ({ app }: AppDetailsProps) => {\nconst AppDetails = ({ app }: AppDetailsProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tauthor: { homepage, support } = {},",
            "normalizedDocumentationUrl": "\tconst isCarouselVisible = screenshots && Boolean(screenshots.length);\n\tconst isCarouselVisible = screenshots && Boolean(screenshots.length);\n\n\tconst normalizedHomepageUrl = homepage ? normalizeUrl(homepage) : undefined;\n\tconst normalizedHomepageUrl = homepage ? normalizeUrl(homepage) : undefined;\n\tconst normalizedSupportUrl = support ? normalizeUrl(support) : undefined;\n\tconst normalizedSupportUrl = support ? normalizeUrl(support) : undefined;\n\tconst normalizedDocumentationUrl = documentation ? normalizeUrl(documentation) : undefined;\n\tconst normalizedDocumentationUrl = documentation ? normalizeUrl(documentation) : undefined;\n\n\treturn (\n\t\t<Box maxWidth='x640' w='full' marginInline='auto' color='default'>\n\t\t\t{app.licenseValidation && (\n\t\t\t\t<>\n\t\t\t\t\t{Object.entries(app.licenseValidation.warnings).map(([key]) => (\n\t\t\t\t\t\t<Callout key={key} type='warning'>"
        },
        "depth_rank": 12
    },
    {
        "file": "UiKitBanner.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/banners/UiKitBanner.tsx",
        "code": {
            "UiKitBanner": "const UiKitBanner = ({ initialView }: UiKitBannerProps) => {\nconst UiKitBanner = ({ initialView }: UiKitBannerProps) => {\n\tconst { view, values, state } = useUiKitView(initialView);\n\tconst { view, values, state } = useUiKitView(initialView);",
            "contextValue": "\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst contextValue = useBannerContextValue({ view, values });\n\tconst contextValue = useBannerContextValue({ view, values });",
            "icon": "\tconst icon = useMemo(() => {\n\tconst icon = useMemo(() => {\n\t\tif (view.icon) {\n\t\t\treturn <Icon name={view.icon} size='x20' />;",
            "handleClose": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst handleClose = useMutableCallback(() => {\n\tconst handleClose = useMutableCallback(() => {\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewClosed',\n\t\t\t\tpayload: {\n\t\t\t\t\tviewId: view.viewId,\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tid: view.viewId,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t\tisCleared: true,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 9
    },
    {
        "file": "LegacyBanner.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/banners/LegacyBanner.tsx",
        "code": {
            "handleClose": "\t\tconst timer = setTimeout(() => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tconfig.onClose?.call(undefined);\n\t\t\tbanners.close();\n\t\t}, config.timer);\n\n\t\treturn (): void => {\n\t\t\tclearTimeout(timer);\n\t\t};\n\t}, [config.onClose, config.timer]);\n\n\tconst handleAction = useCallback(() => {\n\tconst handleAction = useCallback(() => {\n\t\tconfig.action?.call(undefined);\n\t}, [config.action]);\n\n\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\tconfig.onClose?.call(undefined);\n\t\tbanners.close();\n\t}, [config.onClose]);\n\n\treturn (\n\t\t<Banner\n\t\t\tinline={inline}",
            "title": "\t\t\ttitle={typeof title === 'function' ? title() : title}\n\t\t\ttitle={typeof title === 'function' ? title() : title}",
            "text": "\t\t\t{typeof text === 'function' ? text() : text}\n\t\t\t{typeof text === 'function' ? text() : text}"
        },
        "depth_rank": 9
    },
    {
        "file": "useDismissUserBannerMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/banners/hooks/useDismissUserBannerMutation.ts",
        "code": {
            "dispatchToastMessage": "\tconst dismissBanner = useMethod('banner/dismiss');\n\tconst dismissBanner = useMethod('banner/dismiss');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutation(dismissBanner, {\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 10
    },
    {
        "file": "useUserBanners.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/banners/hooks/useUserBanners.ts",
        "code": {
            "t": "\tconst user = useUser();\n\tconst user = useUser();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { mutate: dismissUserBanner } = useDismissUserBannerMutation();\n\tconst { mutate: dismissUserBanner } = useDismissUserBannerMutation();"
        },
        "depth_rank": 10
    },
    {
        "file": "useActionSpread.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/useActionSpread.ts",
        "code": {
            "mapOptions": "const mapOptions = ([key, { action, label, icon }]: [string, Action]): [string, MenuOption] => [\nconst mapOptions = ([key, { action, label, icon }]: [string, Action]): [string, MenuOption] => [",
            "menu": "\t\tconst entries = Object.entries(actions);\n\t\tconst entries = Object.entries(actions);\n\n\t\tconst options = entries.slice(0, size);\n\t\tconst options = entries.slice(0, size);\n\t\tconst menuOptions = entries.slice(size, entries.length).map(mapOptions);\n\t\tconst menuOptions = entries.slice(size, entries.length).map(mapOptions);\n\t\tconst menu = menuOptions.length ? Object.fromEntries(menuOptions) : undefined;\n\t\tconst menu = menuOptions.length ? Object.fromEntries(menuOptions) : undefined;\n\n\t\treturn { actions: options, menu };"
        },
        "depth_rank": 9
    },
    {
        "file": "useActiveConnections.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/useActiveConnections.ts",
        "code": {
            "getConnections": "\tconst getConnections = useEndpoint('GET', '/v1/presence.getConnections');\n\tconst getConnections = useEndpoint('GET', '/v1/presence.getConnections');\n\treturn useQuery(\n\t\t['userConnections'],\n\t\tasync () => {\n\t\t\tconst { current, max } = await getConnections();\n\t\t\tconst { current, max } = await getConnections();"
        },
        "depth_rank": 9
    },
    {
        "file": "useDepartmentsByUnitsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/useDepartmentsByUnitsList.ts",
        "code": {
            "getDepartments": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatDepartment>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatDepartment>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatDepartment>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatDepartment>()), []);\n\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/units/:unitId/departments/available', { unitId: options.unitId || 'none' });\n\tconst getDepartments = useEndpoint('GET', '/v1/livechat/units/:unitId/departments/available', { unitId: options.unitId || 'none' });"
        },
        "depth_rank": 9
    },
    {
        "file": "useMembersList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/useMembersList.ts",
        "code": {
            "start": "\tconst getMembers = useEndpoint('GET', endpointsByRoomType[options.roomType]);\n\tconst getMembers = useEndpoint('GET', endpointsByRoomType[options.roomType]);\n\n\treturn useInfiniteQuery(\n\t\t[options.roomType, 'members', options.rid, options.type, options.debouncedText],\n\t\tasync ({ pageParam }) => {\n\t\t\tconst start = pageParam ?? 0;\n\t\t\tconst start = pageParam ?? 0;\n\n\t\t\treturn getMembers({\n\t\t\t\troomId: options.rid,\n\t\t\t\toffset: start,\n\t\t\t\tcount: 20,\n\t\t\t\t...(options.debouncedText && { filter: options.debouncedText }),"
        },
        "depth_rank": 9
    },
    {
        "file": "useArchiveRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/roomActions/useArchiveRoom.tsx",
        "code": {
            "handleArchive": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst archiveAction = useEndpoint('POST', '/v1/rooms.changeArchivationState');\n\tconst archiveAction = useEndpoint('POST', '/v1/rooms.changeArchivationState');\n\n\tconst handleArchive = useMutableCallback(async () => {\n\tconst handleArchive = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait archiveAction({ rid: room._id, action: room.archived ? 'unarchive' : 'archive' });"
        },
        "depth_rank": 10
    },
    {
        "file": "useDeleteRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/hooks/roomActions/useDeleteRoom.tsx",
        "code": {
            "deleteRoomMutation": "\tconst deleteRoomEndpoint = useEndpoint('POST', '/v1/rooms.delete');\n\tconst deleteRoomEndpoint = useEndpoint('POST', '/v1/rooms.delete');\n\tconst deleteTeamEndpoint = useEndpoint('POST', '/v1/teams.delete');\n\tconst deleteTeamEndpoint = useEndpoint('POST', '/v1/teams.delete');\n\n\tconst deleteRoomMutation = useMutation({\n\tconst deleteRoomMutation = useMutation({\n\t\tmutationFn: deleteRoomEndpoint,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Room_has_been_deleted') });",
            "deleteTeamMutation": "\tconst deleteTeamMutation = useMutation({\n\tconst deleteTeamMutation = useMutation({\n\t\tmutationFn: deleteTeamEndpoint,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Team_has_been_deleted') });",
            "handleDeleteRoom": "\t\tconst handleDeleteRoom = async () => {\n\t\tconst handleDeleteRoom = async () => {\n\t\t\tdeleteRoomMutation.mutateAsync({ roomId: room._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "InvitePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/invite/InvitePage.tsx",
        "code": {
            "userId": "const InvitePage = (): ReactElement => {\nconst InvitePage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst token = useRouteParameter('hash');\n\tconst token = useRouteParameter('hash');\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst { isLoading, data: isValidInvite } = useValidateInviteQuery(userId, token);\n\tconst { isLoading, data: isValidInvite } = useValidateInviteQuery(userId, token);",
            "getInviteRoomMutation": "\tconst getInviteRoomMutation = useInviteTokenMutation();\n\tconst getInviteRoomMutation = useInviteTokenMutation();\n\n\tuseEffect(() => {\n\t\tif (userId && token) {\n\t\t\tgetInviteRoomMutation(token);\n\t\t}\n\t}, [getInviteRoomMutation, token, userId]);\n\n\tif (isLoading) {\n\t\treturn <PageLoading />;\n\t}\n\n\tif (isValidInvite) {\n\t\treturn <LoginPage />;\n\t}\n\n\treturn (\n\t\t<HeroLayout>\n\t\t\t<HeroLayoutTitle>{t('Invalid_or_expired_invite_token')}</HeroLayoutTitle>"
        },
        "depth_rank": 9
    },
    {
        "file": "useInviteTokenMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/invite/hooks/useInviteTokenMutation.ts",
        "code": {
            "getInviteRoom": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getInviteRoom = useEndpoint('POST', '/v1/useInviteToken');\n\tconst getInviteRoom = useEndpoint('POST', '/v1/useInviteToken');\n\n\tconst { mutate } = useMutation({\n\tconst { mutate } = useMutation({\n\t\tmutationFn: (token: string) => getInviteRoom({ token }),"
        },
        "depth_rank": 10
    },
    {
        "file": "CloudAnnouncementsRegion.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/cloud/CloudAnnouncementsRegion.tsx",
        "code": {
            "getAnnouncements": "const CloudAnnouncementsRegion = () => {\nconst CloudAnnouncementsRegion = () => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst getAnnouncements = useEndpoint('GET', '/v1/banners');\n\tconst getAnnouncements = useEndpoint('GET', '/v1/banners');\n\n\tconst { isSuccess, data: announcements } = useQuery({\n\tconst { isSuccess, data: announcements } = useQuery({\n\t\tqueryKey: ['cloud', 'announcements'],\n\t\tqueryFn: () => getAnnouncements({ platform: BannerPlatform.Web }),"
        },
        "depth_rank": 9
    },
    {
        "file": "CloudAnnouncementHandler.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/cloud/CloudAnnouncementHandler.tsx",
        "code": {
            "CloudAnnouncementHandler": "const CloudAnnouncementHandler = ({ dictionary = {}, surface, view }: CloudAnnouncementHandlerProps) => {\nconst CloudAnnouncementHandler = ({ dictionary = {}, surface, view }: CloudAnnouncementHandlerProps) => {\n\tconst { i18n } = useTranslation();\n\tconst { i18n } = useTranslation();",
            "bannerView": "\t\t\t\tconst modalView = viewRef.current as unknown as UiKit.ModalView;\n\t\t\t\tconst modalView = viewRef.current as unknown as UiKit.ModalView;\n\n\t\t\t\tactionManager.openView('modal', modalView);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tactionManager.disposeView(modalView.id);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'banner': {\n\t\t\t\tconst bannerView = viewRef.current as UiKit.BannerView;\n\t\t\t\tconst bannerView = viewRef.current as UiKit.BannerView;\n\n\t\t\t\tactionManager.openView('banner', { ...bannerView });"
        },
        "depth_rank": 9
    },
    {
        "file": "OutlookCalendarEventModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookCalendarEventModal.tsx",
        "code": {
            "event": "\t\t\tconst event = { event: { subject, meetingUrl, description } };\n\t\t\tconst event = { event: { subject, meetingUrl, description } };",
            "openCall": "\tconst openCall = useOutlookOpenCall(data?.event.meetingUrl);\n\tconst openCall = useOutlookOpenCall(data?.event.meetingUrl);\n\n\tif (isLoading) {\n\t\treturn <GenericModalSkeleton {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "OutlookEventsRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsRoute.tsx",
        "code": {
            "OutlookEventsRoute": "const CALENDAR_ROUTES: { [key: string]: OutlookCalendarRoutes } = {\nconst CALENDAR_ROUTES: { [key: string]: OutlookCalendarRoutes } = {\n\tLIST: 'list',\n\tSETTINGS: 'settings',\n};\n\nconst OutlookEventsRoute = () => {\nconst OutlookEventsRoute = () => {\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 9
    },
    {
        "file": "OutlookSettingsList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookSettingsList/OutlookSettingsList.tsx",
        "code": {
            "notifyCalendarEvents": "const OutlookSettingsList = ({ onClose, changeRoute }: OutlookSettingsListProps): ReactElement => {\nconst OutlookSettingsList = ({ onClose, changeRoute }: OutlookSettingsListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst notifyCalendarEvents = useUserPreference('notifyCalendarEvents') as boolean;\n\tconst notifyCalendarEvents = useUserPreference('notifyCalendarEvents') as boolean;\n\tconst { authEnabled } = useOutlookAuthentication();\n\tconst { authEnabled } = useOutlookAuthentication();",
            "handleNotifyCalendarEvents": "\tconst handleDisableAuth = useOutlookAuthenticationMutationLogout();\n\tconst handleDisableAuth = useOutlookAuthenticationMutationLogout();\n\n\tconst handleNotifyCalendarEvents = useCallback(\n\tconst handleNotifyCalendarEvents = useCallback(\n\t\t(value: boolean) => {\n\t\t\ttry {\n\t\t\t\tsaveUserPreferences({ data: { notifyCalendarEvents: value } });",
            "calendarSettings": "\tconst calendarSettings = [\n\tconst calendarSettings = [\n\t\t{\n\t\t\tid: 'notification',\n\t\t\ttitle: t('Event_notifications'),\n\t\t\tsubTitle: t('Event_notifications_description'),\n\t\t\tenabled: notifyCalendarEvents,\n\t\t\thandleEnable: handleNotifyCalendarEvents,\n\t\t},\n\t\t{\n\t\t\tid: 'authentication',\n\t\t\ttitle: t('Outlook_authentication'),\n\t\t\tsubTitle: t('Outlook_authentication_description'),\n\t\t\tenabled: authEnabled,\n\t\t\thandleEnable: () =>\n\t\t\t\thandleDisableAuth.mutate(undefined, {\n\t\t\t\t\tonSuccess: changeRoute,\n\t\t\t\t}),\n\t\t},\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='calendar' />\n\t\t\t\t<ContextualbarTitle>{t('Outlook_calendar_settings')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "useOutlookOpenCall.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/hooks/useOutlookOpenCall.ts",
        "code": {
            "userDisplayName": "\tconst user = useUser();\n\tconst user = useUser();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });"
        },
        "depth_rank": 10
    },
    {
        "file": "useOutlookCalendarList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/hooks/useOutlookCalendarList.ts",
        "code": {
            "syncMutation": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst checkOutlookCredentials = useOutlookAuthenticationMutation();\n\tconst checkOutlookCredentials = useOutlookAuthenticationMutation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst syncMutation = useMutation({\n\tconst syncMutation = useMutation({\n\t\tmutationFn: async () => {\n\t\t\tawait syncOutlookEvents();\n\n\t\t\tawait queryClient.invalidateQueries(['outlook', 'calendar', 'list']);\n\n\t\t\tawait checkOutlookCredentials.mutateAsync();\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Outlook_Sync_Success') });"
        },
        "depth_rank": 10
    },
    {
        "file": "OutlookEventsList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventsList.tsx",
        "code": {
            "outlookUrl": "const OutlookEventsList = ({ onClose, changeRoute }: OutlookEventsListProps): ReactElement => {\nconst OutlookEventsList = ({ onClose, changeRoute }: OutlookEventsListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst outlookUrl = useSetting<string>('Outlook_Calendar_Outlook_Url');\n\tconst outlookUrl = useSetting<string>('Outlook_Calendar_Outlook_Url');\n\tconst { authEnabled, isError, error } = useOutlookAuthentication();\n\tconst { authEnabled, isError, error } = useOutlookAuthentication();",
            "total": "\tconst syncOutlookCalendar = useMutationOutlookCalendarSync();\n\tconst syncOutlookCalendar = useMutationOutlookCalendarSync();\n\n\tconst calendarListResult = useOutlookCalendarListForToday();\n\tconst calendarListResult = useOutlookCalendarListForToday();\n\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\tif (calendarListResult.isLoading) {\n\t\treturn <ContextualbarSkeleton />;\n\t}\n\n\tconst calendarEvents = calendarListResult.data;\n\tconst calendarEvents = calendarListResult.data;\n\tconst total = calendarEvents?.length || 0;\n\tconst total = calendarEvents?.length || 0;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='calendar' />\n\t\t\t\t<ContextualbarTitle>{t('Outlook_calendar')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "OutlookEventItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventItem.tsx",
        "code": {
            "handleOpenEvent": "\tconst handleOpenEvent = () => {\n\tconst handleOpenEvent = () => {\n\t\tsetModal(\n\t\t\t<OutlookCalendarEventModal\n\t\t\t\tonClose={() => setModal(null)}"
        },
        "depth_rank": 10
    },
    {
        "file": "OutlookEventItemContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/outlookCalendar/OutlookEventsList/OutlookEventItemContent.tsx",
        "code": {
            "sanitize": "const OutlookEventItemContent = ({ html, options }: SanitizeProps) => {\nconst OutlookEventItemContent = ({ html, options }: SanitizeProps) => {\n\tconst defaultOptions = {\n\tconst defaultOptions = {\n\t\tALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a', 'br'],\n\t\tALLOWED_ATTR: ['href'],\n\t};\n\n\tconst sanitize = (dirtyHTML: SanitizeProps['html'], options: SanitizeProps['options']) => ({\n\tconst sanitize = (dirtyHTML: SanitizeProps['html'], options: SanitizeProps['options']) => ({\n\t\t__html: DOMPurify.sanitize(dirtyHTML, { ...defaultOptions, ...options }).toString(),"
        },
        "depth_rank": 10
    },
    {
        "file": "ConferencePageError.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/conference/ConferencePageError.tsx",
        "code": {
            "route": "const ConferencePageError = () => {\nconst ConferencePageError = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst route = useRoute('login');\n\tconst route = useRoute('login');\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<PageHeader title={t('Video_Conference')} />"
        },
        "depth_rank": 9
    },
    {
        "file": "ConferencePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/conference/ConferencePage.tsx",
        "code": {
            "callUrlParam": "const getQueryParams = () => {\nconst getQueryParams = () => {\n\tconst queryString = window.location.search;\n\tconst queryString = window.location.search;\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst callUrlParam = urlParams.get('callUrl');\n\tconst callUrlParam = urlParams.get('callUrl');\n\n\treturn { callUrlParam };",
            "userDisplayName": "const ConferencePage = (): ReactElement => {\nconst ConferencePage = (): ReactElement => {\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst defaultRoute = useRoute('home');\n\tconst defaultRoute = useRoute('home');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });\n\tconst userDisplayName = useUserDisplayName({ name: user?.name, username: user?.username });"
        },
        "depth_rank": 9
    },
    {
        "file": "RealTimeMonitoringPage.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/RealTimeMonitoringPage.js",
        "code": {
            "reloadRef": "const dateRange = getDateRange();\nconst dateRange = getDateRange();\n\nconst RealTimeMonitoringPage = () => {\nconst RealTimeMonitoringPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [reloadFrequency, setReloadFrequency] = useState(5);\n\tconst [reloadFrequency, setReloadFrequency] = useState(5);\n\tconst [departmentId, setDepartment] = useState('');\n\tconst [departmentId, setDepartment] = useState('');\n\n\tconst reloadRef = useRef({});\n\tconst reloadRef = useRef({});",
            "departmentParams": "\tconst departmentParams = useMemo(\n\tconst departmentParams = useMemo(\n\t\t() => ({\n\t\t\t...(departmentId && { departmentId }),",
            "reloadOptions": "\tconst reloadOptions = useMemo(\n\tconst reloadOptions = useMemo(\n\t\t() => [\n\t\t\t[5, <Fragment key='5 seconds'>5 {t('seconds')}</Fragment>],"
        },
        "depth_rank": 10
    },
    {
        "file": "ProductivityOverview.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/overviews/ProductivityOverview.js",
        "code": {
            "defaultValue": "const defaultValue = { title: '', value: '00:00:00' };\nconst defaultValue = { title: '', value: '00:00:00' };"
        },
        "depth_rank": 11
    },
    {
        "file": "ChatsOverview.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/overviews/ChatsOverview.js",
        "code": {
            "initialData": "const initialData = [\nconst initialData = [\n\t{ title: '', value: 0 },"
        },
        "depth_rank": 11
    },
    {
        "file": "CounterContainer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/counter/CounterContainer.js",
        "code": {
            "t": "const CounterContainer = ({ data, state, initialData, ...props }) => {\nconst CounterContainer = ({ data, state, initialData, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [displayData, setDisplayData] = useState(initialData);\n\tconst [displayData, setDisplayData] = useState(initialData);\n\n\tconst { totalizers } = data || { totalizers: initialData };\n\tconst { totalizers } = data || { totalizers: initialData };"
        },
        "depth_rank": 11
    },
    {
        "file": "CounterRow.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/counter/CounterRow.js",
        "code": {
            "CounterRow": "const CounterRow = ({ children, ...props }) => (\nconst CounterRow = ({ children, ...props }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ChatsChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsChart.js",
        "code": {
            "updateChartData": "const labels = ['Open', 'Queued', 'On_Hold_Chats', 'Closed'];\nconst labels = ['Open', 'Queued', 'On_Hold_Chats', 'Closed'];\n\nconst initialData = {\nconst initialData = {\n\topen: 0,\n\tqueued: 0,\n\tonhold: 0,\n\tclosed: 0,\n};\n\nconst init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawDoughnutChart(\n\t\tcanvas,\n\t\tt('Chats'),\n\t\tcontext,\n\t\tlabels.map((l) => t(l)),\n\t\tObject.values(initialData),\n\t);\n\nconst ChatsChart = ({ params, reloadRef, ...props }) => {\nconst ChatsChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/chats', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/chats', { params });",
            "initChart": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tupdateChartData(t('Open'), [open]);\n\t\t\tupdateChartData(t('Closed'), [closed]);\n\t\t\tupdateChartData(t('On_Hold_Chats'), [onhold]);\n\t\t\tupdateChartData(t('Queued'), [queued]);\n\t\t}\n\t}, [closed, open, queued, onhold, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ChatDurationChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatDurationChart.js",
        "code": {
            "tooltipCallbacks": "const [labels, initialData] = getMomentChartLabelsAndData();\nconst [labels, initialData] = getMomentChartLabelsAndData();\nconst tooltipCallbacks = {\nconst tooltipCallbacks = {\n\tcallbacks: {\n\t\ttitle([ctx]) {\n\t\t\tconst { dataset } = ctx;\n\t\t\tconst { dataset } = ctx;",
            "updateChartData": "const init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawLineChart(canvas, context, [t('Avg_chat_duration'), t('Longest_chat_duration')], labels, [initialData, initialData.slice()], {\n\t\tlegends: true,\n\t\tanim: true,\n\t\tsmallTicks: true,\n\t\tdisplayColors: false,\n\t\ttooltipCallbacks,\n\t});\n\nconst ChatDurationChart = ({ params, reloadRef, ...props }) => {\nconst ChatDurationChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });",
            "label": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tupdateChartData(label, [avg, longest]);\n\t\t}\n\t}, [avg, longest, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ChatsPerAgentChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsPerAgentChart.js",
        "code": {
            "initialData": "const initialData = {\nconst initialData = {\n\tagents: {},",
            "initChart": "\tconst chartData = data ?? initialData;\n\tconst chartData = data ?? initialData;\n\n\tuseEffect(() => {\n\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tif (chartData && chartData.success) {\n\t\t\t\tdelete chartData.success;\n\t\t\t\tObject.entries(chartData).forEach(([name, value]) => {\n\t\t\t\t\tupdateChartData(name, [value.open, value.closed, value.onhold]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [chartData, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ResponseTimesChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ResponseTimesChart.js",
        "code": {
            "tooltipCallbacks": "const [labels, initialData] = getMomentChartLabelsAndData();\nconst [labels, initialData] = getMomentChartLabelsAndData();\nconst tooltipCallbacks = {\nconst tooltipCallbacks = {\n\tcallbacks: {\n\t\ttitle([ctx]) {\n\t\t\tconst { dataset } = ctx;\n\t\t\tconst { dataset } = ctx;",
            "init": "const init = (canvas, context, t) =>\nconst init = (canvas, context, t) =>\n\tdrawLineChart(\n\t\tcanvas,\n\t\tcontext,\n\t\t[t('Avg_reaction_time'), t('Longest_reaction_time'), t('Avg_response_time'), t('Longest_response_time')],\n\t\tlabels,\n\t\t[initialData, initialData.slice(), initialData.slice(), initialData.slice()],\n\t\t{ legends: true, anim: true, smallTicks: true, displayColors: false, tooltipCallbacks },",
            "updateChartData": "const ResponseTimesChart = ({ params, reloadRef, ...props }) => {\nconst ResponseTimesChart = ({ params, reloadRef, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst canvas = useRef();\n\tconst canvas = useRef();\n\tconst context = useRef();\n\tconst context = useRef();\n\n\tconst updateChartData = useUpdateChartData({\n\tconst updateChartData = useUpdateChartData({\n\t\tcontext,\n\t\tcanvas,\n\t\tt,\n\t\tinit,\n\t});\n\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });\n\tconst { value: data, phase: state, reload } = useEndpointData('/v1/livechat/analytics/dashboards/charts/timings', { params });",
            "label": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tconst label = getMomentCurrentLabel();\n\t\t\tupdateChartData(label, [reactionAvg, reactionLongest, responseAvg, responseLongest]);\n\t\t}\n\t}, [reactionAvg, reactionLongest, responseAvg, responseLongest, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentStatusChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/AgentStatusChart.js",
        "code": {
            "initChart": "\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED && context.current) {\n\t\t\tupdateChartData(t('Offline'), [offline]);\n\t\t\tupdateChartData(t('Available'), [available]);\n\t\t\tupdateChartData(t('Away'), [away]);\n\t\t\tupdateChartData(t('Busy'), [busy]);\n\t\t}\n\t}, [available, away, busy, offline, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ChatsPerDepartmentChart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/ChatsPerDepartmentChart.js",
        "code": {
            "initialData": "const initialData = {\nconst initialData = {\n\tdepartments: {},",
            "initChart": "\tconst chartData = data ?? initialData;\n\tconst chartData = data ?? initialData;\n\n\tuseEffect(() => {\n\t\tconst initChart = async () => {\n\t\tconst initChart = async () => {\n\t\t\tcontext.current = await init(canvas.current, context.current, t);\n\t\t};\n\t\tinitChart();\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tif (state === AsyncStatePhase.RESOLVED) {\n\t\t\tif (chartData && chartData.success) {\n\t\t\t\tdelete chartData.success;\n\t\t\t\tObject.entries(chartData).forEach(([name, value]) => {\n\t\t\t\t\tupdateChartData(name, [value.open, value.closed]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [chartData, state, t, updateChartData]);\n\n\treturn <Chart ref={canvas} {...props} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "Chart.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/realTimeMonitoring/charts/Chart.js",
        "code": {
            "Chart": "const style = {\nconst style = {\n\tminHeight: '250px',\n};\nconst Chart = forwardRef(function Chart(props, ref) {\nconst Chart = forwardRef(function Chart(props, ref) {\n\treturn (\n\t\t<Box padding='x20' height='x300' {...props}>"
        },
        "depth_rank": 11
    },
    {
        "file": "EditBusinessHours.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/EditBusinessHours.tsx",
        "code": {
            "methods": "const EditBusinessHours = ({ businessHourData, type }: EditBusinessHoursProps) => {\nconst EditBusinessHours = ({ businessHourData, type }: EditBusinessHoursProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst isSingleBH = useIsSingleBusinessHours();\n\tconst isSingleBH = useIsSingleBusinessHours();\n\n\tconst saveBusinessHour = useMethod('livechat:saveBusinessHour');\n\tconst saveBusinessHour = useMethod('livechat:saveBusinessHour');\n\tconst handleRemove = useRemoveBusinessHour();\n\tconst handleRemove = useRemoveBusinessHour();\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst methods = useForm({ values: getInitialData(businessHourData) });\n\tconst methods = useForm({ values: getInitialData(businessHourData) });",
            "payload": "\tconst handleSave = useMutableCallback(async ({ departments, ...data }: BusinessHoursFormData) => {\n\tconst handleSave = useMutableCallback(async ({ departments, ...data }: BusinessHoursFormData) => {\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\t\tconst departmentsToApplyBusinessHour = departments?.map((dep) => dep.value).join(',') || '';\n\n\t\ttry {\n\t\t\tconst payload = {\n\t\t\tconst payload = {\n\t\t\t\t...data,\n\t\t\t\t...(businessHourData?._id && { _id: businessHourData._id }),",
            "formId": "\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Business_Hours')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "BusinessHoursForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/BusinessHoursForm.tsx",
        "code": {
            "timeZones": "const BusinessHoursForm = ({ type }: { type?: 'default' | 'custom' }) => {\nconst BusinessHoursForm = ({ type }: { type?: 'default' | 'custom' }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst timeZones = useTimezoneNameList();\n\tconst timeZones = useTimezoneNameList();\n\tconst timeZonesOptions: SelectOption[] = useMemo(() => timeZones.map((name) => [name, t(name as TranslationKey)]), [t, timeZones]);\n\tconst timeZonesOptions: SelectOption[] = useMemo(() => timeZones.map((name) => [name, t(name as TranslationKey)]), [t, timeZones]);\n\tconst daysOptions: SelectOption[] = useMemo(() => DAYS_OF_WEEK.map((day) => [day, t(day as TranslationKey)]), [t]);\n\tconst daysOptions: SelectOption[] = useMemo(() => DAYS_OF_WEEK.map((day) => [day, t(day as TranslationKey)]), [t]);\n\n\tconst { watch, control } = useFormContext<BusinessHoursFormData>();\n\tconst { watch, control } = useFormContext<BusinessHoursFormData>();",
            "newValues": "\tconst timezoneField = useUniqueId();\n\tconst timezoneField = useUniqueId();\n\tconst daysOpenField = useUniqueId();\n\tconst daysOpenField = useUniqueId();\n\tconst daysTimeField = useUniqueId();\n\tconst daysTimeField = useUniqueId();\n\n\tconst handleChangeDaysTime = (values: string[]) => {\n\tconst handleChangeDaysTime = (values: string[]) => {\n\t\tconst newValues = values\n\t\tconst newValues = values\n\t\t\t.map((item) => daysTime.find(({ day }) => day === item) || defaultWorkHours(true).find(({ day }) => day === item))"
        },
        "depth_rank": 10
    },
    {
        "file": "BusinessHoursDisabledPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/businessHours/BusinessHoursDisabledPage.tsx",
        "code": {
            "isAdmin": "const BusinessHoursDisabledPage = () => {\nconst BusinessHoursDisabledPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst isAdmin = useRole('admin');\n\tconst isAdmin = useRole('admin');\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Business_Hours')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "EditTriggerWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/EditTriggerWithData.tsx",
        "code": {
            "getTriggersById": "const EditTriggerWithData = ({ triggerId }: { triggerId: ILivechatTrigger['_id'] }) => {\nconst EditTriggerWithData = ({ triggerId }: { triggerId: ILivechatTrigger['_id'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getTriggersById = useEndpoint('GET', '/v1/livechat/triggers/:_id', { _id: triggerId });\n\tconst getTriggersById = useEndpoint('GET', '/v1/livechat/triggers/:_id', { _id: triggerId });"
        },
        "depth_rank": 10
    },
    {
        "file": "EditTrigger.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/EditTrigger.tsx",
        "code": {
            "saveTrigger": "const EditTrigger = ({ triggerData }: { triggerData?: Serialized<ILivechatTrigger> }) => {\nconst EditTrigger = ({ triggerData }: { triggerData?: Serialized<ILivechatTrigger> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveTrigger = useEndpoint('POST', '/v1/livechat/triggers');\n\tconst saveTrigger = useEndpoint('POST', '/v1/livechat/triggers');\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty, errors },",
            "saveTriggerMutation": "\tconst senderOptions: SelectOption[] = useMemo(\n\tconst senderOptions: SelectOption[] = useMemo(\n\t\t() => [\n\t\t\t['queue', t('Impersonate_next_agent_from_queue')],\n\t\t\t['custom', t('Custom_agent')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst saveTriggerMutation = useMutation({\n\tconst saveTriggerMutation = useMutation({\n\t\tmutationFn: saveTrigger,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "handleSave": "\tconst handleSave = async (data: TriggersPayload) => {\n\tconst handleSave = async (data: TriggersPayload) => {\n\t\tsaveTriggerMutation.mutateAsync({ ...data, _id: triggerData?._id });",
            "actionMessageField": "\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst runOnceField = useUniqueId();\n\tconst runOnceField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst conditionField = useUniqueId();\n\tconst conditionField = useUniqueId();\n\tconst actionField = useUniqueId();\n\tconst actionField = useUniqueId();\n\tconst actionMessageField = useUniqueId();\n\tconst actionMessageField = useUniqueId();\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{triggerData?._id ? t('Edit_Trigger') : t('New_Trigger')}</ContextualbarTitle>",
            "conditionValuePlaceholder": "\t\t\t\t\t\t\tconst conditionValuePlaceholder = conditionValuePlaceholders[conditions[index].name];\n\t\t\t\t\t\t\tconst conditionValuePlaceholder = conditionValuePlaceholders[conditions[index].name];\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Field key={index}>"
        },
        "depth_rank": 10
    },
    {
        "file": "TriggersTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersTable.tsx",
        "code": {
            "handleAddNew": "const TriggersTable = () => {\nconst TriggersTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleAddNew = useMutableCallback(() => {\n\tconst handleAddNew = useMutableCallback(() => {\n\t\trouter.navigate('/omnichannel/triggers/new');\n\t});\n\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(() => ({ offset: current, count: itemsPerPage }), [current, itemsPerPage]);\n\tconst query = useMemo(() => ({ offset: current, count: itemsPerPage }), [current, itemsPerPage]);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 10
    },
    {
        "file": "TriggersRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersRow.tsx",
        "code": {
            "deleteTrigger": "\tconst deleteTrigger = useEndpoint('DELETE', '/v1/livechat/triggers/:_id', { _id });\n\tconst deleteTrigger = useEndpoint('DELETE', '/v1/livechat/triggers/:_id', { _id });",
            "onDeleteTrigger": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteTrigger = async () => {\n\t\tconst onDeleteTrigger = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteTrigger();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Trigger_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "TriggersPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/triggers/TriggersPage.tsx",
        "code": {
            "router": "const TriggersPage = () => {\nconst TriggersPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Livechat_Triggers')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppearancePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearancePage.tsx",
        "code": {
            "reduceAppearance": "const reduceAppearance = (settings: Serialized<ISetting>[]): AppearanceSettings =>\nconst reduceAppearance = (settings: Serialized<ISetting>[]): AppearanceSettings =>\n\tsettings.reduce<Partial<LivechatAppearanceSettings>>((acc, { _id, value }) => {\n\t\tacc = { ...acc, [_id]: value };",
            "methods": "const AppearancePage = ({ settings }: { settings: Serialized<ISetting>[] }) => {\nconst AppearancePage = ({ settings }: { settings: Serialized<ISetting>[] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveAction = useEndpoint('POST', '/v1/livechat/appearance');\n\tconst saveAction = useEndpoint('POST', '/v1/livechat/appearance');\n\n\tconst methods = useForm({ defaultValues: reduceAppearance(settings) });\n\tconst methods = useForm({ defaultValues: reduceAppearance(settings) });",
            "mappedAppearance": "\tconst currentData = watch();\n\tconst currentData = watch();\n\n\tconst handleSave = useMutableCallback(async (data) => {\n\tconst handleSave = useMutableCallback(async (data) => {\n\t\tconst mappedAppearance = Object.entries(data).map(([_id, value]) => ({ _id, value })) as {\n\t\tconst mappedAppearance = Object.entries(data).map(([_id, value]) => ({ _id, value })) as {\n\t\t\t_id: string;\n\t\t\tvalue: string | boolean | number;\n\t\t}[];\n\n\t\ttry {\n\t\t\tawait saveAction(mappedAppearance);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Settings_updated') });",
            "formId": "\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Appearance')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "AppearanceForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearanceForm.tsx",
        "code": {
            "t": "const AppearanceForm = () => {\nconst AppearanceForm = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { control, watch } = useFormContext();\n\tconst { control, watch } = useFormContext();",
            "livechatConversationFinishedTextField": "\tconst livechatTitleField = useUniqueId();\n\tconst livechatTitleField = useUniqueId();\n\tconst livechatTitleColorField = useUniqueId();\n\tconst livechatTitleColorField = useUniqueId();\n\tconst livechatEnableMessageCharacterLimit = useUniqueId();\n\tconst livechatEnableMessageCharacterLimit = useUniqueId();\n\tconst livechatMessageCharacterLimit = useUniqueId();\n\tconst livechatMessageCharacterLimit = useUniqueId();\n\tconst livechatShowAgentInfo = useUniqueId();\n\tconst livechatShowAgentInfo = useUniqueId();\n\tconst livechatShowAgentEmail = useUniqueId();\n\tconst livechatShowAgentEmail = useUniqueId();\n\tconst livechatDisplayOfflineForm = useUniqueId();\n\tconst livechatDisplayOfflineForm = useUniqueId();\n\tconst livechatOfflineFormUnavailableField = useUniqueId();\n\tconst livechatOfflineFormUnavailableField = useUniqueId();\n\tconst livechatOfflineMessageField = useUniqueId();\n\tconst livechatOfflineMessageField = useUniqueId();\n\tconst livechatOfflineTitleField = useUniqueId();\n\tconst livechatOfflineTitleField = useUniqueId();\n\tconst livechatOfflineTitleColorField = useUniqueId();\n\tconst livechatOfflineTitleColorField = useUniqueId();\n\tconst livechatOfflineEmailField = useUniqueId();\n\tconst livechatOfflineEmailField = useUniqueId();\n\tconst livechatOfflineSuccessMessageField = useUniqueId();\n\tconst livechatOfflineSuccessMessageField = useUniqueId();\n\tconst livechatRegistrationForm = useUniqueId();\n\tconst livechatRegistrationForm = useUniqueId();\n\tconst livechatNameFieldRegistrationForm = useUniqueId();\n\tconst livechatNameFieldRegistrationForm = useUniqueId();\n\tconst livechatEmailFieldRegistrationForm = useUniqueId();\n\tconst livechatEmailFieldRegistrationForm = useUniqueId();\n\tconst livechatRegistrationFormMessageField = useUniqueId();\n\tconst livechatRegistrationFormMessageField = useUniqueId();\n\tconst livechatConversationFinishedMessageField = useUniqueId();\n\tconst livechatConversationFinishedMessageField = useUniqueId();\n\tconst livechatConversationFinishedTextField = useUniqueId();\n\tconst livechatConversationFinishedTextField = useUniqueId();\n\n\treturn (\n\t\t<Accordion>\n\t\t\t<Accordion.Item defaultExpanded title={t('Livechat_online')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AppearancePageContainer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/appearance/AppearancePageContainer.tsx",
        "code": {
            "t": "const AppearancePageContainer: FC = () => {\nconst AppearancePageContainer: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/appearance');\n\tconst { value: data, phase: state, error } = useEndpointData('/v1/livechat/appearance');"
        },
        "depth_rank": 10
    },
    {
        "file": "RemoveManagerButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/managers/RemoveManagerButton.tsx",
        "code": {
            "deleteAction": "const RemoveManagerButton = ({ _id, reload }: { _id: string; reload: () => void }): ReactElement => {\nconst RemoveManagerButton = ({ _id, reload }: { _id: string; reload: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/manager/:_id', { keys: { _id } });\n\tconst deleteAction = useEndpointAction('DELETE', '/v1/livechat/users/manager/:_id', { keys: { _id } });",
            "onDeleteManager": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tawait deleteAction();\n\t\treload();\n\t});\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteManager = async (): Promise<void> => {\n\t\tconst onDeleteManager = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Manager_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "ManagersTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/managers/ManagersTable.tsx",
        "code": {
            "debouncedText": "const ManagersTable = () => {\nconst ManagersTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address'>('name');",
            "query": "\tconst query = useDebouncedValue(\n\tconst query = useDebouncedValue(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\ttext: debouncedText,\n\t\t\t\tfields: JSON.stringify({ name: 1, username: 1, emails: 1, avatarETag: 1 }),",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 10
    },
    {
        "file": "AddManager.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/managers/AddManager.tsx",
        "code": {
            "handleSave": "const AddManager = ({ reload }: { reload: () => void }): ReactElement => {\nconst AddManager = ({ reload }: { reload: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [username, setUsername] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveAction = useEndpointAction('POST', '/v1/livechat/users/manager');\n\tconst saveAction = useEndpointAction('POST', '/v1/livechat/users/manager');\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait saveAction({ username });",
            "handleChange": "\tconst handleChange = (value: unknown): void => {\n\tconst handleChange = (value: unknown): void => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetUsername(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Box display='flex' alignItems='center'>\n\t\t\t<Field>\n\t\t\t\t<FieldLabel>{t('Username')}</FieldLabel>"
        },
        "depth_rank": 10
    },
    {
        "file": "QueueListPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/queueList/QueueListPage.tsx",
        "code": {
            "t": "const QueueListPage = () => {\nconst QueueListPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Livechat_Queue')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "QueueListTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/queueList/QueueListTable.tsx",
        "code": {
            "t": "const QueueListTable = (): ReactElement => {\nconst QueueListTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t{mediaQuery && (\n\t\t\t\t<GenericTableHeaderCell key='servedBy' direction={sortDirection} active={sortBy === 'servedBy'} onClick={setSort} sort='servedBy'>",
            "query": "\tconst query = useMemo(() => {\n\tconst query = useMemo(() => {\n\t\tconst query: {\n\t\tconst query: {\n\t\t\tagentId?: string;\n\t\t\tincludeOfflineAgents?: 'true' | 'false';\n\t\t\tdepartmentId?: string;\n\t\t\tsort: string;\n\t\t\tcount: number;\n\t\t} = {"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomFieldsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/CustomFieldsPage.tsx",
        "code": {
            "id": "const CustomFieldsPage = () => {\nconst CustomFieldsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Custom_Fields')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "useRemoveCustomField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/useRemoveCustomField.tsx",
        "code": {
            "onDeleteAgent": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeCustomField = useMethod('livechat:removeCustomField');\n\tconst removeCustomField = useMethod('livechat:removeCustomField');\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDelete = useMutableCallback((id) => {\n\tconst handleDelete = useMutableCallback((id) => {\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait removeCustomField(id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Field_Removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "EditCustomFields.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/EditCustomFields.tsx",
        "code": {
            "methods": "const EditCustomFields = ({ customFieldData }: { customFieldData?: Serialized<ILivechatCustomField> }) => {\nconst EditCustomFields = ({ customFieldData }: { customFieldData?: Serialized<ILivechatCustomField> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleDelete = useRemoveCustomField();\n\tconst handleDelete = useRemoveCustomField();\n\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValues(customFieldData) });\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValues(customFieldData) });",
            "handleSave": "\tconst saveCustomField = useMethod('livechat:saveCustomField');\n\tconst saveCustomField = useMethod('livechat:saveCustomField');\n\n\tconst handleSave = useMutableCallback(async ({ visibility, ...data }) => {\n\tconst handleSave = useMutableCallback(async ({ visibility, ...data }) => {\n\t\ttry {\n\t\t\tawait saveCustomField(customFieldData?._id as unknown as string, {\n\t\t\t\tvisibility: visibility ? 'visible' : 'hidden',\n\t\t\t\t...data,\n\t\t\t});\n\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "regexpField": "\tconst scopeOptions: SelectOption[] = useMemo(\n\tconst scopeOptions: SelectOption[] = useMemo(\n\t\t() => [\n\t\t\t['visitor', t('Visitor')],\n\t\t\t['room', t('Room')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst fieldField = useUniqueId();\n\tconst fieldField = useUniqueId();\n\tconst labelField = useUniqueId();\n\tconst labelField = useUniqueId();\n\tconst scopeField = useUniqueId();\n\tconst scopeField = useUniqueId();\n\tconst visibilityField = useUniqueId();\n\tconst visibilityField = useUniqueId();\n\tconst searchableField = useUniqueId();\n\tconst searchableField = useUniqueId();\n\tconst regexpField = useUniqueId();\n\tconst regexpField = useUniqueId();\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{customFieldData?._id ? t('Edit_Custom_Field') : t('New_Custom_Field')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomFieldsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/customFields/CustomFieldsTable.tsx",
        "code": {
            "debouncedFilter": "const CustomFieldsTable = () => {\nconst CustomFieldsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='field' direction={sortDirection} active={sortBy === '_id'} onClick={setSort} sort='_id'>"
        },
        "depth_rank": 10
    },
    {
        "file": "NewDepartment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/NewDepartment.tsx",
        "code": {
            "getDepartmentCreationAvailable": "const NewDepartment = ({ id }: NewDepartmentProps) => {\nconst NewDepartment = ({ id }: NewDepartmentProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst getDepartmentCreationAvailable = useEndpoint('GET', '/v1/livechat/department/isDepartmentCreationAvailable');\n\tconst getDepartmentCreationAvailable = useEndpoint('GET', '/v1/livechat/department/isDepartmentCreationAvailable');\n\tconst { data, isLoading, isError } = useQuery(['getDepartments'], () => getDepartmentCreationAvailable(), {\n\tconst { data, isLoading, isError } = useQuery(['getDepartments'], () => getDepartmentCreationAvailable(), {\n\t\tonSuccess: (data) => {\n\t\t\tif (data.isDepartmentCreationAvailable === false) {\n\t\t\t\tsetModal(<EnterpriseDepartmentsModal closeModal={(): void => setModal(null)} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "EditDepartmentWithAllowedForwardData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartmentWithAllowedForwardData.tsx",
        "code": {
            "getDepartmentListByIds": "const EditDepartmentWithAllowedForwardData = ({ data, ...props }: Omit<EditDepartmentProps, 'allowedToForwardData'>) => {\nconst EditDepartmentWithAllowedForwardData = ({ data, ...props }: Omit<EditDepartmentProps, 'allowedToForwardData'>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartmentListByIds = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\tconst getDepartmentListByIds = useEndpoint('GET', '/v1/livechat/department.listByIds');\n\n\tconst {\n\tconst {\n\t\tdata: allowedToForwardData,\n\t\tisInitialLoading,\n\t\tisError,\n\t} = useQuery(['/v1/livechat/department.listByIds', data?.department?.departmentsAllowedToForward], () =>\n\t\tgetDepartmentListByIds({\n\t\t\tids: data?.department?.departmentsAllowedToForward ?? [],\n\t\t}),\n\t);\n\n\tif (isInitialLoading) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tif (isError) {\n\t\treturn <Box mbs={16}>{t('Not_Available')}</Box>;"
        },
        "depth_rank": 10
    },
    {
        "file": "EditDepartment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartment.tsx",
        "code": {
            "queryClient": "function EditDepartment({ data, id, title, allowedToForwardData }: EditDepartmentProps) {\nfunction EditDepartment({ data, id, title, allowedToForwardData }: EditDepartmentProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst { department, agents = [] } = data || {};\n\tconst { department, agents = [] } = data || {};",
            "initialValues": "\tconst initialValues = getInitialValues({ department, agents, allowedToForwardData });\n\tconst initialValues = getInitialValues({ department, agents, allowedToForwardData });",
            "debouncedFallbackFilter": "\tconst requestTagBeforeClosingChat = watch('requestTagBeforeClosingChat');\n\tconst requestTagBeforeClosingChat = watch('requestTagBeforeClosingChat');\n\n\tconst [fallbackFilter, setFallbackFilter] = useState<string>('');\n\tconst [fallbackFilter, setFallbackFilter] = useState<string>('');\n\n\tconst debouncedFallbackFilter = useDebouncedValue(fallbackFilter, 500);\n\tconst debouncedFallbackFilter = useDebouncedValue(fallbackFilter, 500);\n\n\tconst { itemsList: RoomsList, loadMoreItems: loadMoreRooms } = useRoomsList(\n\tconst { itemsList: RoomsList, loadMoreItems: loadMoreRooms } = useRoomsList(",
            "saveDepartmentAgentsInfoOnEdit": "\tconst saveDepartmentInfo = useMethod('livechat:saveDepartment');\n\tconst saveDepartmentInfo = useMethod('livechat:saveDepartment');\n\tconst saveDepartmentAgentsInfoOnEdit = useEndpoint('POST', `/v1/livechat/department/:_id/agents`, { _id: id || '' });\n\tconst saveDepartmentAgentsInfoOnEdit = useEndpoint('POST', `/v1/livechat/department/:_id/agents`, { _id: id || '' });",
            "payload": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleSave = useMutableCallback(async (data: FormValues) => {\n\tconst handleSave = useMutableCallback(async (data: FormValues) => {\n\t\tconst {\n\t\tconst {\n\t\t\tagentList,\n\t\t\tenabled,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tshowOnRegistration,\n\t\t\tshowOnOfflineForm,\n\t\t\temail,\n\t\t\tchatClosingTags,\n\t\t\tofflineMessageChannelName,\n\t\t\tmaxNumberSimultaneousChat,\n\t\t\tvisitorInactivityTimeoutInSeconds,\n\t\t\tabandonedRoomsCloseCustomMessage,\n\t\t\twaitingQueueMessage,\n\t\t\tdepartmentsAllowedToForward,\n\t\t\tfallbackForwardDepartment,\n\t\t} = data;\n\n\t\tconst payload = {\n\t\tconst payload = {\n\t\t\tenabled,\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tshowOnRegistration,\n\t\t\tshowOnOfflineForm,\n\t\t\trequestTagBeforeClosingChat,\n\t\t\temail,\n\t\t\tchatClosingTags,\n\t\t\tofflineMessageChannelName,\n\t\t\tmaxNumberSimultaneousChat,\n\t\t\tvisitorInactivityTimeoutInSeconds,\n\t\t\tabandonedRoomsCloseCustomMessage,\n\t\t\twaitingQueueMessage,\n\t\t\tdepartmentsAllowedToForward: departmentsAllowedToForward?.map((dep) => dep.value),\n\t\t\tfallbackForwardDepartment,\n\t\t};\n\n\t\ttry {\n\t\t\tif (id) {\n\t\t\t\tconst { agentList: initialAgentList } = initialValues;\n\t\t\t\tconst { agentList: initialAgentList } = initialValues;",
            "chatClosingTagsField": "\tconst isFormValid = isValid && isDirty;\n\tconst isFormValid = isValid && isDirty;\n\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst showOnRegistrationField = useUniqueId();\n\tconst showOnRegistrationField = useUniqueId();\n\tconst emailField = useUniqueId();\n\tconst emailField = useUniqueId();\n\tconst showOnOfflineFormField = useUniqueId();\n\tconst showOnOfflineFormField = useUniqueId();\n\tconst offlineMessageChannelNameField = useUniqueId();\n\tconst offlineMessageChannelNameField = useUniqueId();\n\tconst fallbackForwardDepartmentField = useUniqueId();\n\tconst fallbackForwardDepartmentField = useUniqueId();\n\tconst requestTagBeforeClosingChatField = useUniqueId();\n\tconst requestTagBeforeClosingChatField = useUniqueId();\n\tconst chatClosingTagsField = useUniqueId();\n\tconst chatClosingTagsField = useUniqueId();\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={title} onClickBack={() => router.navigate('/omnichannel/departments')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "EditDepartmentWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/EditDepartmentWithData.tsx",
        "code": {
            "params": "const params = { onlyMyDepartments: 'true' } as const;\nconst params = { onlyMyDepartments: 'true' } as const;",
            "getDepartment": "const EditDepartmentWithData = ({ id, title }: EditDepartmentWithDataProps) => {\nconst EditDepartmentWithData = ({ id, title }: EditDepartmentWithDataProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: id ?? '' });\n\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: id ?? '' });"
        },
        "depth_rank": 10
    },
    {
        "file": "DepartmentsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsPage.tsx",
        "code": {
            "onAddNew": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\n\tconst handleTabClick = useMutableCallback((tab) =>\n\tconst handleTabClick = useMutableCallback((tab) =>\n\t\tdepartmentsRoute.push({\n\t\t\tcontext: tab,\n\t\t}),\n\t);\n\n\tconst onAddNew = useMutableCallback(() =>\n\tconst onAddNew = useMutableCallback(() =>\n\t\tdepartmentsRoute.push({\n\t\t\tcontext: 'new',\n\t\t}),\n\t);\n\n\tif (context === 'new') {\n\t\treturn <NewDepartment id={id} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "DepartmentsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/DepartmentsTable.tsx",
        "code": {
            "debouncedText": "const DEPARTMENTS_ENDPOINTS = {\nconst DEPARTMENTS_ENDPOINTS = {\n\tdepartment: '/v1/livechat/department',\n\tarchived: '/v1/livechat/departments/archived',\n} as const;\n} as const;\n\nconst DepartmentsTable = ({ archived }: { archived: boolean }) => {\nconst DepartmentsTable = ({ archived }: { archived: boolean }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 11
    },
    {
        "file": "RemoveDepartmentModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/RemoveDepartmentModal.tsx",
        "code": {
            "removeDepartment": "const RemoveDepartmentModal = ({ _id = '', name, reset, onClose }: RemoveDepartmentModalProps): ReactElement => {\nconst RemoveDepartmentModal = ({ _id = '', name, reset, onClose }: RemoveDepartmentModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst removeDepartment = useEndpoint('DELETE', '/v1/livechat/department/:_id', { _id });\n\tconst removeDepartment = useEndpoint('DELETE', '/v1/livechat/department/:_id', { _id });",
            "onSubmit": "\tconst dispatchToast = useToastMessageDispatch();\n\tconst dispatchToast = useToastMessageDispatch();\n\n\tconst onSubmit = useMutableCallback(async (e) => {\n\tconst onSubmit = useMutableCallback(async (e) => {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tawait removeDepartment();\n\t\t\tdispatchToast({ type: 'success', message: t('Department_removed') });"
        },
        "depth_rank": 11
    },
    {
        "file": "DepartmentItemMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentsTable/DepartmentItemMenu.tsx",
        "code": {
            "departmentRemovalEnabled": "\tconst departmentRemovalEnabled = useSetting('Omnichannel_enable_department_removal');\n\tconst departmentRemovalEnabled = useSetting('Omnichannel_enable_department_removal');\n\tconst { _id, name } = department;\n\tconst { _id, name } = department;",
            "handleEdit": "\tconst toggleArchive = useEndpoint('POST', archived ? ARCHIVE_DEPARTMENT_ENDPOINTS.unarchive : ARCHIVE_DEPARTMENT_ENDPOINTS.archive, {\n\tconst toggleArchive = useEndpoint('POST', archived ? ARCHIVE_DEPARTMENT_ENDPOINTS.unarchive : ARCHIVE_DEPARTMENT_ENDPOINTS.archive, {\n\t\t_id,\n\t});\n\n\tconst handleEdit = useMutableCallback(() => {\n\tconst handleEdit = useMutableCallback(() => {\n\t\troute.push({ context: 'edit', id: _id });",
            "handleToggleArchive": "\tconst handleToggleArchive = useMutableCallback(async () => {\n\tconst handleToggleArchive = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait toggleArchive();\n\t\t\tdispatchToastMessage({ type: 'success', message: archived ? t('Department_unarchived') : t('Department_archived') });",
            "handlePermanentDepartmentRemoval": "\tconst handlePermanentDepartmentRemoval = useMutableCallback(() => {\n\tconst handlePermanentDepartmentRemoval = useMutableCallback(() => {\n\t\tsetModal(<RemoveDepartmentModal _id={_id} reset={handleReload} onClose={() => setModal(null)} name={name} />);"
        },
        "depth_rank": 11
    },
    {
        "file": "DepartmentAgentsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/DepartmentAgentsTable.tsx",
        "code": {
            "t": "function DepartmentAgentsTable({ control, register }: DepartmentAgentsTableProps) {\nfunction DepartmentAgentsTable({ control, register }: DepartmentAgentsTableProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { fields, append, remove } = useFieldArray({ control, name: 'agentList' });\n\tconst { fields, append, remove } = useFieldArray({ control, name: 'agentList' });",
            "agentList": "\tconst agentList = useWatch({ control, name: 'agentList' });\n\tconst agentList = useWatch({ control, name: 'agentList' });"
        },
        "depth_rank": 11
    },
    {
        "file": "AddAgent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/AddAgent.tsx",
        "code": {
            "getAgent": "function AddAgent({ agentList, onAdd }: { agentList: IDepartmentAgent[]; onAdd: (agent: IDepartmentAgent) => void }) {\nfunction AddAgent({ agentList, onAdd }: { agentList: IDepartmentAgent[]; onAdd: (agent: IDepartmentAgent) => void }) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [userId, setUserId] = useState('');\n\tconst [userId, setUserId] = useState('');\n\n\tconst getAgent = useEndpointAction('GET', '/v1/livechat/users/agent/:_id', { keys: { _id: userId } });\n\tconst getAgent = useEndpointAction('GET', '/v1/livechat/users/agent/:_id', { keys: { _id: userId } });"
        },
        "depth_rank": 11
    },
    {
        "file": "RemoveAgentButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/departments/DepartmentAgentsTable/RemoveAgentButton.tsx",
        "code": {
            "onRemoveAgent": "function RemoveAgentButton({ agentId, onRemove }: { agentId: string; onRemove: (agentId: string) => void }) {\nfunction RemoveAgentButton({ agentId, onRemove }: { agentId: string; onRemove: (agentId: string) => void }) {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\n\t\tconst onRemoveAgent = async () => {\n\t\tconst onRemoveAgent = async () => {\n\t\t\tonRemove(agentId);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 11
    },
    {
        "file": "ContactHistoryList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/ContactHistoryList.tsx",
        "code": {
            "room": "const ContactHistoryList = ({ setChatId, close }: { setChatId: Dispatch<SetStateAction<string>>; close: () => void }): ReactElement => {\nconst ContactHistoryList = ({ setChatId, close }: { setChatId: Dispatch<SetStateAction<string>>; close: () => void }): ReactElement => {\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst { itemsList: historyList, loadMoreItems } = useHistoryList(\n\tconst { itemsList: historyList, loadMoreItems } = useHistoryList(",
            "handleSearchChange": "\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetText(event.currentTarget.value);\n\t};\n\n\tconst { phase, error, items: history, itemCount: totalItemCount } = useRecordList(historyList);\n\tconst { phase, error, items: history, itemCount: totalItemCount } = useRecordList(historyList);"
        },
        "depth_rank": 10
    },
    {
        "file": "ContactHistory.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/ContactHistory.tsx",
        "code": {
            "ContactHistory": "const ContactHistory = () => {\nconst ContactHistory = () => {\n\tconst [chatId, setChatId] = useState<string>('');\n\tconst [chatId, setChatId] = useState<string>('');\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 10
    },
    {
        "file": "useHistoryList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/useHistoryList.ts",
        "code": {
            "reload": "\tconst reload = useCallback(() => setItemsList(new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>()), []);",
            "fetchData": "\tconst getHistory = useEndpoint('GET', '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId', {\n\tconst getHistory = useEndpoint('GET', '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId', {\n\t\troomId: options.roomId,\n\t\tvisitorId: options.visitorId,\n\t});\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { history, total } = await getHistory({\n\t\t\tconst { history, total } = await getHistory({\n\t\t\t\t...(options.filter && { searchText: options.filter }),"
        },
        "depth_rank": 10
    },
    {
        "file": "useHistoryMessageList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/MessageList/useHistoryMessageList.ts",
        "code": {
            "getMessages": "\tconst [itemsList, setItemsList] = useState(() => new MessageList());\n\tconst [itemsList, setItemsList] = useState(() => new MessageList());\n\tconst reload = useCallback(() => setItemsList(new MessageList()), []);\n\tconst reload = useCallback(() => setItemsList(new MessageList()), []);\n\n\tconst getMessages = useEndpoint('GET', '/v1/livechat/:rid/messages', { rid: options.roomId });\n\tconst getMessages = useEndpoint('GET', '/v1/livechat/:rid/messages', { rid: options.roomId });",
            "fetchMessages": "\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getMessages({\n\t\t\tconst { messages, total } = await getMessages({\n\t\t\t\t...(options.filter && { searchTerm: options.filter }),"
        },
        "depth_rank": 11
    },
    {
        "file": "ContactHistoryMessagesList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/contactHistory/MessageList/ContactHistoryMessagesList.tsx",
        "code": {
            "ContactHistoryMessagesList": "const ContactHistoryMessagesList = ({\nconst ContactHistoryMessagesList = ({\n\tchatId,\n\tsetChatId,\n\tclose,\n}: {",
            "handleSearchChange": "\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetText(event.currentTarget.value);\n\t};\n\n\tconst { phase, error, items: messages, itemCount: totalItemCount } = useRecordList(messageList);\n\tconst { phase, error, items: messages, itemCount: totalItemCount } = useRecordList(messageList);",
            "isNewDay": "\t\t\t\t\t\t\t\tconst isSequential = isMessageSequential(data, lastMessage, messageGroupingPeriod);\n\t\t\t\t\t\t\t\tconst isSequential = isMessageSequential(data, lastMessage, messageGroupingPeriod);\n\t\t\t\t\t\t\t\tconst isNewDay = isMessageNewDay(data, lastMessage);\n\t\t\t\t\t\t\t\tconst isNewDay = isMessageNewDay(data, lastMessage);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ContactHistoryMessage message={data} sequential={isSequential} isNewDay={isNewDay} showUserAvatar={showUserAvatar} />"
        },
        "depth_rank": 11
    },
    {
        "file": "CustomFieldsList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/CustomFieldsList.tsx",
        "code": {
            "CustomFieldsList": "const CustomFieldsList = ({ setCustomFields, allCustomFields }: CustomFieldsListProps): ReactElement => {\nconst CustomFieldsList = ({ setCustomFields, allCustomFields }: CustomFieldsListProps): ReactElement => {\n\tconst { register, watch, control } = useForm({ mode: 'onChange' });\n\tconst { register, watch, control } = useForm({ mode: 'onChange' });"
        },
        "depth_rank": 10
    },
    {
        "file": "CurrentChatsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/CurrentChatsPage.tsx",
        "code": {
            "isWorkspaceOverMacLimit": "const CurrentChatsPage = ({ id, onRowClick }: { id?: string; onRowClick: (_id: string) => void }): ReactElement => {\nconst CurrentChatsPage = ({ id, onRowClick }: { id?: string; onRowClick: (_id: string) => void }): ReactElement => {\n\tconst isWorkspaceOverMacLimit = useIsOverMacLimit();\n\tconst isWorkspaceOverMacLimit = useIsOverMacLimit();\n\tconst { sortBy, sortDirection, setSort } = useSort<'fname' | 'departmentId' | 'servedBy' | 'priorityWeight' | 'ts' | 'lm' | 'open'>(\n\tconst { sortBy, sortDirection, setSort } = useSort<'fname' | 'departmentId' | 'servedBy' | 'priorityWeight' | 'ts' | 'lm' | 'open'>(",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => currentChatQuery(params, customFields, [sortBy, sortDirection], current, itemsPerPage),\n\t\t[customFields, itemsPerPage, params, sortBy, sortDirection, current],\n\t);\n\n\tconst { data, isLoading, isSuccess } = useCurrentChats(query);\n\tconst { data, isLoading, isSuccess } = useCurrentChats(query);",
            "renderRow": "\tconst onFilter = useMutableCallback((params: DebouncedParams): void => {\n\tconst onFilter = useMutableCallback((params: DebouncedParams): void => {\n\t\tsetParams(params);\n\t\tsetCurrent(0);\n\t});\n\n\tconst renderRow = useCallback(\n\tconst renderRow = useCallback(\n\t\t(room) => {\n\t\t\tconst { _id, fname, servedBy, ts, lm, department, open, onHold, priorityWeight } = room;\n\t\t\tconst { _id, fname, servedBy, ts, lm, department, open, onHold, priorityWeight } = room;",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t{isPriorityEnabled && (\n\t\t\t\t<GenericTableHeaderCell\n\t\t\t\t\tkey='priorityWeight'\n\t\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 10
    },
    {
        "file": "FilterByText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/FilterByText.tsx",
        "code": {
            "t": "const FilterByText: FilterByTextType = ({ setFilter, reload, customFields, setCustomFields, hasCustomFields, ...props }) => {\nconst FilterByText: FilterByTextType = ({ setFilter, reload, customFields, setCustomFields, hasCustomFields, ...props }) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst statusOptions: [string, string][] = [\n\tconst statusOptions: [string, string][] = [\n\t\t['all', t('All')],\n\t\t['closed', t('Closed')],\n\t\t['opened', t('Room_Status_Open')],\n\t\t['onhold', t('On_Hold_Chats')],\n\t];\n\n\tconst [guest, setGuest] = useLocalStorage('guest', '');\n\tconst [guest, setGuest] = useLocalStorage('guest', '');\n\tconst [servedBy, setServedBy] = useLocalStorage('servedBy', 'all');\n\tconst [servedBy, setServedBy] = useLocalStorage('servedBy', 'all');\n\tconst [status, setStatus] = useLocalStorage('status', 'all');\n\tconst [status, setStatus] = useLocalStorage('status', 'all');\n\tconst [department, setDepartment] = useLocalStorage<string>('department', 'all');\n\tconst [department, setDepartment] = useLocalStorage<string>('department', 'all');\n\tconst [from, setFrom] = useLocalStorage('from', '');\n\tconst [from, setFrom] = useLocalStorage('from', '');\n\tconst [to, setTo] = useLocalStorage('to', '');\n\tconst [to, setTo] = useLocalStorage('to', '');\n\tconst [tags, setTags] = useLocalStorage<never | { label: string; value: string }[]>('tags', []);\n\tconst [tags, setTags] = useLocalStorage<never | { label: string; value: string }[]>('tags', []);",
            "onDeleteAll": "\tconst handleClearFilters = useMutableCallback(() => {\n\tconst handleClearFilters = useMutableCallback(() => {\n\t\treset();\n\t});\n\n\tconst removeClosedChats = useMethod('livechat:removeAllClosedRooms');\n\tconst removeClosedChats = useMethod('livechat:removeAllClosedRooms');\n\n\tconst handleRemoveClosed = useMutableCallback(async () => {\n\tconst handleRemoveClosed = useMutableCallback(async () => {\n\t\tconst onDeleteAll = async (): Promise<void> => {\n\t\tconst onDeleteAll = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeClosedChats();\n\t\t\t\treload?.();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "RemoveChatButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/currentChats/RemoveChatButton.tsx",
        "code": {
            "onDeleteAgent": "const RemoveChatButton: FC<{ _id: string }> = ({ _id }) => {\nconst RemoveChatButton: FC<{ _id: string }> = ({ _id }) => {\n\tconst removeCurrentChatMutation = useRemoveCurrentChatMutation();\n\tconst removeCurrentChatMutation = useRemoveCurrentChatMutation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\tremoveCurrentChatMutation.mutate(_id);\n\t});\n\n\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_removed') });"
        },
        "depth_rank": 10
    },
    {
        "file": "CallsContextualBarDirectory.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/CallsContextualBarDirectory.tsx",
        "code": {
            "handleCallsContextualbarCloseButtonClick": "\tconst bar = useRouteParameter('bar') || 'info';\n\tconst bar = useRouteParameter('bar') || 'info';\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst token = useSearchParameter('token');\n\tconst token = useSearchParameter('token');\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCallsContextualbarCloseButtonClick = (): void => {\n\tconst handleCallsContextualbarCloseButtonClick = (): void => {\n\t\tdirectoryRoute.push({ page: 'calls' });",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\trid: id || '',\n\t\t\ttoken: token || '',\n\t\t}),\n\t\t[id, token],\n\t);\n\n\tconst { value: data, phase: state, error } = useEndpointData(`/v1/voip/room`, { params: query });\n\tconst { value: data, phase: state, error } = useEndpointData(`/v1/voip/room`, { params: query });",
            "room": "\tconst room = data.room as unknown as IVoipRoom; // TODO Check why types are incompatible even though the endpoint returns an IVoipRooms\n\tconst room = data.room as unknown as IVoipRoom; // TODO Check why types are incompatible even though the endpoint returns an IVoipRooms\n\n\treturn (\n\t\t<Contextualbar>{bar === 'info' && <VoipInfo room={room} onClickClose={handleCallsContextualbarCloseButtonClick} />}</Contextualbar>"
        },
        "depth_rank": 10
    },
    {
        "file": "ContactContextualBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/ContactContextualBar.tsx",
        "code": {
            "HEADER_OPTIONS": "const HEADER_OPTIONS = {\nconst HEADER_OPTIONS = {\n\tnew: { icon: 'user', title: 'New_contact' },",
            "handleContactsContextualbarCloseButtonClick": "\tconst bar = (useRouteParameter('bar') || 'info') as BarOptions;\n\tconst bar = (useRouteParameter('bar') || 'info') as BarOptions;\n\tconst contactId = useRouteParameter('id') || '';\n\tconst contactId = useRouteParameter('id') || '';\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleContactsContextualbarCloseButtonClick = () => {\n\tconst handleContactsContextualbarCloseButtonClick = () => {\n\t\tdirectoryRoute.push({ page: 'contacts' });",
            "handleContactsContextualbarBackButtonClick": "\tconst handleContactsContextualbarBackButtonClick = () => {\n\tconst handleContactsContextualbarBackButtonClick = () => {\n\t\tdirectoryRoute.push({ page: 'contacts', id: contactId, bar: 'info' });"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatsContextualBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/ChatsContextualBar.tsx",
        "code": {
            "openInRoom": "\tconst bar = useRouteParameter('bar') || 'info';\n\tconst bar = useRouteParameter('bar') || 'info';\n\tconst id = useRouteParameter('id') || '';\n\tconst id = useRouteParameter('id') || '';\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst openInRoom = (): void => {\n\tconst openInRoom = (): void => {\n\t\tid && directoryRoute.push({ page: 'chats', id, bar: 'view' });",
            "handleChatsContextualbarCloseButtonClick": "\tconst handleChatsContextualbarCloseButtonClick = (): void => {\n\tconst handleChatsContextualbarCloseButtonClick = (): void => {\n\t\tdirectoryRoute.push({ page: 'chats' });",
            "handleChatsContextualbarBackButtonClick": "\tconst handleChatsContextualbarBackButtonClick = (): void => {\n\tconst handleChatsContextualbarBackButtonClick = (): void => {\n\t\tid && directoryRoute.push({ page: 'chats', id, bar: 'info' });"
        },
        "depth_rank": 10
    },
    {
        "file": "useVisitorInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useVisitorInfo.tsx",
        "code": {
            "getVisitorInfo": "\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst { data: { visitor } = {}, ...props } = useQuery(['/v1/livechat/visitors.info', visitorId], () => getVisitorInfo({ visitorId }), {\n\tconst { data: { visitor } = {}, ...props } = useQuery(['/v1/livechat/visitors.info', visitorId], () => getVisitorInfo({ visitorId }), {\n\t\tenabled,\n\t\tcacheTime,\n\t});\n\treturn { data: visitor, ...props };"
        },
        "depth_rank": 11
    },
    {
        "file": "useOmnichannelRoomInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useOmnichannelRoomInfo.tsx",
        "code": {
            "getRoomInfo": "\tconst getRoomInfo = useEndpoint('GET', '/v1/rooms.info');\n\tconst getRoomInfo = useEndpoint('GET', '/v1/rooms.info');\n\tconst { data: roomData, ...props } = useQuery(['/v1/rooms.info', roomId], () => getRoomInfo({ roomId }), { cacheTime, staleTime });\n\tconst { data: roomData, ...props } = useQuery(['/v1/rooms.info', roomId], () => getRoomInfo({ roomId }), { cacheTime, staleTime });"
        },
        "depth_rank": 11
    },
    {
        "file": "useSlaInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useSlaInfo.tsx",
        "code": {
            "getSLA": "\tconst getSLA = useEndpoint('GET', '/v1/livechat/sla/:slaId', { slaId });\n\tconst getSLA = useEndpoint('GET', '/v1/livechat/sla/:slaId', { slaId });"
        },
        "depth_rank": 11
    },
    {
        "file": "usePriorityInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/usePriorityInfo.tsx",
        "code": {
            "getPriority": "\tconst getPriority = useEndpoint('GET', `/v1/livechat/priorities/:priorityId`, { priorityId });\n\tconst getPriority = useEndpoint('GET', `/v1/livechat/priorities/:priorityId`, { priorityId });"
        },
        "depth_rank": 11
    },
    {
        "file": "useDepartmentInfo.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/hooks/useDepartmentInfo.ts",
        "code": {
            "deptInfo": "\tconst deptInfo = useEndpoint('GET', `/v1/livechat/department/:_id`, { _id: departmentId });\n\tconst deptInfo = useEndpoint('GET', `/v1/livechat/department/:_id`, { _id: departmentId });"
        },
        "depth_rank": 11
    },
    {
        "file": "CallTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/CallTableRow.tsx",
        "code": {
            "isCallReady": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\n\tconst { _id, fname, callStarted, queue, callDuration = 0, v, direction } = room;\n\tconst { _id, fname, callStarted, queue, callDuration = 0, v, direction } = room;",
            "as": "\tconst duration = moment.duration(callDuration / 1000, 'seconds');\n\tconst duration = moment.duration(callDuration / 1000, 'seconds');\n\tconst phoneNumber = Array.isArray(v?.phone) ? v?.phone[0]?.phoneNumber : v?.phone;\n\tconst phoneNumber = Array.isArray(v?.phone) ? v?.phone[0]?.phoneNumber : v?.phone;\n\n\tconst resolveDirectionLabel = useCallback(\n\tconst resolveDirectionLabel = useCallback(\n\t\t(direction: IVoipRoom['direction']) => {\n\t\t\tconst labels = {\n\t\t\tconst labels = {\n\t\t\t\tinbound: 'Incoming',\n\t\t\t\toutbound: 'Outgoing',\n\t\t\t} as const;\n\t\t\t} as const;\n\t\t\treturn t(labels[direction] || 'Not_Available');\n\t\t},\n\t\t[t],\n\t);\n\n\treturn (\n\t\t<GenericTableRow\n\t\t\tkey={_id}"
        },
        "depth_rank": 11
    },
    {
        "file": "Call.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/Call.tsx",
        "code": {
            "Call": "const Call = ({ rid }: CallProps): ReactElement => {\nconst Call = ({ rid }: CallProps): ReactElement => {\n\treturn (\n\t\t<Box position='absolute' backgroundColor='surface' width='full' height='full'>\n\t\t\t<RoomOpener type='v' reference={rid} />"
        },
        "depth_rank": 11
    },
    {
        "file": "CallTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/CallTable.tsx",
        "code": {
            "onRowClick": "\tconst onRowClick = useMutableCallback((id, token) => {\n\tconst onRowClick = useMutableCallback((id, token) => {\n\t\tdirectoryRoute.push(\n\t\t\t{\n\t\t\t\tpage: 'calls',\n\t\t\t\tbar: 'info',\n\t\t\t\tid,\n\t\t\t},\n\t\t\t{ token },",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='fname' direction={sortDirection} active={sortBy === 'fname'} onClick={setSort} sort='fname' w='x400'>"
        },
        "depth_rank": 11
    },
    {
        "file": "VoipInfoCallButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/VoipInfoCallButton.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { openDialModal } = useDialModal();\n\tconst { openDialModal } = useDialModal();"
        },
        "depth_rank": 12
    },
    {
        "file": "CallsContextualBarRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/CallsContextualBarRoom.tsx",
        "code": {
            "room": "const VoipInfoWithData = () => {\nconst VoipInfoWithData = () => {\n\tconst room = useVoipRoom();\n\tconst room = useVoipRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 12
    },
    {
        "file": "VoipInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/calls/contextualBar/VoipInfo.tsx",
        "code": {
            "isCallReady": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\n\tconst { servedBy, queue, v, fname, name, callDuration, callTotalHoldTime, closedAt, callWaitingTime, tags, lastMessage } = room;\n\tconst { servedBy, queue, v, fname, name, callDuration, callTotalHoldTime, closedAt, callWaitingTime, tags, lastMessage } = room;",
            "_name": "\tconst shouldShowTags = useMemo(() => tags && tags.length > 0, [tags]);\n\tconst shouldShowTags = useMemo(() => tags && tags.length > 0, [tags]);\n\tconst _name = fname || name;\n\tconst _name = fname || name;\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader expanded>\n\t\t\t\t<ContextualbarIcon name='phone' />\n\t\t\t\t<ContextualbarTitle>{t('Call_Information')}</ContextualbarTitle>"
        },
        "depth_rank": 12
    },
    {
        "file": "ContactTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/ContactTable.tsx",
        "code": {
            "ContactTable": "function ContactTable(): ReactElement {\nfunction ContactTable(): ReactElement {\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "onRowClick": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst onButtonNewClick = useMutableCallback(() =>\n\tconst onButtonNewClick = useMutableCallback(() =>\n\t\tdirectoryRoute.push({\n\t\t\tpage: 'contacts',\n\t\t\tbar: 'new',\n\t\t}),\n\t);\n\n\tconst onRowClick = useMutableCallback(\n\tconst onRowClick = useMutableCallback(\n\t\t(id) => (): void =>\n\t\t\tdirectoryRoute.push({\n\t\t\t\tpage: 'contacts',\n\t\t\t\tid,\n\t\t\t\tbar: 'info',\n\t\t\t}),\n\t);\n\n\tconst { data, isLoading, isError, isSuccess, refetch } = useCurrentContacts(query);\n\tconst { data, isLoading, isError, isSuccess, refetch } = useCurrentContacts(query);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='username' direction={sortDirection} active={sortBy === 'username'} onClick={setSort} sort='username'>",
            "visitorEmail": "\t\t\t\t\t\t\t\tconst phoneNumber = (phone?.length && phone[0].phoneNumber) || '';\n\t\t\t\t\t\t\t\tconst phoneNumber = (phone?.length && phone[0].phoneNumber) || '';\n\t\t\t\t\t\t\t\tconst visitorEmail = visitorEmails?.length && visitorEmails[0].address;\n\t\t\t\t\t\t\t\tconst visitorEmail = visitorEmails?.length && visitorEmails[0].address;\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<GenericTableRow\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\tkey={_id}"
        },
        "depth_rank": 11
    },
    {
        "file": "ContactNewEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactNewEdit.tsx",
        "code": {
            "DEFAULT_VALUES": "const DEFAULT_VALUES = {\nconst DEFAULT_VALUES = {\n\ttoken: '',\n\tname: '',\n\temail: '',\n\tphone: '',\n\tusername: '',\n\tcustomFields: {},",
            "initialValue": "\tconst saveContact = useEndpoint('POST', '/v1/omnichannel/contact');\n\tconst saveContact = useEndpoint('POST', '/v1/omnichannel/contact');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\n\tconst { data: customFieldsMetadata = [], isInitialLoading: isLoadingCustomFields } = useCustomFieldsMetadata({\n\tconst { data: customFieldsMetadata = [], isInitialLoading: isLoadingCustomFields } = useCustomFieldsMetadata({\n\t\tscope: 'visitor',\n\t\tenabled: canViewCustomFields(),\n\t});\n\n\tconst initialValue = getInitialValues(data);\n\tconst initialValue = getInitialValues(data);\n\tconst { username: initialUsername } = initialValue;\n\tconst { username: initialUsername } = initialValue;",
            "query": "\t\tconst query = { [name]: value } as Record<'phone' | 'email', string>;\n\t\tconst query = { [name]: value } as Record<'phone' | 'email', string>;",
            "payload": "\t\tconst payload = {\n\t\tconst payload = {\n\t\t\tname,\n\t\t\tphone,\n\t\t\temail,\n\t\t\tcustomFields,\n\t\t\ttoken: token || createToken(),\n\t\t\t...(username && { contactManager: { username } }),"
        },
        "depth_rank": 12
    },
    {
        "file": "ContactInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactInfo.tsx",
        "code": {
            "getContact": "\tconst getContact = useEndpoint('GET', '/v1/omnichannel/contact');\n\tconst getContact = useEndpoint('GET', '/v1/omnichannel/contact');\n\tconst {\n\tconst {\n\t\tdata: { contact } = {},",
            "showContactHistory": "\tconst showContactHistory = currentRouteName === 'live' && lastChat;\n\tconst showContactHistory = currentRouteName === 'live' && lastChat;\n\n\tconst [{ phoneNumber = '' }] = phone ?? [{}];\n\tconst [{ phoneNumber = '' }] = phone ?? [{}];",
            "field": "\tconst checkIsVisibleAndScopeVisitor = (key: string) => {\n\tconst checkIsVisibleAndScopeVisitor = (key: string) => {\n\t\tconst field = customFields?.find(({ _id }) => _id === key);\n\t\tconst field = customFields?.find(({ _id }) => _id === key);",
            "onChatHistory": "\tconst onChatHistory = () => {\n\tconst onChatHistory = () => {\n\t\tconst { _id = '' } = lastChat ?? {};\n\t\tconst { _id = '' } = lastChat ?? {};",
            "customFieldEntries": "\tconst customFieldEntries = Object.entries((livechatData ?? {}) as unknown as Record<string, string>).filter(\n\tconst customFieldEntries = Object.entries((livechatData ?? {}) as unknown as Record<string, string>).filter("
        },
        "depth_rank": 12
    },
    {
        "file": "ContactsContextualBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/contacts/contextualBar/ContactsContextualBar.tsx",
        "code": {
            "room": "const PATH = 'live';\nconst PATH = 'live';\n\nconst ContactsContextualBar = () => {\nconst ContactsContextualBar = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 12
    },
    {
        "file": "PriorityField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/PriorityField.tsx",
        "code": {
            "t": "const PriorityField = ({ id }: PriorityFieldProps) => {\nconst PriorityField = ({ id }: PriorityFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(id);\n\tconst { data, isInitialLoading, isError } = usePriorityInfo(id);"
        },
        "depth_rank": 11
    },
    {
        "file": "SourceField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/SourceField.tsx",
        "code": {
            "roomSource": "const SourceField: FC<SourceFieldProps> = ({ room }) => {\nconst SourceField: FC<SourceFieldProps> = ({ room }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst roomSource = room.source.alias || room.source.id || room.source.type;\n\tconst roomSource = room.source.alias || room.source.id || room.source.type;\n\n\t// TODO: create a hook that gets the default types values (alias, icons, ids, etc...)\n\t// so we don't have to write this object again and again\n\tconst defaultTypesLabels: {\n\tconst defaultTypesLabels: {\n\t\twidget: string;\n\t\temail: string;\n\t\tsms: string;\n\t\tapp: string;\n\t\tapi: string;\n\t\tother: string;\n\t} = {"
        },
        "depth_rank": 11
    },
    {
        "file": "ContactField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/ContactField.tsx",
        "code": {
            "t": "const ContactField = ({ contact, room }: ContactFieldProps) => {\nconst ContactField = ({ contact, room }: ContactFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { status } = contact;\n\tconst { status } = contact;",
            "getVisitorInfo": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(type).getAvatarPath(room) || '';\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(type).getAvatarPath(room) || '';\n\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst getVisitorInfo = useEndpoint('GET', '/v1/livechat/visitors.info');\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/visitors.info', contact._id], () =>\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/visitors.info', contact._id], () =>",
            "displayName": "\tconst displayName = name || username;\n\tconst displayName = name || username;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Label>{t('Contact')}</Label>"
        },
        "depth_rank": 11
    },
    {
        "file": "CallDialpadButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/CallDialpadButton.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { outBoundCallsAllowed, outBoundCallsEnabledForUser } = useVoipOutboundStates();\n\tconst { outBoundCallsAllowed, outBoundCallsEnabledForUser } = useVoipOutboundStates();",
            "onClick": "\tconst onClick = (event: MouseEvent<HTMLButtonElement>): void => {\n\tconst onClick = (event: MouseEvent<HTMLButtonElement>): void => {\n\t\tevent.stopPropagation();\n\t\topenDialModal({ initialValue: phoneNumber });"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/AgentField.tsx",
        "code": {
            "t": "const AgentField = ({ agent, isSmall = false }: AgentFieldProps) => {\nconst AgentField = ({ agent, isSmall = false }: AgentFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { username = '' } = agent ?? {};\n\tconst { username = '' } = agent ?? {};",
            "getUserInfo": "\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\n\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\n\tconst { data, isLoading } = useQuery(['/v1/users.info', username], () => getUserInfo({ username }));\n\tconst { data, isLoading } = useQuery(['/v1/users.info', username], () => getUserInfo({ username }));",
            "displayName": "\tconst displayName = name || username;\n\tconst displayName = name || username;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Label>{t('Agent')}</Label>"
        },
        "depth_rank": 11
    },
    {
        "file": "SlaField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/components/SlaField.tsx",
        "code": {
            "t": "const SlaField = ({ id }: SlaFieldProps) => {\nconst SlaField = ({ id }: SlaFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isInitialLoading, isError } = useSlaInfo(id);\n\tconst { data, isInitialLoading, isError } = useSlaInfo(id);"
        },
        "depth_rank": 11
    },
    {
        "file": "Chat.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/Chat.tsx",
        "code": {
            "Chat": "const Chat = ({ rid }: ChatProps): ReactElement => {\nconst Chat = ({ rid }: ChatProps): ReactElement => {\n\treturn (\n\t\t<Box position='absolute' backgroundColor='surface' width='full' height='full'>\n\t\t\t<RoomOpener type='l' reference={rid} />"
        },
        "depth_rank": 11
    },
    {
        "file": "ChatTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/ChatTable.tsx",
        "code": {
            "headers": "\tconst onRowClick = useMutableCallback((id) =>\n\tconst onRowClick = useMutableCallback((id) =>\n\t\tdirectoryRoute.push({\n\t\t\tpage: 'chats',\n\t\t\tbar: 'info',\n\t\t\tid,\n\t\t}),\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='fname' direction={sortDirection} active={sortBy === 'fname'} onClick={setSort} sort='fname' w='x400'>",
            "renderRow": "\tconst renderRow = useCallback(\n\tconst renderRow = useCallback(\n\t\t({ _id, fname, ts, closedAt, department, tags }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "DepartmentField.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/DepartmentField.tsx",
        "code": {
            "t": "const DepartmentField = ({ departmentId }: DepartmentFieldProps) => {\nconst DepartmentField = ({ departmentId }: DepartmentFieldProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isLoading, isError } = useDepartmentInfo(departmentId);\n\tconst { data, isLoading, isError } = useDepartmentInfo(departmentId);"
        },
        "depth_rank": 12
    },
    {
        "file": "ChatInfo.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/ChatInfo.js",
        "code": {
            "formatDuration": "\tconst [customFields, setCustomFields] = useState([]);\n\tconst [customFields, setCustomFields] = useState([]);\n\tconst formatDuration = useFormatDuration();\n\tconst formatDuration = useFormatDuration();\n\n\tconst { data: room } = useOmnichannelRoomInfo(id);\n\tconst { data: room } = useOmnichannelRoomInfo(id);",
            "queueTime": "\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst visitorId = v?._id;\n\tconst visitorId = v?._id;\n\tconst queueStartedAt = queuedAt || ts;\n\tconst queueStartedAt = queuedAt || ts;\n\n\tconst queueTime = useMemo(() => formatQueuedAt(room), [room]);\n\tconst queueTime = useMemo(() => formatQueuedAt(room), [room]);\n\n\tuseEffect(() => {\n\t\tif (allCustomFields) {\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;",
            "field": "\tconst checkIsVisibleAndScopeRoom = (key) => {\n\tconst checkIsVisibleAndScopeRoom = (key) => {\n\t\tconst field = customFields.find(({ _id }) => _id === key);\n\t\tconst field = customFields.find(({ _id }) => _id === key);",
            "customFieldEntries": "\tconst customFieldEntries = Object.entries(livechatData || {}).filter(([key]) => checkIsVisibleAndScopeRoom(key) && livechatData[key]);\n\tconst customFieldEntries = Object.entries(livechatData || {}).filter(([key]) => checkIsVisibleAndScopeRoom(key) && livechatData[key]);"
        },
        "depth_rank": 12
    },
    {
        "file": "ChatInfoDirectory.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/ChatInfoDirectory.js",
        "code": {
            "dispatchToastMessage": "\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst hasLocalEditRoomPermission = servedBy?._id === Meteor.userId();\n\tconst visitorId = v?._id;\n\tconst visitorId = v?._id;\n\tconst queueStartedAt = queuedAt || ts;\n\tconst queueStartedAt = queuedAt || ts;\n\n\tconst queueTime = useMemo(() => formatQueuedAt(room), [room]);\n\tconst queueTime = useMemo(() => formatQueuedAt(room), [room]);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tuseEffect(() => {\n\t\tif (allCustomFields) {\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;\n\t\t\tconst { customFields: customFieldsAPI } = allCustomFields;",
            "field": "\tconst checkIsVisibleAndScopeRoom = (key) => {\n\tconst checkIsVisibleAndScopeRoom = (key) => {\n\t\tconst field = customFields.find(({ _id }) => _id === key);\n\t\tconst field = customFields.find(({ _id }) => _id === key);"
        },
        "depth_rank": 12
    },
    {
        "file": "ChatsContextualBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/ChatsContextualBar.tsx",
        "code": {
            "room": "} as const;\n} as const;\n\nconst ChatsContextualBar = () => {\nconst ChatsContextualBar = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst context = useRouteParameter('context') as 'edit' | 'info' | undefined;\n\tconst context = useRouteParameter('context') as 'edit' | 'info' | undefined;\n\tconst directoryRoute = useRoute(PATH);\n\tconst directoryRoute = useRoute(PATH);\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 12
    },
    {
        "file": "VisitorClientInfo.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/VisitorClientInfo.js",
        "code": {
            "clientData": "\tconst clientData = {};\n\tconst clientData = {};"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomEditWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/RoomEdit/RoomEditWithData.tsx",
        "code": {
            "t": "function RoomEditWithData({ id: roomId, reload, reloadInfo, onClose }: RoomEditWithDataProps) {\nfunction RoomEditWithData({ id: roomId, reload, reloadInfo, onClose }: RoomEditWithDataProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data: room, isLoading: isRoomLoading, isError: isRoomError } = useOmnichannelRoomInfo(roomId);\n\tconst { data: room, isLoading: isRoomLoading, isError: isRoomError } = useOmnichannelRoomInfo(roomId);"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/directory/chats/contextualBar/RoomEdit/RoomEdit.tsx",
        "code": {
            "ROOM_INTIAL_VALUE": "const ROOM_INTIAL_VALUE = {\nconst ROOM_INTIAL_VALUE = {\n\ttopic: '',\n\ttags: [],\n\tlivechatData: {},",
            "getInitialValuesRoom": "const getInitialValuesRoom = (room: Serialized<IOmnichannelRoom>) => {\nconst getInitialValuesRoom = (room: Serialized<IOmnichannelRoom>) => {\n\tconst { topic, tags, livechatData, slaId, priorityId } = room ?? ROOM_INTIAL_VALUE;\n\tconst { topic, tags, livechatData, slaId, priorityId } = room ?? ROOM_INTIAL_VALUE;",
            "saveRoom": "\tconst saveRoom = useEndpoint('POST', '/v1/livechat/room.saveInfo');\n\tconst saveRoom = useEndpoint('POST', '/v1/livechat/room.saveInfo');\n\n\tconst { data: slaPolicies, isInitialLoading: isSlaPoliciesLoading } = useSlaPolicies();\n\tconst { data: slaPolicies, isInitialLoading: isSlaPoliciesLoading } = useSlaPolicies();",
            "roomData": "\t\t\tconst guestData = {\n\t\t\tconst guestData = {\n\t\t\t\t_id: visitor._id,\n\t\t\t};\n\n\t\t\tconst roomData = {\n\t\t\tconst roomData = {\n\t\t\t\t_id: room._id,\n\t\t\t\ttopic,\n\t\t\t\ttags: tags.sort(),\n\t\t\t\tlivechatData,\n\t\t\t\tpriorityId,\n\t\t\t\t...(slaId && { slaId }),"
        },
        "depth_rank": 13
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/DateRangePicker.tsx",
        "code": {
            "t": "const todayDate = formatToDateInput(moment());\nconst todayDate = formatToDateInput(moment());\n\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\n\tstart: formatToDateInput(moment().subtract(monthsToSubtractFromToday, 'month').date(1)),\n\tend: formatToDateInput(monthsToSubtractFromToday === 0 ? moment() : moment().subtract(monthsToSubtractFromToday).date(0)),\n});\n\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\n\tstart: formatToDateInput(moment().subtract(daysToSubtractFromStart, 'day')),\n\tend: formatToDateInput(moment().subtract(daysToSubtractFromEnd, 'day')),\n});\n\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\nconst DateRangePicker = ({ onChange = () => undefined, ...props }: DateRangePickerProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [range, setRange] = useState({ start: '', end: '' });\n\tconst [range, setRange] = useState({ start: '', end: '' });",
            "options": "\tconst handleStart = useMutableCallback(({ currentTarget }) => {\n\tconst handleStart = useMutableCallback(({ currentTarget }) => {\n\t\tconst rangeObj = {\n\t\tconst rangeObj = {\n\t\t\tstart: currentTarget.value,\n\t\t\tend: range.end,\n\t\t};\n\t\tsetRange(rangeObj);\n\t\tonChange(rangeObj);\n\t});\n\n\tconst handleEnd = useMutableCallback(({ currentTarget }) => {\n\tconst handleEnd = useMutableCallback(({ currentTarget }) => {\n\t\tconst rangeObj = {\n\t\tconst rangeObj = {\n\t\t\tend: currentTarget.value,\n\t\t\tstart: range.start,\n\t\t};\n\t\tsetRange(rangeObj);\n\t\tonChange(rangeObj);\n\t});\n\n\tconst handleRange = useMutableCallback((range) => {\n\tconst handleRange = useMutableCallback((range) => {\n\t\tsetRange(range);\n\t\tonChange(range);\n\t});\n\n\tuseEffect(() => {\n\t\thandleRange({\n\t\t\tstart: todayDate,\n\t\t\tend: todayDate,\n\t\t});\n\t}, [handleRange]);\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => ({\n\t\t\ttoday: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Today'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(0, 0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesterday: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Yesterday'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(1, 1));\n\t\t\t\t},\n\t\t\t},\n\t\t\tthisWeek: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('This_week'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(7, 0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tpreviousWeek: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Previous_week'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getWeekRange(14, 7));\n\t\t\t\t},\n\t\t\t},\n\t\t\tthisMonth: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('This_month'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getMonthRange(0));\n\t\t\t\t},\n\t\t\t},\n\t\t\tlastMonth: {\n\t\t\t\ticon: 'history',\n\t\t\t\tlabel: t('Previous_month'),\n\t\t\t\taction: () => {\n\t\t\t\t\thandleRange(getMonthRange(1));\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\t[handleRange, t],\n\t);\n\n\treturn (\n\t\t<Box {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "InterchangeableChart.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/InterchangeableChart.tsx",
        "code": {
            "getChartTooltips": "const getChartTooltips = (chartName: string) => {\nconst getChartTooltips = (chartName: string) => {\n\tswitch (chartName) {\n\t\tcase 'Avg_chat_duration':\n\t\tcase 'Avg_first_response_time':\n\t\tcase 'Best_first_response_time':\n\t\tcase 'Avg_response_time':\n\t\tcase 'Avg_reaction_time':\n\t\t\treturn {\n\t\t\t\tcallbacks: {\n\t\t\t\t\ttitle([ctx]: TooltipItem<'line'>[]) {\n\t\t\t\t\t\tconst { dataset } = ctx;\n\t\t\t\t\t\tconst { dataset } = ctx;",
            "item": "\t\t\t\t\t\tconst item = dataset.data[dataIndex];\n\t\t\t\t\t\tconst item = dataset.data[dataIndex];\n\t\t\t\t\t\treturn secondsToHHMMSS(typeof item === 'number' ? item : 0);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {};",
            "InterchangeableChart": "const InterchangeableChart = ({\nconst InterchangeableChart = ({\n\tdepartmentId,\n\tdateRange,\n\tchartName,\n\t...props\n}: {",
            "context": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst canvas = useRef<HTMLCanvasElement | null>(null);\n\tconst canvas = useRef<HTMLCanvasElement | null>(null);\n\tconst context = useRef<ChartType<'line', number, string> | void>();\n\tconst context = useRef<ChartType<'line', number, string> | void>();\n\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;"
        },
        "depth_rank": 10
    },
    {
        "file": "AgentOverview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/AgentOverview.tsx",
        "code": {
            "style": "const style = { width: '100%' };\nconst style = { width: '100%' };",
            "AgentOverview": "const AgentOverview = ({\nconst AgentOverview = ({\n\ttype,\n\tdateRange,\n\tdepartmentId,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;",
            "params": "\tconst params = useMemo(\n\tconst params = useMemo(\n\t\t() => ({\n\t\t\tname: type,\n\t\t\tfrom: start,\n\t\t\tto: end,\n\t\t\t...(departmentId && { departmentId }),",
            "value": "\t\t\tconst value = await loadData(params);\n\t\t\tconst value = await loadData(params);\n\t\t\tsetDisplayData(value);\n\t\t}\n\t\tfetchData();\n\t}, [start, end, loadData, params]);\n\n\treturn (\n\t\t<Table style={style} fixed>"
        },
        "depth_rank": 10
    },
    {
        "file": "AnalyticsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/AnalyticsPage.tsx",
        "code": {
            "t": "const useOptions = (type: string): SelectOption[] => {\nconst useOptions = (type: string): SelectOption[] => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn useMemo(() => {\n\t\tif (type === 'Conversations') {\n\t\t\treturn [\n\t\t\t\t['Total_conversations', t('Total_conversations')],\n\t\t\t\t['Avg_chat_duration', t('Avg_chat_duration')],\n\t\t\t\t['Total_messages', t('Total_messages')],\n\t\t\t];\n\t\t}\n\t\treturn [\n\t\t\t['Avg_first_response_time', t('Avg_first_response_time')],\n\t\t\t['Best_first_response_time', t('Best_first_response_time')],\n\t\t\t['Avg_response_time', t('Avg_response_time')],\n\t\t\t['Avg_reaction_time', t('Avg_reaction_time')],\n\t\t];\n\t}, [t, type]);\n};\n\nconst AnalyticsPage = () => {\nconst AnalyticsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [type, setType] = useState('Conversations');\n\tconst [type, setType] = useState('Conversations');\n\tconst [department, setDepartment] = useState<string | null>(null);\n\tconst [department, setDepartment] = useState<string | null>(null);\n\tconst [dateRange, setDateRange] = useState({ start: '', end: '' });\n\tconst [dateRange, setDateRange] = useState({ start: '', end: '' });"
        },
        "depth_rank": 10
    },
    {
        "file": "Overview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/analytics/Overview.tsx",
        "code": {
            "t": "const conversationsInitialData = [initialData, initialData];\nconst conversationsInitialData = [initialData, initialData];\nconst productivityInitialData = [initialData];\nconst productivityInitialData = [initialData];\n\nconst Overview = ({ type, dateRange, departmentId }: { type: string; dateRange: { start: string; end: string }; departmentId: string }) => {\nconst Overview = ({ type, dateRange, departmentId }: { type: string; dateRange: { start: string; end: string }; departmentId: string }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { start, end } = dateRange;\n\tconst { start, end } = dateRange;",
            "params": "\tconst params = useMemo(\n\tconst params = useMemo(\n\t\t() => ({\n\t\t\tname: type,\n\t\t\tfrom: start,\n\t\t\tto: end,\n\t\t\t...(departmentId && { departmentId }),"
        },
        "depth_rank": 10
    },
    {
        "file": "AgentInfoDetails.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/components/AgentInfoDetails.tsx",
        "code": {
            "AgentInfoDetails": "const AgentInfoDetails = ({ name, shortName, status = <UserStatus.Offline />, ...props }: AgentInfoDetailsProps): ReactElement => (\nconst AgentInfoDetails = ({ name, shortName, status = <UserStatus.Offline />, ...props }: AgentInfoDetailsProps): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "WebhooksPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/webhooks/WebhooksPage.tsx",
        "code": {
            "getInitialValues": "const getInitialValues = ({\nconst getInitialValues = ({\n\tLivechat_webhookUrl,\n\tLivechat_secret_token,\n\tLivechat_webhook_on_start,\n\tLivechat_webhook_on_close,\n\tLivechat_webhook_on_chat_taken,\n\tLivechat_webhook_on_chat_queued,\n\tLivechat_webhook_on_forward,\n\tLivechat_webhook_on_offline_msg,\n\tLivechat_webhook_on_visitor_message,\n\tLivechat_webhook_on_agent_message,\n\tLivechat_http_timeout,\n}: WebhooksPageProps['settings']): WebhookFormValues => {",
            "defaultValues": "\tconst mappedSendOptions = reduceSendOptions({\n\tconst mappedSendOptions = reduceSendOptions({\n\t\tLivechat_webhook_on_start,\n\t\tLivechat_webhook_on_close,\n\t\tLivechat_webhook_on_chat_taken,\n\t\tLivechat_webhook_on_chat_queued,\n\t\tLivechat_webhook_on_forward,\n\t\tLivechat_webhook_on_offline_msg,\n\t\tLivechat_webhook_on_visitor_message,\n\t\tLivechat_webhook_on_agent_message,\n\t});\n\n\treturn {\n\t\tLivechat_webhookUrl,\n\t\tLivechat_secret_token,\n\t\tLivechat_http_timeout,\n\t\tsendOn: mappedSendOptions,\n\t} as WebhookFormValues;\n};\n\nconst WebhooksPage = ({ settings }: WebhooksPageProps) => {\nconst WebhooksPage = ({ settings }: WebhooksPageProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst defaultValues = getInitialValues(settings);\n\tconst defaultValues = getInitialValues(settings);\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\treset,\n\t\tformState: { isDirty, isSubmitting },",
            "livechatWebhookUrl": "\tconst save = useEndpoint('POST', '/v1/omnichannel/integrations');\n\tconst save = useEndpoint('POST', '/v1/omnichannel/integrations');\n\tconst test = useEndpoint('POST', '/v1/livechat/webhook.test');\n\tconst test = useEndpoint('POST', '/v1/livechat/webhook.test');\n\n\tconst livechatWebhookUrl = useWatch({ name: 'Livechat_webhookUrl', control });\n\tconst livechatWebhookUrl = useWatch({ name: 'Livechat_webhookUrl', control });",
            "handleSave": "\tconst sendOptions = useMemo<SelectOption[]>(\n\tconst sendOptions = useMemo<SelectOption[]>(\n\t\t() => [\n\t\t\t['Livechat_webhook_on_start', t('Chat_start')],\n\t\t\t['Livechat_webhook_on_close', t('Chat_close')],\n\t\t\t['Livechat_webhook_on_chat_taken', t('Chat_taken')],\n\t\t\t['Livechat_webhook_on_chat_queued', t('Chat_queued')],\n\t\t\t['Livechat_webhook_on_forward', t('Forwarding')],\n\t\t\t['Livechat_webhook_on_offline_msg', t('Offline_messages')],\n\t\t\t['Livechat_webhook_on_visitor_message', t('Visitor_message')],\n\t\t\t['Livechat_webhook_on_agent_message', t('Agent_messages')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst handleSave = useMutableCallback(async (values) => {\n\tconst handleSave = useMutableCallback(async (values) => {\n\t\tconst { sendOn, Livechat_webhookUrl, Livechat_secret_token, Livechat_http_timeout } = values;\n\t\tconst { sendOn, Livechat_webhookUrl, Livechat_secret_token, Livechat_http_timeout } = values;",
            "testWebhook": "\tconst testWebhook = useMutation({\n\tconst testWebhook = useMutation({\n\t\tmutationFn: () => test(),\n\t\tonSuccess: () => dispatchToastMessage({ type: 'success', message: t('It_works') }),"
        },
        "depth_rank": 10
    },
    {
        "file": "WebhooksPageContainer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/webhooks/WebhooksPageContainer.tsx",
        "code": {
            "reduceSettings": "const reduceSettings = (settings: Serialized<ISetting>[]) =>\nconst reduceSettings = (settings: Serialized<ISetting>[]) =>\n\tsettings.reduce<Record<string, SettingValue>>((acc, { _id, value }) => {\n\t\tacc = { ...acc, [_id]: value };",
            "getIntegrationsSettings": "const WebhooksPageContainer = () => {\nconst WebhooksPageContainer = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getIntegrationsSettings = useEndpoint('GET', '/v1/livechat/integrations.settings');\n\tconst getIntegrationsSettings = useEndpoint('GET', '/v1/livechat/integrations.settings');\n\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/integrations.settings'], async () => {\n\tconst { data, isLoading, isError } = useQuery(['/v1/livechat/integrations.settings'], async () => {\n\t\tconst { settings, success } = await getIntegrationsSettings();\n\t\tconst { settings, success } = await getIntegrationsSettings();"
        },
        "depth_rank": 10
    },
    {
        "file": "AgentEdit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentEdit.tsx",
        "code": {
            "dispatchToastMessage": "const AgentEdit = ({ agentData, userDepartments, availableDepartments }: AgentEditProps) => {\nconst AgentEdit = ({ agentData, userDepartments, availableDepartments }: AgentEditProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst voipEnabled = useSetting('VoIP_Enabled');\n\tconst voipEnabled = useSetting('VoIP_Enabled');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { name, username, livechat, statusLivechat } = agentData;\n\tconst { name, username, livechat, statusLivechat } = agentData;",
            "initialDepartmentValue": "\tconst initialDepartmentValue = useMemo(() => userDepartments.map(({ departmentId }) => departmentId) || [], [userDepartments]);\n\tconst initialDepartmentValue = useMemo(() => userDepartments.map(({ departmentId }) => departmentId) || [], [userDepartments]);",
            "methods": "\tconst methods = useForm({\n\tconst methods = useForm({\n\t\tvalues: {\n\t\t\tname,\n\t\t\tusername,\n\t\t\temail,\n\t\t\tdepartments: initialDepartmentValue,\n\t\t\tstatus: statusLivechat,\n\t\t\tmaxNumberSimultaneousChat: livechat?.maxNumberSimultaneousChat || 0,\n\t\t\tvoipExtension: '',\n\t\t},\n\t});\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\treset,\n\t\tformState: { isDirty },",
            "handleSave": "\tconst saveAgentInfo = useMethod('livechat:saveAgentInfo');\n\tconst saveAgentInfo = useMethod('livechat:saveAgentInfo');\n\tconst saveAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst saveAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\n\tconst handleSave = useMutableCallback(async ({ status, departments, ...data }) => {\n\tconst handleSave = useMutableCallback(async ({ status, departments, ...data }) => {\n\t\ttry {\n\t\t\tawait saveAgentStatus({ agentId: agentData._id, status });"
        },
        "depth_rank": 10
    },
    {
        "file": "AgentInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentInfo.tsx",
        "code": {
            "getAgentById": "const AgentInfo = ({ uid }: AgentInfoProps) => {\nconst AgentInfo = ({ uid }: AgentInfoProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst getAgentById = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });\n\tconst getAgentById = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });",
            "handleDelete": "\tconst handleDelete = useRemoveAgent(uid);\n\tconst handleDelete = useRemoveAgent(uid);\n\n\tif (isLoading) {\n\t\treturn <ContextualbarSkeleton />;\n\t}\n\n\tif (isError) {\n\t\treturn <Box mbs={16}>{t('User_not_found')}</Box>;"
        },
        "depth_rank": 10
    },
    {
        "file": "AgentEditWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentEditWithData.tsx",
        "code": {
            "getAgentById": "const AgentEditWithData = ({ uid }: { uid: ILivechatAgent['_id'] }): ReactElement => {\nconst AgentEditWithData = ({ uid }: { uid: ILivechatAgent['_id'] }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getAvailableDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getAvailableDepartments = useEndpoint('GET', '/v1/livechat/department');\n\tconst getAgentById = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });\n\tconst getAgentById = useEndpoint('GET', '/v1/livechat/users/agent/:_id', { _id: uid });",
            "getAgentDepartments": "\tconst getAgentDepartments = useEndpoint('GET', '/v1/livechat/agents/:agentId/departments', { agentId: uid });\n\tconst getAgentDepartments = useEndpoint('GET', '/v1/livechat/agents/:agentId/departments', { agentId: uid });"
        },
        "depth_rank": 10
    },
    {
        "file": "useRemoveAgent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/hooks/useRemoveAgent.tsx",
        "code": {
            "deleteAction": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst deleteAction = useEndpoint('DELETE', '/v1/livechat/users/agent/:_id', { _id: uid });\n\tconst deleteAction = useEndpoint('DELETE', '/v1/livechat/users/agent/:_id', { _id: uid });",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst onDeleteAgent = async () => {\n\t\tconst onDeleteAgent = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteAction();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AgentsTable.tsx",
        "code": {
            "t": "const AgentsTable = () => {\nconst AgentsTable = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address' | 'statusLivechat'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 'username' | 'emails.address' | 'statusLivechat'>('name');",
            "debouncedSort": "\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedSort = useDebouncedValue(\n\tconst debouncedSort = useDebouncedValue(\n\t\tuseMemo(() => [sortBy, sortDirection], [sortBy, sortDirection]),\n\t\t500,\n\t) as ['name' | 'username' | 'emails.address' | 'statusLivechat', 'asc' | 'desc'];\n\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage, setCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useQuery({ text: debouncedFilter, current, itemsPerPage }, debouncedSort);\n\tconst query = useQuery({ text: debouncedFilter, current, itemsPerPage }, debouncedSort);",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell direction={sortDirection} sort='name' active={sortBy === 'name'} onClick={onHeaderClick}>"
        },
        "depth_rank": 11
    },
    {
        "file": "AgentsTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AgentsTableRow.tsx",
        "code": {
            "AgentsTableRow": "const AgentsTableRow = ({\nconst AgentsTableRow = ({\n\tuser: { _id, name, username, avatarETag, emails, statusLivechat },"
        },
        "depth_rank": 11
    },
    {
        "file": "AddAgent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/agents/AgentsTable/AddAgent.tsx",
        "code": {
            "handleSave": "const AddAgent = ({ reload }: AddAgentProps): ReactElement => {\nconst AddAgent = ({ reload }: AddAgentProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [username, setUsername] = useState('');\n\tconst [username, setUsername] = useState('');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst saveAction = useEndpointAction('POST', '/v1/livechat/users/agent');\n\tconst saveAction = useEndpointAction('POST', '/v1/livechat/users/agent');\n\n\tconst handleSave = useMutableCallback(async () => {\n\tconst handleSave = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait saveAction({ username });",
            "handleChange": "\tconst handleChange = (value: unknown): void => {\n\tconst handleChange = (value: unknown): void => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetUsername(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Box display='flex' alignItems='center'>\n\t\t\t<Field>\n\t\t\t\t<FieldLabel>{t('Username')}</FieldLabel>"
        },
        "depth_rank": 11
    },
    {
        "file": "OmnichannelSidebar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/omnichannel/sidebar/OmnichannelSidebar.tsx",
        "code": {
            "t": "const OmnichannelSidebar: FC = () => {\nconst OmnichannelSidebar: FC = () => {\n\tconst items = useSyncExternalStore(subscribeToOmnichannelSidebarItems, getOmnichannelSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToOmnichannelSidebarItems, getOmnichannelSidebarItems);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Omnichannel')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "UserCardHolder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/UserCardHolder.tsx",
        "code": {
            "props": "function UserCardHolder({ getProps, subscribeToProps }: UserCardHolderProps) {\nfunction UserCardHolder({ getProps, subscribeToProps }: UserCardHolderProps) {\n\tconst props = useSyncExternalStore(subscribeToProps, getProps);\n\tconst props = useSyncExternalStore(subscribeToProps, getProps);\n\n\treturn (\n\t\t<Suspense fallback={null}>"
        },
        "depth_rank": 9
    },
    {
        "file": "MemberListRouter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MemberListRouter.js",
        "code": {
            "MemberListRouter": "const MemberListRouter = () => {\nconst MemberListRouter = () => {\n\tconst { tab, context: username } = useRoomToolbox();\n\tconst { tab, context: username } = useRoomToolbox();",
            "room": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/RoomRoute.tsx",
        "code": {
            "router": "const RoomRoute = ({ extractOpenRoomParams }: RoomRouteProps) => {\nconst RoomRoute = ({ extractOpenRoomParams }: RoomRouteProps) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst [params, setParams] = useState(() => extractOpenRoomParams(router.getRouteParameters()));\n\tconst [params, setParams] = useState(() => extractOpenRoomParams(router.getRouteParameters()));\n\n\tuseLayoutEffect(\n\t\t() =>\n\t\t\trouter.subscribeToRouteChange(() => {\n\t\t\t\tsetParams(extractOpenRoomParams(router.getRouteParameters()));\n\t\t\t}),\n\t\t[extractOpenRoomParams, router],\n\t);\n\n\treturn <RoomOpener {...params} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/RoomSkeleton.tsx",
        "code": {
            "RoomSkeleton": "const RoomSkeleton = (): ReactElement => (\nconst RoomSkeleton = (): ReactElement => (\n\t<RoomLayout\n\t\theader={<HeaderSkeleton />}"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomOpener.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/RoomOpener.tsx",
        "code": {
            "RoomOpener": "const RoomOpener = ({ type, reference }: RoomOpenerProps): ReactElement => {\nconst RoomOpener = ({ type, reference }: RoomOpenerProps): ReactElement => {\n\tconst { data, error, isSuccess, isError, isLoading } = useOpenRoom({ type, reference });\n\tconst { data, error, isSuccess, isError, isLoading } = useOpenRoom({ type, reference });"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomNotFound.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/RoomNotFound.tsx",
        "code": {
            "t": "const RoomNotFound = (): ReactElement => {\nconst RoomNotFound = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageGalleryData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/ImageGallery/ImageGalleryData.tsx",
        "code": {
            "ImageGalleryData": "const ImageGalleryData = () => {\nconst ImageGalleryData = () => {\n\tconst { _id: rid } = useRoom();\n\tconst { _id: rid } = useRoom();"
        },
        "depth_rank": 10
    },
    {
        "file": "useImagesList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/ImageGallery/hooks/useImagesList.ts",
        "code": {
            "fetchMessages": "\tconst apiEndPoint = '/v1/channels.images';\n\tconst apiEndPoint = '/v1/channels.images';\n\n\tconst getFiles = useEndpoint('GET', apiEndPoint);\n\tconst getFiles = useEndpoint('GET', apiEndPoint);\n\n\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { files, total } = await getFiles({\n\t\t\tconst { files, total } = await getFiles({\n\t\t\t\troomId: options.roomId,\n\t\t\t\tstartingFromId: options.startingFromId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: files.map((file) => ({\n\t\t\t\t\t...file,\n\t\t\t\t\tuploadedAt: file.uploadedAt ? new Date(file.uploadedAt) : undefined,\n\t\t\t\t\tmodifiedAt: file.modifiedAt ? new Date(file.modifiedAt) : undefined,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getFiles, options.roomId, options.startingFromId],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(filesList, fetchMessages, 5);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(filesList, fetchMessages, 5);"
        },
        "depth_rank": 11
    },
    {
        "file": "SaveToWebdavModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/SaveToWebdavModal.tsx",
        "code": {
            "accountIdField": "const SaveToWebdavModal = ({ onClose, data }: SaveToWebdavModalProps): ReactElement => {\nconst SaveToWebdavModal = ({ onClose, data }: SaveToWebdavModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst uploadFileToWebdav = useMethod('uploadFileToWebdav');\n\tconst uploadFileToWebdav = useMethod('uploadFileToWebdav');\n\tconst fileRequest = useRef<XMLHttpRequest | null>(null);\n\tconst fileRequest = useRef<XMLHttpRequest | null>(null);\n\tconst accountIdField = useUniqueId();\n\tconst accountIdField = useUniqueId();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "handleSaveFile": "\tconst handleSaveFile = ({ accountId }: { accountId: IWebdavAccount['_id'] }): void => {\n\tconst handleSaveFile = ({ accountId }: { accountId: IWebdavAccount['_id'] }): void => {\n\t\tsetIsLoading(true);\n\n\t\tconst {\n\t\tconst {\n\t\t\turl,\n\t\t\tattachment: { title },"
        },
        "depth_rank": 10
    },
    {
        "file": "AddWebdavAccountModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/AddWebdavAccountModal.tsx",
        "code": {
            "dispatchToastMessage": "const AddWebdavAccountModal = ({ onClose, onConfirm }: AddWebdavAccountModalProps): ReactElement => {\nconst AddWebdavAccountModal = ({ onClose, onConfirm }: AddWebdavAccountModalProps): ReactElement => {\n\tconst handleAddWebdavAccount = useMethod('addWebdavAccount');\n\tconst handleAddWebdavAccount = useMethod('addWebdavAccount');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },"
        },
        "depth_rank": 10
    },
    {
        "file": "FilePickerBreadcrumbs.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/FilePickerBreadcrumbs.tsx",
        "code": {
            "t": "const FilePickerBreadcrumbs = ({ parentFolders, handleBreadcrumb, handleBack }: FilePickerBreadcrumbsProps): ReactElement => {\nconst FilePickerBreadcrumbs = ({ parentFolders, handleBreadcrumb, handleBack }: FilePickerBreadcrumbsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' alignItems='center' overflowX='auto' mie={8}>"
        },
        "depth_rank": 11
    },
    {
        "file": "WebdavFilePickerModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx",
        "code": {
            "dispatchToastMessage": "const WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');",
            "blob": "\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });",
            "filteredNodes": "\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));",
            "handleGetWebdavFileList": "\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {",
            "handleBreadcrumb": "\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst { index } = e.currentTarget.dataset;",
            "uploadFile": "\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {",
            "file": "\t\t\tconst blob = new Blob([data]);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });",
            "sortedNodes": "\tconst options: SelectOption[] = [\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>"
        },
        "depth_rank": 11
    },
    {
        "file": "WebdavFilePickerTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerTable.tsx",
        "code": {
            "WebdavFilePickerTable": "const WebdavFilePickerTable = ({\nconst WebdavFilePickerTable = ({\n\twebdavNodes,\n\tsortBy,\n\tsortDirection,\n\tonSort,\n\tonNodeClick,\n\tisLoading,\n}: WebdavFilePickerTableProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' overflowY='hidden' height='x256'>\n\t\t\t{(isLoading || webdavNodes?.length > 0) && (\n\t\t\t\t<GenericTable>\n\t\t\t\t\t<GenericTableHeader>\n\t\t\t\t\t\t<GenericTableHeaderCell\n\t\t\t\t\t\t\twidth='300px'\n\t\t\t\t\t\t\tkey='name'\n\t\t\t\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 11
    },
    {
        "file": "WebdavFilePickerGridItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerGrid/WebdavFilePickerGridItem.tsx",
        "code": {
            "WebdavFilePickerGridItem": "const WebdavFilePickerGridItem = ({ ...props }): ReactElement => (\nconst WebdavFilePickerGridItem = ({ ...props }): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "useOpenRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useOpenRoom.ts",
        "code": {
            "room": "\t\t\tconst room = ChatRoom.findOne({ _id: roomData._id });\n\t\t\tconst room = ChatRoom.findOne({ _id: roomData._id });",
            "sub": "\t\t\tconst sub = ChatSubscription.findOne({ rid: room._id });\n\t\t\tconst sub = ChatSubscription.findOne({ rid: room._id });"
        },
        "depth_rank": 10
    },
    {
        "file": "useGoToRoom.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useGoToRoom.ts",
        "code": {
            "room": "\t\tconst room = await getRoomById(rid);\n\t\tconst room = await getRoomById(rid);\n\t\troomCoordinator.openRouteLink(room.t, { rid: room._id, ...room }, router.getSearchParameters(), { replace });"
        },
        "depth_rank": 10
    },
    {
        "file": "useUserInfoActions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/useUserInfoActions.ts",
        "code": {
            "isLayoutEmbedded": "\tconst blockUser = useBlockUserAction(user, rid);\n\tconst blockUser = useBlockUserAction(user, rid);\n\tconst changeLeader = useChangeLeaderAction(user, rid);\n\tconst changeLeader = useChangeLeaderAction(user, rid);\n\tconst changeModerator = useChangeModeratorAction(user, rid);\n\tconst changeModerator = useChangeModeratorAction(user, rid);\n\tconst openModerationConsole = useRedirectModerationConsole(user._id);\n\tconst openModerationConsole = useRedirectModerationConsole(user._id);\n\tconst changeOwner = useChangeOwnerAction(user, rid);\n\tconst changeOwner = useChangeOwnerAction(user, rid);\n\tconst openDirectMessage = useDirectMessageAction(user, rid);\n\tconst openDirectMessage = useDirectMessageAction(user, rid);\n\tconst ignoreUser = useIgnoreUserAction(user, rid);\n\tconst ignoreUser = useIgnoreUserAction(user, rid);\n\tconst muteUser = useMuteUserAction(user, rid);\n\tconst muteUser = useMuteUserAction(user, rid);\n\tconst removeUser = useRemoveUserAction(user, rid, reload);\n\tconst removeUser = useRemoveUserAction(user, rid, reload);\n\tconst call = useCallAction(user);\n\tconst call = useCallAction(user);\n\tconst reportUserOption = useReportUser(user);\n\tconst reportUserOption = useReportUser(user);\n\tconst isLayoutEmbedded = useEmbeddedLayout();\n\tconst isLayoutEmbedded = useEmbeddedLayout();\n\tconst { userToolbox: hiddenActions } = useLayoutHiddenActions();\n\tconst { userToolbox: hiddenActions } = useLayoutHiddenActions();",
            "section": "\t\tconst options = entries.slice(0, size);\n\t\tconst options = entries.slice(0, size);\n\t\tconst slicedOptions = entries.slice(size, entries.length);\n\t\tconst slicedOptions = entries.slice(size, entries.length);\n\n\t\tconst menuActions = slicedOptions.reduce((acc, [_key, item]) => {\n\t\tconst menuActions = slicedOptions.reduce((acc, [_key, item]) => {\n\t\t\tconst group = item.type ? item.type : '';\n\t\t\tconst group = item.type ? item.type : '';\n\t\t\tconst section = acc.find((section: { id: string }) => section.id === group);\n\t\t\tconst section = acc.find((section: { id: string }) => section.id === group);",
            "newItem": "\t\t\tconst newItem = { ...item, id: item.content };\n\t\t\tconst newItem = { ...item, id: item.content };",
            "newSection": "\t\t\tconst newSection = { id: group, title: '', items: [newItem] };\n\t\t\tconst newSection = { id: group, title: '', items: [newItem] };"
        },
        "depth_rank": 11
    },
    {
        "file": "useChangeLeaderAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeLeaderAction.ts",
        "code": {
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "changeLeaderAction": "\tconst changeLeaderAction = useMutableCallback(() => changeLeader({ roomId: rid, userId: uid }));\n\tconst changeLeaderAction = useMutableCallback(() => changeLeader({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 12
    },
    {
        "file": "useChangeOwnerAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeOwnerAction.tsx",
        "code": {
            "getWarningModalForFederatedRooms": "const getWarningModalForFederatedRooms = (\nconst getWarningModalForFederatedRooms = (\n\tcloseModalFn: () => void,\n\thandleConfirmFn: () => void,\n\ttitle: string,\n\tconfirmText: string,\n\tbodyText: string,\n): ReactElement => (\n\t<GenericModal\n\t\tvariant='warning'\n\t\tonClose={closeModalFn}",
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "setModal": "\tconst isOwner = useUserHasRoomRole(uid, rid, 'owner');\n\tconst isOwner = useUserHasRoomRole(uid, rid, 'owner');\n\tconst userSubscription = useUserSubscription(rid);\n\tconst userSubscription = useUserSubscription(rid);\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst { _id: loggedUserId = '' } = useUser() || {};\n\tconst { _id: loggedUserId = '' } = useUser() || {};",
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tchangeOwner({ roomId: rid, userId: uid });",
            "changeOwnerAction": "\tconst changeOwnerAction = useMutableCallback(async () => handleChangeOwner({ roomId: rid, userId: uid }));\n\tconst changeOwnerAction = useMutableCallback(async () => handleChangeOwner({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 12
    },
    {
        "file": "useRemoveUserAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useRemoveUserAction.tsx",
        "code": {
            "subscription": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst currentUser = useUser();\n\tconst currentUser = useUser();\n\tconst subscription = useUserSubscription(rid);\n\tconst subscription = useUserSubscription(rid);\n\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "roomName": "\tconst userCanRemove = isRoomFederated(room)\n\tconst userCanRemove = isRoomFederated(room)\n\t\t? Federation.isEditableByTheUser(currentUser || undefined, room, subscription)\n\t\t: hasPermissionToRemove;\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal(null));\n\tconst closeModal = useMutableCallback(() => setModal(null));\n\tconst roomName = room?.t && escapeHTML(roomCoordinator.getRoomName(room.t, room));\n\tconst roomName = room?.t && escapeHTML(roomCoordinator.getRoomName(room.t, room));\n\n\tconst { roomCanRemove } = getRoomDirectives({ room, showingUserId: uid, userSubscription: subscription });\n\tconst { roomCanRemove } = getRoomDirectives({ room, showingUserId: uid, userSubscription: subscription });",
            "roomKeys": "\tconst removeFromTeam = useEndpointAction('POST', '/v1/teams.removeMember', {\n\tconst removeFromTeam = useEndpointAction('POST', '/v1/teams.removeMember', {\n\t\tsuccessMessage: t('User_has_been_removed_from_team'),\n\t});\n\n\tconst removeFromRoomEndpoint = room.t === 'p' ? '/v1/groups.kick' : '/v1/channels.kick';\n\tconst removeFromRoomEndpoint = room.t === 'p' ? '/v1/groups.kick' : '/v1/channels.kick';\n\tconst removeFromRoom = useEndpointAction('POST', removeFromRoomEndpoint, {\n\tconst removeFromRoom = useEndpointAction('POST', removeFromRoomEndpoint, {\n\t\tsuccessMessage: t('User_has_been_removed_from_s', roomName),\n\t});\n\n\tconst removeUserOptionAction = useMutableCallback(() => {\n\tconst removeUserOptionAction = useMutableCallback(() => {\n\t\tconst handleRemoveFromTeam = async (rooms: IRoom[]): Promise<void> => {\n\t\tconst handleRemoveFromTeam = async (rooms: IRoom[]): Promise<void> => {\n\t\t\tif (room.teamId) {\n\t\t\t\tconst roomKeys = Object.keys(rooms);\n\t\t\t\tconst roomKeys = Object.keys(rooms);\n\t\t\t\tawait removeFromTeam({\n\t\t\t\t\tteamId: room.teamId,\n\t\t\t\t\tuserId: uid,\n\t\t\t\t\t...(roomKeys.length && { rooms: roomKeys }),",
            "handleRemoveFromRoom": "\t\tconst handleRemoveFromRoom = async (rid: IRoom['_id'], uid: IUser['_id']): Promise<void> => {\n\t\tconst handleRemoveFromRoom = async (rid: IRoom['_id'], uid: IUser['_id']): Promise<void> => {\n\t\t\tawait removeFromRoom({ roomId: rid, userId: uid });"
        },
        "depth_rank": 12
    },
    {
        "file": "useReportUser.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useReportUser.tsx",
        "code": {
            "setModal": "\tconst ownUserId = useUserId();\n\tconst ownUserId = useUserId();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "displayName": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst displayName = useUserDisplayName({ username, name });\n\tconst displayName = useUserDisplayName({ username, name });",
            "reportUserMutation": "\tconst reportUser = useEndpoint('POST', '/v1/moderation.reportUser');\n\tconst reportUser = useEndpoint('POST', '/v1/moderation.reportUser');\n\tconst reportUserMutation = useMutation(\n\tconst reportUserMutation = useMutation(\n\t\t['reportUser', uid],\n\t\tasync (description: string) => {\n\t\t\treportUser({ description, userId: uid });",
            "action": "\tconst openReportUserModal = useMemo(() => {\n\tconst openReportUserModal = useMemo(() => {\n\t\tconst action = () =>\n\t\tconst action = () =>\n\t\t\tsetModal(\n\t\t\t\t<ReportUserModal\n\t\t\t\t\tonConfirm={reportUserMutation.mutate}"
        },
        "depth_rank": 12
    },
    {
        "file": "useChangeModeratorAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useChangeModeratorAction.tsx",
        "code": {
            "getWarningModalForFederatedRooms": "const getWarningModalForFederatedRooms = (\nconst getWarningModalForFederatedRooms = (\n\tcloseModalFn: () => void,\n\thandleConfirmFn: () => void,\n\ttitle: string,\n\tconfirmText: string,\n\tbodyText: string,\n): ReactElement => (\n\t<GenericModal\n\t\tvariant='warning'\n\t\tonClose={closeModalFn}",
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "userSubscription": "\tconst isModerator = useUserHasRoomRole(uid, rid, 'moderator');\n\tconst isModerator = useUserHasRoomRole(uid, rid, 'moderator');\n\tconst userSubscription = useUserSubscription(rid);\n\tconst userSubscription = useUserSubscription(rid);\n\tconst { _id: loggedUserId = '' } = useUser() || {};\n\tconst { _id: loggedUserId = '' } = useUser() || {};",
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tchangeModerator({ roomId: rid, userId: uid });",
            "changeModeratorAction": "\tconst changeModeratorAction = useMutableCallback(() => handleChangeModerator({ roomId: rid, userId: uid }));\n\tconst changeModeratorAction = useMutableCallback(() => handleChangeModerator({ roomId: rid, userId: uid }));"
        },
        "depth_rank": 12
    },
    {
        "file": "useRedirectModerationConsole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useRedirectModerationConsole.ts",
        "code": {
            "redirectModerationConsoleAction": "\tconst redirectModerationConsoleAction = () => {\n\tconst redirectModerationConsoleAction = () => {\n\t\trouter.push({ uid });"
        },
        "depth_rank": 12
    },
    {
        "file": "useIgnoreUserAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useIgnoreUserAction.ts",
        "code": {
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;"
        },
        "depth_rank": 12
    },
    {
        "file": "useBlockUserAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/hooks/useUserInfoActions/actions/useBlockUserAction.ts",
        "code": {
            "ownUserId": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst ownUserId = useUserId();\n\tconst ownUserId = useUserId();\n\tconst { _id: uid } = user;\n\tconst { _id: uid } = user;",
            "toggleBlockUserAction": "\tconst isUserBlocked = currentSubscription?.blocker;\n\tconst isUserBlocked = currentSubscription?.blocker;\n\tconst toggleBlock = useMethod(isUserBlocked ? 'unblockUser' : 'blockUser');\n\tconst toggleBlock = useMethod(isUserBlocked ? 'unblockUser' : 'blockUser');\n\n\tconst toggleBlockUserAction = useMutableCallback(async () => {\n\tconst toggleBlockUserAction = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait toggleBlock({ rid, blocked: uid });"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomTitle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/RoomTitle.tsx",
        "code": {
            "RoomTitle": "const RoomTitle = ({ room }: RoomTitleProps): ReactElement => {\nconst RoomTitle = ({ room }: RoomTitleProps): ReactElement => {\n\tuseDocumentTitle(room.name, false);\n\n\treturn (\n\t\t<>\n\t\t\t<HeaderIconWithRoom room={room} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ParentTeam.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/ParentTeam.tsx",
        "code": {
            "ParentTeam": "const ParentTeam = ({ room }: { room: IRoom }): ReactElement | null => {\nconst ParentTeam = ({ room }: { room: IRoom }): ReactElement | null => {\n\tconst { teamId } = room;\n\tconst { teamId } = room;",
            "userTeamsListEndpoint": "\tconst teamsInfoEndpoint = useEndpoint('GET', '/v1/teams.info');\n\tconst teamsInfoEndpoint = useEndpoint('GET', '/v1/teams.info');\n\tconst userTeamsListEndpoint = useEndpoint('GET', '/v1/users.listTeams');\n\tconst userTeamsListEndpoint = useEndpoint('GET', '/v1/users.listTeams');\n\n\tconst {\n\tconst {\n\t\tdata: teamInfoData,\n\t\tisLoading: teamInfoLoading,\n\t\tisError: teamInfoError,\n\t} = useQuery(['teamId', teamId], async () => teamsInfoEndpoint({ teamId }), {"
        },
        "depth_rank": 10
    },
    {
        "file": "ParentRoomWithEndpointData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoomWithEndpointData.tsx",
        "code": {
            "ParentRoomWithEndpointData": "const ParentRoomWithEndpointData = ({ rid }: ParentRoomWithEndpointDataProps): ReactElement | null => {\nconst ParentRoomWithEndpointData = ({ rid }: ParentRoomWithEndpointDataProps): ReactElement | null => {\n\tconst { data, isLoading, isError } = useRoomInfoEndpoint(rid);\n\tconst { data, isLoading, isError } = useRoomInfoEndpoint(rid);"
        },
        "depth_rank": 10
    },
    {
        "file": "Header.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Header.tsx",
        "code": {
            "Header": "const Header = ({ room }: HeaderProps<IRoom>): ReactElement | null => {\nconst Header = ({ room }: HeaderProps<IRoom>): ReactElement | null => {\n\tconst { isMobile, isEmbedded, showTopNavbarEmbeddedLayout } = useLayout();\n\tconst { isMobile, isEmbedded, showTopNavbarEmbeddedLayout } = useLayout();"
        },
        "depth_rank": 10
    },
    {
        "file": "DirectRoomHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/DirectRoomHeader.tsx",
        "code": {
            "directUserData": "\tconst directUserData = usePresence(directUserId);\n\tconst directUserData = usePresence(directUserId);\n\n\treturn <RoomHeader slots={slots} room={room} topic={directUserData?.statusText} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/HeaderSkeleton.tsx",
        "code": {
            "HeaderSkeleton": "const HeaderSkeleton = () => {\nconst HeaderSkeleton = () => {\n\treturn (\n\t\t<Header>\n\t\t\t<HeaderAvatar>\n\t\t\t\t<Skeleton variant='rect' width={36} height={36} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ParentRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoom.tsx",
        "code": {
            "handleClick": "const ParentRoom = ({ room }: ParentRoomProps): ReactElement => {\nconst ParentRoom = ({ room }: ParentRoomProps): ReactElement => {\n\tconst icon = useRoomIcon(room);\n\tconst icon = useRoomIcon(room);\n\n\tconst handleClick = (): void => roomCoordinator.openRouteLink(room.t, { rid: room._id, ...room });\n\tconst handleClick = (): void => roomCoordinator.openRouteLink(room.t, { rid: room._id, ...room });"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderIconWithRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/HeaderIconWithRoom.tsx",
        "code": {
            "icon": "const HeaderIconWithRoom = ({ room }: HeaderIconWithRoomProps): ReactElement => {\nconst HeaderIconWithRoom = ({ room }: HeaderIconWithRoomProps): ReactElement => {\n\tconst icon = useRoomIcon(room);\n\tconst icon = useRoomIcon(room);\n\tif (isOmnichannelRoom(room)) {\n\t\treturn <OmnichannelRoomIcon room={room} size='x20' placement='default' />;"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/RoomHeader.tsx",
        "code": {
            "t": "const RoomHeader = ({ room, topic = '', slots = {} }: RoomHeaderProps) => {\nconst RoomHeader = ({ room, topic = '', slots = {} }: RoomHeaderProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Header>\n\t\t\t{slots?.start}"
        },
        "depth_rank": 10
    },
    {
        "file": "ParentRoomWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/ParentRoomWithData.tsx",
        "code": {
            "ParentRoomWithData": "const ParentRoomWithData = ({ room }: ParentRoomWithDataProps): ReactElement => {\nconst ParentRoomWithData = ({ room }: ParentRoomWithDataProps): ReactElement => {\n\tconst { prid } = room;\n\tconst { prid } = room;",
            "subscription": "\tconst subscription = useUserSubscription(prid);\n\tconst subscription = useUserSubscription(prid);\n\n\tif (subscription) {\n\t\treturn <ParentRoom room={subscription} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "Translate.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/icons/Translate.tsx",
        "code": {
            "encryptedLabel": "const Translate: FC<TranslateProps> = ({ room: { autoTranslateLanguage, autoTranslate } }) => {\nconst Translate: FC<TranslateProps> = ({ room: { autoTranslateLanguage, autoTranslate } }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst autoTranslateEnabled = useSetting('AutoTranslate_Enabled');\n\tconst autoTranslateEnabled = useSetting('AutoTranslate_Enabled');\n\tconst encryptedLabel = t('Translated');\n\tconst encryptedLabel = t('Translated');\n\treturn autoTranslateEnabled && autoTranslate && autoTranslateLanguage ? (\n\t\t<HeaderState title={encryptedLabel} icon='language' color='info' />"
        },
        "depth_rank": 11
    },
    {
        "file": "OmnichannelRoomHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/OmnichannelRoomHeader.tsx",
        "code": {
            "currentRouteName": "const OmnichannelRoomHeader: FC<OmnichannelRoomHeaderProps> = ({ slots: parentSlot }) => {\nconst OmnichannelRoomHeader: FC<OmnichannelRoomHeaderProps> = ({ slots: parentSlot }) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentRouteName = useSyncExternalStore(\n\tconst currentRouteName = useSyncExternalStore(\n\t\trouter.subscribeToRouteChange,\n\t\tuseCallback(() => router.getRouteName(), [router]),\n\t);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 11
    },
    {
        "file": "VoipRoomHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/VoipRoomHeader.tsx",
        "code": {
            "currentRouteName": "const VoipRoomHeader: FC<VoipRoomHeaderProps> = ({ slots: parentSlot, room }) => {\nconst VoipRoomHeader: FC<VoipRoomHeaderProps> = ({ slots: parentSlot, room }) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentRouteName = useSyncExternalStore(\n\tconst currentRouteName = useSyncExternalStore(\n\t\trouter.subscribeToRouteChange,\n\t\tuseCallback(() => router.getRouteName(), [router]),\n\t);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 11
    },
    {
        "file": "QuickActionOptions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/QuickActionOptions.tsx",
        "code": {
            "target": "const QuickActionOptions = ({ options, room, action, ...props }: QuickActionOptionsProps) => {\nconst QuickActionOptions = ({ options, room, action, ...props }: QuickActionOptionsProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reference = useRef(null);\n\tconst reference = useRef(null);\n\tconst target = useRef(null);\n\tconst target = useRef(null);\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });\n\tconst { isVisible, toggle } = useDropdownVisibility({ reference, target });",
            "handleClick": "\tconst handleClick = (id: string) => (): void => {\n\tconst handleClick = (id: string) => (): void => {\n\t\ttoggle();\n\t\taction(id);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<HeaderToolbarAction ref={reference} onClick={(): void => toggle()} secondary={isVisible} {...props} />"
        },
        "depth_rank": 12
    },
    {
        "file": "QuickActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/QuickActions.tsx",
        "code": {
            "room": "const QuickActions = ({ className }: QuickActionsProps) => {\nconst QuickActions = ({ className }: QuickActionsProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst { quickActions, actionDefault } = useQuickActions();\n\tconst { quickActions, actionDefault } = useQuickActions();",
            "props": "\t\t\t\tconst props = {\n\t\t\t\tconst props = {\n\t\t\t\t\tid,\n\t\t\t\t\ticon,\n\t\t\t\t\tcolor,\n\t\t\t\t\ttitle: t(title),\n\t\t\t\t\tclassName,\n\t\t\t\t\tindex,\n\t\t\t\t\tprimary: false,\n\t\t\t\t\taction,\n\t\t\t\t\troom,\n\t\t\t\t};\n\n\t\t\t\tif (options) {\n\t\t\t\t\treturn <QuickActionOptions options={options} {...props} key={id} />;"
        },
        "depth_rank": 12
    },
    {
        "file": "usePutChatOnHoldMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/hooks/usePutChatOnHoldMutation.ts",
        "code": {
            "queryClient": "\tconst putChatOnHold = useEndpoint('POST', '/v1/livechat/room.onHold');\n\tconst putChatOnHold = useEndpoint('POST', '/v1/livechat/room.onHold');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync (rid) => {\n\t\t\tawait putChatOnHold({ roomId: rid });"
        },
        "depth_rank": 13
    },
    {
        "file": "useQuickActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/Omnichannel/QuickActions/hooks/useQuickActions.tsx",
        "code": {
            "requestTranscript": "\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\n\tconst requestTranscript = useEndpoint('POST', '/v1/livechat/transcript/:rid', { rid });\n\tconst requestTranscript = useEndpoint('POST', '/v1/livechat/transcript/:rid', { rid });",
            "handleRequestTranscript": "\tconst handleRequestTranscript = useCallback(\n\tconst handleRequestTranscript = useCallback(\n\t\tasync (email: string, subject: string) => {\n\t\t\ttry {\n\t\t\t\tawait requestTranscript({ email, subject });",
            "handleSendTranscriptPDF": "\tconst handleSendTranscriptPDF = useCallback(async () => {\n\tconst handleSendTranscriptPDF = useCallback(async () => {\n\t\ttry {\n\t\t\tawait sendTranscriptPDF();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Livechat_transcript_has_been_requested'),\n\t\t\t});\n\t\t} catch (error) {",
            "handleSendTranscript": "\tconst sendTranscript = useMethod('livechat:sendTranscript');\n\tconst sendTranscript = useMethod('livechat:sendTranscript');\n\n\tconst handleSendTranscript = useCallback(\n\tconst handleSendTranscript = useCallback(\n\t\tasync (email: string, subject: string, token: string) => {\n\t\t\ttry {\n\t\t\t\tawait sendTranscript(token, rid, email, subject);\n\t\t\t\tcloseModal();\n\t\t\t} catch (error) {",
            "discardTranscript": "\tconst discardTranscript = useEndpoint('DELETE', '/v1/livechat/transcript/:rid', { rid });\n\tconst discardTranscript = useEndpoint('DELETE', '/v1/livechat/transcript/:rid', { rid });",
            "handleDiscardTranscript": "\tconst handleDiscardTranscript = useCallback(async () => {\n\tconst handleDiscardTranscript = useCallback(async () => {\n\t\ttry {\n\t\t\tawait discardTranscript();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Livechat_transcript_request_has_been_canceled'),\n\t\t\t});\n\t\t\tcloseModal();\n\t\t} catch (error) {",
            "handleForwardChat": "\tconst forwardChat = useEndpoint('POST', '/v1/livechat/room.forward');\n\tconst forwardChat = useEndpoint('POST', '/v1/livechat/room.forward');\n\n\tconst handleForwardChat = useCallback(\n\tconst handleForwardChat = useCallback(\n\t\tasync (departmentId?: string, userId?: string, comment?: string) => {\n\t\t\tif (departmentId && userId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst transferData: {\n\t\t\tconst transferData: {\n\t\t\t\troomId: string;\n\t\t\t\tclientAction: boolean;\n\t\t\t\tcomment?: string;\n\t\t\t\tdepartmentId?: string;\n\t\t\t\tuserId?: string;\n\t\t\t} = {",
            "handleClose": "\tconst closeChat = useEndpoint('POST', '/v1/livechat/room.closeByUser');\n\tconst closeChat = useEndpoint('POST', '/v1/livechat/room.closeByUser');\n\n\tconst handleClose = useCallback(\n\tconst handleClose = useCallback(\n\t\tasync (\n\t\t\tcomment?: string,\n\t\t\ttags?: string[],\n\t\t\tpreferences?: { omnichannelTranscriptPDF: boolean; omnichannelTranscriptEmail: boolean },",
            "putChatOnHoldMutation": "\tconst putChatOnHoldMutation = usePutChatOnHoldMutation({\n\tconst putChatOnHoldMutation = usePutChatOnHoldMutation({\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Chat_On_Hold_Successfully') });",
            "handleAction": "\tconst handleAction = useMutableCallback(async (id: string) => {\n\tconst handleAction = useMutableCallback(async (id: string) => {\n\t\tswitch (id) {\n\t\t\tcase QuickActionsEnum.MoveQueue:\n\t\t\t\tsetModal(\n\t\t\t\t\t<ReturnChatQueueModal\n\t\t\t\t\t\tonMoveChat={(): void => returnChatToQueueMutation.mutate(rid)}",
            "email": "\t\t\t\tconst email = await getVisitorEmail();\n\t\t\t\tconst email = await getVisitorEmail();\n\t\t\t\tsetModal(\n\t\t\t\t\troom.departmentId ? (\n\t\t\t\t\t\t<CloseChatModalData visitorEmail={email} departmentId={room.departmentId} onConfirm={handleClose} onCancel={closeModal} />",
            "actionDefault": "\tconst actionDefault = useMutableCallback((actionId: string) => {\n\tconst actionDefault = useMutableCallback((actionId: string) => {\n\t\thandleAction(actionId);\n\t});\n\n\treturn { quickActions, actionDefault };"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomToolbox.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/Header/RoomToolbox/RoomToolbox.tsx",
        "code": {
            "t": "const RoomToolbox = ({ className }: RoomToolboxProps) => {\nconst RoomToolbox = ({ className }: RoomToolboxProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { roomToolboxExpanded } = useLayout();\n\tconst { roomToolboxExpanded } = useLayout();",
            "toolbox": "\tconst toolbox = useRoomToolbox();\n\tconst toolbox = useRoomToolbox();\n\tconst { actions, openTab } = toolbox;\n\tconst { actions, openTab } = toolbox;",
            "section": "\t\t\tconst group = item.type ? item.type : '';\n\t\t\tconst group = item.type ? item.type : '';\n\t\t\tconst section = acc.find((section: { id: string }) => section.id === group);\n\t\t\tconst section = acc.find((section: { id: string }) => section.id === group);",
            "newSection": "\t\t\tconst newSection = { id: group, key: item.key, title: group === 'apps' ? t('Apps') : '', items: [item] };\n\t\t\tconst newSection = { id: group, key: item.key, title: group === 'apps' ? t('Apps') : '', items: [item] };",
            "mapToToolboxItem": "\tconst mapToToolboxItem = (action: RoomToolboxActionConfig, index: number) => {\n\tconst mapToToolboxItem = (action: RoomToolboxActionConfig, index: number) => {\n\t\treturn (action.renderToolboxItem ?? renderDefaultToolboxItem)?.({\n\t\t\t...action,\n\t\t\taction: action.action ?? (() => toolbox.openTab(action.id)),\n\t\t\tclassName,\n\t\t\tindex,\n\t\t\ttoolbox,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{featuredActions.map(mapToToolboxItem)}"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageList.tsx",
        "code": {
            "messages": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst messages = useMessages({ rid });\n\tconst messages = useMessages({ rid });",
            "firstUnreadMessageId": "\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider scrollMessageList={scrollMessageList}>",
            "ignoredUser": "\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageListErrorBoundary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageListErrorBoundary.tsx",
        "code": {
            "room": "const MessageListErrorBoundary = ({ children }: { children: ReactNode }): ReactElement => {\nconst MessageListErrorBoundary = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\treturn (\n\t\t<ErrorBoundary\n\t\t\tchildren={children}"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageHighlightContext.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/contexts/MessageHighlightContext.tsx",
        "code": {
            "MessageHighlightContext": "const MessageHighlightContext = createContext<MessageHighlightContextValue>({});\nconst MessageHighlightContext = createContext<MessageHighlightContextValue>({});"
        },
        "depth_rank": 11
    },
    {
        "file": "useJumpToMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/hooks/useJumpToMessage.ts",
        "code": {
            "search": "\t\t\tconst search = router.getSearchParameters();\n\t\t\tconst search = router.getSearchParameters();\n\t\t\tdelete search.msg;\n\t\t\trouter.navigate(\n\t\t\t\t{\n\t\t\t\t\tpathname: router.getLocationPathname(),\n\t\t\t\t\tsearch,\n\t\t\t\t},\n\t\t\t\t{ replace: true },"
        },
        "depth_rank": 11
    },
    {
        "file": "useLoadSurroundingMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/hooks/useLoadSurroundingMessages.ts",
        "code": {
            "abort": "\t\tconst abort = new AbortController();\n\t\tconst abort = new AbortController();\n\n\t\tqueryClient\n\t\t\t.fetchQuery({\n\t\t\t\tqueryKey: ['chat.getMessage', msgId],\n\t\t\t\tqueryFn: () => {\n\t\t\t\t\treturn getMessage({ msgId });",
            "Serialized": "\t\t\t\t// Serialized IMessage dates are strings. For this function, only ts is needed\n\t\t\t\t// Serialized IMessage dates are strings. For this function, only ts is needed\n\t\t\t\tlegacyJumpToMessage({ ...message, ts: new Date(message.ts) } as any as IMessage);"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageListProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/MessageListProvider.tsx",
        "code": {
            "subscription": "\tconst reactToMessage = useEndpoint('POST', '/v1/chat.react');\n\tconst reactToMessage = useEndpoint('POST', '/v1/chat.react');\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst uid = user?._id;\n\tconst uid = user?._id;\n\tconst username = user?.username;\n\tconst username = user?.username;\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "highlights": "\tconst highlights = useUserPreference<string[]>('highlights');\n\tconst highlights = useUserPreference<string[]>('highlights');\n\n\tconst { showAutoTranslate, autoTranslateLanguage } = useAutoTranslate(subscription);\n\tconst { showAutoTranslate, autoTranslateLanguage } = useAutoTranslate(subscription);"
        },
        "depth_rank": 11
    },
    {
        "file": "messageHighlightSubscription.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/messageHighlightSubscription.ts",
        "code": {
            "clearHighlight": "const createMessageHighlightSubscription = (): MessageHighlightSubscription => {\nconst createMessageHighlightSubscription = (): MessageHighlightSubscription => {\n\tlet updateCb: () => void = () => undefined;\n\n\tlet highlightMessageId: IMessage['_id'] | undefined;\n\n\tconst subscribe = (cb: () => void): (() => void) => {\n\tconst subscribe = (cb: () => void): (() => void) => {\n\t\tupdateCb = cb;\n\t\treturn (): void => {\n\t\t\tupdateCb = (): void => undefined;\n\t\t};\n\t};\n\n\tconst getSnapshot = (): typeof highlightMessageId => highlightMessageId;\n\tconst getSnapshot = (): typeof highlightMessageId => highlightMessageId;\n\n\tconst setHighlight = (_id: IMessage['_id']): void => {\n\tconst setHighlight = (_id: IMessage['_id']): void => {\n\t\thighlightMessageId = _id;\n\t\tupdateCb();\n\t};\n\n\tconst clearHighlight = (): void => {\n\tconst clearHighlight = (): void => {\n\t\thighlightMessageId = undefined;\n\t\tupdateCb();\n\t};\n\n\treturn { subscribe, getSnapshot, setHighlight, clearHighlight };"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageHighlightProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/MessageList/providers/MessageHighlightProvider.tsx",
        "code": {
            "contextValue": "const MessageHighlightProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst MessageHighlightProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst highlightMessageId = useSyncExternalStore(messageHighlightSubscription.subscribe, messageHighlightSubscription.getSnapshot);\n\tconst highlightMessageId = useSyncExternalStore(messageHighlightSubscription.subscribe, messageHighlightSubscription.getSnapshot);\n\n\tconst contextValue = useMemo<ContextType<typeof MessageHighlightContext>>(\n\tconst contextValue = useMemo<ContextType<typeof MessageHighlightContext>>(\n\t\t() => ({\n\t\t\thighlightMessageId,\n\t\t}),\n\t\t[highlightMessageId],\n\t);\n\n\treturn <MessageHighlightContext.Provider value={contextValue}>{children}</MessageHighlightContext.Provider>;"
        },
        "depth_rank": 11
    },
    {
        "file": "ReactionUserTag.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/ReactionUserTag.tsx",
        "code": {
            "ReactionUserTag": "const ReactionUserTag = ({ username, onClick, displayName }: ReactionUserTagProps): ReactElement => (\nconst ReactionUserTag = ({ username, onClick, displayName }: ReactionUserTagProps): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ReactionListModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/ReactionListModal.tsx",
        "code": {
            "onClick": "const ReactionList = ({ reactions, onClose }: ReactionListProps): ReactElement => {\nconst ReactionList = ({ reactions, onClose }: ReactionListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst onClick = useMutableCallback((e) => {\n\tconst onClick = useMutableCallback((e) => {\n\t\tconst { username } = e.currentTarget.dataset;\n\t\tconst { username } = e.currentTarget.dataset;"
        },
        "depth_rank": 11
    },
    {
        "file": "Reactions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReactionListModal/Reactions.tsx",
        "code": {
            "useRealName": "const Reactions = ({ reactions, onClick }: ReactionsProps): ReactElement => {\nconst Reactions = ({ reactions, onClick }: ReactionsProps): ReactElement => {\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\treturn (\n\t\t<Box display='flex' flexDirection='column'>\n\t\t\t{Object.entries(reactions).map(([reaction, { names = [], usernames }]) => (\n\t\t\t\t<Box key={reaction} display='flex' alignItems='center' flexDirection='row' overflowX='hidden' mb={8}>"
        },
        "depth_rank": 11
    },
    {
        "file": "ReadReceiptsModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReadReceiptsModal/ReadReceiptsModal.tsx",
        "code": {
            "readReceipts": "\tconst readReceipts = readReceiptsResult.data;\n\tconst readReceipts = readReceiptsResult.data;\n\n\treturn (\n\t\t<GenericModal title={t('Read_by')} onConfirm={onClose} onClose={onClose}>"
        },
        "depth_rank": 11
    },
    {
        "file": "ReadReceiptRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReadReceiptsModal/ReadReceiptRow.tsx",
        "code": {
            "displayName": "const ReadReceiptRow = ({ user, ts }: ReadReceipt): ReactElement => {\nconst ReadReceiptRow = ({ user, ts }: ReadReceipt): ReactElement => {\n\tconst displayName = useUserDisplayName(user || {});\n\tconst displayName = useUserDisplayName(user || {});",
            "formatDateAndTime": "\tconst formatDateAndTime = useFormatDateAndTime({ withSeconds: true });\n\tconst formatDateAndTime = useFormatDateAndTime({ withSeconds: true });"
        },
        "depth_rank": 11
    },
    {
        "file": "ForwardMessageModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ForwardMessageModal/ForwardMessageModal.tsx",
        "code": {
            "dispatchToastMessage": "const ForwardMessageModal = ({ onClose, permalink, message }: ForwardMessageProps): ReactElement => {\nconst ForwardMessageModal = ({ onClose, permalink, message }: ForwardMessageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { copy, hasCopied } = useClipboard(permalink);\n\tconst { copy, hasCopied } = useClipboard(permalink);",
            "sendPayload": "\tconst { control, watch } = useForm({\n\tconst { control, watch } = useForm({\n\t\tdefaultValues: {\n\t\t\trooms: [],\n\t\t},\n\t});\n\n\tconst rooms = watch('rooms');\n\tconst rooms = watch('rooms');\n\tconst sendMessage = useEndpoint('POST', '/v1/chat.postMessage');\n\tconst sendMessage = useEndpoint('POST', '/v1/chat.postMessage');\n\n\tconst sendMessageMutation = useMutation({\n\tconst sendMessageMutation = useMutation({\n\t\tmutationFn: async () => {\n\t\t\tconst optionalMessage = '';\n\t\t\tconst optionalMessage = '';\n\t\t\tconst curMsg = await prependReplies(optionalMessage, [message]);\n\t\t\tconst curMsg = await prependReplies(optionalMessage, [message]);\n\t\t\tconst sendPayload = {\n\t\t\tconst sendPayload = {\n\t\t\t\troomId: rooms,\n\t\t\t\ttext: curMsg,\n\t\t\t};\n\n\t\t\treturn sendMessage(sendPayload);\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Message_has_been_forwarded') });"
        },
        "depth_rank": 11
    },
    {
        "file": "PinMessageModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/PinMessageModal/PinMessageModal.tsx",
        "code": {
            "attachment": "const PinMessageModal = ({ message, ...props }: PinMessageModalProps): ReactElement => {\nconst PinMessageModal = ({ message, ...props }: PinMessageModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst displayName = useUserDisplayName(message.u);\n\tconst displayName = useUserDisplayName(message.u);\n\tconst avatarUrl = getUserAvatarPath(message.u.username);\n\tconst avatarUrl = getUserAvatarPath(message.u.username);\n\n\tconst attachment = {\n\tconst attachment = {\n\t\tauthor_name: String(displayName),\n\t\tauthor_link: '',\n\t\tauthor_icon: avatarUrl,\n\t\tmessage_link: '',\n\t\ttext: message.msg,\n\t\tattachments: message.attachments as MessageQuoteAttachment[],\n\t\tmd: message.md,\n\t};\n\n\treturn (\n\t\t<GenericModal icon='pin' title={t('Pin_Message')} variant='warning' confirmText={t('Yes_pin_message')} {...props}>"
        },
        "depth_rank": 11
    },
    {
        "file": "FileUploadModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/FileUploadModal.tsx",
        "code": {
            "FileUploadModal": "const FileUploadModal = ({\nconst FileUploadModal = ({\n\tonClose,\n\tfile,\n\tfileName,\n\tfileDescription,\n\tonSubmit,\n\tinvalidContentType,\n\tshowDescription = true,\n}: FileUploadModalProps): ReactElement => {"
        },
        "depth_rank": 11
    },
    {
        "file": "FilePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/FilePreview.tsx",
        "code": {
            "fileType": "const FilePreview = ({ file }: FilePreviewProps): ReactElement => {\nconst FilePreview = ({ file }: FilePreviewProps): ReactElement => {\n\tconst fileType = getFileType(file.type);\n\tconst fileType = getFileType(file.type);\n\n\tif (shouldShowMediaPreview(file, fileType)) {\n\t\treturn <MediaPreview file={file} fileType={fileType as FilePreviewType} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ImagePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/ImagePreview.tsx",
        "code": {
            "handleError": "const ImagePreview = ({ url, file }: ImagePreviewProps): ReactElement => {\nconst ImagePreview = ({ url, file }: ImagePreviewProps): ReactElement => {\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [loading, setLoading] = useState(true);\n\tconst [loading, setLoading] = useState(true);\n\n\tconst handleLoad = (): void => setLoading(false);\n\tconst handleLoad = (): void => setLoading(false);\n\tconst handleError = (): void => {\n\tconst handleError = (): void => {\n\t\tsetLoading(false);\n\t\tsetError(true);\n\t};\n\n\tif (error) {\n\t\treturn <GenericPreview file={file} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "GenericPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/FileUploadModal/GenericPreview.tsx",
        "code": {
            "GenericPreview": "const GenericPreview = ({ file }: { file: File }): ReactElement => (\nconst GenericPreview = ({ file }: { file: File }): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ReportMessageModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/modals/ReportMessageModal/ReportMessageModal.tsx",
        "code": {
            "t": "const ReportMessageModal = ({ message, onClose }: ReportMessageModalProps): ReactElement => {\nconst ReportMessageModal = ({ message, onClose }: ReportMessageModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tregister,\n\t\tformState: { errors },",
            "reportMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst reportMessage = useMethod('reportMessage');\n\tconst reportMessage = useMethod('reportMessage');\n\n\tconst { _id } = message;\n\tconst { _id } = message;",
            "handleReportMessage": "\tconst handleReportMessage = async ({ description }: ReportMessageModalsFields): Promise<void> => {\n\tconst handleReportMessage = async ({ description }: ReportMessageModalsFields): Promise<void> => {\n\t\ttry {\n\t\t\tawait reportMessage(_id, description);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Report_has_been_sent') });"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomLayout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/layout/RoomLayout.tsx",
        "code": {
            "RoomLayout": "const RoomLayout = ({ header, body, footer, aside, ...props }: RoomLayoutProps): ReactElement => (\nconst RoomLayout = ({ header, body, footer, aside, ...props }: RoomLayoutProps): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "getRoomDirectives.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/lib/getRoomDirectives.ts",
        "code": {
            "roomDirectives": "\tconst roomDirectives = room?.t && roomCoordinator.getRoomDirectives(room.t);\n\tconst roomDirectives = room?.t && roomCoordinator.getRoomDirectives(room.t);\n\n\tconst [roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove] = [\n\tconst [roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove] = [\n\t\t...((roomDirectives && [\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_OWNER, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_LEADER, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.SET_AS_MODERATOR, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.IGNORE, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.BLOCK, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.MUTE, showingUserId, userSubscription),\n\t\t\troomDirectives.allowMemberAction(room, RoomMemberActions.REMOVE_USER, showingUserId, userSubscription),\n\t\t]) ??\n\t\t\t[]),\n\t];\n\n\treturn { roomCanSetOwner, roomCanSetLeader, roomCanSetModerator, roomCanIgnore, roomCanBlock, roomCanMute, roomCanRemove };"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/RoomProvider.tsx",
        "code": {
            "RoomProvider": "const RoomProvider = ({ rid, children }: RoomProviderProps): ReactElement => {\nconst RoomProvider = ({ rid, children }: RoomProviderProps): ReactElement => {\n\tuseRoomRolesManagement(rid);\n\n\tconst { data: room, isSuccess } = useRoomQuery(rid);\n\tconst { data: room, isSuccess } = useRoomQuery(rid);",
            "subscriptionQuery": "\tconst subscriptionQuery = useReactiveQuery(['subscriptions', { rid }], () => ChatSubscription.findOne({ rid }) ?? null);\n\tconst subscriptionQuery = useReactiveQuery(['subscriptions', { rid }], () => ChatSubscription.findOne({ rid }) ?? null);"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/ChatProvider.tsx",
        "code": {
            "ChatProvider": "const ChatProvider = ({ children, tmid }: ChatProviderProps): ReactElement => {\nconst ChatProvider = ({ children, tmid }: ChatProviderProps): ReactElement => {\n\tconst { _id: rid } = useRoom();\n\tconst { _id: rid } = useRoom();",
            "value": "\tconst value = useChatMessagesInstance({ rid, tmid });\n\tconst value = useChatMessagesInstance({ rid, tmid });"
        },
        "depth_rank": 10
    },
    {
        "file": "SelectedMessagesProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/SelectedMessagesProvider.tsx",
        "code": {
            "value": "\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tselectedMessageStore,\n\t\t}),\n\t\t[],\n\t);\n\n\treturn <SelectedMessageContext.Provider value={value}>{children}</SelectedMessageContext.Provider>;"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomToolboxProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/RoomToolboxProvider.tsx",
        "code": {
            "getGroup": "const groupsDict = {\nconst groupsDict = {\n\tl: 'live',\n\tv: 'voip',\n\td: 'direct',\n\tp: 'group',\n\tc: 'channel',\n} as const satisfies Record<RoomType, RoomToolboxActionConfig['groups'][number]>;\n} as const satisfies Record<RoomType, RoomToolboxActionConfig['groups'][number]>;\n\nconst getGroup = (room: IRoom) => {\nconst getGroup = (room: IRoom) => {\n\tif (room.teamMain) {\n\t\treturn 'team';\n\t}\n\n\tif (room.t === 'd' && (room.uids?.length ?? 0) > 2) {\n\t\treturn 'direct_multiple';\n\t}\n\n\treturn groupsDict[room.t];\n};\n\ntype RoomToolboxProviderProps = { children: ReactNode };",
            "uid": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst coreRoomActions = useCoreRoomActions();\n\tconst coreRoomActions = useCoreRoomActions();\n\tconst appsRoomActions = useAppsRoomActions();\n\tconst appsRoomActions = useAppsRoomActions();\n\n\tconst allowAnonymousRead = useSetting<boolean>('Accounts_AllowAnonymousRead', false);\n\tconst allowAnonymousRead = useSetting<boolean>('Accounts_AllowAnonymousRead', false);\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst { roomToolbox: hiddenActions } = useLayoutHiddenActions();\n\tconst { roomToolbox: hiddenActions } = useLayoutHiddenActions();",
            "contextValue": "\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t(): RoomToolboxContextValue => ({\n\t\t\tactions,\n\t\t\ttab,\n\t\t\tcontext,\n\t\t\topenTab,\n\t\t\tcloseTab,\n\t\t}),\n\t\t[actions, tab, context, openTab, closeTab],\n\t);\n\n\treturn <RoomToolboxContext.Provider value={contextValue}>{children}</RoomToolboxContext.Provider>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerPopupProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/ComposerPopupProvider.tsx",
        "code": {
            "ComposerPopupProvider": "const ComposerPopupProvider = ({ children, room }: { children: ReactNode; room: IRoom }) => {\nconst ComposerPopupProvider = ({ children, room }: { children: ReactNode; room: IRoom }) => {\n\tconst { _id: rid } = room;\n\tconst { _id: rid } = room;",
            "data": "\t\t\t\t\tconst collection = emoji.list;\n\t\t\t\t\tconst collection = emoji.list;\n\n\t\t\t\t\treturn Object.keys(collection)\n\t\t\t\t\t\t.map((_id) => {\n\t\t\t\t\t\t\tconst data = collection[key];\n\t\t\t\t\t\t\tconst data = collection[key];\n\t\t\t\t\t\t\treturn { _id, data };",
            "result": "\t\t\t\t\tconst result = await call({ cmd, params, msg: { rid, tmid } });\n\t\t\t\t\tconst result = await call({ cmd, params, msg: { rid, tmid } });"
        },
        "depth_rank": 10
    },
    {
        "file": "useUserCard.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useUserCard.ts",
        "code": {
            "room": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { openTab } = useRoomToolbox();\n\tconst { openTab } = useRoomToolbox();",
            "open": "\tconst open = useCallback(\n\tconst open = useCallback(\n\t\t(username: string) => (event: UIEvent) => {\n\t\t\tevent.preventDefault();\n\t\t\topenUserCard({\n\t\t\t\tusername,\n\t\t\t\ttarget: event.currentTarget,\n\t\t\t\trid: room._id,\n\t\t\t\topen: (event: UIEvent) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\topenUserInfo(username);\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t\t[openUserInfo, room._id],\n\t);\n\n\treturn { open, close: closeUserCard };"
        },
        "depth_rank": 11
    },
    {
        "file": "useDepsMatch.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useDepsMatch.ts",
        "code": {
            "prevDepsRef": "\tconst prevDepsRef = useRef(deps);\n\tconst prevDepsRef = useRef(deps);\n\tconst { current: prevDeps } = prevDepsRef;\n\tconst { current: prevDeps } = prevDepsRef;"
        },
        "depth_rank": 11
    },
    {
        "file": "useRoomQuery.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useRoomQuery.ts",
        "code": {
            "queryResult": "\tconst queryKey = ['rooms', rid] as const;\n\tconst queryKey = ['rooms', rid] as const;\n\n\tconst queryResult = useQuery(queryKey, async (): Promise<IRoom | null> => ChatRoom.findOne({ _id: rid }, { reactive: false }) ?? null, {\n\tconst queryResult = useQuery(queryKey, async (): Promise<IRoom | null> => ChatRoom.findOne({ _id: rid }, { reactive: false }) ?? null, {\n\t\tstaleTime: Infinity,\n\t\t...options,\n\t});\n\n\tconst { refetch } = queryResult;\n\tconst { refetch } = queryResult;",
            "liveQueryHandle": "\t\tconst liveQueryHandle = ChatRoom.find({ _id: rid }).observe({\n\t\tconst liveQueryHandle = ChatRoom.find({ _id: rid }).observe({\n\t\t\tadded: () => queueMicrotask(() => refetch({ exact: false })),"
        },
        "depth_rank": 11
    },
    {
        "file": "useChatMessagesInstance.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useChatMessagesInstance.ts",
        "code": {
            "instance": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst chatMessages = useInstance(() => {\n\tconst chatMessages = useInstance(() => {\n\t\tconst instance = new ChatMessages({ rid, tmid, uid, actionManager });\n\t\tconst instance = new ChatMessages({ rid, tmid, uid, actionManager });"
        },
        "depth_rank": 11
    },
    {
        "file": "useAppsRoomActions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/providers/hooks/useAppsRoomActions.ts",
        "code": {
            "room": "\tconst result = useAppActionButtons('roomAction');\n\tconst result = useAppActionButtons('roomAction');\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst applyButtonFilters = useApplyButtonFilters();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "Filters": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMemo(\n\t\t() =>\n\t\t\tresult.data?.filter(applyButtonFilters).map(\n\t\t\t\t(action): RoomToolboxActionConfig => ({\n\t\t\t\t\tid: action.actionId,\n\t\t\t\t\ticon: undefined,\n\t\t\t\t\tvariant: action.variant,\n\t\t\t\t\torder: 300,\n\t\t\t\t\ttitle: Utilities.getI18nKeyForApp(action.labelI18n, action.appId),\n\t\t\t\t\tgroups: ['group', 'channel', 'live', 'team', 'direct', 'direct_multiple'],\n\t\t\t\t\t// Filters were applied in the applyButtonFilters function\n\t\t\t\t\t// Filters were applied in the applyButtonFilters function\n\t\t\t\t\t// if the code made it this far, the button should be shown\n\t\t\t\t\taction: () => {\n\t\t\t\t\t\tvoid actionManager\n\t\t\t\t\t\t\t.emitInteraction(action.appId, {\n\t\t\t\t\t\t\t\ttype: 'actionButton',\n\t\t\t\t\t\t\t\tactionId: action.actionId,\n\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\tpayload: { context: action.context },"
        },
        "depth_rank": 11
    },
    {
        "file": "UserCardWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/UserCard/UserCardWithData.tsx",
        "code": {
            "showRealNames": "const UserCardWithData = ({ username, target, rid, open, onClose }: UserCardWithDataProps): ReactElement => {\nconst UserCardWithData = ({ username, target, rid, open, onClose }: UserCardWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst ref = useRef(target);\n\tconst ref = useRef(target);\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst { data, isLoading } = useUserInfoQuery({ username });\n\tconst { data, isLoading } = useUserInfoQuery({ username });",
            "defaultValue": "\tconst user = useMemo(() => {\n\tconst user = useMemo(() => {\n\t\tconst defaultValue = isLoading ? undefined : null;\n\t\tconst defaultValue = isLoading ? undefined : null;\n\n\t\tconst {\n\t\tconst {\n\t\t\t_id,\n\t\t\tname,\n\t\t\troles = defaultValue,\n\t\t\tstatusText = defaultValue,\n\t\t\tbio = defaultValue,\n\t\t\tutcOffset = defaultValue,\n\t\t\tnickname,\n\t\t\tavatarETag,\n\t\t} = data?.user || {};\n\n\t\treturn {\n\t\t\t_id,\n\t\t\tname: getUserDisplayName(name, username, showRealNames),\n\t\t\tusername,\n\t\t\troles: roles && getRoles(roles).map((role, index) => <UserCard.Role key={index}>{role}</UserCard.Role>),",
            "handleOpen": "\tconst handleOpen = useMutableCallback((e: UIEvent) => {\n\tconst handleOpen = useMutableCallback((e: UIEvent) => {\n\t\topen?.(e);\n\t\tonClose?.();\n\t});\n\n\tconst { actions: actionsDefinition, menuActions: menuOptions } = useUserInfoActions(\n\tconst { actions: actionsDefinition, menuActions: menuOptions } = useUserInfoActions(",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { content, icon, onClick }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { content, icon, onClick }]: any): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "ShareLocationModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/ShareLocation/ShareLocationModal.tsx",
        "code": {
            "dispatchToast": "const ShareLocationModal = ({ rid, tmid, onClose }: ShareLocationModalProps): ReactElement => {\nconst ShareLocationModal = ({ rid, tmid, onClose }: ShareLocationModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToast = useToastMessageDispatch();\n\tconst dispatchToast = useToastMessageDispatch();\n\tconst { data: permissionData, isLoading: permissionLoading } = useQuery(['geolocationPermission'], getGeolocationPermission);\n\tconst { data: permissionData, isLoading: permissionLoading } = useQuery(['geolocationPermission'], getGeolocationPermission);",
            "position": "\tconst onConfirmRequestLocation = async (): Promise<void> => {\n\tconst onConfirmRequestLocation = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst position = await getGeolocationPosition();\n\t\t\tconst position = await getGeolocationPosition();\n\t\t\tqueryClient.setQueryData(['geolocationPosition', 'granted'], position);\n\t\t\tqueryClient.setQueryData(['geolocationPermission'], 'granted');\n\t\t} catch (e) {"
        },
        "depth_rank": 10
    },
    {
        "file": "StarredMessagesTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/StarredMessagesTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='star'\n\t\t\ttitle={t('Starred_Messages')}"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageListTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageListTab.tsx",
        "code": {
            "subscription": "\tconst handleTabBarCloseButtonClick = useCallback(() => {\n\tconst handleTabBarCloseButtonClick = useCallback(() => {\n\t\tcloseTab();\n\t}, [closeTab]);\n\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name={iconName} />",
            "all": "\t\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{newDay && <MessageDivider>{formatDate(message.ts)}</MessageDivider>}"
        },
        "depth_rank": 10
    },
    {
        "file": "MentionsTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MentionsTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='at'\n\t\t\ttitle={t('Mentions')}"
        },
        "depth_rank": 10
    },
    {
        "file": "PinnedMessagesTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/PinnedMessagesTab.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='pin'\n\t\t\ttitle={t('Pinned_Messages')}"
        },
        "depth_rank": 10
    },
    {
        "file": "useDiscussionsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/useDiscussionsList.ts",
        "code": {
            "fetchMessages": "\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\tconst discussionsList = useMemo(() => new DiscussionsList(options), [options]);\n\n\tconst getDiscussions = useEndpoint('GET', '/v1/chat.getDiscussions');\n\tconst getDiscussions = useEndpoint('GET', '/v1/chat.getDiscussions');\n\n\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\tconst { messages, total } = await getDiscussions({\n\t\t\t\troomId: options.rid,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: messages,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getDiscussions, options.rid, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList("
        },
        "depth_rank": 11
    },
    {
        "file": "DiscussionsList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsList.tsx",
        "code": {
            "DiscussionsList": "function DiscussionsList({\nfunction DiscussionsList({\n\ttotal = 10,\n\tdiscussions = [],\n\tloadMoreItems,\n\tloading,\n\tonClose,\n\terror,\n\tuserId,\n\ttext,\n\tonChangeFilter,\n}: DiscussionsListProps) {",
            "onClick": "\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealNames = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus(true);\n\tconst inputRef = useAutoFocus(true);\n\tconst onClick = useCallback((e) => {\n\tconst onClick = useCallback((e) => {\n\t\tconst { drid } = e.currentTarget.dataset;\n\t\tconst { drid } = e.currentTarget.dataset;"
        },
        "depth_rank": 11
    },
    {
        "file": "DiscussionsListRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsListRow.tsx",
        "code": {
            "msg": "function DiscussionListRow({ discussion, showRealNames, userId, onClick }: DiscussionListRowProps) {\nfunction DiscussionListRow({ discussion, showRealNames, userId, onClick }: DiscussionListRowProps) {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\n\tconst msg = normalizeThreadMessage(discussion);\n\tconst msg = normalizeThreadMessage(discussion);\n\n\tconst { name = discussion.u.username } = discussion.u;\n\tconst { name = discussion.u.username } = discussion.u;"
        },
        "depth_rank": 11
    },
    {
        "file": "DiscussionsListContextBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/DiscussionsListContextBar.tsx",
        "code": {
            "room": "const DiscussionListContextBar = (): ReactElement | null => {\nconst DiscussionListContextBar = (): ReactElement | null => {\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "options": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 400);\n\tconst debouncedText = useDebouncedValue(text, 400);\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() => ({\n\t\t\trid: room._id,\n\t\t\ttext: debouncedText,\n\t\t}),\n\t\t[room._id, debouncedText],\n\t);\n\n\tconst { discussionsList, loadMoreItems } = useDiscussionsList(options, userId);\n\tconst { discussionsList, loadMoreItems } = useDiscussionsList(options, userId);"
        },
        "depth_rank": 11
    },
    {
        "file": "DiscussionsListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Discussions/components/DiscussionsListItem.tsx",
        "code": {
            "DiscussionListItem": "const DiscussionListItem = ({\nconst DiscussionListItem = ({\n\t_id,\n\tmsg,\n\tusername,\n\tname = username,\n\tts,\n\tdcount,\n\tformatDate = (date: any) => date,\n\tdlm,\n\tclassName = [],\n\temoji,\n\t...props\n}: DiscussionListItemProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Box is={Message} {...props} className={className} pbs={16} pbe={8}>"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomMembersActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembersActions.tsx",
        "code": {
            "t": "const RoomMembersActions = ({ username, _id, name, rid, reload }: RoomMembersActionsProps): ReactElement | null => {\nconst RoomMembersActions = ({ username, _id, name, rid, reload }: RoomMembersActionsProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { menuActions: menuOptions } = useUserInfoActions({ _id, username, name }, rid, reload, 0);\n\tconst { menuActions: menuOptions } = useUserInfoActions({ _id, username, name }, rid, reload, 0);"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomMembersWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembersWithData.tsx",
        "code": {
            "room": "const RoomMembersWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\nconst RoomMembersWithData = ({ rid }: { rid: IRoom['_id'] }): ReactElement => {\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst room = useUserRoom(rid);\n\tconst room = useUserRoom(rid);\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "debouncedText": "\tconst isFederated = room && isRoomFederated(room);\n\tconst isFederated = room && isRoomFederated(room);\n\n\tconst canCreateInviteLinks =\n\tconst canCreateInviteLinks =\n\t\troom && user && isFederated ? Federation.canCreateInviteLinks(user, room, subscription) : hasPermissionToCreateInviteLinks;\n\n\tconst [state, setState] = useState<{ tab: ROOM_MEMBERS_TABS; userId?: IUser['_id'] }>({\n\tconst [state, setState] = useState<{ tab: ROOM_MEMBERS_TABS; userId?: IUser['_id'] }>({\n\t\ttab: ROOM_MEMBERS_TABS.LIST,\n\t\tuserId: undefined,\n\t});\n\n\tconst debouncedText = useDebouncedValue(text, 800);\n\tconst debouncedText = useDebouncedValue(text, 800);\n\n\tconst { data, fetchNextPage, isLoading, refetch, hasNextPage } = useMembersList(\n\tconst { data, fetchNextPage, isLoading, refetch, hasNextPage } = useMembersList(",
            "openUserInfo": "\tconst canAddUsers = room && user && isFederated ? Federation.isEditableByTheUser(user, room, subscription) : hasPermissionToAddUsers;\n\tconst canAddUsers = room && user && isFederated ? Federation.isEditableByTheUser(user, room, subscription) : hasPermissionToAddUsers;\n\n\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst openUserInfo = useMutableCallback((e) => {\n\tconst openUserInfo = useMutableCallback((e) => {\n\t\tconst { userid } = e.currentTarget.dataset;\n\t\tconst { userid } = e.currentTarget.dataset;",
            "openInvite": "\tconst openInvite = useMutableCallback(() => {\n\tconst openInvite = useMutableCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.INVITE });",
            "openAddUser": "\tconst openAddUser = useMutableCallback(() => {\n\tconst openAddUser = useMutableCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.ADD });",
            "handleBack": "\tconst handleBack = useCallback(() => {\n\tconst handleBack = useCallback(() => {\n\t\tsetState({ tab: ROOM_MEMBERS_TABS.LIST });"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomMembers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/RoomMembers.tsx",
        "code": {
            "RoomMembers": "const RoomMembers = ({\nconst RoomMembers = ({\n\tloading,\n\tmembers = [],\n\ttext,\n\ttype,\n\tsetText,\n\tsetType,\n\tonClickClose,\n\tonClickView,\n\tonClickAdd,\n\tonClickInvite,\n\ttotal,\n\terror,\n\tloadMoreItems,\n\trenderRow: RowComponent = RoomMembersRow,\n\trid,\n\tisTeam,\n\tisDirect,\n\treload,\n}: RoomMembersProps): ReactElement => {",
            "itemData": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst inputRef = useAutoFocus<HTMLInputElement>(true);\n\tconst itemData = useMemo(() => ({ onClickView, rid }), [onClickView, rid]);\n\tconst itemData = useMemo(() => ({ onClickView, rid }), [onClickView, rid]);"
        },
        "depth_rank": 11
    },
    {
        "file": "EditInviteLink.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/EditInviteLink.tsx",
        "code": {
            "t": "const EditInviteLink = ({ daysAndMaxUses, onClickNewLink }: EditInviteLinkProps): ReactElement => {\nconst EditInviteLink = ({ daysAndMaxUses, onClickNewLink }: EditInviteLinkProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tformState: { isDirty, isSubmitting },"
        },
        "depth_rank": 12
    },
    {
        "file": "InviteLink.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteLink.tsx",
        "code": {
            "t": "const InviteLink = ({ linkText, captionText, onClickEdit }: InviteLinkProps): ReactElement => {\nconst InviteLink = ({ linkText, captionText, onClickEdit }: InviteLinkProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { copy } = useClipboardWithToast(linkText);\n\tconst { copy } = useClipboardWithToast(linkText);"
        },
        "depth_rank": 12
    },
    {
        "file": "InviteUsers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteUsers.tsx",
        "code": {
            "InviteUsers": "const InviteUsers = ({\nconst InviteUsers = ({\n\tonClickBackMembers,\n\tonClickBackLink,\n\tonClickNewLink,\n\tonClose,\n\tisEditing,\n\tonClickEdit,\n\tdaysAndMaxUses,\n\tcaptionText,\n\tlinkText,\n\terror,\n}: InviteUsersProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{(onClickBackMembers || onClickBackLink) && <ContextualbarBack onClick={isEditing ? onClickBackLink : onClickBackMembers} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "InviteUsersWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/InviteUsers/InviteUsersWithData.tsx",
        "code": {
            "dispatchToastMessage": "const InviteUsersWithData = ({ rid, onClickBack }: InviteUsersWithDataProps): ReactElement => {\nconst InviteUsersWithData = ({ rid, onClickBack }: InviteUsersWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [\n\tconst [\n\t\t{\n\t\t\tisEditing,\n\t\t\turl,\n\t\t\tcaption,\n\t\t\terror,\n\t\t\tdaysAndMaxUses: { days, maxUses },",
            "handleEdit": "\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\tconst findOrCreateInvite = useEndpoint('POST', '/v1/findOrCreateInvite');\n\tconst findOrCreateInvite = useEndpoint('POST', '/v1/findOrCreateInvite');\n\n\tconst handleEdit = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: true })));\n\tconst handleEdit = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: true })));",
            "handleBackToLink": "\tconst handleBackToLink = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: false })));\n\tconst handleBackToLink = useMutableCallback(() => setInviteState((prevState) => ({ ...prevState, isEditing: false })));",
            "data": "\t\t\t\tconst data = await findOrCreateInvite({ rid, days: Number(days), maxUses: Number(maxUses) });\n\t\t\t\tconst data = await findOrCreateInvite({ rid, days: Number(days), maxUses: Number(maxUses) });",
            "handleGenerateLink": "\tconst handleGenerateLink = useMutableCallback((daysAndMaxUses) => {\n\tconst handleGenerateLink = useMutableCallback((daysAndMaxUses) => {\n\t\tsetInviteState((prevState) => ({ ...prevState, daysAndMaxUses, isEditing: false }));"
        },
        "depth_rank": 12
    },
    {
        "file": "AddUsers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/AddUsers/AddUsers.tsx",
        "code": {
            "room": "const AddUsers = ({ rid, onClickBack, reload }: AddUsersProps): ReactElement => {\nconst AddUsers = ({ rid, onClickBack, reload }: AddUsersProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "saveAction": "\tconst saveAction = useMethod('addUsersToRoom');\n\tconst saveAction = useMethod('addUsersToRoom');\n\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tcontrol,\n\t\tgetValues,\n\t\tformState: { isDirty, isSubmitting },",
            "handleSave": "\tconst handleSave = useMutableCallback(async ({ users }) => {\n\tconst handleSave = useMutableCallback(async ({ users }) => {\n\t\ttry {\n\t\t\tawait saveAction({ rid, users });",
            "addClickHandler": "\tconst addClickHandler = useAddMatrixUsers();\n\tconst addClickHandler = useAddMatrixUsers();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{onClickBack && <ContextualbarBack onClick={onClickBack} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "AddMatrixUsersModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/AddUsers/AddMatrixUsers/AddMatrixUsersModal.tsx",
        "code": {
            "onSubmit": "\tconst { handleSubmit } = useForm<FormValues>({\n\tconst { handleSubmit } = useForm<FormValues>({\n\t\tdefaultValues: {\n\t\t\tusersToInvite,\n\t\t},\n\t});\n\n\tconst onSubmit = (data: FormValues) => {\n\tconst onSubmit = (data: FormValues) => {\n\t\tonSave({ users: data.usersToInvite })",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t<Modal.Title>{t('Continue_Adding')}</Modal.Title>"
        },
        "depth_rank": 13
    },
    {
        "file": "useAddMatrixUsers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomMembers/AddUsers/AddMatrixUsers/useAddMatrixUsers.tsx",
        "code": {
            "matrixIdsVerificationResponse": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst handleClose = useMutableCallback(() => setModal(null));\n\tconst handleClose = useMutableCallback(() => setModal(null));\n\tconst dispatchVerifyEndpoint = useEndpoint('GET', '/v1/federation/matrixIds.verify');\n\tconst dispatchVerifyEndpoint = useEndpoint('GET', '/v1/federation/matrixIds.verify');\n\n\treturn useMutation(async ({ users, handleSave }: useAddMatrixUsersProps) => {\n\t\ttry {\n\t\t\tlet matrixIdVerificationMap = new Map();\n\t\t\tconst matrixIds = users.filter((user) => user.startsWith('@'));\n\t\t\tconst matrixIds = users.filter((user) => user.startsWith('@'));\n\t\t\tif (matrixIds.length > 0) {\n\t\t\t\tconst matrixIdsVerificationResponse = await dispatchVerifyEndpoint({ matrixIds });\n\t\t\t\tconst matrixIdsVerificationResponse = await dispatchVerifyEndpoint({ matrixIds });"
        },
        "depth_rank": 13
    },
    {
        "file": "ReportUserModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/UserInfo/ReportUserModal.tsx",
        "code": {
            "ReportUserModal": "const ReportUserModal = ({ username, displayName, onConfirm, onClose }: ReportUserModalProps) => {\nconst ReportUserModal = ({ username, displayName, onConfirm, onClose }: ReportUserModalProps) => {\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },"
        },
        "depth_rank": 11
    },
    {
        "file": "UserInfoActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/UserInfo/UserInfoActions.tsx",
        "code": {
            "t": "const UserInfoActions = ({ user, rid, backToList }: UserInfoActionsProps): ReactElement => {\nconst UserInfoActions = ({ user, rid, backToList }: UserInfoActionsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { actions: actionsDefinition, menuActions: menuOptions } = useUserInfoActions(\n\tconst { actions: actionsDefinition, menuActions: menuOptions } = useUserInfoActions(",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { content, icon, onClick }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { content, icon, onClick }]: any): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "UiKitContextualBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/uikit/UiKitContextualBar.tsx",
        "code": {
            "actionManager": "const UiKitContextualBar = ({ initialView }: UiKitContextualBarProps): JSX.Element => {\nconst UiKitContextualBar = ({ initialView }: UiKitContextualBarProps): JSX.Element => {\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst { view, values, updateValues, state } = useUiKitView(initialView);\n\tconst { view, values, updateValues, state } = useUiKitView(initialView);",
            "contextValue": "\tconst contextValue = useContextualBarContextValue({ view, values, updateValues });\n\tconst contextValue = useContextualBarContextValue({ view, values, updateValues });",
            "handleClose": "\tconst handleSubmit = useMutableCallback((e: FormEvent) => {\n\tconst handleSubmit = useMutableCallback((e: FormEvent) => {\n\t\tpreventSyntheticEvent(e);\n\t\tcloseTab();\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewSubmit',\n\t\t\t\tpayload: {\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tviewId: view.id,\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\tconst handleCancel = useMutableCallback((e: UIEvent) => {\n\tconst handleCancel = useMutableCallback((e: UIEvent) => {\n\t\tpreventSyntheticEvent(e);\n\t\tcloseTab();\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewClosed',\n\t\t\t\tpayload: {\n\t\t\t\t\tviewId: view.id,\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t\tisCleared: false,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\tconst handleClose = useMutableCallback((e: UIEvent) => {\n\tconst handleClose = useMutableCallback((e: UIEvent) => {\n\t\tpreventSyntheticEvent(e);\n\t\tcloseTab();\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewClosed',\n\t\t\t\tpayload: {\n\t\t\t\t\tviewId: view.id,\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t\tisCleared: true,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\treturn (\n\t\t<UiKitContext.Provider value={contextValue}>"
        },
        "depth_rank": 11
    },
    {
        "file": "Threads.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/Threads.tsx",
        "code": {
            "Threads": "const Threads = () => {\nconst Threads = () => {\n\tconst { context: tmid } = useRoomToolbox();\n\tconst { context: tmid } = useRoomToolbox();"
        },
        "depth_rank": 11
    },
    {
        "file": "Thread.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/Thread.tsx",
        "code": {
            "goToThreadList": "const Thread: VFC<ThreadProps> = ({ tmid }) => {\nconst Thread: VFC<ThreadProps> = ({ tmid }) => {\n\tconst goToThreadList = useGoToThreadList({ replace: true });\n\tconst goToThreadList = useGoToThreadList({ replace: true });",
            "toggleFollowingMutation": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst following = uid ? mainMessageQueryResult.data?.replies?.includes(uid) ?? false : false;\n\tconst following = uid ? mainMessageQueryResult.data?.replies?.includes(uid) ?? false : false;\n\tconst toggleFollowingMutation = useToggleFollowingThreadMutation({\n\tconst toggleFollowingMutation = useToggleFollowingThreadMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleClose": "\tconst handleClose = () => {\n\tconst handleClose = () => {\n\t\tcloseTab();\n\t};\n\n\treturn (\n\t\t<ContextualbarInnerContent>\n\t\t\t{canExpand && expanded && <Modal.Backdrop onClick={handleBackdropClick} />}"
        },
        "depth_rank": 11
    },
    {
        "file": "ThreadList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/ThreadList.tsx",
        "code": {
            "t": "const ThreadList: VFC = () => {\nconst ThreadList: VFC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "goToThread": "\tconst goToThread = useGoToThread({ replace: true });\n\tconst goToThread = useGoToThread({ replace: true });",
            "handleThreadClick": "\tconst handleThreadClick = useCallback(\n\tconst handleThreadClick = useCallback(\n\t\t(tmid: IMessage['_id']) => {\n\t\t\tgoToThread({ rid, tmid });"
        },
        "depth_rank": 11
    },
    {
        "file": "useLegacyThreadMessageListScrolling.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useLegacyThreadMessageListScrolling.ts",
        "code": {
            "observer": "\t\tconst observer = new ResizeObserver(() => {\n\t\tconst observer = new ResizeObserver(() => {\n\t\t\tsendToBottomIfNecessary();\n\t\t});\n\n\t\tif (listWrapperRef.current) observer.observe(listWrapperRef.current);\n\t\tif (listRef.current) observer.observe(listRef.current);\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\treturn { listWrapperRef, listRef, requestScrollToBottom: sendToBottomIfNecessary, onScroll };"
        },
        "depth_rank": 12
    },
    {
        "file": "useGetMessageByID.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useGetMessageByID.ts",
        "code": {
            "getMessage": "\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\n\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\n\n\treturn useCallback(\n\t\tasync (mid: IMessage['_id']) => {\n\t\t\ttry {\n\t\t\t\tconst { message: rawMessage } = await getMessage({ msgId: mid });\n\t\t\t\tconst { message: rawMessage } = await getMessage({ msgId: mid });"
        },
        "depth_rank": 12
    },
    {
        "file": "useThreadsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useThreadsList.ts",
        "code": {
            "fetchMessages": "\tconst threadsList = useMemo(() => new ThreadsList(options), [options]);\n\tconst threadsList = useMemo(() => new ThreadsList(options), [options]);\n\n\tconst getThreadsList = useEndpoint('GET', '/v1/chat.getThreadsList');\n\tconst getThreadsList = useEndpoint('GET', '/v1/chat.getThreadsList');\n\n\tconst fetchMessages = useCallback(\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { threads, total } = await getThreadsList({\n\t\t\tconst { threads, total } = await getThreadsList({\n\t\t\t\trid: options.rid,\n\t\t\t\ttype: options.type,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: threads,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getThreadsList, options.rid, options.text, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList("
        },
        "depth_rank": 12
    },
    {
        "file": "useToggleFollowingThreadMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useToggleFollowingThreadMutation.ts",
        "code": {
            "queryClient": "\tconst followMessage = useEndpoint('POST', '/v1/chat.followMessage');\n\tconst followMessage = useEndpoint('POST', '/v1/chat.followMessage');\n\tconst unfollowMessage = useEndpoint('POST', '/v1/chat.unfollowMessage');\n\tconst unfollowMessage = useEndpoint('POST', '/v1/chat.unfollowMessage');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync ({ tmid, follow }) => {\n\t\t\tif (follow) {\n\t\t\t\tawait followMessage({ mid: tmid });"
        },
        "depth_rank": 12
    },
    {
        "file": "useLegacyThreadMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useLegacyThreadMessages.ts",
        "code": {
            "getThreadMessages": "\tconst [loading, setLoading] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\n\tconst getThreadMessages = useMethod('getThreadMessages');\n\tconst getThreadMessages = useMethod('getThreadMessages');\n\n\tuseEffect(() => {\n\t\tsetLoading(true);\n\t\tgetThreadMessages({ tmid }).then((messages) => {\n\t\t\tupsertMessageBulk({ msgs: messages }, Messages);"
        },
        "depth_rank": 12
    },
    {
        "file": "useThreadMainMessageQuery.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/hooks/useThreadMainMessageQuery.ts",
        "code": {
            "createDeleteCriteria": "const createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = {};\n\tconst query: Query<IMessage> = {};",
            "debouncedInvalidate": "\t\tconst debouncedInvalidate = withDebouncing({ wait: 10000 })(() => {\n\t\tconst debouncedInvalidate = withDebouncing({ wait: 10000 })(() => {\n\t\t\tqueryClient.invalidateQueries(queryKey, { exact: true });"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadListItem.tsx",
        "code": {
            "msg": "const ThreadListItem = ({ thread, unread, unreadUser, unreadGroup, onClick }: ThreadListItemProps): ReactElement => {\nconst ThreadListItem = ({ thread, unread, unreadUser, unreadGroup, onClick }: ThreadListItemProps): ReactElement => {\n\tconst uid = useUserId() ?? undefined;\n\tconst uid = useUserId() ?? undefined;\n\tconst decryptedMsg = useDecryptedMessage(thread);\n\tconst decryptedMsg = useDecryptedMessage(thread);\n\tconst msg = normalizeThreadMessage({ ...thread, msg: decryptedMsg });\n\tconst msg = normalizeThreadMessage({ ...thread, msg: decryptedMsg });",
            "toggleFollowMessage": "\tconst followMessage = useMethod('followMessage');\n\tconst followMessage = useMethod('followMessage');\n\tconst unfollowMessage = useMethod('unfollowMessage');\n\tconst unfollowMessage = useMethod('unfollowMessage');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst toggleFollowMessage = useCallback(async (): Promise<void> => {\n\tconst toggleFollowMessage = useCallback(async (): Promise<void> => {\n\t\ttry {\n\t\t\tif (following) {\n\t\t\t\tawait unfollowMessage({ mid: thread._id });"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadMessageList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadMessageList.tsx",
        "code": {
            "ThreadMessageList": "const ThreadMessageList = ({ mainMessage }: ThreadMessageListProps): ReactElement => {\nconst ThreadMessageList = ({ mainMessage }: ThreadMessageListProps): ReactElement => {\n\tconst { messages, loading } = useLegacyThreadMessages(mainMessage._id);\n\tconst { messages, loading } = useLegacyThreadMessages(mainMessage._id);",
            "system": "\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadTitle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadTitle.tsx",
        "code": {
            "innerHTML": "const ThreadTitle = ({ mainMessage }: ThreadTitleProps) => {\nconst ThreadTitle = ({ mainMessage }: ThreadTitleProps) => {\n\tconst innerHTML = useMemo(() => ({ __html: normalizeThreadTitle(mainMessage) }), [mainMessage]);\n\tconst innerHTML = useMemo(() => ({ __html: normalizeThreadTitle(mainMessage) }), [mainMessage]);"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadListMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadListMessage.tsx",
        "code": {
            "ThreadListMessage": "const ThreadListMessage = ({\nconst ThreadListMessage = ({\n\t_id,\n\tmsg,\n\tfollowing,\n\tusername,\n\tname = username,\n\tts,\n\treplies,\n\tparticipants,\n\thandleFollowButton,\n\tunread,\n\tmention,\n\tall,\n\ttlm,\n\tclassName = [],\n\temoji,\n\t...props\n}: ThreadListMessageProps): ReactElement => {"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadSkeleton.tsx",
        "code": {
            "ThreadSkeleton": "const ThreadSkeleton = (): ReactElement => {\nconst ThreadSkeleton = (): ReactElement => {\n\treturn (\n\t\t<Box p={24}>"
        },
        "depth_rank": 12
    },
    {
        "file": "ThreadChat.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Threads/components/ThreadChat.tsx",
        "code": {
            "handleSend": "\tconst handleSend = useCallback((): void => {\n\tconst handleSend = useCallback((): void => {\n\t\tif (sendToChannelPreference === 'default') {\n\t\t\tsetSendToChannel(false);\n\t\t}\n\t}, [sendToChannelPreference]);\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "t": "\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst sendToChannelID = useUniqueId();\n\tconst sendToChannelID = useUniqueId();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ContextualbarContent flexShrink={1} flexGrow={1} paddingInline={0} {...fileUploadTriggerProps}>"
        },
        "depth_rank": 12
    },
    {
        "file": "MailExportForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/ExportMessages/MailExportForm.tsx",
        "code": {
            "formFocus": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formFocus = useAutoFocus<HTMLFormElement>();\n\tconst formFocus = useAutoFocus<HTMLFormElement>();\n\n\tconst {\n\tconst {\n\t\twatch,\n\t\tsetValue,\n\t\tcontrol,\n\t\tregister,\n\t\tformState: { errors, isDirty, isSubmitting },",
            "roomExportMutation": "\tconst roomExportMutation = useRoomExportMutation();\n\tconst roomExportMutation = useRoomExportMutation();\n\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);",
            "clearSelection": "\tconst messages = selectedMessageStore.getSelectedMessages();\n\tconst messages = selectedMessageStore.getSelectedMessages();\n\n\tconst count = useCountSelected();\n\tconst count = useCountSelected();\n\n\tconst clearSelection = useMutableCallback(() => {\n\tconst clearSelection = useMutableCallback(() => {\n\t\tselectedMessageStore.clearStore();\n\t});\n\n\tuseEffect(() => {\n\t\tselectedMessageStore.setIsSelecting(true);\n\t\treturn (): void => {\n\t\t\tselectedMessageStore.reset();\n\t\t};\n\t}, [selectedMessageStore]);\n\n\tconst { toUsers } = watch();\n\tconst { toUsers } = watch();"
        },
        "depth_rank": 11
    },
    {
        "file": "ExportMessages.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/ExportMessages/ExportMessages.tsx",
        "code": {
            "room": "const ExportMessages = () => {\nconst ExportMessages = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 11
    },
    {
        "file": "FileExport.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/ExportMessages/FileExport.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { control, handleSubmit } = useFormContext<MailExportFormValues>();\n\tconst { control, handleSubmit } = useFormContext<MailExportFormValues>();"
        },
        "depth_rank": 11
    },
    {
        "file": "VideoConfBlockModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfBlockModal.tsx",
        "code": {
            "handleConfirm": "\tconst handleConfirm = useCallback(() => {\n\tconst handleConfirm = useCallback(() => {\n\t\tonConfirm();\n\t\tonClose();\n\t}, [onClose, onConfirm]);\n\n\treturn (\n\t\t<GenericModal\n\t\t\ticon={null}"
        },
        "depth_rank": 11
    },
    {
        "file": "VideoConfConfigModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfConfigModal.tsx",
        "code": {
            "t": "const VideoConfConfigModal = ({ onClose, onConfirm, isAdmin }: VideoConfConfigModalProps): ReactElement => {\nconst VideoConfConfigModal = ({ onClose, onConfirm, isAdmin }: VideoConfConfigModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.HeaderText>\n\t\t\t\t\t<Modal.Tagline>{isAdmin ? t('Missing_configuration') : t('App_not_enabled')}</Modal.Tagline>"
        },
        "depth_rank": 11
    },
    {
        "file": "useVideoConfOpenCall.spec.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/hooks/useVideoConfOpenCall.spec.tsx",
        "code": {
            "url": "\t\tconst url = faker.internet.url();\n\t\tconst url = faker.internet.url();\n\n\t\twindow.open = jest.fn();\n\n\t\tresult.current(url);\n\n\t\texpect(window.open).toHaveBeenCalledWith(url);\n\t\texpect(setModal).not.toBeCalled();\n\t});\n\n\tit('should NOT open window AND open modal', async () => {\n\t\tconst { result } = renderHook(() => useVideoConfOpenCall(), { wrapper });\n\t\tconst { result } = renderHook(() => useVideoConfOpenCall(), { wrapper });",
            "setModal": "\t\tconst url = faker.internet.url();\n\t\tconst url = faker.internet.url();\n\t\tconst providerName = faker.lorem.word();\n\t\tconst providerName = faker.lorem.word();\n\n\t\tresult.current(url, providerName);\n\n\t\texpect(window.RocketChatDesktop?.openInternalVideoChatWindow).toHaveBeenCalledWith(url, {\n\t\t\tproviderName,\n\t\t});\n\t});\n});\n\ndescribe('with window.RocketChatDesktop unset', () => {\n\tconst setModal = jest.fn();\n\tconst setModal = jest.fn();\n\tconst wrapper: React.FC = ({ children }) => (\n\tconst wrapper: React.FC = ({ children }) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "useVideoConfWarning.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/hooks/useVideoConfWarning.tsx",
        "code": {
            "handleRedirectToConfiguration": "\tconst handleClose = useMutableCallback(() => setModal(null));\n\tconst handleClose = useMutableCallback(() => setModal(null));\n\n\tconst handleRedirectToConfiguration = useMutableCallback(() => {\n\tconst handleRedirectToConfiguration = useMutableCallback(() => {\n\t\thandleClose();\n\t\tvideoConfSettingsRoute.push({\n\t\t\tgroup: 'Video_Conference',\n\t\t});\n\t});\n\n\treturn useMemo(\n\t\t() => (): void => setModal(<VideoConfConfigModal onClose={handleClose} onConfirm={handleRedirectToConfiguration} isAdmin={isAdmin} />),"
        },
        "depth_rank": 12
    },
    {
        "file": "VideoConfListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfListItem.tsx",
        "code": {
            "VideoConfListItem": "const VideoConfListItem = ({\nconst VideoConfListItem = ({\n\tvideoConfData,\n\tclassName = [],\n\treload,\n\t...props\n}: {",
            "showRealName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDate = useTimeAgo();\n\tconst formatDate = useTimeAgo();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst joinCall = useVideoConfJoinCall();\n\tconst showRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst showRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst {\n\tconst {\n\t\t_id: callId,\n\t\tcreatedBy: { name, username, _id },",
            "handleJoinConference": "\tconst handleJoinConference = useMutableCallback((): void => {\n\tconst handleJoinConference = useMutableCallback((): void => {\n\t\tjoinCall(callId);\n\t\treturn reload();\n\t});\n\n\treturn (\n\t\t<Box\n\t\t\tcolor='default'\n\t\t\tborderBlockEndWidth={2}"
        },
        "depth_rank": 12
    },
    {
        "file": "VideoConfList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfList.tsx",
        "code": {
            "t": "const VideoConfList = ({ onClose, total, videoConfs, loading, error, reload, loadMoreItems }: VideoConfListProps): ReactElement => {\nconst VideoConfList = ({ onClose, total, videoConfs, loading, error, reload, loadMoreItems }: VideoConfListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\tconst { ref, contentBoxSize: { inlineSize = 378, blockSize = 1 } = {} } = useResizeObserver<HTMLElement>({\n\t\tdebounceDelay: 200,\n\t});\n\n\tif (loading) {\n\t\treturn <ContextualbarSkeleton />;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='phone' />\n\t\t\t\t<ContextualbarTitle>{t('Calls')}</ContextualbarTitle>"
        },
        "depth_rank": 12
    },
    {
        "file": "useVideoConfList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/useVideoConfList.ts",
        "code": {
            "fetchData": "\tconst [videoConfList, setVideoConfList] = useState(() => new VideoConfRecordList());\n\tconst [videoConfList, setVideoConfList] = useState(() => new VideoConfRecordList());\n\tconst reload = useCallback(() => setVideoConfList(new VideoConfRecordList()), []);\n\tconst reload = useCallback(() => setVideoConfList(new VideoConfRecordList()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (_start, _end) => {\n\t\t\tconst { data, total } = await getVideoConfs({\n\t\t\tconst { data, total } = await getVideoConfs({\n\t\t\t\troomId: options.roomId,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: data.map((videoConf: any) => ({\n\t\t\t\t\t...videoConf,\n\t\t\t\t\t_updatedAt: new Date(videoConf._updatedAt),\n\t\t\t\t\tcreatedAt: new Date(videoConf.createdAt),\n\t\t\t\t\tendedAt: videoConf.endedAt ? new Date(videoConf.endedAt) : undefined,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getVideoConfs, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(videoConfList, fetchData);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(videoConfList, fetchData);"
        },
        "depth_rank": 12
    },
    {
        "file": "VideoConfListWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfList/VideoConfListWithData.tsx",
        "code": {
            "room": "const VideoConfListWithData = () => {\nconst VideoConfListWithData = () => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "options": "\tconst options = useMemo(() => ({ roomId: room._id }), [room._id]);\n\tconst options = useMemo(() => ({ roomId: room._id }), [room._id]);"
        },
        "depth_rank": 12
    },
    {
        "file": "StartCallPopup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/StartCallPopup.tsx",
        "code": {
            "videoConfPreferences": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers(videoConfPreferences);\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers(videoConfPreferences);",
            "handleStartCall": "\tconst handleStartCall = useMutableCallback(() => {\n\tconst handleStartCall = useMutableCallback(() => {\n\t\tsetPreferences(controllersConfig);\n\t\tonConfirm();\n\t});\n\n\treturn (\n\t\t<VideoConfPopup ref={ref}>"
        },
        "depth_rank": 13
    },
    {
        "file": "IncomingPopup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/IncomingPopup.tsx",
        "code": {
            "t": "const IncomingPopup = ({ id, room, position, onClose, onMute, onConfirm }: IncomingPopupProps): ReactElement => {\nconst IncomingPopup = ({ id, room, position, onClose, onMute, onConfirm }: IncomingPopupProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers();\n\tconst { controllersConfig, handleToggleMic, handleToggleCam } = useVideoConfControllers();",
            "params": "\tconst setPreferences = useVideoConfSetPreferences();\n\tconst setPreferences = useVideoConfSetPreferences();\n\n\tconst params = useMemo(() => ({ callId: id }), [id]);\n\tconst params = useMemo(() => ({ callId: id }), [id]);",
            "handleJoinCall": "\tconst showMic = Boolean(value?.capabilities?.mic);\n\tconst showMic = Boolean(value?.capabilities?.mic);\n\tconst showCam = Boolean(value?.capabilities?.cam);\n\tconst showCam = Boolean(value?.capabilities?.cam);\n\n\tconst handleJoinCall = useMutableCallback(() => {\n\tconst handleJoinCall = useMutableCallback(() => {\n\t\tsetPreferences(controllersConfig);\n\t\tonConfirm();\n\t});\n\n\treturn (\n\t\t<VideoConfPopup position={position}>"
        },
        "depth_rank": 13
    },
    {
        "file": "TimedVideoConfPopup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/TimedVideoConfPopup.tsx",
        "code": {
            "TimedVideoConfPopup": "const TimedVideoConfPopup = ({\nconst TimedVideoConfPopup = ({\n\tid,\n\trid,\n\tisReceiving = false,\n\tisCalling = false,\n\tposition,\n}: TimedVideoConfPopupProps): ReactElement | null => {",
            "handleStartCall": "\tconst handleConfirm = (): void => {\n\tconst handleConfirm = (): void => {\n\t\tacceptCall(id);\n\t};\n\n\tconst handleClose = (id: string): void => {\n\tconst handleClose = (id: string): void => {\n\t\tif (isReceiving) {\n\t\t\trejectCall(id);\n\t\t\treturn;\n\t\t}\n\n\t\tabortCall();\n\t};\n\n\tconst handleMute = (): void => {\n\tconst handleMute = (): void => {\n\t\tdismissCall(id);\n\t};\n\n\tconst handleStartCall = async (): Promise<void> => {\n\tconst handleStartCall = async (): Promise<void> => {\n\t\tsetStarting(true);\n\t\tstartCall(rid);\n\t};\n\n\tif (isReceiving) {\n\t\treturn <IncomingPopup room={room} id={id} position={position} onClose={handleClose} onMute={handleMute} onConfirm={handleConfirm} />;"
        },
        "depth_rank": 13
    },
    {
        "file": "VideoConfPopupRoomInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/VideoConfPopupRoomInfo.tsx",
        "code": {
            "username": "\tconst subscription = useUserSubscription(room._id);\n\tconst subscription = useUserSubscription(room._id);\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });\n\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });",
            "avatar": "\tconst avatar = <RoomAvatar room={room} size='x40' />;\n\tconst avatar = <RoomAvatar room={room} size='x40' />;"
        },
        "depth_rank": 13
    },
    {
        "file": "OutgoingPopup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/VideoConference/VideoConfPopups/VideoConfPopup/OutgoingPopup.tsx",
        "code": {
            "videoConfPreferences": "const OutgoingPopup = ({ room, onClose, id }: OutgoingPopupProps): ReactElement => {\nconst OutgoingPopup = ({ room, onClose, id }: OutgoingPopupProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst videoConfPreferences = useVideoConfPreferences();\n\tconst { controllersConfig } = useVideoConfControllers(videoConfPreferences);\n\tconst { controllersConfig } = useVideoConfControllers(videoConfPreferences);"
        },
        "depth_rank": 13
    },
    {
        "file": "RoomFiles.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/RoomFiles.tsx",
        "code": {
            "RoomFiles": "const RoomFiles = ({\nconst RoomFiles = ({\n\tloading,\n\ttype,\n\ttext,\n\tfilesItems = [],\n\tloadMoreItems,\n\tsetType,\n\tsetText,\n\ttotal,\n\tonClickClose,\n\tonClickDelete,\n}: RoomFilesProps) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst options: SelectOption[] = useMemo(\n\tconst options: SelectOption[] = useMemo(\n\t\t() => [\n\t\t\t['all', t('All')],\n\t\t\t['image', t('Images')],\n\t\t\t['video', t('Videos')],\n\t\t\t['audio', t('Audios')],\n\t\t\t['text', t('Texts')],\n\t\t\t['application', t('Files')],\n\t\t],\n\t\t[t],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='attachment' />\n\t\t\t\t<ContextualbarTitle>{t('Files')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomFilesWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/RoomFilesWithData.tsx",
        "code": {
            "room": "const RoomFilesWithData = () => {\nconst RoomFilesWithData = () => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "query": "\tconst handleTextChange = useCallback((event) => {\n\tconst handleTextChange = useCallback((event) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\trid: room._id,\n\t\t\ttype,\n\t\t\ttext,\n\t\t}),\n\t\t[room._id, type, text],\n\t);\n\n\tconst { filesList, loadMoreItems, reload } = useFilesList(query);\n\tconst { filesList, loadMoreItems, reload } = useFilesList(query);",
            "handleDeleteFile": "\tconst handleDeleteFile = useDeleteFile(reload);\n\tconst handleDeleteFile = useDeleteFile(reload);\n\n\treturn (\n\t\t<RoomFiles\n\t\t\tloading={phase === AsyncStatePhase.LOADING}"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeleteFile.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/hooks/useDeleteFile.tsx",
        "code": {
            "onConfirm": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst deleteFile = useMethod('deleteFileMessage');\n\tconst deleteFile = useMethod('deleteFileMessage');\n\n\tconst handleDelete = useMutableCallback((_id) => {\n\tconst handleDelete = useMutableCallback((_id) => {\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\ttry {\n\t\t\t\tawait deleteFile(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Deleted') });"
        },
        "depth_rank": 12
    },
    {
        "file": "FileItemMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/components/FileItemMenu.tsx",
        "code": {
            "menuOptions": "const FileItemMenu = ({ fileData, onClickDelete }: FileItemMenuProps) => {\nconst FileItemMenu = ({ fileData, onClickDelete }: FileItemMenuProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst isDeletionAllowed = useMessageDeletionIsAllowed(room._id, fileData, uid);\n\tconst isDeletionAllowed = useMessageDeletionIsAllowed(room._id, fileData, uid);\n\n\tconst menuOptions = {\n\tconst menuOptions = {\n\t\tdownLoad: {\n\t\t\tlabel: (\n\t\t\t\t<Box display='flex' alignItems='center'>\n\t\t\t\t\t<Icon mie={4} name='download' size='x16' />"
        },
        "depth_rank": 12
    },
    {
        "file": "FileItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/RoomFiles/components/FileItem.tsx",
        "code": {
            "format": "const FileItem = ({ fileData, onClickDelete }: FileItemProps) => {\nconst FileItem = ({ fileData, onClickDelete }: FileItemProps) => {\n\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\tconst { _id, name, url, uploadedAt, type, typeGroup, user } = fileData;\n\tconst { _id, name, url, uploadedAt, type, typeGroup, user } = fileData;"
        },
        "depth_rank": 12
    },
    {
        "file": "NotificationPreferencesWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferencesWithData.tsx",
        "code": {
            "subscription": "const NotificationPreferencesWithData = (): ReactElement => {\nconst NotificationPreferencesWithData = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "notifications": "\tconst handlePlaySound = (): void => {\n\tconst handlePlaySound = (): void => {\n\t\tcustomSound.play(desktopSound);\n\t};\n\n\tconst handleSave = methods.handleSubmit(\n\tconst handleSave = methods.handleSubmit(\n\t\t({ turnOn, muteGroupMentions, showCounter, showMentions, desktopAlert, desktopSound, mobileAlert, emailAlert }) => {\n\t\t\tconst notifications = {\n\t\t\tconst notifications = {\n\t\t\t\tdisableNotifications: turnOn ? '0' : '1',\n\t\t\t\tmuteGroupMentions: muteGroupMentions ? '1' : '0',\n\t\t\t\thideUnreadStatus: showCounter ? '0' : '1',\n\t\t\t\thideMentionStatus: showMentions ? '0' : '1',\n\t\t\t\tdesktopNotifications: desktopAlert,\n\t\t\t\taudioNotificationValue: desktopSound,\n\t\t\t\tmobilePushNotifications: mobileAlert,\n\t\t\t\temailNotifications: emailAlert,\n\t\t\t};\n\n\t\t\tsaveSettings({\n\t\t\t\troomId: room._id,\n\t\t\t\tnotifications,\n\t\t\t});\n\t\t},\n\t);\n\n\treturn (\n\t\t<FormProvider {...methods}>"
        },
        "depth_rank": 11
    },
    {
        "file": "NotificationPreferences.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferences.tsx",
        "code": {
            "NotificationPreferences": "const NotificationPreferences = ({\nconst NotificationPreferences = ({\n\thandleClose,\n\thandleSave,\n\tnotificationOptions,\n\thandlePlaySound,\n}: NotificationPreferencesProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tformState: { isDirty, isSubmitting },"
        },
        "depth_rank": 11
    },
    {
        "file": "NotificationPreferencesForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/NotificationPreferencesForm.tsx",
        "code": {
            "t": "const NotificationPreferencesForm = ({ notificationOptions, handlePlaySound }: NotificationPreferencesFormProps) => {\nconst NotificationPreferencesForm = ({ notificationOptions, handlePlaySound }: NotificationPreferencesFormProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { watch, control } = useFormContext();\n\tconst { watch, control } = useFormContext();"
        },
        "depth_rank": 11
    },
    {
        "file": "NotificationByDevice.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/components/NotificationByDevice.tsx",
        "code": {
            "NotificationByDevice": "const NotificationByDevice = ({ device, icon, children }: NotificationByDeviceProps): ReactElement => (\nconst NotificationByDevice = ({ device, icon, children }: NotificationByDeviceProps): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "NotificationPreference.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/components/NotificationPreference.tsx",
        "code": {
            "NotificationPreference": "const NotificationPreference = ({\nconst NotificationPreference = ({\n\tname,\n\toptions,\n\tonChange,\n\toptionValue,\n\tchildren,\n\t...props\n}: NotificationPreferenceProps): ReactElement => (\n\t<Field {...props}>"
        },
        "depth_rank": 12
    },
    {
        "file": "NotificationToggle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/NotificationPreferences/components/NotificationToggle.tsx",
        "code": {
            "fieldId": "const NotificationToggle = ({ label, description, onChange, defaultChecked }: NotificationToggleProps): ReactElement => {\nconst NotificationToggle = ({ label, description, onChange, defaultChecked }: NotificationToggleProps): ReactElement => {\n\tconst fieldId = useUniqueId();\n\tconst fieldId = useUniqueId();\n\n\treturn (\n\t\t<FieldGroup>\n\t\t\t<Field>\n\t\t\t\t<FieldRow>\n\t\t\t\t\t<FieldLabel htmlFor={fieldId}>{label}</FieldLabel>"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomInfoRouter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/RoomInfoRouter.tsx",
        "code": {
            "RoomInfoRouter": "const RoomInfoRouter = ({ onClickBack, onEnterRoom, resetState }: RoomInfoRouterProps) => {\nconst RoomInfoRouter = ({ onClickBack, onEnterRoom, resetState }: RoomInfoRouterProps) => {\n\tconst [isEditing, setIsEditing] = useState(false);\n\tconst [isEditing, setIsEditing] = useState(false);\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "onClickEnterRoom": "\tconst room = useRoom();\n\tconst room = useRoom();\n\n\tconst canEdit = useCanEditRoom(room);\n\tconst canEdit = useCanEditRoom(room);\n\tconst onClickEnterRoom = useMutableCallback(() => onEnterRoom?.(room));\n\tconst onClickEnterRoom = useMutableCallback(() => onEnterRoom?.(room));\n\n\tif (isEditing) {\n\t\treturn <EditRoomInfoWithData onClickBack={() => setIsEditing(false)} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "useRoomActions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/useRoomActions.ts",
        "code": {
            "handleLeave": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleHide = useRoomHide(room);\n\tconst handleHide = useRoomHide(room);\n\tconst handleLeave = useRoomLeave(room);\n\tconst handleLeave = useRoomLeave(room);\n\tconst { handleDelete, canDeleteRoom } = useDeleteRoom(room, { reload: resetState });\n\tconst { handleDelete, canDeleteRoom } = useDeleteRoom(room, { reload: resetState });"
        },
        "depth_rank": 12
    },
    {
        "file": "useRoomConvertToTeam.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomConvertToTeam.tsx",
        "code": {
            "onConfirm": "\tconst convertRoomToTeam = useEndpoint('POST', room.t === 'c' ? '/v1/channels.convertToTeam' : '/v1/groups.convertToTeam');\n\tconst convertRoomToTeam = useEndpoint('POST', room.t === 'c' ? '/v1/channels.convertToTeam' : '/v1/groups.convertToTeam');\n\n\tconst handleConvertToTeam = useMutableCallback(async () => {\n\tconst handleConvertToTeam = useMutableCallback(async () => {\n\t\tconst onConfirm = async () => {\n\t\tconst onConfirm = async () => {\n\t\t\ttry {\n\t\t\t\tawait convertRoomToTeam(room.t === 'c' ? { channelId: room._id } : { roomId: room._id });"
        },
        "depth_rank": 13
    },
    {
        "file": "useRoomHide.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomHide.tsx",
        "code": {
            "hide": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst hideRoom = useMethod('hideRoom');\n\tconst hideRoom = useMethod('hideRoom');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async () => {\n\t\tconst hide = async () => {\n\t\t\ttry {\n\t\t\t\tawait hideRoom(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tsetModal(\n\t\t\t<WarningModal\n\t\t\t\ttext={t(warnText as TranslationKey, room.fname || room.name)}"
        },
        "depth_rank": 13
    },
    {
        "file": "useRoomLeave.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/hooks/actions/useRoomLeave.tsx",
        "code": {
            "leaveAction": "\tconst handleLeave = useMutableCallback(() => {\n\tconst handleLeave = useMutableCallback(() => {\n\t\tconst leaveAction = async () => {\n\t\tconst leaveAction = async () => {\n\t\t\ttry {\n\t\t\t\tawait leaveRoom(room._id);\n\t\t\t\trouter.navigate('/home');\n\t\t\t\tLegacyRoomManager.close(room._id);\n\t\t\t} catch (error) {",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.LEAVE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(room.t).getUiText(UiTextContext.LEAVE_WARNING);\n\n\t\tsetModal(\n\t\t\t<WarningModal\n\t\t\t\ttext={t(warnText as TranslationKey, room.fname || room.name)}"
        },
        "depth_rank": 13
    },
    {
        "file": "ChannelToTeamConfirmation.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamConfirmation.tsx",
        "code": {
            "t": "const ChannelToTeamConfirmation = ({ onCancel, onConfirm }: ChannelToTeamConfirmationProps) => {\nconst ChannelToTeamConfirmation = ({ onCancel, onConfirm }: ChannelToTeamConfirmationProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ticon='warning'\n\t\t\ttitle={t('Confirmation')}"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelToTeamModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamModal.tsx",
        "code": {
            "ChannelToTeamModal": "const CHANNEL_TO_TEAM_STEPS = {\nconst CHANNEL_TO_TEAM_STEPS = {\n\tSELECTION: 'selection',\n\tCONFIRMATION: 'confirmation',\n};\n\nconst ChannelToTeamModal = ({ onCancel, onConfirm }: ChannelToTeamModalProps) => {\nconst ChannelToTeamModal = ({ onCancel, onConfirm }: ChannelToTeamModalProps) => {\n\tconst [step, setStep] = useState(CHANNEL_TO_TEAM_STEPS.SELECTION);\n\tconst [step, setStep] = useState(CHANNEL_TO_TEAM_STEPS.SELECTION);\n\tconst [teamId, setTeamId] = useState<string>();\n\tconst [teamId, setTeamId] = useState<string>();\n\n\tif (step === CHANNEL_TO_TEAM_STEPS.CONFIRMATION && teamId) {\n\t\treturn <ChannelToTeamConfirmation onCancel={onCancel} onConfirm={() => onConfirm(teamId)} />;",
            "handleChange": "\tconst handleChange = (value: string | string[]) => {\n\tconst handleChange = (value: string | string[]) => {\n\t\tif (typeof value === 'string') {\n\t\t\tsetTeamId(value);\n\t\t}\n\t};\n\n\treturn (\n\t\t<ChannelToTeamSelection\n\t\t\tonCancel={onCancel}"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelToTeamSelection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/ChannelToTeamModal/ChannelToTeamSelection.tsx",
        "code": {
            "t": "const ChannelToTeamSelection = ({ teamId, onCancel, onChange, onConfirm }: ChannelToTeamSelectionProps) => {\nconst ChannelToTeamSelection = ({ teamId, onCancel, onChange, onConfirm }: ChannelToTeamSelectionProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\tcancelText={t('Cancel')}"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/RoomInfo/RoomInfo.tsx",
        "code": {
            "t": "const RoomInfo = ({ room, icon, onClickBack, onClickClose, onClickEnterRoom, onClickEdit, resetState }: RoomInfoProps) => {\nconst RoomInfo = ({ room, icon, onClickBack, onClickClose, onClickEnterRoom, onClickEdit, resetState }: RoomInfoProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { name, fname, description, topic, archived, broadcast, announcement } = room;\n\tconst { name, fname, description, topic, archived, broadcast, announcement } = room;",
            "memoizedActions": "\tconst roomTitle = fname || name;\n\tconst roomTitle = fname || name;\n\n\tconst retentionPolicy = useRetentionPolicy(room);\n\tconst retentionPolicy = useRetentionPolicy(room);\n\tconst memoizedActions = useRoomActions(room, { onClickEnterRoom, onClickEdit }, resetState);\n\tconst memoizedActions = useRoomActions(room, { onClickEnterRoom, onClickEdit }, resetState);",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]) => (\n\t\tconst mapAction = ([key, { label, icon, action }]: [string, Action]) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "EditRoomInfoWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/EditRoomInfo/EditRoomInfoWithData.tsx",
        "code": {
            "room": "const EditRoomInfoWithData = ({ onClickBack }: { onClickBack: () => void }) => {\nconst EditRoomInfoWithData = ({ onClickBack }: { onClickBack: () => void }) => {\n\tconst room = useRoom() as IRoomWithRetentionPolicy;\n\tconst room = useRoom() as IRoomWithRetentionPolicy;\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 12
    },
    {
        "file": "EditRoomInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/Info/EditRoomInfo/EditRoomInfo.tsx",
        "code": {
            "retentionPolicy": "const EditRoomInfo = ({ room, onClickClose, onClickBack }: EditRoomInfoProps) => {\nconst EditRoomInfo = ({ room, onClickClose, onClickBack }: EditRoomInfoProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst isFederated = useMemo(() => isRoomFederated(room), [room]);\n\tconst isFederated = useMemo(() => isRoomFederated(room), [room]);\n\n\tconst retentionPolicy = useSetting<boolean>('RetentionPolicy_Enabled');\n\tconst retentionPolicy = useSetting<boolean>('RetentionPolicy_Enabled');\n\tconst { handleDelete, canDeleteRoom } = useDeleteRoom(room);\n\tconst { handleDelete, canDeleteRoom } = useDeleteRoom(room);",
            "defaultValues": "\tconst defaultValues = useEditRoomInitialValues(room);\n\tconst defaultValues = useEditRoomInitialValues(room);\n\n\tconst {\n\tconst {\n\t\twatch,\n\t\treset,\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty, dirtyFields, errors, isSubmitting },",
            "data": "\tconst saveAction = useEndpoint('POST', '/v1/rooms.saveRoomSettings');\n\tconst saveAction = useEndpoint('POST', '/v1/rooms.saveRoomSettings');\n\n\tconst handleArchive = useArchiveRoom(room);\n\tconst handleArchive = useArchiveRoom(room);\n\n\tconst handleUpdateRoomData = useMutableCallback(async ({ hideSysMes, joinCodeRequired, ...formData }) => {\n\tconst handleUpdateRoomData = useMutableCallback(async ({ hideSysMes, joinCodeRequired, ...formData }) => {\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tdelete data.archived;\n\n\t\ttry {\n\t\t\tawait saveAction({\n\t\t\t\trid: room._id,\n\t\t\t\t...data,\n\t\t\t\t...((data.joinCode || 'joinCodeRequired' in data) && { joinCode: joinCodeRequired ? data.joinCode : '' }),",
            "retentionFilesOnlyField": "\tconst handleSave = useMutableCallback(async (data) => {\n\tconst handleSave = useMutableCallback(async (data) => {\n\t\tawait Promise.all([isDirty && handleUpdateRoomData(data), changeArchiving && handleArchive()].filter(Boolean));\n\t});\n\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst roomNameField = useUniqueId();\n\tconst roomNameField = useUniqueId();\n\tconst roomDescriptionField = useUniqueId();\n\tconst roomDescriptionField = useUniqueId();\n\tconst roomAnnouncementField = useUniqueId();\n\tconst roomAnnouncementField = useUniqueId();\n\tconst roomTopicField = useUniqueId();\n\tconst roomTopicField = useUniqueId();\n\tconst roomTypeField = useUniqueId();\n\tconst roomTypeField = useUniqueId();\n\tconst readOnlyField = useUniqueId();\n\tconst readOnlyField = useUniqueId();\n\tconst reactWhenReadOnlyField = useUniqueId();\n\tconst reactWhenReadOnlyField = useUniqueId();\n\tconst archivedField = useUniqueId();\n\tconst archivedField = useUniqueId();\n\tconst joinCodeRequiredField = useUniqueId();\n\tconst joinCodeRequiredField = useUniqueId();\n\tconst hideSysMesField = useUniqueId();\n\tconst hideSysMesField = useUniqueId();\n\tconst encryptedField = useUniqueId();\n\tconst encryptedField = useUniqueId();\n\tconst retentionEnabledField = useUniqueId();\n\tconst retentionEnabledField = useUniqueId();\n\tconst retentionOverrideGlobalField = useUniqueId();\n\tconst retentionOverrideGlobalField = useUniqueId();\n\tconst retentionMaxAgeField = useUniqueId();\n\tconst retentionMaxAgeField = useUniqueId();\n\tconst retentionExcludePinnedField = useUniqueId();\n\tconst retentionExcludePinnedField = useUniqueId();\n\tconst retentionFilesOnlyField = useUniqueId();\n\tconst retentionFilesOnlyField = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t{onClickBack && <ContextualbarBack onClick={onClickBack} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "OTR.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/OTR.tsx",
        "code": {
            "renderOTRState": "const OTR = ({ isOnline, onClickClose, onClickStart, onClickEnd, onClickRefresh, otrState, peerUsername }: OTRProps): ReactElement => {\nconst OTR = ({ isOnline, onClickClose, onClickStart, onClickEnd, onClickRefresh, otrState, peerUsername }: OTRProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst renderOTRState = (): ReactElement => {\n\tconst renderOTRState = (): ReactElement => {\n\t\tswitch (otrState) {\n\t\t\tcase OtrRoomState.NOT_STARTED:\n\t\t\t\treturn (\n\t\t\t\t\t<Button onClick={onClickStart} primary>"
        },
        "depth_rank": 11
    },
    {
        "file": "OTRWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/OTRWithData.tsx",
        "code": {
            "room": "const OTRWithData = (): ReactElement => {\nconst OTRWithData = (): ReactElement => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "timeout": "\t\tconst timeout = setTimeout(() => {\n\t\tconst timeout = setTimeout(() => {\n\t\t\totr?.setState(OtrRoomState.TIMEOUT);\n\t\t}, 10000);\n\n\t\treturn (): void => {\n\t\t\tclearTimeout(timeout);\n\t\t};\n\t}, [otr, otrState]);\n\n\treturn (\n\t\t<OTRComponent\n\t\t\tisOnline={isOnline}"
        },
        "depth_rank": 11
    },
    {
        "file": "OTREstablished.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/components/OTREstablished.tsx",
        "code": {
            "t": "const OTREstablished = ({ onClickRefresh, onClickEnd }: OTREstablishedProps): ReactElement => {\nconst OTREstablished = ({ onClickRefresh, onClickEnd }: OTREstablishedProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ButtonGroup stretch>\n\t\t\t<Button onClick={onClickRefresh}>{t('Refresh_keys')}</Button>"
        },
        "depth_rank": 12
    },
    {
        "file": "OTRStates.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/OTR/components/OTRStates.tsx",
        "code": {
            "t": "const OTRStates = ({ title, description, icon, onClickStart }: OTRStatesProps): ReactElement => {\nconst OTRStates = ({ title, description, icon, onClickStart }: OTRStatesProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<States>\n\t\t\t<StatesIcon name={icon} />"
        },
        "depth_rank": 12
    },
    {
        "file": "KeyboardShortcutsWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcutsWithData.tsx",
        "code": {
            "KeyboardShortcutsWithData": "const KeyboardShortcutsWithData = (): ReactElement => {\nconst KeyboardShortcutsWithData = (): ReactElement => {\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();"
        },
        "depth_rank": 11
    },
    {
        "file": "KeyboardShortcutSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcutSection.tsx",
        "code": {
            "KeyboardShortcutSection": "const KeyboardShortcutSection = ({ title, command }: KeyboardShortcutSectionProps): ReactElement => (\nconst KeyboardShortcutSection = ({ title, command }: KeyboardShortcutSectionProps): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "KeyboardShortcuts.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/KeyboardShortcuts/KeyboardShortcuts.tsx",
        "code": {
            "t": "const KeyboardShortcuts = ({ handleClose }: { handleClose: () => void }): ReactElement => {\nconst KeyboardShortcuts = ({ handleClose }: { handleClose: () => void }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='keyboard' />\n\t\t\t\t<ContextualbarTitle>{t('Keyboard_Shortcuts_Title')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "PruneMessagesWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessagesWithData.tsx",
        "code": {
            "setModal": "const DEFAULT_PRUNE_LIMIT = 2000;\nconst DEFAULT_PRUNE_LIMIT = 2000;\n\nconst PruneMessagesWithData = (): ReactElement => {\nconst PruneMessagesWithData = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst { closeTab: close } = useRoomToolbox();\n\tconst { closeTab: close } = useRoomToolbox();",
            "methods": "\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst pruneMessagesAction = useEndpoint('POST', '/v1/rooms.cleanHistory');\n\tconst pruneMessagesAction = useEndpoint('POST', '/v1/rooms.cleanHistory');\n\n\tconst [counter, setCounter] = useState(0);\n\tconst [counter, setCounter] = useState(0);\n\n\tconst methods = useForm({ defaultValues: initialValues });\n\tconst methods = useForm({ defaultValues: initialValues });",
            "limit": "\tconst handlePrune = useMutableCallback((): void => {\n\tconst handlePrune = useMutableCallback((): void => {\n\t\tconst handlePruneAction = async () => {\n\t\tconst handlePruneAction = async () => {\n\t\t\tconst limit = DEFAULT_PRUNE_LIMIT;\n\t\t\tconst limit = DEFAULT_PRUNE_LIMIT;\n\n\t\t\ttry {\n\t\t\t\tif (counter === limit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { count } = await pruneMessagesAction({\n\t\t\t\tconst { count } = await pruneMessagesAction({\n\t\t\t\t\troomId: room._id,\n\t\t\t\t\tlatest: toDate.toISOString(),\n\t\t\t\t\toldest: fromDate.toISOString(),\n\t\t\t\t\tinclusive,\n\t\t\t\t\tlimit,\n\t\t\t\t\texcludePinned: pinned,\n\t\t\t\t\tfilesOnly: attached,\n\t\t\t\t\tignoreDiscussion: discussion,\n\t\t\t\t\tignoreThreads: threads,\n\t\t\t\t\tusers,\n\t\t\t\t});\n\n\t\t\t\tsetCounter(count);\n\n\t\t\t\tif (count < 1) {\n\t\t\t\t\tthrow new Error(t('No_messages_found_to_prune'));\n\t\t\t\t}\n\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('__count__message_pruned', { count }) });",
            "filesOrMessages": "\t\tconst filesOrMessages = t(attached ? 'files' : 'messages', {});\n\t\tconst filesOrMessages = t(attached ? 'files' : 'messages', {});"
        },
        "depth_rank": 11
    },
    {
        "file": "PruneMessages.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessages.stories.tsx",
        "code": {
            "methods": "\t\t\tconst methods = useForm({\n\t\t\tconst methods = useForm({\n\t\t\t\tdefaultValues: {\n\t\t\t\t\tpinned: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn (\n\t\t\t\t<FormProvider {...methods}>"
        },
        "depth_rank": 11
    },
    {
        "file": "PruneMessagesDateTimeRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessagesDateTimeRow.tsx",
        "code": {
            "PruneMessagesDateTimeRow": "const PruneMessagesDateTimeRow = ({ label, field }: PruneMessagesDateTimeRowProps): ReactElement => {\nconst PruneMessagesDateTimeRow = ({ label, field }: PruneMessagesDateTimeRowProps): ReactElement => {\n\tconst { register } = useFormContext();\n\tconst { register } = useFormContext();"
        },
        "depth_rank": 11
    },
    {
        "file": "PruneMessages.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/PruneMessages/PruneMessages.tsx",
        "code": {
            "t": "const PruneMessages = ({ callOutText, validateText, onClickClose, onClickPrune }: PruneMessagesProps): ReactElement => {\nconst PruneMessages = ({ callOutText, validateText, onClickClose, onClickPrune }: PruneMessagesProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { control, register } = useFormContext();\n\tconst { control, register } = useFormContext();",
            "attachedCheckboxId": "\tconst inclusiveCheckboxId = useUniqueId();\n\tconst inclusiveCheckboxId = useUniqueId();\n\tconst pinnedCheckboxId = useUniqueId();\n\tconst pinnedCheckboxId = useUniqueId();\n\tconst discussionCheckboxId = useUniqueId();\n\tconst discussionCheckboxId = useUniqueId();\n\tconst threadsCheckboxId = useUniqueId();\n\tconst threadsCheckboxId = useUniqueId();\n\tconst attachedCheckboxId = useUniqueId();\n\tconst attachedCheckboxId = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='eraser' />\n\t\t\t\t<ContextualbarTitle>{t('Prune_Messages')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "AutoTranslateWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/AutoTranslate/AutoTranslateWithData.tsx",
        "code": {
            "subscription": "const AutoTranslateWithData = (): ReactElement => {\nconst AutoTranslateWithData = (): ReactElement => {\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "saveSettings": "\tconst userLanguage = useLanguage();\n\tconst userLanguage = useLanguage();\n\tconst [currentLanguage, setCurrentLanguage] = useState(subscription?.autoTranslateLanguage ?? '');\n\tconst [currentLanguage, setCurrentLanguage] = useState(subscription?.autoTranslateLanguage ?? '');\n\tconst saveSettings = useEndpointAction('POST', '/v1/autotranslate.saveSettings');\n\tconst saveSettings = useEndpointAction('POST', '/v1/autotranslate.saveSettings');\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "languagesDict": "\tconst languagesDict = translateData ? Object.fromEntries(translateData.languages.map((lang) => [lang.language, lang.name])) : {};\n\tconst languagesDict = translateData ? Object.fromEntries(translateData.languages.map((lang) => [lang.language, lang.name])) : {};",
            "handleChangeLanguage": "\tconst handleChangeLanguage = useMutableCallback((value) => {\n\tconst handleChangeLanguage = useMutableCallback((value) => {\n\t\tsetCurrentLanguage(value);\n\n\t\tsaveSettings({\n\t\t\troomId: room._id,\n\t\t\tfield: 'autoTranslateLanguage',\n\t\t\tvalue,\n\t\t});\n\t\tdispatchToastMessage({\n\t\t\ttype: 'success',\n\t\t\tmessage: t('AutoTranslate_language_set_to', { language: languagesDict[value] }),",
            "handleSwitch": "\tconst handleSwitch = useMutableCallback((event) => {\n\tconst handleSwitch = useMutableCallback((event) => {\n\t\tsaveSettings({\n\t\t\troomId: room._id,\n\t\t\tfield: 'autoTranslate',\n\t\t\tvalue: event.target.checked,\n\t\t});\n\t\tdispatchToastMessage({\n\t\t\ttype: 'success',\n\t\t\tmessage: event.target.checked\n\t\t\t\t? t('AutoTranslate_Enabled_for_room', { roomName: room.name })"
        },
        "depth_rank": 11
    },
    {
        "file": "AutoTranslate.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/AutoTranslate/AutoTranslate.tsx",
        "code": {
            "AutoTranslate": "const AutoTranslate = ({\nconst AutoTranslate = ({\n\tlanguage,\n\tlanguages,\n\thandleSwitch,\n\ttranslateEnable,\n\thandleChangeLanguage,\n\thandleClose,\n}: AutoTranslateProps): ReactElement => {",
            "room": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='language' />\n\t\t\t\t<ContextualbarTitle>{t('Auto_Translate')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageSearchTab.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/MessageSearchTab.tsx",
        "code": {
            "providerQuery": "const MessageSearchTab = () => {\nconst MessageSearchTab = () => {\n\tconst providerQuery = useMessageSearchProviderQuery();\n\tconst providerQuery = useMessageSearchProviderQuery();\n\n\tconst { closeTab } = useRoomToolbox();\n\tconst { closeTab } = useRoomToolbox();",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarIcon name='magnifier' />\n\t\t\t\t<ContextualbarTitle>{t('Search_Messages')}</ContextualbarTitle>"
        },
        "depth_rank": 11
    },
    {
        "file": "useMessageSearchQuery.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/hooks/useMessageSearchQuery.ts",
        "code": {
            "result": "\t\t\tconst result = await searchMessages(searchText, { uid, rid: room._id }, { limit, searchAll: globalSearch });\n\t\t\tconst result = await searchMessages(searchText, { uid, rid: room._id }, { limit, searchAll: globalSearch });"
        },
        "depth_rank": 12
    },
    {
        "file": "MessageSearch.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/components/MessageSearch.tsx",
        "code": {
            "messageSearchQuery": "\tconst subscription = useRoomSubscription();\n\tconst subscription = useRoomSubscription();\n\tconst messageSearchQuery = useMessageSearchQuery({ searchText, limit, globalSearch });\n\tconst messageSearchQuery = useMessageSearchQuery({ searchText, limit, globalSearch });",
            "all": "\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\t\t\t\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\n\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\t\t\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst unread = subscription?.tunread?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst mention = subscription?.tunreadUser?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\t\t\t\t\t\t\t\t\t\t\tconst all = subscription?.tunreadGroup?.includes(message._id) ?? false;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<Fragment key={message._id}>"
        },
        "depth_rank": 12
    },
    {
        "file": "MessageSearchForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/contextualBar/MessageSearchTab/components/MessageSearchForm.tsx",
        "code": {
            "submitHandler": "const MessageSearchForm = ({ provider, onSearch }: MessageSearchFormProps) => {\nconst MessageSearchForm = ({ provider, onSearch }: MessageSearchFormProps) => {\n\tconst { handleSubmit, register, setFocus, control } = useForm({\n\tconst { handleSubmit, register, setFocus, control } = useForm({\n\t\tdefaultValues: {\n\t\t\tsearchText: '',\n\t\t\tglobalSearch: false,\n\t\t},\n\t});\n\n\tuseEffect(() => {\n\t\tsetFocus('searchText');\n\t}, [setFocus]);\n\n\tconst debouncedOnSearch = useDebouncedCallback(useMutableCallback(onSearch), 300);\n\tconst debouncedOnSearch = useDebouncedCallback(useMutableCallback(onSearch), 300);\n\n\tconst submitHandler = handleSubmit(({ searchText, globalSearch }) => {\n\tconst submitHandler = handleSubmit(({ searchText, globalSearch }) => {\n\t\tdebouncedOnSearch.cancel();\n\t\tonSearch({ searchText, globalSearch });",
            "searchText": "\tconst searchText = useWatch({ control, name: 'searchText' });\n\tconst searchText = useWatch({ control, name: 'searchText' });",
            "globalSearch": "\tconst globalSearch = useWatch({ control, name: 'globalSearch' });\n\tconst globalSearch = useWatch({ control, name: 'globalSearch' });",
            "t": "\tconst globalSearchEnabled = provider.settings.GlobalSearchEnabled;\n\tconst globalSearchEnabled = provider.settings.GlobalSearchEnabled;\n\tconst globalSearchToggleId = useUniqueId();\n\tconst globalSearchToggleId = useUniqueId();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box\n\t\t\tdisplay='flex'\n\t\t\tflexGrow={0}"
        },
        "depth_rank": 12
    },
    {
        "file": "ComposerContainer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerContainer.tsx",
        "code": {
            "isBlockedOrBlocker": "\tconst isAnonymous = useMessageComposerIsAnonymous();\n\tconst isAnonymous = useMessageComposerIsAnonymous();\n\tconst isBlockedOrBlocker = useMessageComposerIsBlocked({ subscription: props.subscription });\n\tconst isBlockedOrBlocker = useMessageComposerIsBlocked({ subscription: props.subscription });",
            "isVoip": "\tconst isArchived = useMessageComposerIsArchived(room._id, props.subscription);\n\tconst isArchived = useMessageComposerIsArchived(room._id, props.subscription);\n\tconst isReadOnly = useMessageComposerIsReadOnly(room._id);\n\tconst isReadOnly = useMessageComposerIsReadOnly(room._id);\n\n\tconst isOmnichannel = isOmnichannelRoom(room);\n\tconst isOmnichannel = isOmnichannelRoom(room);\n\tconst isFederation = isRoomFederated(room);\n\tconst isFederation = isRoomFederated(room);\n\tconst isVoip = isVoipRoom(room);\n\tconst isVoip = isVoipRoom(room);\n\n\tif (isOmnichannel) {\n\t\treturn <ComposerOmnichannel {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBoxPopupCannedResponse.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBoxPopupCannedResponse.tsx",
        "code": {
            "ComposerBoxPopupCannedResponse": "function ComposerBoxPopupCannedResponse({ shortcut, text }: ComposerBoxPopupCannedResponseProps) {\nfunction ComposerBoxPopupCannedResponse({ shortcut, text }: ComposerBoxPopupCannedResponseProps) {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<strong>{shortcut}</strong>"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerVoIP.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerVoIP.tsx",
        "code": {
            "t": "const ComposerVoIP = (): ReactElement => {\nconst ComposerVoIP = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <MessageFooterCallout>{t('Composer_not_available_phone_calls')}</MessageFooterCallout>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerReadOnly.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerReadOnly.tsx",
        "code": {
            "join": "const ComposerReadOnly = (): ReactElement => {\nconst ComposerReadOnly = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst isSubscribed = useUserIsSubscribed();\n\tconst isSubscribed = useUserIsSubscribed();\n\tconst joinChannel = useEndpoint('POST', '/v1/channels.join');\n\tconst joinChannel = useEndpoint('POST', '/v1/channels.join');\n\n\tconst join = useMutation(() => joinChannel({ roomId: room._id }), {\n\tconst join = useMutation(() => joinChannel({ roomId: room._id }), {\n\t\tonError: (error: unknown) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBoxPopupEmoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBoxPopupEmoji.tsx",
        "code": {
            "ComposerBoxPopupEmoji": "function ComposerBoxPopupEmoji({ _id }: ComposerBoxPopupEmojiProps) {\nfunction ComposerBoxPopupEmoji({ _id }: ComposerBoxPopupEmojiProps) {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<Emoji emojiHandle={_id} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBoxPopupRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBoxPopupRoom.tsx",
        "code": {
            "ComposerBoxPopupRoom": "function ComposerBoxPopupRoom({ fname, name, ...props }: ComposerBoxPopupRoomProps) {\nfunction ComposerBoxPopupRoom({ fname, name, ...props }: ComposerBoxPopupRoomProps) {\n\treturn (\n\t\t<>\n\t\t\t<OptionColumn>\n\t\t\t\t<RoomIcon room={props} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBoxPopupSlashCommand.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBoxPopupSlashCommand.tsx",
        "code": {
            "ComposerBoxPopupSlashCommand": "function ComposerBoxPopupSlashCommand({ _id, description, params }: ComposerBoxPopupSlashCommandProps) {\nfunction ComposerBoxPopupSlashCommand({ _id, description, params }: ComposerBoxPopupSlashCommandProps) {\n\treturn (\n\t\t<>\n\t\t\t<OptionContent>\n\t\t\t\t{_id} <OptionDescription>{params}</OptionDescription>"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerMessage.tsx",
        "code": {
            "composerProps": "const ComposerMessage = ({ tmid, readOnly, onSend, ...props }: ComposerMessageProps): ReactElement => {\nconst ComposerMessage = ({ tmid, readOnly, onSend, ...props }: ComposerMessageProps): ReactElement => {\n\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst composerProps = useMemo(\n\tconst composerProps = useMemo(\n\t\t() => ({\n\t\t\tonJoin: async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait chat?.data?.joinRoom();\n\t\t\t\t} catch (error) {",
            "newMessageSent": "\t\t\t\t\tconst newMessageSent = await chat?.flows.sendMessage({\n\t\t\t\t\tconst newMessageSent = await chat?.flows.sendMessage({\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\ttshow,\n\t\t\t\t\t\tpreviewUrls,\n\t\t\t\t\t});\n\t\t\t\t\tif (newMessageSent) onSend?.();\n\t\t\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBlocked.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBlocked.tsx",
        "code": {
            "t": "const ComposerBlocked = (): ReactElement => {\nconst ComposerBlocked = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <MessageFooterCallout>{t('room_is_blocked')}</MessageFooterCallout>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerArchived.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerArchived.tsx",
        "code": {
            "t": "const ComposerReadOnly = (): ReactElement => {\nconst ComposerReadOnly = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageFooterCallout>\n\t\t\t<MessageFooterCalloutContent>{t('Room_archived')}</MessageFooterCalloutContent>"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerBoxPopupPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerBoxPopupPreview.tsx",
        "code": {
            "ComposerBoxPopupPreview": "const ComposerBoxPopupPreview = forwardRef(function ComposerBoxPopupPreview(\nconst ComposerBoxPopupPreview = forwardRef(function ComposerBoxPopupPreview(\n\t{ focused, items, rid, tmid, select, suspended }: ComposerBoxPopupPreviewProps,",
            "params": "\t\t\t\t\tconst cmd = matches[1].replace('/', '').trim().toLowerCase();\n\t\t\t\t\tconst cmd = matches[1].replace('/', '').trim().toLowerCase();\n\n\t\t\t\t\tconst params = matches[2];\n\t\t\t\t\tconst params = matches[2];\n\t\t\t\t\t// TODO: Fix this solve the typing issue\n\t\t\t\t\tvoid executeSlashCommandPreviewMethod({ cmd, params, msg: { rid, tmid } }, { id: item._id, type: item.type, value: item.value });"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerAnonymous.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerAnonymous.tsx",
        "code": {
            "joinAnonymous": "\tconst joinAnonymous = () => {\n\tconst joinAnonymous = () => {\n\t\tregisterAnonymous.mutate({ email: null });"
        },
        "depth_rank": 10
    },
    {
        "file": "ComposerJoinWithPassword.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerJoinWithPassword.tsx",
        "code": {
            "joinChannelEndpoint": "const ComposerJoinWithPassword = (): ReactElement => {\nconst ComposerJoinWithPassword = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst joinChannelEndpoint = useEndpoint('POST', '/v1/channels.join');\n\tconst joinChannelEndpoint = useEndpoint('POST', '/v1/channels.join');\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tsetError,\n\t\tformState: { errors, isDirty },",
            "handleJoinChannel": "\tconst handleJoinChannel = async ({ joinCode }: { joinCode: string }) => {\n\tconst handleJoinChannel = async ({ joinCode }: { joinCode: string }) => {\n\t\ttry {\n\t\t\tawait joinChannelEndpoint({\n\t\t\t\troomId: room._id,\n\t\t\t\tjoinCode,\n\t\t\t});\n\t\t} catch (error: any) {"
        },
        "depth_rank": 10
    },
    {
        "file": "useMessageComposerIsReadOnly.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/hooks/useMessageComposerIsReadOnly.ts",
        "code": {
            "isReadOnly": "\tconst isReadOnly = useReactiveValue(\n\tconst isReadOnly = useReactiveValue(\n\t\tuseCallback(\n\t\t\t() => roomCoordinator.readOnly(rid, Meteor.users.findOne(Meteor.userId() as string, { fields: { username: 1 } }) as IUser),"
        },
        "depth_rank": 11
    },
    {
        "file": "useAutoGrow.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/RoomComposer/hooks/useAutoGrow.ts",
        "code": {
            "updateTextareaSize": "\t\tconst updateTextareaSize = () => {\n\t\tconst updateTextareaSize = () => {\n\t\t\tconst { value } = textarea;\n\t\t\tconst { value } = textarea;"
        },
        "depth_rank": 12
    },
    {
        "file": "MessageBoxReplies.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxReplies.tsx",
        "code": {
            "closeWrapperStyle": "\tconst closeWrapperStyle = css`\n\tconst closeWrapperStyle = css`\n\t\tposition: absolute;\n\t\tright: 0.5rem;\n\t\ttop: 0.75rem;\n\t`;\n\n\treturn (\n\t\t<Box mbe={8} position='relative' overflowY='auto' maxHeight='x256'>"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageBox.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBox.tsx",
        "code": {
            "getEmptyArray": "const emptySubscribe = () => () => undefined;\nconst emptySubscribe = () => () => undefined;\nconst getEmptyFalse = () => false;\nconst getEmptyFalse = () => false;\nconst a: any[] = [];\nconst a: any[] = [];\nconst getEmptyArray = () => a;\nconst getEmptyArray = () => a;\n\ntype MessageBoxProps = {\n\ttmid?: IMessage['_id'];\n\treadOnly: boolean;\n\tonSend?: (params: { value: string; tshow?: boolean; previewUrls?: string[] }) => Promise<void>;",
            "MessageBox": "const MessageBox = ({\nconst MessageBox = ({\n\ttmid,\n\tonSend,\n\tonJoin,\n\tonNavigateToNextMessage,\n\tonNavigateToPreviousMessage,\n\tonUploadFiles,\n\tonEscape,\n\tonTyping,\n\treadOnly,\n\ttshow,\n\tpreviewUrls,\n}: MessageBoxProps): ReactElement => {",
            "composerPlaceholder": "\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst composerPlaceholder = useMessageBoxPlaceholder(t('Message'), room);\n\tconst composerPlaceholder = useMessageBoxPlaceholder(t('Message'), room);\n\n\tconst [typing, setTyping] = useReducer(reducer, false);\n\tconst [typing, setTyping] = useReducer(reducer, false);\n\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "isRecording": "\tconst isEditing = useSubscription({\n\tconst isEditing = useSubscription({\n\t\tgetCurrentValue: chat.composer?.editing.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.editing.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecordingAudio = useSubscription({\n\tconst isRecordingAudio = useSubscription({\n\t\tgetCurrentValue: chat.composer?.recording.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.recording.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isMicrophoneDenied = useSubscription({\n\tconst isMicrophoneDenied = useSubscription({\n\t\tgetCurrentValue: chat.composer?.isMicrophoneDenied.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.isMicrophoneDenied.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecordingVideo = useSubscription({\n\tconst isRecordingVideo = useSubscription({\n\t\tgetCurrentValue: chat.composer?.recordingVideo.get ?? getEmptyFalse,\n\t\tsubscribe: chat.composer?.recordingVideo.subscribe ?? emptySubscribe,\n\t});\n\n\tconst formatters = useSubscription({\n\tconst formatters = useSubscription({\n\t\tgetCurrentValue: chat.composer?.formatters.get ?? getEmptyArray,\n\t\tsubscribe: chat.composer?.formatters.subscribe ?? emptySubscribe,\n\t});\n\n\tconst isRecording = isRecordingAudio || isRecordingVideo;\n\tconst isRecording = isRecordingAudio || isRecordingVideo;\n\n\tconst { textAreaStyle, shadowStyle } = useAutoGrow(textareaRef, shadowRef, isRecordingAudio);\n\tconst { textAreaStyle, shadowStyle } = useAutoGrow(textareaRef, shadowRef, isRecordingAudio);",
            "joinMutation": "\tconst canSend = useReactiveValue(useCallback(() => roomCoordinator.verifyCanSendMessage(room._id), [room._id]));\n\tconst canSend = useReactiveValue(useCallback(() => roomCoordinator.verifyCanSendMessage(room._id), [room._id]));\n\n\tconst sizes = useContentBoxSize(textareaRef);\n\tconst sizes = useContentBoxSize(textareaRef);\n\n\tconst format = useFormatDateAndTime();\n\tconst format = useFormatDateAndTime();\n\n\tconst joinMutation = useMutation(async () => onJoin?.());\n\tconst joinMutation = useMutation(async () => onJoin?.());\n\n\tconst handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\tconst handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = useMutableCallback((event) => {\n\t\tconst { clipboardData } = event;\n\t\tconst { clipboardData } = event;",
            "composerPopupConfig": "\tconst composerPopupConfig = useComposerPopup();\n\tconst composerPopupConfig = useComposerPopup();\n\n\tconst {\n\tconst {\n\t\tpopup,\n\t\tfocused,\n\t\titems,\n\t\tariaActiveDescendant,\n\t\tsuspended,\n\t\tselect,\n\t\tcommandsRef,\n\t\tcallbackRef: c,\n\t\tfilter,\n\t\tclearPopup,\n\t} = useComposerBoxPopup<{ _id: string; sort?: number }>({",
            "shouldPopupPreview": "\tconst mergedRefs = useMessageComposerMergedRefs(c, textareaRef, callbackRef, autofocusRef);\n\tconst mergedRefs = useMessageComposerMergedRefs(c, textareaRef, callbackRef, autofocusRef);\n\n\tconst shouldPopupPreview = useEnablePopupPreview(filter, popup);\n\tconst shouldPopupPreview = useEnablePopupPreview(filter, popup);\n\n\treturn (\n\t\t<>\n\t\t\t{chat.composer?.quotedMessages && <MessageBoxReplies />}"
        },
        "depth_rank": 11
    },
    {
        "file": "useMessageBoxAutoFocus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/hooks/useMessageBoxAutoFocus.ts",
        "code": {
            "handleKeyDown": "\tconst ref = useRef<HTMLElement>();\n\tconst ref = useRef<HTMLElement>();\n\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tconst { current: node } = ref;\n\t\t\tconst { current: node } = ref;"
        },
        "depth_rank": 12
    },
    {
        "file": "useMediaPermissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/hooks/useMediaPermissions.ts",
        "code": {
            "permissionStatus": "\tconst [isPermissionDenied, setIsPermissionDenied] = useState(false);\n\tconst [isPermissionDenied, setIsPermissionDenied] = useState(false);\n\n\tconst handleMount = useMutableCallback(async (): Promise<void> => {\n\tconst handleMount = useMutableCallback(async (): Promise<void> => {\n\t\tif (navigator.permissions) {\n\t\t\ttry {\n\t\t\t\tconst permissionStatus = await navigator.permissions.query({ name: name as PermissionName });\n\t\t\t\tconst permissionStatus = await navigator.permissions.query({ name: name as PermissionName });"
        },
        "depth_rank": 12
    },
    {
        "file": "MessageBoxActionsToolbar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxActionsToolbar/MessageBoxActionsToolbar.tsx",
        "code": {
            "MessageBoxActionsToolbar": "const MessageBoxActionsToolbar = ({\nconst MessageBoxActionsToolbar = ({\n\tcanSend,\n\ttyping,\n\tisRecording,\n\trid,\n\ttmid,\n\tvariant = 'large',\n\tisMicrophoneDenied,\n}: MessageBoxActionsToolbarProps) => {",
            "apps": "\tconst webdavActions = useWebdavActions();\n\tconst webdavActions = useWebdavActions();\n\tconst createDiscussionAction = useCreateDiscussionAction(room);\n\tconst createDiscussionAction = useCreateDiscussionAction(room);\n\tconst shareLocationAction = useShareLocationAction(room, tmid);\n\tconst shareLocationAction = useShareLocationAction(room, tmid);\n\n\tconst apps = useMessageboxAppsActionButtons();\n\tconst apps = useMessageboxAppsActionButtons();\n\tconst { composerToolbox: hiddenActions } = useLayoutHiddenActions();\n\tconst { composerToolbox: hiddenActions } = useLayoutHiddenActions();",
            "share": "\tconst featured = [];\n\tconst featured = [];\n\tconst createNew = [];\n\tconst createNew = [];\n\tconst share = [];\n\tconst share = [];\n\n\tcreateNew.push(allActions.createDiscussionAction);\n\n\tif (variant === 'small') {\n\t\tfeatured.push(allActions.audioMessageAction);\n\t\tcreateNew.push(allActions.videoMessageAction, allActions.fileUploadAction);\n\t} else {"
        },
        "depth_rank": 12
    },
    {
        "file": "useCreateDiscussionAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxActionsToolbar/hooks/useCreateDiscussionAction.tsx",
        "code": {
            "handleCreateDiscussion": "\tconst handleCreateDiscussion = () =>\n\tconst handleCreateDiscussion = () =>\n\t\tsetModal(<CreateDiscussion onClose={() => setModal(null)} defaultParentRoom={room?.prid || room?._id} />);"
        },
        "depth_rank": 13
    },
    {
        "file": "useShareLocationAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxActionsToolbar/hooks/useShareLocationAction.tsx",
        "code": {
            "handleShareLocation": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst isMapViewEnabled = useSetting('MapView_Enabled') === true;\n\tconst isMapViewEnabled = useSetting('MapView_Enabled') === true;\n\tconst isGeolocationCurrentPositionSupported = Boolean(navigator.geolocation?.getCurrentPosition);\n\tconst isGeolocationCurrentPositionSupported = Boolean(navigator.geolocation?.getCurrentPosition);\n\tconst googleMapsApiKey = useSetting('MapView_GMapsAPIKey') as string;\n\tconst googleMapsApiKey = useSetting('MapView_GMapsAPIKey') as string;\n\tconst canGetGeolocation = isMapViewEnabled && isGeolocationCurrentPositionSupported && googleMapsApiKey && googleMapsApiKey.length;\n\tconst canGetGeolocation = isMapViewEnabled && isGeolocationCurrentPositionSupported && googleMapsApiKey && googleMapsApiKey.length;\n\n\tconst handleShareLocation = () => setModal(<ShareLocationModal rid={room._id} tmid={tmid} onClose={() => setModal(null)} />);\n\tconst handleShareLocation = () => setModal(<ShareLocationModal rid={room._id} tmid={tmid} onClose={() => setModal(null)} />);"
        },
        "depth_rank": 13
    },
    {
        "file": "useFileUploadAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxActionsToolbar/hooks/useFileUploadAction.ts",
        "code": {
            "fileInputProps": "const fileInputProps = { type: 'file', multiple: true };\nconst fileInputProps = { type: 'file', multiple: true };"
        },
        "depth_rank": 13
    },
    {
        "file": "useWebdavActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxActionsToolbar/hooks/useWebdavActions.tsx",
        "code": {
            "handleAddWebDav": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst webDavEnabled = useSetting('Webdav_Integration_Enabled');\n\tconst webDavEnabled = useSetting('Webdav_Integration_Enabled');\n\tconst webDavAccounts = useReactiveValue(getWebdavAccounts);\n\tconst webDavAccounts = useReactiveValue(getWebdavAccounts);\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst handleAddWebDav = () => setModal(<AddWebdavAccountModal onClose={() => setModal(null)} onConfirm={() => setModal(null)} />);\n\tconst handleAddWebDav = () => setModal(<AddWebdavAccountModal onClose={() => setModal(null)} onConfirm={() => setModal(null)} />);",
            "handleOpenWebdav": "\tconst handleUpload = async (file: File, description?: string) =>\n\tconst handleUpload = async (file: File, description?: string) =>\n\t\tchat?.uploads.send(file, {\n\t\t\tdescription,\n\t\t});\n\n\tconst handleOpenWebdav = (account: IWebdavAccountIntegration) =>\n\tconst handleOpenWebdav = (account: IWebdavAccountIntegration) =>\n\t\tsetModal(<WebdavFilePickerModal account={account} onUpload={handleUpload} onClose={() => setModal(null)} />);"
        },
        "depth_rank": 13
    },
    {
        "file": "FormattingToolbarDropdown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxFormattingToolbar/FormattingToolbarDropdown.tsx",
        "code": {
            "const": " const sections = [{ title: t('Message_Formatting_Toolbox'), items: formattingItems }];\n const sections = [{ title: t('Message_Formatting_Toolbox'), items: formattingItems }];"
        },
        "depth_rank": 12
    },
    {
        "file": "MessageBoxFormattingToolbar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/messageBox/MessageBoxFormattingToolbar/MessageBoxFormattingToolbar.tsx",
        "code": {
            "featuredFormatter": "const MessageBoxFormattingToolbar = ({ items, variant = 'large', composer, disabled }: MessageBoxFormattingToolbarProps) => {\nconst MessageBoxFormattingToolbar = ({ items, variant = 'large', composer, disabled }: MessageBoxFormattingToolbarProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (variant === 'small') {\n\t\tconst collapsedItems = [...items];\n\t\tconst collapsedItems = [...items];\n\t\tconst featuredFormatter = collapsedItems.splice(0, 1)[0];\n\t\tconst featuredFormatter = collapsedItems.splice(0, 1)[0];\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{'icon' in featuredFormatter && (\n\t\t\t\t\t<MessageComposerAction\n\t\t\t\t\t\tonClick={() => composer.wrapSelection(featuredFormatter.pattern)}"
        },
        "depth_rank": 12
    },
    {
        "file": "ComposerUserActionIndicator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerUserActionIndicator/ComposerUserActionIndicator.tsx",
        "code": {
            "roomAction": "const maxUsernames = 5;\nconst maxUsernames = 5;\n\nconst ComposerUserActionIndicator = ({ rid, tmid }: { rid: string; tmid?: string }): ReactElement => {\nconst ComposerUserActionIndicator = ({ rid, tmid }: { rid: string; tmid?: string }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst actions = useReactiveValue(\n\tconst actions = useReactiveValue(\n\t\tuseCallback(() => {\n\t\t\tconst roomAction = UserAction.get(tmid || rid) || {};\n\t\t\tconst roomAction = UserAction.get(tmid || rid) || {};"
        },
        "depth_rank": 11
    },
    {
        "file": "ComposerOmnichannel.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerOmnichannel/ComposerOmnichannel.tsx",
        "code": {
            "room": "const ComposerOmnichannel = (props: ComposerMessageProps): ReactElement => {\nconst ComposerOmnichannel = (props: ComposerMessageProps): ReactElement => {\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst { servedBy, queuedAt, open, onHold } = room;\n\tconst { servedBy, queuedAt, open, onHold } = room;"
        },
        "depth_rank": 11
    },
    {
        "file": "ComposerOmnichannelJoin.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerOmnichannel/ComposerOmnichannelJoin.tsx",
        "code": {
            "t": "\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\tconst join = useEndpoint('GET', `/v1/livechat/room.join`);\n\tconst join = useEndpoint('GET', `/v1/livechat/room.join`);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<MessageFooterCallout>\n\t\t\t<MessageFooterCalloutContent>{t('room_is_read_only')}</MessageFooterCalloutContent>"
        },
        "depth_rank": 11
    },
    {
        "file": "ComposerOmnichannelOnHold.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerOmnichannel/ComposerOmnichannelOnHold.tsx",
        "code": {
            "t": "\tconst resumeChatOnHoldMutation = useResumeChatOnHoldMutation();\n\tconst resumeChatOnHoldMutation = useResumeChatOnHoldMutation();\n\n\tconst room = useOmnichannelRoom();\n\tconst room = useOmnichannelRoom();\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageFooterCallout>\n\t\t\t<MessageFooterCalloutContent>{t('chat_on_hold_due_to_inactivity')}</MessageFooterCalloutContent>"
        },
        "depth_rank": 11
    },
    {
        "file": "useResumeChatOnHoldMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerOmnichannel/hooks/useResumeChatOnHoldMutation.ts",
        "code": {
            "queryClient": "\tconst resumeChatOnHold = useEndpoint('POST', '/v1/livechat/room.resumeOnHold');\n\tconst resumeChatOnHold = useEndpoint('POST', '/v1/livechat/room.resumeOnHold');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\treturn useMutation(\n\t\tasync (roomId) => {\n\t\t\tawait resumeChatOnHold({ roomId });"
        },
        "depth_rank": 12
    },
    {
        "file": "ComposerFederationDisabled.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerFederation/ComposerFederationDisabled.tsx",
        "code": {
            "t": "const ComposerFederationDisabled = (): ReactElement => {\nconst ComposerFederationDisabled = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <MessageFooterCallout>{t('Federation_Matrix_Federated_Description_disabled')}</MessageFooterCallout>;"
        },
        "depth_rank": 11
    },
    {
        "file": "ComposerFederationJoinRoomDisabled.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/composer/ComposerFederation/ComposerFederationJoinRoomDisabled.tsx",
        "code": {
            "t": "const ComposerFederationJoinRoomDisabled = (): ReactElement => {\nconst ComposerFederationJoinRoomDisabled = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <MessageFooterCallout>{t('Federation_Matrix_join_public_rooms_is_premium')}</MessageFooterCallout>;"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomBody.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/RoomBody.tsx",
        "code": {
            "sendToBottom": "\tconst scrollMessageList = useScrollMessageList(wrapperRef);\n\tconst scrollMessageList = useScrollMessageList(wrapperRef);\n\n\tconst sendToBottom = useCallback(() => {\n\tconst sendToBottom = useCallback(() => {\n\t\tscrollMessageList((wrapper) => {\n\t\t\treturn { left: 30, top: wrapper?.scrollHeight };",
            "uploads": "\tconst sendToBottomIfNecessary = useCallback(() => {\n\tconst sendToBottomIfNecessary = useCallback(() => {\n\t\tif (atBottomRef.current === true) {\n\t\t\tsendToBottom();\n\t\t}\n\t}, [sendToBottom]);\n\n\tconst checkIfScrollIsAtBottom = useCallback(() => {\n\tconst checkIfScrollIsAtBottom = useCallback(() => {\n\t\tatBottomRef.current = _isAtBottom(100);\n\t}, [_isAtBottom]);\n\n\tconst handleNewMessageButtonClick = useCallback(() => {\n\tconst handleNewMessageButtonClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tsendToBottomIfNecessary();\n\t\tchat.composer?.focus();\n\t}, [chat, sendToBottomIfNecessary]);\n\n\tconst handleJumpToRecentButtonClick = useCallback(() => {\n\tconst handleJumpToRecentButtonClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tRoomHistoryManager.clear(room._id);\n\t\tRoomHistoryManager.getMoreIfIsEmpty(room._id);\n\t}, [room._id]);\n\n\tconst [unread, setUnreadCount] = useUnreadMessages(room);\n\tconst [unread, setUnreadCount] = useUnreadMessages(room);\n\n\tconst uploads = useSyncExternalStore(chat.uploads.subscribe, chat.uploads.get);\n\tconst uploads = useSyncExternalStore(chat.uploads.subscribe, chat.uploads.get);\n\n\tconst { hasMorePreviousMessages, hasMoreNextMessages, isLoadingMoreMessages } = useRoomMessages();\n\tconst { hasMorePreviousMessages, hasMoreNextMessages, isLoadingMoreMessages } = useRoomMessages();",
            "rid": "\tconst handleUnreadBarJumpToButtonClick = useCallback(() => {\n\tconst handleUnreadBarJumpToButtonClick = useCallback(() => {\n\t\tconst rid = room._id;\n\t\tconst rid = room._id;\n\t\tconst { firstUnread } = RoomHistoryManager.getRoom(rid);\n\t\tconst { firstUnread } = RoomHistoryManager.getRoom(rid);",
            "handleWrapperScroll": "\t\tconst store = RoomManager.getStore(room._id);\n\t\tconst store = RoomManager.getStore(room._id);\n\n\t\tconst handleWrapperScroll = withThrottling({ wait: 30 })(() => {\n\t\tconst handleWrapperScroll = withThrottling({ wait: 30 })(() => {\n\t\t\tstore?.update({ scroll: wrapper.scrollTop, atBottom: isAtBottom(wrapper, 50) });"
        },
        "depth_rank": 10
    },
    {
        "file": "DropTargetOverlay.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/DropTargetOverlay.tsx",
        "code": {
            "file": "\t\t\t\t\tconst file = new File([data], filename, { type: data.type });\n\t\t\t\t\tconst file = new File([data], filename, { type: data.type });"
        },
        "depth_rank": 10
    },
    {
        "file": "LeaderBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/LeaderBar.tsx",
        "code": {
            "chatNowLink": "const LeaderBar = ({ _id, name, username, visible, onAvatarClick }: LeaderBarProps): ReactElement => {\nconst LeaderBar = ({ _id, name, username, visible, onAvatarClick }: LeaderBarProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst chatNowLink = useMemo(() => roomCoordinator.getRouteLink('d', { name: username }) || undefined, [username]);\n\tconst chatNowLink = useMemo(() => roomCoordinator.getRouteLink('d', { name: username }) || undefined, [username]);"
        },
        "depth_rank": 10
    },
    {
        "file": "UnreadMessagesIndicator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/UnreadMessagesIndicator.tsx",
        "code": {
            "t": "const UnreadMessagesIndicator = ({ count, onJumpButtonClick, onMarkAsReadButtonClick }: UnreadMessagesIndicatorProps): ReactElement => {\nconst UnreadMessagesIndicator = ({ count, onJumpButtonClick, onMarkAsReadButtonClick }: UnreadMessagesIndicatorProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box className={indicatorStyle}>"
        },
        "depth_rank": 10
    },
    {
        "file": "UploadProgressIndicator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/UploadProgressIndicator.tsx",
        "code": {
            "handleCloseClick": "const UploadProgressIndicator = ({ id, name, percentage, error, onClose }: UploadProgressIndicatorProps): ReactElement => {\nconst UploadProgressIndicator = ({ id, name, percentage, error, onClose }: UploadProgressIndicatorProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleCloseClick = useCallback(() => {\n\tconst handleCloseClick = useCallback(() => {\n\t\tonClose?.(id);\n\t}, [id, onClose]);\n\n\tif (error) {\n\t\treturn <ErroredUploadProgressIndicator id={id} error={error} onClose={onClose} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "useDropTarget.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useDropTarget.ts",
        "code": {
            "triggerProps": "\tconst onDismiss = useCallback(() => {\n\tconst onDismiss = useCallback(() => {\n\t\tsetVisible(false);\n\t}, []);\n\n\tconst triggerProps = useMemo(() => ({ onDragEnter }), [onDragEnter]);\n\tconst triggerProps = useMemo(() => ({ onDragEnter }), [onDragEnter]);",
            "overlayProps": "\tconst overlayProps = useMemo(() => ({ visible, onDismiss }), [visible, onDismiss]);\n\tconst overlayProps = useMemo(() => ({ visible, onDismiss }), [visible, onDismiss]);"
        },
        "depth_rank": 11
    },
    {
        "file": "useFileUploadDropTarget.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useFileUploadDropTarget.ts",
        "code": {
            "room": "\tconst room = useRoom();\n\tconst room = useRoom();\n\tconst { triggerProps, overlayProps } = useDropTarget();\n\tconst { triggerProps, overlayProps } = useDropTarget();",
            "uploads": "\t\tconst uniqueFiles = getUniqueFiles();\n\t\tconst uniqueFiles = getUniqueFiles();\n\n\t\tconst uploads = Array.from(uniqueFiles).map((file) => {\n\t\tconst uploads = Array.from(uniqueFiles).map((file) => {\n\t\t\tObject.defineProperty(file, 'type', { value: mime.lookup(file.name) });"
        },
        "depth_rank": 11
    },
    {
        "file": "useRetentionPolicy.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useRetentionPolicy.ts",
        "code": {
            "hasRetentionPolicy": "const hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>\nconst hasRetentionPolicy = (room: IRoom & { retention?: any }): room is IRoomWithRetentionPolicy =>"
        },
        "depth_rank": 11
    },
    {
        "file": "useUnreadMessages.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useUnreadMessages.ts",
        "code": {
            "since": "\tconst since = useReactiveValue(useCallback(() => LegacyRoomManager.getOpenedRoomByRid(room._id)?.unreadSince.get(), [room._id]));\n\tconst since = useReactiveValue(useCallback(() => LegacyRoomManager.getOpenedRoomByRid(room._id)?.unreadSince.get(), [room._id]));\n\n\treturn useMemo(() => {\n\t\tif (count && since) {\n\t\t\treturn [{ count, since }, setLoadedCount];"
        },
        "depth_rank": 11
    },
    {
        "file": "useGoToHomeOnRemoved.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useGoToHomeOnRemoved.ts",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { navigateHome } = useOmnichannelCloseRoute();\n\tconst { navigateHome } = useOmnichannelCloseRoute();"
        },
        "depth_rank": 11
    },
    {
        "file": "useRoomRolesManagement.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/hooks/useRoomRolesManagement.ts",
        "code": {
            "getRoomRoles": "\tconst getRoomRoles = useMethod('getRoomRoles');\n\tconst getRoomRoles = useMethod('getRoomRoles');\n\n\tuseEffect(() => {\n\t\tgetRoomRoles(rid).then((results) => {\n\t\t\tArray.from(results).forEach(({ _id, ...data }) => {\n\t\t\t\tconst {\n\t\t\t\tconst {\n\t\t\t\t\trid,\n\t\t\t\t\tu: { _id: uid },"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomForeword.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/RoomForeword/RoomForeword.tsx",
        "code": {
            "t": "const RoomForeword = ({ user, room }: RoomForewordProps): ReactElement | null => {\nconst RoomForeword = ({ user, room }: RoomForewordProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (isVoipRoom(room)) {\n\t\treturn <VoipRoomForeword room={room} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomForewordUsernameList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/room/body/RoomForeword/RoomForewordUsernameList.tsx",
        "code": {
            "useRealName": "const RoomForewordUsernameList: VFC<RoomForewordUsernameListProps> = ({ usernames }) => {\nconst RoomForewordUsernameList: VFC<RoomForewordUsernameListProps> = ({ usernames }) => {\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\treturn (\n\t\t<Margins inline={4}>"
        },
        "depth_rank": 11
    },
    {
        "file": "SaveE2EPasswordModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/e2e/SaveE2EPasswordModal.tsx",
        "code": {
            "t": "const SaveE2EPasswordModal = ({ randomPassword, onClose, onCancel, onConfirm }: SaveE2EPasswordModalProps): ReactElement => {\nconst SaveE2EPasswordModal = ({ randomPassword, onClose, onCancel, onConfirm }: SaveE2EPasswordModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { copy, hasCopied } = useClipboard(randomPassword);\n\tconst { copy, hasCopied } = useClipboard(randomPassword);"
        },
        "depth_rank": 9
    },
    {
        "file": "EnterE2EPasswordModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/e2e/EnterE2EPasswordModal.tsx",
        "code": {
            "EnterE2EPasswordModal": "const EnterE2EPasswordModal = ({\nconst EnterE2EPasswordModal = ({\n\tonConfirm,\n\tonClose,\n\tonCancel,\n}: {",
            "handleConfirm": "\tconst handleConfirm = useMutableCallback((e): void => {\n\tconst handleConfirm = useMutableCallback((e): void => {\n\t\te.preventDefault();\n\t\tif (password === '') {\n\t\t\tsetPasswordError(t('Invalid_pass'));\n\t\t\treturn;\n\t\t}\n\n\t\treturn onConfirm(password);\n\t});\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={handleConfirm} {...props} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "AdministrationRouter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/AdministrationRouter.tsx",
        "code": {
            "defaultRoutePath": "\t\t\t\tconst defaultRoutePath = getAdminSidebarItems().find(firstSidebarPage)?.href ?? '/admin/workspace';\n\t\t\t\tconst defaultRoutePath = getAdminSidebarItems().find(firstSidebarPage)?.href ?? '/admin/workspace';\n\n\t\t\t\tif (isGoRocketChatLink(defaultRoutePath)) {\n\t\t\t\t\twindow.open(defaultRoutePath, '_blank');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trouter.navigate(defaultRoutePath, { replace: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "OAuthAddApp.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/oauthApps/OAuthAddApp.tsx",
        "code": {
            "dispatchToastMessage": "const OAuthAddApp = (): ReactElement => {\nconst OAuthAddApp = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "close": "\tconst close = useCallback(() => router.push({}), [router]);\n\tconst close = useCallback(() => router.push({}), [router]);"
        },
        "depth_rank": 10
    },
    {
        "file": "EditOauthAppWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/oauthApps/EditOauthAppWithData.tsx",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "oauthApps": "\t\t\tconst oauthApps = await getOauthApps({ _id });\n\t\t\tconst oauthApps = await getOauthApps({ _id });",
            "onChange": "\tconst onChange = useCallback(() => {\n\tconst onChange = useCallback(() => {\n\t\trefetch();\n\t}, [refetch]);\n\n\tif (isLoading) {\n\t\treturn <FormSkeleton pi={20} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "EditOauthApp.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/oauthApps/EditOauthApp.tsx",
        "code": {
            "dispatchToastMessage": "const EditOauthApp = ({ onChange, data, ...props }: EditOauthAppProps): ReactElement => {\nconst EditOauthApp = ({ onChange, data, ...props }: EditOauthAppProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },",
            "close": "\tconst close = useCallback(() => router.push({}), [router]);\n\tconst close = useCallback(() => router.push({}), [router]);",
            "onDeleteConfirm": "\tconst onDeleteConfirm = useCallback(async () => {\n\tconst onDeleteConfirm = useCallback(async () => {\n\t\ttry {\n\t\t\tawait deleteApp({ appId: data._id });",
            "openConfirmDelete": "\tconst openConfirmDelete = (): void =>\n\tconst openConfirmDelete = (): void =>\n\t\tsetModal(() => (\n\t\t\t<GenericModal\n\t\t\t\tvariant='danger'\n\t\t\t\tonConfirm={onDeleteConfirm}"
        },
        "depth_rank": 10
    },
    {
        "file": "OAuthAppsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/oauthApps/OAuthAppsTable.tsx",
        "code": {
            "uid": "const OAuthAppsTable = (): ReactElement => {\nconst OAuthAppsTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst uid = { uid: useUserId() || '' };\n\tconst uid = { uid: useUserId() || '' };",
            "headers": "\tconst onClick = useCallback(\n\tconst onClick = useCallback(\n\t\t(_id) => (): void =>\n\t\t\trouter.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid: _id,\n\t\t\t}),\n\t\t[router],\n\t);\n\n\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name'>{t('Name')}</GenericTableHeaderCell>"
        },
        "depth_rank": 10
    },
    {
        "file": "ImportProgressPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/ImportProgressPage.tsx",
        "code": {
            "currentOperation": "\tconst currentOperation = useQuery(\n\tconst currentOperation = useQuery(\n\t\t['ImportProgressPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation } = await getCurrentImportOperation();\n\t\t\tconst { operation } = await getCurrentImportOperation();"
        },
        "depth_rank": 10
    },
    {
        "file": "PrepareImportPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/PrepareImportPage.tsx",
        "code": {
            "loadCurrentOperation": "\t\tconst loadCurrentOperation = async () => {\n\t\tconst loadCurrentOperation = async () => {\n\t\t\ttry {\n\t\t\t\tconst { operation } = await waitFor(\n\t\t\t\tconst { operation } = await waitFor(",
            "handleStartButtonClick": "\tconst handleStartButtonClick = async () => {\n\tconst handleStartButtonClick = async () => {\n\t\tsetImporting(true);\n\n\t\ttry {\n\t\t\tawait startImport({\n\t\t\t\tinput: {\n\t\t\t\t\tusers: users.map((user) => ({ is_bot: false, is_email_taken: false, ...user })),"
        },
        "depth_rank": 10
    },
    {
        "file": "ImportOperationSummary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/ImportOperationSummary.tsx",
        "code": {
            "ImportOperationSummary": "function ImportOperationSummary({\nfunction ImportOperationSummary({\n\ttype,\n\t_updatedAt,\n\tstatus,\n\tfile = '',\n\tuser,\n\tsmall,\n\tcount: { users = 0, channels = 0, messages = 0, total = 0 } = {},",
            "props": "\tconst hasAction = canContinue || canCheckProgress;\n\tconst hasAction = canContinue || canCheckProgress;\n\n\tconst props = hasAction\n\tconst props = hasAction\n\t\t? {\n\t\t\t\ttabIndex: 0,\n\t\t\t\trole: 'link',\n\t\t\t\taction: true,\n\t\t\t\tonClick: handleClick,\n\t\t  }\n\t\t: {};"
        },
        "depth_rank": 10
    },
    {
        "file": "PrepareUsers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/PrepareUsers.tsx",
        "code": {
            "itemsPerPageLabel": "\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\n\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\n\n\treturn (\n\t\t<>\n\t\t\t<Table>\n\t\t\t\t<TableHead>\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell width='x36'>\n\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\tchecked={usersCount > 0}"
        },
        "depth_rank": 10
    },
    {
        "file": "useErrorHandler.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/useErrorHandler.ts",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutableCallback((error: unknown, defaultMessage?: unknown) => {\n\t\tconsole.error(error);\n\n\t\tdispatchToastMessage({ type: 'error', message: error ?? defaultMessage });"
        },
        "depth_rank": 10
    },
    {
        "file": "NewImportPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/NewImportPage.tsx",
        "code": {
            "handleImportFileChange": "\tconst [files, setFiles] = useState<File[]>([]);\n\tconst [files, setFiles] = useState<File[]>([]);\n\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\t\tBoolean('dataTransfer' in event && (event as any).dataTransfer.files);\n\n\tconst handleImportFileChange = async (event: ChangeEvent<HTMLInputElement>) => {\n\tconst handleImportFileChange = async (event: ChangeEvent<HTMLInputElement>) => {\n\t\tlet { files } = event.target;"
        },
        "depth_rank": 10
    },
    {
        "file": "ImportHistoryPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/import/ImportHistoryPage.tsx",
        "code": {
            "currentOperation": "function ImportHistoryPage() {\nfunction ImportHistoryPage() {\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst downloadPendingFiles = useEndpoint('POST', '/v1/downloadPendingFiles');\n\tconst downloadPendingFiles = useEndpoint('POST', '/v1/downloadPendingFiles');\n\tconst downloadPendingAvatars = useEndpoint('POST', '/v1/downloadPendingAvatars');\n\tconst downloadPendingAvatars = useEndpoint('POST', '/v1/downloadPendingAvatars');\n\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getLatestImportOperations = useEndpoint('GET', '/v1/getLatestImportOperations');\n\tconst getLatestImportOperations = useEndpoint('GET', '/v1/getLatestImportOperations');\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst currentOperation = useQuery(\n\tconst currentOperation = useQuery(\n\t\t['ImportHistoryPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation = { valid: false } } = await getCurrentImportOperation();\n\t\t\tconst { operation = { valid: false } } = await getCurrentImportOperation();",
            "operations": "\tconst latestOperations = useQuery(\n\tconst latestOperations = useQuery(\n\t\t['ImportHistoryPage', 'latestOperations'],\n\t\tasync () => {\n\t\t\tconst operations = await getLatestImportOperations();\n\t\t\tconst operations = await getLatestImportOperations();\n\t\t\treturn operations;\n\t\t},\n\t\t{\n\t\t\tonError: () => dispatchToastMessage({ type: 'error', message: t('Failed_To_Load_Import_History') }),",
            "hasAnySuccessfulImport": "\tconst isLoading = currentOperation.isLoading || latestOperations.isLoading;\n\tconst isLoading = currentOperation.isLoading || latestOperations.isLoading;\n\n\tconst hasAnySuccessfulImport = useMemo(() => {\n\tconst hasAnySuccessfulImport = useMemo(() => {\n\t\treturn latestOperations.isSuccess && latestOperations.data.some(({ status }) => status === ProgressStep.DONE);",
            "downloadPendingFilesResult": "\tconst downloadPendingFilesResult = useMutation({\n\tconst downloadPendingFilesResult = useMutation({\n\t\tmutationFn: async () => downloadPendingFiles(),\n\t\tonError: (error) => {\n\t\t\tconsole.error(error);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Failed_To_Download_Files') });",
            "downloadPendingAvatarsResult": "\tconst downloadPendingAvatarsResult = useMutation({\n\tconst downloadPendingAvatarsResult = useMutation({\n\t\tmutationFn: async () => downloadPendingAvatars(),\n\t\tonError: (error) => {\n\t\t\tconsole.error(error);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Failed_To_Download_Files') });"
        },
        "depth_rank": 10
    },
    {
        "file": "EditCustomEmojiWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customEmoji/EditCustomEmojiWithData.tsx",
        "code": {
            "query": "const EditCustomEmojiWithData: FC<EditCustomEmojiWithDataProps> = ({ _id, onChange, close, ...props }) => {\nconst EditCustomEmojiWithData: FC<EditCustomEmojiWithDataProps> = ({ _id, onChange, close, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);",
            "emoji": "\t\tconst emoji = await getEmojis(query);\n\t\tconst emoji = await getEmojis(query);\n\t\treturn emoji;\n\t});\n\n\tif (isLoading) {\n\t\treturn <FormSkeleton pi={20} />;",
            "handleChange": "\tconst handleChange = (): void => {\n\tconst handleChange = (): void => {\n\t\tonChange?.();\n\t\trefetch?.();\n\t};\n\n\treturn <EditCustomEmoji data={data.emojis.update[0]} close={close} onChange={handleChange} {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "AddCustomEmoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customEmoji/AddCustomEmoji.tsx",
        "code": {
            "t": "const AddCustomEmoji = ({ close, onChange, ...props }: AddCustomEmojiProps): ReactElement => {\nconst AddCustomEmoji = ({ close, onChange, ...props }: AddCustomEmojiProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [name, setName] = useState('');\n\tconst [name, setName] = useState('');\n\tconst [aliases, setAliases] = useState('');\n\tconst [aliases, setAliases] = useState('');\n\tconst [emojiFile, setEmojiFile] = useState<Blob>();\n\tconst [emojiFile, setEmojiFile] = useState<Blob>();\n\tconst [newEmojiPreview, setNewEmojiPreview] = useState('');\n\tconst [newEmojiPreview, setNewEmojiPreview] = useState('');\n\tconst [errors, setErrors] = useState({ name: false, emoji: false, aliases: false });\n\tconst [errors, setErrors] = useState({ name: false, emoji: false, aliases: false });",
            "setEmojiPreview": "\tconst setEmojiPreview = useCallback(\n\tconst setEmojiPreview = useCallback(\n\t\tasync (file) => {\n\t\t\tsetEmojiFile(file);\n\t\t\tsetNewEmojiPreview(URL.createObjectURL(file));\n\t\t\tsetErrors((prevState) => ({ ...prevState, emoji: false }));",
            "result": "\t\tconst formData = new FormData();\n\t\tconst formData = new FormData();\n\t\tformData.append('emoji', emojiFile);\n\t\tformData.append('name', name);\n\t\tformData.append('aliases', aliases);\n\t\tconst result = (await saveAction(formData)) as { success: boolean };\n\t\tconst result = (await saveAction(formData)) as { success: boolean };"
        },
        "depth_rank": 10
    },
    {
        "file": "EditCustomEmoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customEmoji/EditCustomEmoji.tsx",
        "code": {
            "absoluteUrl": "const EditCustomEmoji: FC<EditCustomEmojiProps> = ({ close, onChange, data, ...props }) => {\nconst EditCustomEmoji: FC<EditCustomEmojiProps> = ({ close, onChange, data, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst [errors, setErrors] = useState({ name: false, aliases: false });\n\tconst [errors, setErrors] = useState({ name: false, aliases: false });",
            "result": "\t\tconst formData = new FormData();\n\t\tconst formData = new FormData();\n\t\temojiFile && formData.append('emoji', emojiFile);\n\t\tformData.append('_id', _id);\n\t\tformData.append('name', name);\n\t\tformData.append('aliases', aliases);\n\t\tconst result = (await saveAction(formData)) as { success: boolean };\n\t\tconst result = (await saveAction(formData)) as { success: boolean };",
            "handleDelete": "\tconst handleDeleteButtonClick = useCallback(() => {\n\tconst handleDeleteButtonClick = useCallback(() => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteAction({ emojiId: _id });",
            "handleCancel": "\t\tconst handleCancel = (): void => {\n\t\tconst handleCancel = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => (\n\t\t\t<GenericModal variant='danger' onConfirm={handleDelete} onCancel={handleCancel} onClose={handleCancel} confirmText={t('Delete')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomEmoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customEmoji/CustomEmoji.tsx",
        "code": {
            "t": "const CustomEmoji: FC<CustomEmojiProps> = ({ onClick, reload }) => {\nconst CustomEmoji: FC<CustomEmojiProps> = ({ onClick, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name' w='x200'>"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomEmojiRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customEmoji/CustomEmojiRoute.tsx",
        "code": {
            "handleAddEmoji": "\tconst handleItemClick = (_id: string) => (): void => {\n\tconst handleItemClick = (_id: string) => (): void => {\n\t\troute.push({\n\t\t\tcontext: 'edit',\n\t\t\tid: _id,\n\t\t});\n\t};\n\n\tconst handleAddEmoji = useCallback(() => {\n\tconst handleAddEmoji = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = (): void => {\n\tconst handleClose = (): void => {\n\t\troute.push({});"
        },
        "depth_rank": 10
    },
    {
        "file": "IntegrationRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/IntegrationRow.tsx",
        "code": {
            "formatDateAndTime": "const IntegrationRow = ({ integration, onClick, isMobile }: IntegrationRowProps) => {\nconst IntegrationRow = ({ integration, onClick, isMobile }: IntegrationRowProps) => {\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst { _id, name, type, username, _createdAt, _createdBy, channel } = integration;\n\tconst { _id, name, type, username, _createdAt, _createdBy, channel } = integration;"
        },
        "depth_rank": 10
    },
    {
        "file": "NewBot.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/NewBot.tsx",
        "code": {
            "t": "const NewBot = () => {\nconst NewBot = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <Box pb={20} fontScale='h4' key='bots' dangerouslySetInnerHTML={{ __html: t('additional_integrations_Bots') }} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "EditIntegrationsPageWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/EditIntegrationsPageWithData.tsx",
        "code": {
            "params": "const EditIntegrationsPageWithData = ({ integrationId }: { integrationId: IIncomingIntegration['_id'] }) => {\nconst EditIntegrationsPageWithData = ({ integrationId }: { integrationId: IIncomingIntegration['_id'] }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);\n\tconst params = useMemo(() => ({ integrationId }), [integrationId]);",
            "getIntegrations": "\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.get');\n\tconst { data, isLoading, isError } = useQuery(['integrations', params], async () => getIntegrations(params));\n\tconst { data, isLoading, isError } = useQuery(['integrations', params], async () => getIntegrations(params));"
        },
        "depth_rank": 10
    },
    {
        "file": "IntegrationsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/IntegrationsTable.tsx",
        "code": {
            "t": "const IntegrationsTable = ({ type }: { type?: string }) => {\nconst IntegrationsTable = ({ type }: { type?: string }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "getIntegrations": "\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.list');\n\tconst getIntegrations = useEndpoint('GET', '/v1/integrations.list');\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(['integrations', query], async () => getIntegrations(query));\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(['integrations', query], async () => getIntegrations(query));",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell\n\t\t\t\tkey='name'\n\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 10
    },
    {
        "file": "useCreateIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/hooks/useCreateIntegration.ts",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst createIntegration = useEndpoint('POST', '/v1/integrations.create');\n\tconst createIntegration = useEndpoint('POST', '/v1/integrations.create');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutation({\n\t\tmutationFn: createIntegration,\n\t\tonSuccess: (data) => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Integration_added') });"
        },
        "depth_rank": 11
    },
    {
        "file": "useUpdateIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/hooks/useUpdateIntegration.ts",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst updateIntegration = useEndpoint('PUT', '/v1/integrations.update');\n\tconst updateIntegration = useEndpoint('PUT', '/v1/integrations.update');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutation({\n\t\tmutationFn: updateIntegration,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Integration_updated') });"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeleteIntegration.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/hooks/useDeleteIntegration.ts",
        "code": {
            "dispatchToastMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst createIntegration = useEndpoint('POST', '/v1/integrations.remove');\n\tconst createIntegration = useEndpoint('POST', '/v1/integrations.remove');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutation({\n\t\tmutationFn: createIntegration,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Your_entry_has_been_deleted') });"
        },
        "depth_rank": 11
    },
    {
        "file": "IncomingWebhookForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/incoming/IncomingWebhookForm.tsx",
        "code": {
            "absoluteUrl": "const IncomingWebhookForm = ({ webhookData }: { webhookData?: Serialized<IIncomingIntegration> }) => {\nconst IncomingWebhookForm = ({ webhookData }: { webhookData?: Serialized<IIncomingIntegration> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\twatch,\n\t\tformState: { errors },",
            "additionalFields": "\tconst additionalFields = useMemo(\n\tconst additionalFields = useMemo(\n\t\t() => ({\n\t\t\t...(alias && { alias }),",
            "curlField": "\tconst hilightedExampleJson = useHighlightedCode('json', JSON.stringify(exampleData, null, 2));\n\tconst hilightedExampleJson = useHighlightedCode('json', JSON.stringify(exampleData, null, 2));\n\n\tconst enabledField = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst channelField = useUniqueId();\n\tconst channelField = useUniqueId();\n\tconst usernameField = useUniqueId();\n\tconst usernameField = useUniqueId();\n\tconst aliasField = useUniqueId();\n\tconst aliasField = useUniqueId();\n\tconst avatarField = useUniqueId();\n\tconst avatarField = useUniqueId();\n\tconst emojiField = useUniqueId();\n\tconst emojiField = useUniqueId();\n\tconst overrideDestinationChannelEnabledField = useUniqueId();\n\tconst overrideDestinationChannelEnabledField = useUniqueId();\n\tconst scriptEnabledField = useUniqueId();\n\tconst scriptEnabledField = useUniqueId();\n\tconst scriptEngineField = useUniqueId();\n\tconst scriptEngineField = useUniqueId();\n\tconst scriptField = useUniqueId();\n\tconst scriptField = useUniqueId();\n\tconst webhookUrlField = useUniqueId();\n\tconst webhookUrlField = useUniqueId();\n\tconst tokenField = useUniqueId();\n\tconst tokenField = useUniqueId();\n\tconst curlField = useUniqueId();\n\tconst curlField = useUniqueId();\n\n\treturn (\n\t\t<Box maxWidth='x600' alignSelf='center' w='full'>\n\t\t\t<Accordion>\n\t\t\t\t<AccordionItem defaultExpanded={Boolean(webhookData?._id)} title={t('Instructions')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "EditIncomingWebhook.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/incoming/EditIncomingWebhook.tsx",
        "code": {
            "methods": "const EditIncomingWebhook = ({ webhookData }: { webhookData?: Serialized<IIncomingIntegration> }) => {\nconst EditIncomingWebhook = ({ webhookData }: { webhookData?: Serialized<IIncomingIntegration> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst tab = useRouteParameter('type');\n\tconst tab = useRouteParameter('type');\n\n\tconst deleteIntegration = useDeleteIntegration(INCOMING_TYPE);\n\tconst deleteIntegration = useDeleteIntegration(INCOMING_TYPE);\n\tconst updateIntegration = useUpdateIntegration(INCOMING_TYPE);\n\tconst updateIntegration = useUpdateIntegration(INCOMING_TYPE);\n\tconst createIntegration = useCreateIntegration(INCOMING_TYPE);\n\tconst createIntegration = useCreateIntegration(INCOMING_TYPE);\n\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValue(webhookData) });\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValue(webhookData) });",
            "handleSave": "\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\tasync (formValues) => {\n\t\t\tif (webhookData?._id) {\n\t\t\t\treturn updateIntegration.mutate({ integrationId: webhookData?._id, type: INCOMING_TYPE, ...formValues });"
        },
        "depth_rank": 11
    },
    {
        "file": "OutgoingWebhookForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/outgoing/OutgoingWebhookForm.tsx",
        "code": {
            "t": "const OutgoingWebhookForm = () => {\nconst OutgoingWebhookForm = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\twatch,\n\t\tformState: { errors },",
            "additionalFields": "\tconst showChannel = useMemo(() => outgoingEvents[event].use.channel, [event]);\n\tconst showChannel = useMemo(() => outgoingEvents[event].use.channel, [event]);\n\tconst showTriggerWords = useMemo(() => outgoingEvents[event].use.triggerWords, [event]);\n\tconst showTriggerWords = useMemo(() => outgoingEvents[event].use.triggerWords, [event]);\n\tconst showTargetRoom = useMemo(() => outgoingEvents[event].use.targetRoom, [event]);\n\tconst showTargetRoom = useMemo(() => outgoingEvents[event].use.targetRoom, [event]);\n\n\tconst additionalFields = useMemo(\n\tconst additionalFields = useMemo(\n\t\t() => ({\n\t\t\t...(alias && { alias }),",
            "runOnEditsField": "\tconst [exampleData] = useExampleData({\n\tconst [exampleData] = useExampleData({\n\t\tadditionalFields,\n\t\turl: '',\n\t});\n\n\tconst hilightedExampleJson = useHighlightedCode('json', JSON.stringify(exampleData, null, 2));\n\tconst hilightedExampleJson = useHighlightedCode('json', JSON.stringify(exampleData, null, 2));\n\n\tconst eventField = useUniqueId();\n\tconst eventField = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst enabledField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst channelField = useUniqueId();\n\tconst channelField = useUniqueId();\n\tconst triggerWordsField = useUniqueId();\n\tconst triggerWordsField = useUniqueId();\n\tconst targetRoomField = useUniqueId();\n\tconst targetRoomField = useUniqueId();\n\tconst urlsField = useUniqueId();\n\tconst urlsField = useUniqueId();\n\tconst impersonateUserField = useUniqueId();\n\tconst impersonateUserField = useUniqueId();\n\tconst usernameField = useUniqueId();\n\tconst usernameField = useUniqueId();\n\tconst aliasField = useUniqueId();\n\tconst aliasField = useUniqueId();\n\tconst avatarField = useUniqueId();\n\tconst avatarField = useUniqueId();\n\tconst emojiField = useUniqueId();\n\tconst emojiField = useUniqueId();\n\tconst tokenField = useUniqueId();\n\tconst tokenField = useUniqueId();\n\tconst scriptEnabledField = useUniqueId();\n\tconst scriptEnabledField = useUniqueId();\n\tconst scriptEngineField = useUniqueId();\n\tconst scriptEngineField = useUniqueId();\n\tconst scriptField = useUniqueId();\n\tconst scriptField = useUniqueId();\n\tconst retryFailedCallsField = useUniqueId();\n\tconst retryFailedCallsField = useUniqueId();\n\tconst retryCountField = useUniqueId();\n\tconst retryCountField = useUniqueId();\n\tconst retryDelayField = useUniqueId();\n\tconst retryDelayField = useUniqueId();\n\tconst triggerWordAnywhereField = useUniqueId();\n\tconst triggerWordAnywhereField = useUniqueId();\n\tconst runOnEditsField = useUniqueId();\n\tconst runOnEditsField = useUniqueId();\n\n\treturn (\n\t\t<Box maxWidth='x600' alignSelf='center' w='full'>\n\t\t\t<Accordion>\n\t\t\t\t<AccordionItem defaultExpanded title={t('Settings')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "EditOutgoingWebhook.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/outgoing/EditOutgoingWebhook.tsx",
        "code": {
            "methods": "const EditOutgoingWebhook = ({ webhookData }: { webhookData?: Serialized<IOutgoingIntegration> }) => {\nconst EditOutgoingWebhook = ({ webhookData }: { webhookData?: Serialized<IOutgoingIntegration> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst tab = useRouteParameter('type');\n\tconst tab = useRouteParameter('type');\n\n\tconst defaultToken = useUniqueId();\n\tconst defaultToken = useUniqueId();\n\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValue(webhookData, defaultToken) });\n\tconst methods = useForm({ mode: 'onBlur', values: getInitialValue(webhookData, defaultToken) });",
            "onDelete": "\tconst deleteIntegration = useDeleteIntegration(OUTGOING_TYPE);\n\tconst deleteIntegration = useDeleteIntegration(OUTGOING_TYPE);\n\tconst createIntegration = useCreateIntegration(OUTGOING_TYPE);\n\tconst createIntegration = useCreateIntegration(OUTGOING_TYPE);\n\tconst updateIntegration = useUpdateIntegration(OUTGOING_TYPE);\n\tconst updateIntegration = useUpdateIntegration(OUTGOING_TYPE);\n\n\tconst handleDeleteIntegration = useCallback(() => {\n\tconst handleDeleteIntegration = useCallback(() => {\n\t\tconst onDelete = async () => {\n\t\tconst onDelete = async () => {\n\t\t\tdeleteIntegration.mutate({ type: OUTGOING_TYPE, integrationId: webhookData?._id });"
        },
        "depth_rank": 11
    },
    {
        "file": "HistoryContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/outgoing/history/HistoryContent.tsx",
        "code": {
            "t": "const HistoryContent = ({ data, isLoading }: { data: Serialized<IIntegrationHistory>[]; isLoading: boolean }) => {\nconst HistoryContent = ({ data, isLoading }: { data: Serialized<IIntegrationHistory>[]; isLoading: boolean }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<Box w='full' pb={24}>"
        },
        "depth_rank": 12
    },
    {
        "file": "HistoryItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/outgoing/history/HistoryItem.tsx",
        "code": {
            "replayOutgoingIntegration": "const HistoryItem = ({ data }: { data: Serialized<IIntegrationHistory> }) => {\nconst HistoryItem = ({ data }: { data: Serialized<IIntegrationHistory> }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst replayOutgoingIntegration = useMethod('replayOutgoingIntegration');\n\tconst replayOutgoingIntegration = useMethod('replayOutgoingIntegration');\n\n\tconst {\n\tconst {\n\t\t_id,\n\t\t_createdAt,\n\t\t_updatedAt,\n\t\thttpResult,\n\t\tevent,\n\t\tstep,\n\t\thttpCallData,\n\t\tdata: dataSentToTrigger,\n\t\tprepareSentMessage,\n\t\tprocessSentMessage,\n\t\turl,\n\t\thttpError,\n\t\terrorStack,\n\t\terror,\n\t\tintegration: { _id: integrationId },",
            "handleClickReplay": "\tconst createdAt = typeof _createdAt === 'string' ? _createdAt : (_createdAt as Date).toISOString();\n\tconst createdAt = typeof _createdAt === 'string' ? _createdAt : (_createdAt as Date).toISOString();\n\tconst updatedAt = typeof _updatedAt === 'string' ? _updatedAt : (_updatedAt as Date).toISOString();\n\tconst updatedAt = typeof _updatedAt === 'string' ? _updatedAt : (_updatedAt as Date).toISOString();\n\n\tconst handleClickReplay = useMutableCallback((e) => {\n\tconst handleClickReplay = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\treplayOutgoingIntegration({ integrationId, historyId: _id });"
        },
        "depth_rank": 12
    },
    {
        "file": "OutgoingWebhookHistoryPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/integrations/outgoing/history/OutgoingWebhookHistoryPage.tsx",
        "code": {
            "router": "const OutgoingWebhookHistoryPage = (props: ComponentProps<typeof Page>) => {\nconst OutgoingWebhookHistoryPage = (props: ComponentProps<typeof Page>) => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { itemsPerPage, setItemsPerPage, current, setCurrent, itemsPerPageLabel, showingResultsLabel } = usePagination();\n\tconst { itemsPerPage, setItemsPerPage, current, setCurrent, itemsPerPageLabel, showingResultsLabel } = usePagination();",
            "queryClient": "\tconst [mounted, setMounted] = useState(false);\n\tconst [mounted, setMounted] = useState(false);\n\tconst [total, setTotal] = useState(0);\n\tconst [total, setTotal] = useState(0);\n\n\tconst clearIntegrationHistory = useMethod('clearIntegrationHistory');\n\tconst clearIntegrationHistory = useMethod('clearIntegrationHistory');\n\n\tconst id = useRouteParameter('id') as string;\n\tconst id = useRouteParameter('id') as string;\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tid,\n\t\t\tcount: itemsPerPage,\n\t\t\toffset: current,\n\t\t}),\n\t\t[id, itemsPerPage, current],\n\t);\n\n\tconst fetchHistory = useEndpoint('GET', '/v1/integrations.history');\n\tconst fetchHistory = useEndpoint('GET', '/v1/integrations.history');\n\n\tconst queryKey = useMemo(() => ['integrations/history', id, itemsPerPage, current], [id, itemsPerPage, current]);\n\tconst queryKey = useMemo(() => ['integrations/history', id, itemsPerPage, current], [id, itemsPerPage, current]);\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\ttype HistoryData = Awaited<ReturnType<typeof fetchHistory>>;\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery(",
            "handleClearHistory": "\t\t\tconst result = fetchHistory(query);\n\t\t\tconst result = fetchHistory(query);\n\t\t\tsetMounted(true);\n\t\t\treturn result;\n\t\t},\n\t\t{\n\t\t\tcacheTime: 99999,\n\t\t\tstaleTime: 99999,\n\t\t},\n\t);\n\n\tconst handleClearHistory = async (): Promise<void> => {\n\tconst handleClearHistory = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait clearIntegrationHistory(id);\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Integration_History_Cleared') });",
            "index": "\t\t\t\t\t\tconst index = oldData.history.findIndex(({ _id }) => _id === id);\n\t\t\t\t\t\tconst index = oldData.history.findIndex(({ _id }) => _id === id);"
        },
        "depth_rank": 12
    },
    {
        "file": "SubscriptionPageSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/SubscriptionPageSkeleton.tsx",
        "code": {
            "SubscriptionPageSkeleton": "const SubscriptionPageSkeleton = () => (\nconst SubscriptionPageSkeleton = () => (\n\t<Box marginBlock='none' marginInline='auto' width='full' color='default'>\n\t\t<Grid m={0}>"
        },
        "depth_rank": 10
    },
    {
        "file": "SubscriptionPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/SubscriptionPage.tsx",
        "code": {
            "router": "const SubscriptionPage = () => {\nconst SubscriptionPage = () => {\n\tconst showLicense = useShowLicense();\n\tconst showLicense = useShowLicense();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { data: enterpriseData } = useIsEnterprise();\n\tconst { data: enterpriseData } = useIsEnterprise();",
            "showSubscriptionCallout": "\tconst syncLicenseUpdate = useWorkspaceSync();\n\tconst syncLicenseUpdate = useWorkspaceSync();\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\n\tconst subscriptionSuccess = useSearchParameter('subscriptionSuccess');\n\tconst subscriptionSuccess = useSearchParameter('subscriptionSuccess');\n\n\tconst showSubscriptionCallout = useDebouncedValue(subscriptionSuccess || syncLicenseUpdate.isLoading, 10000);\n\tconst showSubscriptionCallout = useDebouncedValue(subscriptionSuccess || syncLicenseUpdate.isLoading, 10000);\n\n\tconst { license, limits, activeModules = [] } = licensesData || {};\n\tconst { license, limits, activeModules = [] } = licensesData || {};",
            "getKeyLimit": "\tconst getKeyLimit = (key: 'monthlyActiveContacts' | 'activeUsers') => {\n\tconst getKeyLimit = (key: 'monthlyActiveContacts' | 'activeUsers') => {\n\t\tconst { max, value } = limits?.[key] || {};\n\t\tconst { max, value } = limits?.[key] || {};",
            "removeLicense": "\tconst removeLicense = useRemoveLicense();\n\tconst removeLicense = useRemoveLicense();\n\n\treturn (\n\t\t<Page bg='tint'>\n\t\t\t<PageHeader title={t('Subscription')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "SubscriptionCalloutLimits.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/SubscriptionCalloutLimits.tsx",
        "code": {
            "manageSubscriptionUrl": "\tconst manageSubscriptionUrl = useCheckoutUrl();\n\tconst manageSubscriptionUrl = useCheckoutUrl();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "result": "\tconst result = useLicense({ loadValues: true });\n\tconst result = useLicense({ loadValues: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "FeatureUsageCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/FeatureUsageCard.tsx",
        "code": {
            "FeatureUsageCard": "const FeatureUsageCard = ({ children, card }: FeatureUsageCardProps): ReactElement => {\nconst FeatureUsageCard = ({ children, card }: FeatureUsageCardProps): ReactElement => {\n\tconst { title, infoText, upgradeButton } = card;\n\tconst { title, infoText, upgradeButton } = card;"
        },
        "depth_rank": 11
    },
    {
        "file": "UsagePieGraph.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/UsagePieGraph.tsx",
        "code": {
            "UsagePieGraph": "const UsagePieGraph = ({ used = 0, total = 0, label, color, size = 140 }: UsagePieGraphProps): ReactElement => {\nconst UsagePieGraph = ({ used = 0, total = 0, label, color, size = 140 }: UsagePieGraphProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 11
    },
    {
        "file": "InfoTextIconModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/InfoTextIconModal.tsx",
        "code": {
            "setModal": "const InfoTextIconModal = ({ title, infoText }: InfoTextIconModalProps): ReactElement => {\nconst InfoTextIconModal = ({ title, infoText }: InfoTextIconModalProps): ReactElement => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 11
    },
    {
        "file": "UpgradeButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/UpgradeButton.tsx",
        "code": {
            "UpgradeButton": "const UpgradeButton = ({\nconst UpgradeButton = ({\n\tchildren,\n\ttarget = '_blank',\n\taction,\n\t...props\n}: Partial<ButtonProps> & {",
            "url": "\tconst handleOpenLink = useExternalLink();\n\tconst handleOpenLink = useExternalLink();\n\tconst url = useCheckoutUrl()({ target, action });\n\tconst url = useCheckoutUrl()({ target, action });"
        },
        "depth_rank": 11
    },
    {
        "file": "UsagePieGraph.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/UsagePieGraph.stories.tsx",
        "code": {
            "props": "\tconst props = useAutoSequence([\n\tconst props = useAutoSequence([\n\t\t{\n\t\t\ttotal: 100,\n\t\t\tused: 0,\n\t\t\tcolor: colorTokens.g500,\n\t\t},\n\t\t{\n\t\t\ttotal: 100,\n\t\t\tused: 25,\n\t\t\tcolor: colorTokens.b500,\n\t\t},\n\t\t{\n\t\t\ttotal: 100,\n\t\t\tused: 50,\n\t\t\tcolor: colorTokens.y500,\n\t\t},\n\t\t{\n\t\t\ttotal: 100,\n\t\t\tused: 75,\n\t\t\tcolor: colorTokens.o500,\n\t\t},\n\t\t{\n\t\t\ttotal: 100,\n\t\t\tused: 100,\n\t\t\tcolor: colorTokens.r500,\n\t\t},\n\t]);\n\n\treturn <UsagePieGraph {...props} {...args} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "UpgradeToGetMore.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/UpgradeToGetMore.tsx",
        "code": {
            "UpgradeToGetMore": "const UpgradeToGetMore = ({ activeModules, children }: UpgradeToGetMoreProps) => {\nconst UpgradeToGetMore = ({ activeModules, children }: UpgradeToGetMoreProps) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 11
    },
    {
        "file": "CountSeatsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/CountSeatsCard.tsx",
        "code": {
            "CountSeatsCard": "const CountSeatsCard = ({ activeUsers }: { activeUsers: number }): ReactElement => {\nconst CountSeatsCard = ({ activeUsers }: { activeUsers: number }): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 12
    },
    {
        "file": "ActiveSessionsPeakCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/ActiveSessionsPeakCard.tsx",
        "code": {
            "ActiveSessionsPeakCard": "const ActiveSessionsPeakCard = (): ReactElement => {\nconst ActiveSessionsPeakCard = (): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "formatDate": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst { maxMonthlyPeakConnections } = data || {};\n\tconst { maxMonthlyPeakConnections } = data || {};"
        },
        "depth_rank": 12
    },
    {
        "file": "MACCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/MACCard.tsx",
        "code": {
            "MACCard": "const MACCard = ({\nconst MACCard = ({\n\tvalue = 0,\n\tmax,\n\thideManageSubscription,\n}: {",
            "message": "\tconst message = macLeft > 0 ? t('MAC_Available', { macLeft }) : undefined;\n\tconst message = macLeft > 0 ? t('MAC_Available', { macLeft }) : undefined;"
        },
        "depth_rank": 12
    },
    {
        "file": "CountMACCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/CountMACCard.tsx",
        "code": {
            "CountMACCard": "const CountMACCard = ({ macsCount }: { macsCount: number }): ReactElement => {\nconst CountMACCard = ({ macsCount }: { macsCount: number }): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 12
    },
    {
        "file": "AppsUsageCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/AppsUsageCard.tsx",
        "code": {
            "AppsUsageCard": "const AppsUsageCard = ({ privateAppsLimit, marketplaceAppsLimit }: AppsUsageCardProps): ReactElement => {\nconst AppsUsageCard = ({ privateAppsLimit, marketplaceAppsLimit }: AppsUsageCardProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 12
    },
    {
        "file": "FeaturesCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/FeaturesCard.tsx",
        "code": {
            "FeaturesCard": "const FeaturesCard = ({ activeModules, isEnterprise }: FeaturesCardProps): ReactElement => {\nconst FeaturesCard = ({ activeModules, isEnterprise }: FeaturesCardProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 12
    },
    {
        "file": "PlanCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/PlanCard.tsx",
        "code": {
            "isTrial": "const PlanCard = ({ licenseInformation, licenseLimits }: PlanCardProps): ReactElement => {\nconst PlanCard = ({ licenseInformation, licenseLimits }: PlanCardProps): ReactElement => {\n\tconst isTrial = licenseInformation.trial;\n\tconst isTrial = licenseInformation.trial;\n\n\treturn isTrial ? (\n\t\t<PlanCardTrial licenseInformation={licenseInformation} />"
        },
        "depth_rank": 12
    },
    {
        "file": "SeatsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/SeatsCard.tsx",
        "code": {
            "SeatsCard": "const SeatsCard = ({ value, max, hideManageSubscription }: SeatsCardProps): ReactElement => {\nconst SeatsCard = ({ value, max, hideManageSubscription }: SeatsCardProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "message": "\tconst message = seatsLeft > 0 ? t('Seats_Available', { seatsLeft }) : undefined;\n\tconst message = seatsLeft > 0 ? t('Seats_Available', { seatsLeft }) : undefined;"
        },
        "depth_rank": 12
    },
    {
        "file": "ActiveSessionsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/ActiveSessionsCard.tsx",
        "code": {
            "ActiveSessionsCard": "\tconst exceedLimit = used >= total;\n\tconst exceedLimit = used >= total;\n\n\treturn {\n\t\ttotal,\n\t\tused,\n\t\tavailable,\n\t\texceedLimit,\n\t};\n};\n\nconst ActiveSessionsCard = (): ReactElement => {\nconst ActiveSessionsCard = (): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "result": "\tconst result = useActiveConnections();\n\tconst result = useActiveConnections();\n\n\tconst card: CardProps = {\n\tconst card: CardProps = {\n\t\ttitle: t('ActiveSessions'),\n\t\tinfoText: t('ActiveSessions_InfoText'),\n\t};\n\n\tif (result.isLoading || result.isError) {\n\t\treturn (\n\t\t\t<FeatureUsageCard card={card}>"
        },
        "depth_rank": 12
    },
    {
        "file": "PlanCardPremium.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/PlanCard/PlanCardPremium.tsx",
        "code": {
            "PlanCardPremium": "const PlanCardPremium = ({ licenseInformation, licenseLimits }: PlanCardProps): ReactElement => {\nconst PlanCardPremium = ({ licenseInformation, licenseLimits }: PlanCardProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "isAutoRenew": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst planName = useLicenseName();\n\tconst planName = useLicenseName();\n\n\tconst isAutoRenew = licenseInformation.autoRenew;\n\tconst isAutoRenew = licenseInformation.autoRenew;\n\tconst { visualExpiration } = licenseInformation;\n\tconst { visualExpiration } = licenseInformation;"
        },
        "depth_rank": 13
    },
    {
        "file": "PlanCardCommunity.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/PlanCard/PlanCardCommunity.tsx",
        "code": {
            "PlanCardCommunity": "const PlanCardCommunity = (): ReactElement => {\nconst PlanCardCommunity = (): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 13
    },
    {
        "file": "PlanCardTrial.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/subscription/components/cards/PlanCard/PlanCardTrial.tsx",
        "code": {
            "PlanCardTrial": "const PlanCardTrial = ({ licenseInformation }: PlanCardProps): ReactElement => {\nconst PlanCardTrial = ({ licenseInformation }: PlanCardProps): ReactElement => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 13
    },
    {
        "file": "SendTestButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/emailInbox/SendTestButton.tsx",
        "code": {
            "handleOnClick": "\tconst handleOnClick = async (e: React.MouseEvent<HTMLElement, MouseEvent>): Promise<void> => {\n\tconst handleOnClick = async (e: React.MouseEvent<HTMLElement, MouseEvent>): Promise<void> => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\ttry {\n\t\t\tawait sendTest();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Email_sent'),\n\t\t\t});\n\t\t} catch (error) {"
        },
        "depth_rank": 10
    },
    {
        "file": "EmailInboxTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/emailInbox/EmailInboxTable.tsx",
        "code": {
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort}>"
        },
        "depth_rank": 10
    },
    {
        "file": "EmailInboxForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/emailInbox/EmailInboxForm.tsx",
        "code": {
            "handleBack": "\tconst handleBack = useCallback(() => router.push({}), [router]);\n\tconst handleBack = useCallback(() => router.push({}), [router]);",
            "deleteInbox": "\tconst handleDelete = useMutableCallback(() => {\n\tconst handleDelete = useMutableCallback(() => {\n\t\tconst deleteInbox = async (): Promise<void> => {\n\t\tconst deleteInbox = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteInboxAction();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Email_Inbox_has_been_removed') });",
            "handleSave": "\tconst handleSave = useMutableCallback(\n\tconst handleSave = useMutableCallback(\n\t\tasync ({\n\t\t\tactive,\n\t\t\tname,\n\t\t\temail,\n\t\t\tdescription,\n\t\t\tsenderInfo,\n\t\t\tdepartment,\n\t\t\tsmtpServer,\n\t\t\tsmtpPort,\n\t\t\tsmtpUsername,\n\t\t\tsmtpPassword,\n\t\t\tsmtpSecure,\n\t\t\timapServer,\n\t\t\timapPort,\n\t\t\timapUsername,\n\t\t\timapPassword,\n\t\t\timapSecure,\n\t\t\timapRetries,\n\t\t}) => {",
            "payload": "\t\t\tconst smtp = {\n\t\t\tconst smtp = {\n\t\t\t\tserver: smtpServer,\n\t\t\t\tport: parseInt(smtpPort),\n\t\t\t\tusername: smtpUsername,\n\t\t\t\tpassword: smtpPassword,\n\t\t\t\tsecure: smtpSecure,\n\t\t\t};\n\n\t\t\tconst imap = {\n\t\t\tconst imap = {\n\t\t\t\tserver: imapServer,\n\t\t\t\tport: parseInt(imapPort),\n\t\t\t\tusername: imapUsername,\n\t\t\t\tpassword: imapPassword,\n\t\t\t\tsecure: imapSecure,\n\t\t\t\tmaxRetries: parseInt(imapRetries),\n\t\t\t};\n\n\t\t\tconst payload = {\n\t\t\tconst payload = {\n\t\t\t\t...(inboxData?._id && { _id: inboxData?._id }),",
            "imapSecureField": "\tconst activeField = useUniqueId();\n\tconst activeField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst nameField = useUniqueId();\n\tconst emailField = useUniqueId();\n\tconst emailField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst descriptionField = useUniqueId();\n\tconst senderInfoField = useUniqueId();\n\tconst senderInfoField = useUniqueId();\n\tconst departmentField = useUniqueId();\n\tconst departmentField = useUniqueId();\n\n\tconst smtpServerField = useUniqueId();\n\tconst smtpServerField = useUniqueId();\n\tconst smtpPortField = useUniqueId();\n\tconst smtpPortField = useUniqueId();\n\tconst smtpUsernameField = useUniqueId();\n\tconst smtpUsernameField = useUniqueId();\n\tconst smtpPasswordField = useUniqueId();\n\tconst smtpPasswordField = useUniqueId();\n\tconst smtpSecureField = useUniqueId();\n\tconst smtpSecureField = useUniqueId();\n\n\tconst imapServerField = useUniqueId();\n\tconst imapServerField = useUniqueId();\n\tconst imapPortField = useUniqueId();\n\tconst imapPortField = useUniqueId();\n\tconst imapUsernameField = useUniqueId();\n\tconst imapUsernameField = useUniqueId();\n\tconst imapPasswordField = useUniqueId();\n\tconst imapPasswordField = useUniqueId();\n\tconst imapRetriesField = useUniqueId();\n\tconst imapRetriesField = useUniqueId();\n\tconst imapSecureField = useUniqueId();\n\tconst imapSecureField = useUniqueId();\n\n\treturn (\n\t\t<PageScrollableContentWithShadow>\n\t\t\t<Box maxWidth='x600' w='full' alignSelf='center'>\n\t\t\t\t<Accordion>\n\t\t\t\t\t<Accordion.Item defaultExpanded title={t('Inbox_Info')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUserUpgrade.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserUpgrade.tsx",
        "code": {
            "openExternalLink": "\tconst openExternalLink = useExternalLink();\n\tconst openExternalLink = useExternalLink();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarScrollableContent h='full'>\n\t\t\t\t<ContextualbarEmptyContent icon='warning' title={t('Seat_limit_reached')} subtitle={t('Seat_limit_reached_Description')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUsersPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUsersPage.tsx",
        "code": {
            "isRoutePrevented": "\tconst isCreateUserDisabled = useShouldPreventAction('activeUsers');\n\tconst isCreateUserDisabled = useShouldPreventAction('activeUsers');\n\n\tconst handleReload = (): void => {\n\tconst handleReload = (): void => {\n\t\tseatsCap?.reload();\n\t\treload.current();\n\t};\n\n\tconst isRoutePrevented = context && ['new', 'invite'].includes(context) && isCreateUserDisabled;\n\tconst isRoutePrevented = context && ['new', 'invite'].includes(context) && isCreateUserDisabled;\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Users')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUserInfoWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserInfoWithData.tsx",
        "code": {
            "query": "const AdminUserInfoWithData = ({ uid, onReload }: AdminUserInfoWithDataProps): ReactElement => {\nconst AdminUserInfoWithData = ({ uid, onReload }: AdminUserInfoWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\tconst approveManuallyUsers = useSetting('Accounts_ManuallyApproveNewUsers');\n\tconst approveManuallyUsers = useSetting('Accounts_ManuallyApproveNewUsers');\n\n\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\tconst getUsersInfo = useEndpoint('GET', '/v1/users.info');\n\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);\n\tconst query = useMemo(() => ({ userId: uid }), [uid]);",
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, refetch } = useQuery(\n\tconst { data, isLoading, error, refetch } = useQuery(",
            "usersInfo": "\t\t\tconst usersInfo = await getUsersInfo(query);\n\t\t\tconst usersInfo = await getUsersInfo(query);\n\t\t\treturn usersInfo;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminInviteUsers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminInviteUsers.tsx",
        "code": {
            "sendInvitationMutation": "\tconst sendInvitationMutation = useSendInvitationEmailMutation();\n\tconst sendInvitationMutation = useSendInvitationEmailMutation();\n\tconst { data, isLoading } = useSmtpQuery();\n\tconst { data, isLoading } = useSmtpQuery();",
            "handleClick": "\tconst handleClick = () => {\n\tconst handleClick = () => {\n\t\tsendInvitationMutation.mutate({ emails: getEmails(text) });"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUserForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserForm.tsx",
        "code": {
            "getInitialValue": "const getInitialValue = ({\nconst getInitialValue = ({\n\tdata,\n\tdefaultUserRoles,\n\tisSmtpEnabled,\n}: {",
            "defaultUserRoles": "const UserForm = ({ userData, onReload, ...props }: AdminUserFormProps) => {\nconst UserForm = ({ userData, onReload, ...props }: AdminUserFormProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst customFieldsMetadata = useAccountsCustomFields();\n\tconst customFieldsMetadata = useAccountsCustomFields();\n\tconst defaultRoles = useSetting<string>('Accounts_Registration_Users_Default_Roles') || '';\n\tconst defaultRoles = useSetting<string>('Accounts_Registration_Users_Default_Roles') || '';\n\n\tconst defaultUserRoles = parseCSV(defaultRoles);\n\tconst defaultUserRoles = parseCSV(defaultRoles);\n\tconst { data } = useSmtpQuery();\n\tconst { data } = useSmtpQuery();",
            "getRoles": "\tconst isSmtpEnabled = data?.isSMTPConfigured;\n\tconst isSmtpEnabled = data?.isSMTPConfigured;\n\n\tconst eventStats = useEndpointAction('POST', '/v1/statistics.telemetry');\n\tconst eventStats = useEndpointAction('POST', '/v1/statistics.telemetry');\n\tconst updateUserAction = useEndpoint('POST', '/v1/users.update');\n\tconst updateUserAction = useEndpoint('POST', '/v1/users.update');\n\tconst createUserAction = useEndpoint('POST', '/v1/users.create');\n\tconst createUserAction = useEndpoint('POST', '/v1/users.create');\n\n\tconst getRoles = useEndpoint('GET', '/v1/roles.list');\n\tconst getRoles = useEndpoint('GET', '/v1/roles.list');\n\tconst { data: roleData, error: roleError } = useQuery(['roles'], async () => getRoles());\n\tconst { data: roleData, error: roleError } = useQuery(['roles'], async () => getRoles());",
            "handleUpdateUser": "\tconst updateAvatar = useUpdateAvatar(avatar, userData?._id || '');\n\tconst updateAvatar = useUpdateAvatar(avatar, userData?._id || '');\n\n\tconst handleUpdateUser = useMutation({\n\tconst handleUpdateUser = useMutation({\n\t\tmutationFn: updateUserAction,\n\t\tonSuccess: async ({ user: { _id } }) => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('User_updated_successfully') });",
            "handleSaveUser": "\tconst handleSaveUser = useMutableCallback(async (userFormPayload) => {\n\tconst handleSaveUser = useMutableCallback(async (userFormPayload) => {\n\t\tconst { avatar, ...userFormData } = userFormPayload;\n\t\tconst { avatar, ...userFormData } = userFormPayload;",
            "sendWelcomeEmailId": "\tconst setRandomPasswordId = useUniqueId();\n\tconst setRandomPasswordId = useUniqueId();\n\tconst rolesId = useUniqueId();\n\tconst rolesId = useUniqueId();\n\tconst joinDefaultChannelsId = useUniqueId();\n\tconst joinDefaultChannelsId = useUniqueId();\n\tconst sendWelcomeEmailId = useUniqueId();\n\tconst sendWelcomeEmailId = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarScrollableContent {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUserInfoActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserInfoActions.tsx",
        "code": {
            "AdminUserInfoActions": "const AdminUserInfoActions = ({\nconst AdminUserInfoActions = ({\n\tusername,\n\tuserId,\n\tisFederatedUser,\n\tisActive,\n\tisAdmin,\n\tonChange,\n\tonReload,\n}: AdminUserInfoActionsProps): ReactElement => {",
            "mapAction": "\tconst actions = useMemo(() => {\n\tconst actions = useMemo(() => {\n\t\tconst mapAction = ([key, { label, icon, action, disabled, title }]: any): ReactElement => (\n\t\tconst mapAction = ([key, { label, icon, action, disabled, title }]: any): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "AdminUserFormWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/AdminUserFormWithData.tsx",
        "code": {
            "t": "const AdminUserFormWithData = ({ uid, onReload }: AdminUserFormWithDataProps): ReactElement => {\nconst AdminUserFormWithData = ({ uid, onReload }: AdminUserFormWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isLoading, isError } = useUserInfoQuery({ userId: uid });\n\tconst { data, isLoading, isError } = useUserInfoQuery({ userId: uid });"
        },
        "depth_rank": 10
    },
    {
        "file": "useSendInvitationEmailMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useSendInvitationEmailMutation.ts",
        "code": {
            "result": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst sendInvites = useEndpoint('POST', '/v1/sendInvitationEmail');\n\tconst sendInvites = useEndpoint('POST', '/v1/sendInvitationEmail');\n\n\treturn useMutation(\n\t\tasync ({ emails }) => {\n\t\t\tconst result = await sendInvites({ emails });\n\t\t\tconst result = await sendInvites({ emails });"
        },
        "depth_rank": 11
    },
    {
        "file": "useResetTOTPAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useResetTOTPAction.tsx",
        "code": {
            "resetTOTP": "\tconst twoFactorEnabled = useSetting('Accounts_TwoFactorAuthentication_Enabled');\n\tconst twoFactorEnabled = useSetting('Accounts_TwoFactorAuthentication_Enabled');\n\tconst resetTOTPRequest = useEndpoint('POST', '/v1/users.resetTOTP');\n\tconst resetTOTPRequest = useEndpoint('POST', '/v1/users.resetTOTP');\n\n\tconst resetTOTP = useCallback(async () => {\n\tconst resetTOTP = useCallback(async () => {\n\t\ttry {\n\t\t\tawait resetTOTPRequest({ userId });",
            "confirmResetTOTP": "\tconst confirmResetTOTP = useCallback(() => {\n\tconst confirmResetTOTP = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={resetTOTP} onCancel={(): void => setModal()} confirmText={t('Reset')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeleteUserAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useDeleteUserAction.tsx",
        "code": {
            "handleDeletedUser": "\tconst erasureType = useSetting('Message_ErasureType');\n\tconst erasureType = useSetting('Message_ErasureType');\n\tconst confirmOwnerChanges = useConfirmOwnerChanges();\n\tconst confirmOwnerChanges = useConfirmOwnerChanges();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleDeletedUser = (): void => {\n\tconst handleDeletedUser = (): void => {\n\t\tsetModal();\n\t\tuserRoute.push({});",
            "deleteUserQuery": "\tconst deleteUserQuery = useMemo(() => ({ userId, confirmRelinquish: false }), [userId]);\n\tconst deleteUserQuery = useMemo(() => ({ userId, confirmRelinquish: false }), [userId]);",
            "deleteUser": "\tconst deleteUserEndpoint = useEndpoint('POST', '/v1/users.delete');\n\tconst deleteUserEndpoint = useEndpoint('POST', '/v1/users.delete');\n\n\tconst deleteUser = (): Promise<void> =>\n\tconst deleteUser = (): Promise<void> =>\n\t\tconfirmOwnerChanges(\n\t\t\tasync (confirm = false) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\tdeleteUserQuery.confirmRelinquish = confirm;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait deleteUserEndpoint(deleteUserQuery);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('User_has_been_deleted') });",
            "confirmDeleteUser": "\tconst confirmDeleteUser = useMutableCallback(() => {\n\tconst confirmDeleteUser = useMutableCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={deleteUser} onCancel={(): void => setModal()} confirmText={t('Delete')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "useResetE2EEKeyAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useResetE2EEKeyAction.tsx",
        "code": {
            "resetE2EEKey": "\tconst resetE2EEKeyRequest = useEndpoint('POST', '/v1/users.resetE2EKey');\n\tconst resetE2EEKeyRequest = useEndpoint('POST', '/v1/users.resetE2EKey');\n\n\tconst resetE2EEKey = useCallback(async () => {\n\tconst resetE2EEKey = useCallback(async () => {\n\t\ttry {\n\t\t\tawait resetE2EEKeyRequest({ userId });",
            "confirmResetE2EEKey": "\tconst confirmResetE2EEKey = useCallback(() => {\n\tconst confirmResetE2EEKey = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={resetE2EEKey} onCancel={(): void => setModal()} confirmText={t('Reset')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "useChangeUserStatusAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useChangeUserStatusAction.ts",
        "code": {
            "changeActiveStatus": "\tconst changeActiveStatus = (): Promise<void> =>\n\tconst changeActiveStatus = (): Promise<void> =>\n\t\tconfirmOwnerChanges(\n\t\t\tasync (confirm = false) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\tactiveStatusQuery.confirmRelinquish = confirm;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait changeActiveStatusRequest(activeStatusQuery);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(changeActiveStatusMessage) });"
        },
        "depth_rank": 11
    },
    {
        "file": "useChangeAdminStatusAction.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useChangeAdminStatusAction.ts",
        "code": {
            "message": "\t\t\tconst message = isAdmin ? 'User_is_no_longer_an_admin' : 'User_is_now_an_admin';\n\t\t\tconst message = isAdmin ? 'User_is_no_longer_an_admin' : 'User_is_now_an_admin';\n\t\t\tdispatchToastMessage({ type: 'success', message: t(message) });"
        },
        "depth_rank": 11
    },
    {
        "file": "useConfirmOwnerChanges.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/hooks/useConfirmOwnerChanges.tsx",
        "code": {
            "dispatchToastMessage": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn async (action, modalProps, onChange): Promise<void> => {\n\t\ttry {\n\t\t\treturn await action();\n\t\t} catch (error: any) {",
            "handleConfirm": "\t\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\t\tawait action(true);\n\t\t\t\t\tsetModal();\n\t\t\t\t\tonChange();\n\t\t\t\t};\n\n\t\t\t\treturn setModal(\n\t\t\t\t\t<ConfirmOwnerChangeWarningModal\n\t\t\t\t\t\t{...modalProps}"
        },
        "depth_rank": 11
    },
    {
        "file": "UsersTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/UsersTable/UsersTableRow.tsx",
        "code": {
            "t": "const UsersTableRow = ({ user, onClick, mediaQuery }: UsersTableRowProps): ReactElement => {\nconst UsersTableRow = ({ user, onClick, mediaQuery }: UsersTableRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, emails, username, name, roles, status, active, avatarETag } = user;\n\tconst { _id, emails, username, name, roles, status, active, avatarETag } = user;",
            "roleNames": "\tconst statusText = active ? t(capitalize(status as string) as TranslationKey) : t('Disabled');\n\tconst statusText = active ? t(capitalize(status as string) as TranslationKey) : t('Disabled');\n\n\tconst roleNames = (roles || [])\n\tconst roleNames = (roles || [])\n\t\t.map((roleId) => (Roles.findOne(roleId, { fields: { name: 1 } }) as IRole | undefined)?.name)"
        },
        "depth_rank": 11
    },
    {
        "file": "UsersTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/users/UsersTable/UsersTable.tsx",
        "code": {
            "dispatchToastMessage": "\tconst getUsers = useEndpoint('GET', '/v1/users.list');\n\tconst getUsers = useEndpoint('GET', '/v1/users.list');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, error, isSuccess, refetch } = useQuery(\n\tconst { data, isLoading, error, isSuccess, refetch } = useQuery(",
            "users": "\t\t\tconst users = await getUsers(query);\n\t\t\tconst users = await getUsers(query);\n\t\t\treturn users;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "headers": "\tconst handleClick = useMutableCallback((id): void =>\n\tconst handleClick = useMutableCallback((id): void =>\n\t\tusersRoute.push({\n\t\t\tcontext: 'info',\n\t\t\tid,\n\t\t}),\n\t);\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell w='x200' key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 11
    },
    {
        "file": "RoleForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/RoleForm.tsx",
        "code": {
            "t": "const RoleForm = ({ className, editing = false, isProtected = false, isDisabled = false }: RoleFormProps): ReactElement => {\nconst RoleForm = ({ className, editing = false, isProtected = false, isDisabled = false }: RoleFormProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\tregister,\n\t\tcontrol,\n\t\tformState: { errors },"
        },
        "depth_rank": 10
    },
    {
        "file": "PermissionsContextBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsContextBar.tsx",
        "code": {
            "handleCloseContextualbar": "\tconst handleCloseContextualbar = useMutableCallback(() => {\n\tconst handleCloseContextualbar = useMutableCallback(() => {\n\t\trouter.push({});"
        },
        "depth_rank": 10
    },
    {
        "file": "EditRolePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/EditRolePage.tsx",
        "code": {
            "handleSave": "\tconst handleSave = useMutableCallback(async (data) => {\n\tconst handleSave = useMutableCallback(async (data) => {\n\t\ttry {\n\t\t\tif (data.roleId) {\n\t\t\t\tawait updateRole(data);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Saved') });",
            "deleteRoleAction": "\t\tconst deleteRoleAction = async (): Promise<void> => {\n\t\tconst deleteRoleAction = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteRole({ roleId: role._id });",
            "deleteRoleMessage": "\t\tconst deleteRoleMessage = isEnterprise ? t('Delete_Role_Warning') : t('Delete_Role_Warning_Not_Enterprise');\n\t\tconst deleteRoleMessage = isEnterprise ? t('Delete_Role_Warning') : t('Delete_Role_Warning_Not_Enterprise');\n\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tvariant='danger'\n\t\t\t\tonConfirm={deleteRoleAction}"
        },
        "depth_rank": 10
    },
    {
        "file": "PermissionsRouter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsRouter.tsx",
        "code": {
            "context": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst { data, isLoading } = useIsEnterprise();\n\tconst { data, isLoading } = useIsEnterprise();"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomRoleUpsellModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/CustomRoleUpsellModal.tsx",
        "code": {
            "t": "const CustomRoleUpsellModal = ({ onClose }: { onClose: () => void }) => {\nconst CustomRoleUpsellModal = ({ onClose }: { onClose: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { handleManageSubscription } = useUpsellActions();\n\tconst { handleManageSubscription } = useUpsellActions();"
        },
        "depth_rank": 10
    },
    {
        "file": "usePermissionsAndRoles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/hooks/usePermissionsAndRoles.ts",
        "code": {
            "roles": "\tconst getPermissions = useCallback(\n\tconst getPermissions = useCallback(\n\t\t() =>\n\t\t\tChatPermissions.find(getFilter(), {\n\t\t\t\tsort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t}),\n\t\t[limit, skip, getFilter],\n\t);\n\tconst getTotalPermissions = useCallback(() => ChatPermissions.find(getFilter()).count(), [getFilter]);\n\tconst getTotalPermissions = useCallback(() => ChatPermissions.find(getFilter()).count(), [getFilter]);\n\n\tconst permissions = useReactiveValue(getPermissions);\n\tconst permissions = useReactiveValue(getPermissions);\n\tconst permissionsTotal = useReactiveValue(getTotalPermissions);\n\tconst permissionsTotal = useReactiveValue(getTotalPermissions);\n\tconst getRoles = useMutableCallback(() => Roles.find().fetch());\n\tconst getRoles = useMutableCallback(() => Roles.find().fetch());\n\tconst roles = useReactiveValue(getRoles);\n\tconst roles = useReactiveValue(getRoles);\n\n\treturn { permissions: permissions.fetch(), total: permissionsTotal, roleList: roles, reload: getRoles };"
        },
        "depth_rank": 11
    },
    {
        "file": "useChangeRole.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/hooks/useChangeRole.ts",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\treturn useMutableCallback(async (roleId, granted) => {\n\t\ttry {\n\t\t\tif (granted) {\n\t\t\t\tawait onRemove(permissionId, roleId);\n\t\t\t} else {"
        },
        "depth_rank": 11
    },
    {
        "file": "RoleHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/RoleHeader.tsx",
        "code": {
            "handleEditRole": "\tconst handleEditRole = useMutableCallback(() => {\n\tconst handleEditRole = useMutableCallback(() => {\n\t\trouter.push({\n\t\t\tcontext: 'edit',\n\t\t\t_id,\n\t\t});\n\t});\n\n\treturn (\n\t\t<GenericTableHeaderCell pi={4} p={8}>"
        },
        "depth_rank": 11
    },
    {
        "file": "PermissionRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/PermissionRow.tsx",
        "code": {
            "t": "const PermissionRow = ({ permission, roleList, onGrant, onRemove }: PermissionRowProps): ReactElement => {\nconst PermissionRow = ({ permission, roleList, onGrant, onRemove }: PermissionRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, roles } = permission;\n\tconst { _id, roles } = permission;",
            "changeRole": "\tconst [hovered, setHovered] = useState(false);\n\tconst [hovered, setHovered] = useState(false);\n\tconst changeRole = useChangeRole({ onGrant, onRemove, permissionId: _id });\n\tconst changeRole = useChangeRole({ onGrant, onRemove, permissionId: _id });",
            "onMouseLeave": "\tconst onMouseEnter = useMutableCallback(() => setHovered(true));\n\tconst onMouseEnter = useMutableCallback(() => setHovered(true));\n\tconst onMouseLeave = useMutableCallback(() => setHovered(false));\n\tconst onMouseLeave = useMutableCallback(() => setHovered(false));\n\n\treturn (\n\t\t<GenericTableRow key={_id} role='link' action tabIndex={0} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>"
        },
        "depth_rank": 11
    },
    {
        "file": "PermissionsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/PermissionsTable/PermissionsTable.tsx",
        "code": {
            "removeRole": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst grantRole = useMethod('authorization:addPermissionToRole');\n\tconst grantRole = useMethod('authorization:addPermissionToRole');\n\tconst removeRole = useMethod('authorization:removeRoleFromPermission');\n\tconst removeRole = useMethod('authorization:removeRoleFromPermission');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();"
        },
        "depth_rank": 11
    },
    {
        "file": "UsersInRolePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRolePage.tsx",
        "code": {
            "dispatchToastMessage": "const UsersInRolePage = ({ role }: { role: IRole }): ReactElement => {\nconst UsersInRolePage = ({ role }: { role: IRole }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst reload = useRef<() => void>(() => undefined);\n\tconst reload = useRef<() => void>(() => undefined);\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty },",
            "handleAdd": "\tconst addUser = useEndpoint('POST', '/v1/roles.addUserToRole');\n\tconst addUser = useEndpoint('POST', '/v1/roles.addUserToRole');\n\n\tconst rid = getValues('rid');\n\tconst rid = getValues('rid');\n\n\tconst handleReturn = useMutableCallback(() => {\n\tconst handleReturn = useMutableCallback(() => {\n\t\trouter.push({\n\t\t\tcontext: 'edit',\n\t\t\t_id,\n\t\t});\n\t});\n\n\tconst handleAdd = useMutableCallback(async ({ users, rid }: UsersInRolePayload) => {\n\tconst handleAdd = useMutableCallback(async ({ users, rid }: UsersInRolePayload) => {\n\t\ttry {\n\t\t\tawait Promise.all(\n\t\t\t\tusers.map(async (user) => {\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tawait addUser({ roleName: _id, username: user, roomId: rid });"
        },
        "depth_rank": 11
    },
    {
        "file": "UsersInRoleTableWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTableWithData.tsx",
        "code": {
            "UsersInRoleTableWithData": "const UsersInRoleTableWithData = ({\nconst UsersInRoleTableWithData = ({\n\trid,\n\troleId,\n\troleName,\n\tdescription,\n\treloadRef,\n}: UsersInRoleTableWithDataProps): ReactElement | null => {",
            "query": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\trole: roleId,\n\t\t\t...(rid && { roomId: rid }),",
            "dispatchToastMessage": "\tconst getUsersInRole = useEndpoint('GET', '/v1/roles.getUsersInRole');\n\tconst getUsersInRole = useEndpoint('GET', '/v1/roles.getUsersInRole');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { refetch, ...result } = useQuery(\n\tconst { refetch, ...result } = useQuery("
        },
        "depth_rank": 12
    },
    {
        "file": "UsersInRoleTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTableRow.tsx",
        "code": {
            "UsersInRoleTableRow": "const UsersInRoleTableRow = ({ user, onRemove }: UsersInRoleTableRowProps): ReactElement => {\nconst UsersInRoleTableRow = ({ user, onRemove }: UsersInRoleTableRowProps): ReactElement => {\n\tconst { _id, name, username, avatarETag } = user;\n\tconst { _id, name, username, avatarETag } = user;",
            "handleRemove": "\tconst email = getUserEmailAddress(user);\n\tconst email = getUserEmailAddress(user);\n\n\tconst handleRemove = useMutableCallback(() => {\n\tconst handleRemove = useMutableCallback(() => {\n\t\tonRemove(username);\n\t});\n\n\treturn (\n\t\t<GenericTableRow key={_id} tabIndex={0} role='link'>"
        },
        "depth_rank": 12
    },
    {
        "file": "UsersInRoleTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/permissions/UsersInRole/UsersInRoleTable/UsersInRoleTable.tsx",
        "code": {
            "UsersInRoleTable": "const UsersInRoleTable = ({\nconst UsersInRoleTable = ({\n\tusers,\n\treload,\n\troleName,\n\troleId,\n\tdescription,\n\ttotal,\n\trid,\n\tpaginationData,\n}: UsersInRoleTableProps): ReactElement => {",
            "removeUser": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst removeUser = useEndpoint('POST', '/v1/roles.removeUserFromRole');\n\tconst removeUser = useEndpoint('POST', '/v1/roles.removeUserFromRole');\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = paginationData;\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = paginationData;",
            "remove": "\tconst closeModal = (): void => setModal();\n\tconst closeModal = (): void => setModal();\n\n\tconst handleRemove = useMutableCallback((username) => {\n\tconst handleRemove = useMutableCallback((username) => {\n\t\tconst remove = async (): Promise<void> => {\n\t\tconst remove = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeUser({ roleId, username, scope: rid });"
        },
        "depth_rank": 12
    },
    {
        "file": "RoomsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomsPage.tsx",
        "code": {
            "reloadRef": "const RoomsPage = (): ReactElement => {\nconst RoomsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst reloadRef = useRef(() => null);\n\tconst reloadRef = useRef(() => null);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Rooms')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomRow.tsx",
        "code": {
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { _id, t: type, usersCount, msgs, default: isDefault, featured, ...args } = room;\n\tconst { _id, t: type, usersCount, msgs, default: isDefault, featured, ...args } = room;"
        },
        "depth_rank": 10
    },
    {
        "file": "EditRoomWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/EditRoomWithData.tsx",
        "code": {
            "getAdminRooms": "const EditRoomWithData = ({ rid, onReload }: EditRoomWithDataProps) => {\nconst EditRoomWithData = ({ rid, onReload }: EditRoomWithDataProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms.getRoom');\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms.getRoom');\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery(",
            "rooms": "\t\t\tconst rooms = await getAdminRooms({ rid });\n\t\t\tconst rooms = await getAdminRooms({ rid });",
            "handleDelete": "\tconst handleChange = (): void => {\n\tconst handleChange = (): void => {\n\t\trefetch();\n\t\tonReload();\n\t};\n\n\tconst handleDelete = (): void => {\n\tconst handleDelete = (): void => {\n\t\tonReload();\n\t};\n\n\treturn data ? (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Room_Info')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "EditRoom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/EditRoom.tsx",
        "code": {
            "dispatchToastMessage": "const EditRoom = ({ room, onChange, onDelete }: EditRoomProps) => {\nconst EditRoom = ({ room, onChange, onDelete }: EditRoomProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\twatch,\n\t\treset,\n\t\thandleSubmit,\n\t\tformState: { isDirty, errors, dirtyFields },",
            "data": "\tconst saveAction = useEndpoint('POST', '/v1/rooms.saveRoomSettings');\n\tconst saveAction = useEndpoint('POST', '/v1/rooms.saveRoomSettings');\n\n\tconst handleArchive = useArchiveRoom(room);\n\tconst handleArchive = useArchiveRoom(room);\n\n\tconst handleUpdateRoomData = useMutableCallback(async ({ isDefault, roomName, favorite, ...formData }) => {\n\tconst handleUpdateRoomData = useMutableCallback(async ({ isDefault, roomName, favorite, ...formData }) => {\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tdelete data.archived;\n\n\t\ttry {\n\t\t\tawait saveAction({\n\t\t\t\trid: room._id,\n\t\t\t\troomName: roomType === 'd' ? undefined : roomName,\n\t\t\t\tdefault: isDefault,\n\t\t\t\tfavorite: { defaultValue: isDefault, favorite },",
            "featuredField": "\tconst handleSave = useMutableCallback(async (data) => {\n\tconst handleSave = useMutableCallback(async (data) => {\n\t\tawait Promise.all([isDirty && handleUpdateRoomData(data), changeArchiving && handleArchive()].filter(Boolean));\n\t});\n\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\tconst roomNameField = useUniqueId();\n\tconst roomNameField = useUniqueId();\n\tconst ownerField = useUniqueId();\n\tconst ownerField = useUniqueId();\n\tconst roomDescription = useUniqueId();\n\tconst roomDescription = useUniqueId();\n\tconst roomAnnouncement = useUniqueId();\n\tconst roomAnnouncement = useUniqueId();\n\tconst roomTopicField = useUniqueId();\n\tconst roomTopicField = useUniqueId();\n\tconst roomTypeField = useUniqueId();\n\tconst roomTypeField = useUniqueId();\n\tconst readOnlyField = useUniqueId();\n\tconst readOnlyField = useUniqueId();\n\tconst reactWhenReadOnly = useUniqueId();\n\tconst reactWhenReadOnly = useUniqueId();\n\tconst archivedField = useUniqueId();\n\tconst archivedField = useUniqueId();\n\tconst isDefaultField = useUniqueId();\n\tconst isDefaultField = useUniqueId();\n\tconst favoriteField = useUniqueId();\n\tconst favoriteField = useUniqueId();\n\tconst featuredField = useUniqueId();\n\tconst featuredField = useUniqueId();\n\n\treturn (\n\t\t<>\n\t\t\t<ContextualbarScrollableContent id={formId} is='form' onSubmit={handleSubmit(handleSave)}>"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomsTable.tsx",
        "code": {
            "prevRoomFilterText": "\tconst prevRoomFilterText = useRef<string>(roomFilters.searchText);\n\tconst prevRoomFilterText = useRef<string>(roomFilters.searchText);\n\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 't' | 'usersCount' | 'msgs' | 'default' | 'featured'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name' | 't' | 'usersCount' | 'msgs' | 'default' | 'featured'>('name');",
            "getAdminRooms": "\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms');\n\tconst getAdminRooms = useEndpoint('GET', '/v1/rooms.adminRooms');\n\n\tconst { data, refetch, isSuccess, isLoading, isError } = useQuery(['rooms', query, 'admin'], async () => getAdminRooms(query));\n\tconst { data, refetch, isSuccess, isLoading, isError } = useQuery(['rooms', query, 'admin'], async () => getAdminRooms(query));",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name' w='x200'>"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomsTableFilters.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/rooms/RoomsTableFilters.tsx",
        "code": {
            "text": "const roomTypeFilterStructure = [\nconst roomTypeFilterStructure = [\n\t{\n\t\tid: 'filter_by_room',\n\t\ttext: 'Filter_by_room',\n\t\tisGroupTitle: true,\n\t},\n\t{\n\t\tid: 'd',\n\t\ttext: 'Direct_Message',\n\t\tchecked: false,\n\t},\n\t{\n\t\tid: 'discussions',\n\t\ttext: 'Discussions',\n\t\tchecked: false,\n\t},\n\t{\n\t\tid: 'l',\n\t\ttext: 'Omnichannel',\n\t\tchecked: false,\n\t},\n\t{\n\t\tid: 'p',\n\t\ttext: 'Private_Channels',\n\t\tchecked: false,\n\t},\n\t{\n\t\tid: 'c',\n\t\ttext: 'Public_Channels',\n\t\tchecked: false,\n\t},\n\t{\n\t\tid: 'teams',\n\t\ttext: 'Teams',\n\t\tchecked: false,\n\t},\n] as OptionProp[];\n\nconst RoomsTableFilters = ({ setFilters }: { setFilters: Dispatch<SetStateAction<any>> }): ReactElement => {\nconst RoomsTableFilters = ({ setFilters }: { setFilters: Dispatch<SetStateAction<any>> }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst [roomTypeSelectedOptions, setRoomTypeSelectedOptions] = useState<OptionProp[]>([]);\n\tconst [roomTypeSelectedOptions, setRoomTypeSelectedOptions] = useState<OptionProp[]>([]);\n\n\tconst handleSearchTextChange = useCallback(\n\tconst handleSearchTextChange = useCallback(\n\t\t(event) => {\n\t\t\tconst text = event.currentTarget.value;\n\t\t\tconst text = event.currentTarget.value;\n\t\t\tsetFilters({ searchText: text, types: roomTypeSelectedOptions });",
            "handleRoomTypeChange": "\tconst handleRoomTypeChange = useCallback(\n\tconst handleRoomTypeChange = useCallback(\n\t\t(options: OptionProp[]) => {\n\t\t\tsetFilters({ searchText: text, types: options });"
        },
        "depth_rank": 10
    },
    {
        "file": "ModerationConsoleRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleRoute.tsx",
        "code": {
            "onSelectTab": "\tconst onSelectTab = (tab: (typeof MODERATION_VALID_TABS)[number]) => {\n\tconst onSelectTab = (tab: (typeof MODERATION_VALID_TABS)[number]) => {\n\t\trouter.navigate(\n\t\t\t{\n\t\t\t\tpattern: '/admin/moderation/:tab?/:context?/:id?',\n\t\t\t\tparams: { tab },"
        },
        "depth_rank": 10
    },
    {
        "file": "UserMessages.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/UserMessages.tsx",
        "code": {
            "getUserMessages": "const UserMessages = ({ userId, onRedirect }: { userId: string; onRedirect: (mid: string) => void }) => {\nconst UserMessages = ({ userId, onRedirect }: { userId: string; onRedirect: (mid: string) => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst getUserMessages = useEndpoint('GET', '/v1/moderation.user.reportedMessages');\n\tconst getUserMessages = useEndpoint('GET', '/v1/moderation.user.reportedMessages');\n\n\tconst {\n\tconst {\n\t\tdata: report,\n\t\trefetch: reloadUserMessages,\n\t\tisLoading,\n\t\tisSuccess,\n\t\tisError,\n\t} = useQuery(\n\t\t['moderation', 'msgReports', 'fetchDetails', { userId }],",
            "messages": "\t\t\tconst messages = await getUserMessages({ userId });\n\t\t\tconst messages = await getUserMessages({ userId });",
            "handleChange": "\tconst handleChange = useMutableCallback(() => {\n\tconst handleChange = useMutableCallback(() => {\n\t\treloadUserMessages();\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='column' width='full' height='full' overflowY='auto' overflowX='hidden'>\n\t\t\t\t{isLoading && <Message>{t('Loading')}</Message>}"
        },
        "depth_rank": 10
    },
    {
        "file": "ModerationConsoleActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleActions.tsx",
        "code": {
            "t": "const ModerationConsoleActions = ({ report, onClick }: Omit<ModerationConsoleRowProps, 'isDesktopOrLarger'>): JSX.Element => {\nconst ModerationConsoleActions = ({ report, onClick }: Omit<ModerationConsoleRowProps, 'isDesktopOrLarger'>): JSX.Element => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { userId: uid, isUserDeleted } = report;\n\tconst { userId: uid, isUserDeleted } = report;"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageReportInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/MessageReportInfo.tsx",
        "code": {
            "useRealName": "const MessageReportInfo = ({ msgId }: { msgId: string }): JSX.Element => {\nconst MessageReportInfo = ({ msgId }: { msgId: string }): JSX.Element => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst getReportsByMessage = useEndpoint('GET', `/v1/moderation.reports`);\n\tconst getReportsByMessage = useEndpoint('GET', `/v1/moderation.reports`);\n\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst {\n\tconst {\n\t\tdata: reportsByMessage,\n\t\tisLoading: isLoadingReportsByMessage,\n\t\tisSuccess: isSuccessReportsByMessage,\n\t\tisError: isErrorReportsByMessage,\n\t} = useQuery(\n\t\t['moderation', 'msgReports', 'fetchReasons', { msgId }],",
            "reports": "\t\t\tconst reports = await getReportsByMessage({ msgId });\n\t\t\tconst reports = await getReportsByMessage({ msgId });"
        },
        "depth_rank": 10
    },
    {
        "file": "ModConsoleReportDetails.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModConsoleReportDetails.tsx",
        "code": {
            "activeTab": "const ModConsoleReportDetails = ({ userId, default: defaultTab, onRedirect }: ModConsoleReportDetailsProps) => {\nconst ModConsoleReportDetails = ({ userId, default: defaultTab, onRedirect }: ModConsoleReportDetailsProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [tab, setTab] = useState<string>(defaultTab);\n\tconst [tab, setTab] = useState<string>(defaultTab);\n\tconst moderationRoute = useRouter();\n\tconst moderationRoute = useRouter();\n\n\tconst activeTab = useRouteParameter('tab');\n\tconst activeTab = useRouteParameter('tab');\n\n\treturn (\n\t\t<Contextualbar>\n\t\t\t<ContextualbarHeader>\n\t\t\t\t<ContextualbarTitle>{t('Reports')}</ContextualbarTitle>"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageContextFooter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/MessageContextFooter.tsx",
        "code": {
            "deleteMessagesAction": "const MessageContextFooter: FC<{ userId: string; deleted: boolean }> = ({ userId, deleted }) => {\nconst MessageContextFooter: FC<{ userId: string; deleted: boolean }> = ({ userId, deleted }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dismissUserAction = useDismissUserAction(userId);\n\tconst dismissUserAction = useDismissUserAction(userId);\n\tconst deleteMessagesAction = useDeleteMessagesAction(userId);\n\tconst deleteMessagesAction = useDeleteMessagesAction(userId);\n\n\treturn (\n\t\t<ButtonGroup stretch>\n\t\t\t<Button onClick={dismissUserAction.onClick}>{t('Moderation_Dismiss_all_reports')}</Button>"
        },
        "depth_rank": 10
    },
    {
        "file": "ModerationConsoleTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleTable.tsx",
        "code": {
            "router": "const ModerationConsoleTable: FC = () => {\nconst ModerationConsoleTable: FC = () => {\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "dispatchToastMessage": "\tconst getReports = useEndpoint('GET', '/v1/moderation.reportsByUsers');\n\tconst getReports = useEndpoint('GET', '/v1/moderation.reportsByUsers');\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, isSuccess } = useQuery(['moderation', 'msgReports', 'fetchAll', query], async () => getReports(query), {\n\tconst { data, isLoading, isSuccess } = useQuery(['moderation', 'msgReports', 'fetchAll', query], async () => getReports(query), {\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "headers": "\tconst handleClick = useMutableCallback((id): void => {\n\tconst handleClick = useMutableCallback((id): void => {\n\t\trouter.navigate({\n\t\t\tpattern: '/admin/moderation/:tab?/:context?/:id?',\n\t\t\tparams: {\n\t\t\t\ttab: 'messages',\n\t\t\t\tcontext: 'info',\n\t\t\t\tid,\n\t\t\t},\n\t\t});\n\t});\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => [\n\t\t\t<GenericTableHeaderCell\n\t\t\t\tkey='name'\n\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 10
    },
    {
        "file": "ModerationConsoleTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsoleTableRow.tsx",
        "code": {
            "ModerationConsoleTableRow": "const ModerationConsoleTableRow = ({ report, onClick, isDesktopOrLarger }: ModerationConsoleRowProps): JSX.Element => {\nconst ModerationConsoleTableRow = ({ report, onClick, isDesktopOrLarger }: ModerationConsoleRowProps): JSX.Element => {\n\tconst { userId: _id, rooms, name, count, message, username, ts } = report;\n\tconst { userId: _id, rooms, name, count, message, username, ts } = report;",
            "concatenatedRoomNames": "\tconst roomNames = rooms.map((room) => {\n\tconst roomNames = rooms.map((room) => {\n\t\tif (room.t === 'd') {\n\t\t\treturn room.name || 'Private';\n\t\t}\n\t\treturn room.fname || room.name;\n\t});\n\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst concatenatedRoomNames = roomNames.join(', ');\n\tconst concatenatedRoomNames = roomNames.join(', ');\n\n\treturn (\n\t\t<GenericTableRow key={_id} onClick={(): void => onClick(_id)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 10
    },
    {
        "file": "ModerationConsolePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/ModerationConsolePage.tsx",
        "code": {
            "permalink": "const ModerationConsolePage = ({ tab = 'messages', onSelectTab }: ModerationConsolePageProps) => {\nconst ModerationConsolePage = ({ tab = 'messages', onSelectTab }: ModerationConsolePageProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\tconst id = useRouteParameter('id');\n\tconst id = useRouteParameter('id');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleRedirect = useCallback(\n\tconst handleRedirect = useCallback(\n\t\tasync (mid: string) => {\n\t\t\ttry {\n\t\t\t\tconst permalink = await getPermaLink(mid);\n\t\t\t\tconst permalink = await getPermaLink(mid);\n\t\t\t\twindow.open(permalink, '_self');\n\t\t\t} catch (error) {",
            "handleTabClick": "\tconst handleTabClick = useCallback(\n\tconst handleTabClick = useCallback(\n\t\t(tab: TabType): undefined | (() => void) => (onSelectTab ? (): void => onSelectTab(tab) : undefined),\n\t\t[onSelectTab],\n\t);\n\n\treturn (\n\t\t<Page flexDirection='row'>\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Moderation')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "DateRangePicker.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/DateRangePicker.tsx",
        "code": {
            "handleOptionClick": "const todayDate = formatToDateInput(moment());\nconst todayDate = formatToDateInput(moment());\n\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\nconst getMonthRange = (monthsToSubtractFromToday: number) => ({\n\tstart: formatToDateInput(moment().subtract(monthsToSubtractFromToday, 'month').date(1)),\n\tend: formatToDateInput(monthsToSubtractFromToday === 0 ? moment() : moment().subtract(monthsToSubtractFromToday).date(0)),\n});\n\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\nconst getWeekRange = (daysToSubtractFromStart: number, daysToSubtractFromEnd: number) => ({\n\tstart: formatToDateInput(moment().subtract(daysToSubtractFromStart, 'day')),\n\tend: formatToDateInput(moment().subtract(daysToSubtractFromEnd, 'day')),\n});\n\nconst DateRangePicker = ({ onChange }: DateRangePickerProps) => {\nconst DateRangePicker = ({ onChange }: DateRangePickerProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRange = useMutableCallback((range) => {\n\tconst handleRange = useMutableCallback((range) => {\n\t\tonChange(range);\n\t});\n\n\tconst timeOptions = useMemo<SelectOption[]>(() => {\n\tconst timeOptions = useMemo<SelectOption[]>(() => {\n\t\treturn [\n\t\t\t['today', t('Today')],\n\t\t\t['yesterday', t('Yesterday')],\n\t\t\t['thisWeek', t('This_week')],\n\t\t\t['previousWeek', t('Previous_week')],\n\t\t\t['thisMonth', t('This_month')],\n\t\t\t['alldates', t('All')],\n\t\t].map(([value, label]) => [value, label] as SelectOption);\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\thandleRange({\n\t\t\tstart: formatToDateInput(moment(0)),\n\t\t\tend: todayDate,\n\t\t});\n\t}, [handleRange]);\n\n\tconst handleOptionClick = useMutableCallback((action) => {\n\tconst handleOptionClick = useMutableCallback((action) => {\n\t\tswitch (action) {\n\t\t\tcase 'today':\n\t\t\t\thandleRange(getWeekRange(0, 0));\n\t\t\t\tbreak;\n\t\t\tcase 'yesterday':\n\t\t\t\thandleRange(getWeekRange(1, 1));\n\t\t\t\tbreak;\n\t\t\tcase 'thisWeek':\n\t\t\t\thandleRange(getWeekRange(7, 0));\n\t\t\t\tbreak;\n\t\t\tcase 'previousWeek':\n\t\t\t\thandleRange(getWeekRange(14, 7));\n\t\t\t\tbreak;\n\t\t\tcase 'thisMonth':\n\t\t\t\thandleRange(getMonthRange(0));\n\t\t\t\tbreak;\n\t\t\tcase 'alldates':\n\t\t\t\thandleRange({\n\t\t\t\t\tstart: formatToDateInput(moment(0)),\n\t\t\t\t\tend: todayDate,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn (\n\t\t<Box flexGrow={0}>"
        },
        "depth_rank": 11
    },
    {
        "file": "ContextMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/ContextMessage.tsx",
        "code": {
            "ContextMessage": "const ContextMessage = ({\nconst ContextMessage = ({\n\tmessage,\n\troom,\n\tdeleted,\n\tonRedirect,\n\tonChange,\n}: {",
            "displayName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\n\tconst deleteMessage = useDeleteMessage(message._id, message.rid, onChange);\n\tconst deleteMessage = useDeleteMessage(message._id, message.rid, onChange);\n\tconst dismissMsgReport = useDismissMessageAction(message._id);\n\tconst dismissMsgReport = useDismissMessageAction(message._id);\n\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\tconst useRealName = Boolean(useSetting('UI_Use_Real_Name'));\n\n\tconst name = message.u.name || '';\n\tconst name = message.u.name || '';\n\tconst username = message.u.username || '';\n\tconst username = message.u.username || '';\n\n\tconst displayName = useUserDisplayName({ name, username });\n\tconst displayName = useUserDisplayName({ name, username });"
        },
        "depth_rank": 11
    },
    {
        "file": "ModerationFilter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/ModerationFilter.tsx",
        "code": {
            "handleChange": "const ModerationFilter = ({ setText, setDateRange }: ModerationFilterProps) => {\nconst ModerationFilter = ({ setText, setDateRange }: ModerationFilterProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleChange = useCallback(({ text }): void => setText(text), [setText]);\n\tconst handleChange = useCallback(({ text }): void => setText(text), [setText]);"
        },
        "depth_rank": 11
    },
    {
        "file": "UserColumn.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/helpers/UserColumn.tsx",
        "code": {
            "UserColumn": "const UserColumn = ({ name, username, fontSize, size }: UserColumnProps) => {\nconst UserColumn = ({ name, username, fontSize, size }: UserColumnProps) => {\n\treturn (\n\t\t<Box display='flex' alignItems='center'>\n\t\t\t{username && (\n\t\t\t\t<Box>\n\t\t\t\t\t<UserAvatar sizes={size} username={username} />"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeleteMessagesAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeleteMessagesAction.tsx",
        "code": {
            "handleDeleteMessages": "const useDeleteMessagesAction = (userId: string): GenericMenuItemProps => {\nconst useDeleteMessagesAction = (userId: string): GenericMenuItemProps => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst deleteMessages = useEndpoint('POST', '/v1/moderation.user.deleteReportedMessages');\n\tconst deleteMessages = useEndpoint('POST', '/v1/moderation.user.deleteReportedMessages');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst tab = useRouteParameter('tab');\n\tconst tab = useRouteParameter('tab');\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessages,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDeleteAll": "\tconst onDeleteAll = async () => {\n\tconst onDeleteAll = async () => {\n\t\tawait handleDeleteMessages.mutateAsync({ userId });",
            "confirmDeletMessages": "\tconst confirmDeletMessages = (): void => {\n\tconst confirmDeletMessages = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tconfirmText={t('Moderation_Dismiss_and_delete')}"
        },
        "depth_rank": 11
    },
    {
        "file": "useResetAvatarAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useResetAvatarAction.tsx",
        "code": {
            "handleResetAvatar": "const useResetAvatarAction = (userId: string): GenericMenuItemProps => {\nconst useResetAvatarAction = (userId: string): GenericMenuItemProps => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst resetAvatar = useEndpoint('POST', '/v1/users.resetAvatar');\n\tconst resetAvatar = useEndpoint('POST', '/v1/users.resetAvatar');\n\n\tconst handleResetAvatar = useMutation({\n\tconst handleResetAvatar = useMutation({\n\t\tmutationFn: resetAvatar,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onResetAvatar": "\tconst onResetAvatar = async () => {\n\tconst onResetAvatar = async () => {\n\t\tsetModal();\n\t\tawait handleResetAvatar.mutateAsync({ userId });",
            "confirmResetAvatar": "\tconst confirmResetAvatar = (): void => {\n\tconst confirmResetAvatar = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Reset_user_avatar')}"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeleteMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeleteMessage.tsx",
        "code": {
            "handleDeleteMessages": "const useDeleteMessage = (mid: string, rid: string, onChange: () => void) => {\nconst useDeleteMessage = (mid: string, rid: string, onChange: () => void) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst deleteMessage = useEndpoint('POST', '/v1/chat.delete');\n\tconst deleteMessage = useEndpoint('POST', '/v1/chat.delete');\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessage,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleDismissMessage": "\tconst handleDismissMessage = useMutation({\n\tconst handleDismissMessage = useMutation({\n\t\tmutationFn: dismissMessage,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDeleteAll": "\tconst onDeleteAll = async () => {\n\tconst onDeleteAll = async () => {\n\t\tawait handleDeleteMessages.mutateAsync({ msgId: mid, roomId: rid, asUser: true });",
            "confirmDeletMessage": "\tconst confirmDeletMessage = (): void => {\n\tconst confirmDeletMessage = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\tconfirmText={t('Moderation_Dismiss_and_delete')}"
        },
        "depth_rank": 11
    },
    {
        "file": "useDeactivateUserAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDeactivateUserAction.tsx",
        "code": {
            "useDeactivateUserAction": "const useDeactivateUserAction = (userId: string, isUserReport?: boolean): GenericMenuItemProps => {\nconst useDeactivateUserAction = (userId: string, isUserReport?: boolean): GenericMenuItemProps => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "handleDeactivateUser": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst deactiveUser = useEndpoint('POST', '/v1/users.setActiveStatus');\n\tconst deactiveUser = useEndpoint('POST', '/v1/users.setActiveStatus');\n\tconst deleteMessages = useEndpoint('POST', '/v1/moderation.user.deleteReportedMessages');\n\tconst deleteMessages = useEndpoint('POST', '/v1/moderation.user.deleteReportedMessages');\n\tconst dismissUserReports = useEndpoint('POST', '/v1/moderation.dismissUserReports');\n\tconst dismissUserReports = useEndpoint('POST', '/v1/moderation.dismissUserReports');\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst tab = useRouteParameter('tab');\n\tconst tab = useRouteParameter('tab');\n\n\tconst handleDeactivateUser = useMutation({\n\tconst handleDeactivateUser = useMutation({\n\t\tmutationFn: deactiveUser,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleDeleteMessages": "\tconst handleDeleteMessages = useMutation({\n\tconst handleDeleteMessages = useMutation({\n\t\tmutationFn: deleteMessages,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleDismissUserReports": "\tconst handleDismissUserReports = useMutation({\n\tconst handleDismissUserReports = useMutation({\n\t\tmutationFn: dismissUserReports,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "confirmDeactivateUser": "\tconst confirmDeactivateUser = (): void => {\n\tconst confirmDeactivateUser = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Deactivate_User')}"
        },
        "depth_rank": 11
    },
    {
        "file": "useDismissUserAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDismissUserAction.tsx",
        "code": {
            "useDismissUserAction": "const useDismissUserAction = (userId: string, isUserReport?: boolean): GenericMenuItemProps => {\nconst useDismissUserAction = (userId: string, isUserReport?: boolean): GenericMenuItemProps => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "handleDismissUser": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst moderationRoute = useRouter();\n\tconst moderationRoute = useRouter();\n\tconst tab = useRouteParameter('tab');\n\tconst tab = useRouteParameter('tab');\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst dismissMsgReports = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dismissMsgReports = useEndpoint('POST', '/v1/moderation.dismissReports');\n\n\tconst dismissUserReports = useEndpoint('POST', '/v1/moderation.dismissUserReports');\n\tconst dismissUserReports = useEndpoint('POST', '/v1/moderation.dismissUserReports');\n\n\tconst dismissUser = isUserReport ? dismissUserReports : dismissMsgReports;\n\tconst dismissUser = isUserReport ? dismissUserReports : dismissMsgReports;\n\n\tconst handleDismissUser = useMutation({\n\tconst handleDismissUser = useMutation({\n\t\tmutationFn: dismissUser,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDismissUser": "\tconst onDismissUser = async () => {\n\tconst onDismissUser = async () => {\n\t\tawait handleDismissUser.mutateAsync({ userId });",
            "confirmDismissUser": "\tconst confirmDismissUser = (): void => {\n\tconst confirmDismissUser = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Dismiss_all_reports')}"
        },
        "depth_rank": 11
    },
    {
        "file": "useDismissMessageAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/hooks/useDismissMessageAction.tsx",
        "code": {
            "handleDismissMessage": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\tconst dismissMessage = useEndpoint('POST', '/v1/moderation.dismissReports');\n\n\tconst handleDismissMessage = useMutation({\n\tconst handleDismissMessage = useMutation({\n\t\tmutationFn: dismissMessage,\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "onDismissMessage": "\tconst onDismissMessage = async () => {\n\tconst onDismissMessage = async () => {\n\t\tawait handleDismissMessage.mutateAsync({ msgId });",
            "confirmDismissMessage": "\tconst confirmDismissMessage = (): void => {\n\tconst confirmDismissMessage = (): void => {\n\t\tsetModal(\n\t\t\t<GenericModal\n\t\t\t\ttitle={t('Moderation_Dismiss_reports')}"
        },
        "depth_rank": 11
    },
    {
        "file": "ModConsoleUsersTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/UserReports/ModConsoleUsersTable.tsx",
        "code": {
            "router": "const ModConsoleUsersTable: FC = () => {\nconst ModConsoleUsersTable: FC = () => {\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "getReports": "\tconst getReports = useEndpoint('GET', '/v1/moderation.userReports');\n\tconst getReports = useEndpoint('GET', '/v1/moderation.userReports');\n\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(\n\tconst { data, isLoading, isSuccess, isError, refetch } = useQuery(",
            "handleClick": "\tconst handleClick = useMutableCallback((id): void => {\n\tconst handleClick = useMutableCallback((id): void => {\n\t\trouter.navigate({\n\t\t\tpattern: '/admin/moderation/:tab?/:context?/:id?',\n\t\t\tparams: { tab: 'users', context: 'info', id },",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell\n\t\t\t\tkey='name'\n\t\t\t\tdirection={sortDirection}"
        },
        "depth_rank": 11
    },
    {
        "file": "ModConsoleUserActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/UserReports/ModConsoleUserActions.tsx",
        "code": {
            "t": "const ModConsoleUserActions = ({ report, onClick }: Omit<ModConsoleUserRowProps, 'isDesktopOrLarger'>) => {\nconst ModConsoleUserActions = ({ report, onClick }: Omit<ModConsoleUserRowProps, 'isDesktopOrLarger'>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst {\n\tconst {\n\t\treportedUser: { _id: uid },"
        },
        "depth_rank": 11
    },
    {
        "file": "ModConsoleUserTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/UserReports/ModConsoleUserTableRow.tsx",
        "code": {
            "ModConsoleUserTableRow": "const ModConsoleUserTableRow = ({ report, onClick, isDesktopOrLarger }: ModConsoleUserRowProps): JSX.Element => {\nconst ModConsoleUserTableRow = ({ report, onClick, isDesktopOrLarger }: ModConsoleUserRowProps): JSX.Element => {\n\tconst { reportedUser, count, ts } = report;\n\tconst { reportedUser, count, ts } = report;",
            "formatDateAndTime": "\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\treturn (\n\t\t<GenericTableRow key={_id} onClick={(): void => onClick(_id)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 11
    },
    {
        "file": "UserContextFooter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/moderation/UserReports/UserContextFooter.tsx",
        "code": {
            "deactivateUserAction": "const UserContextFooter: FC<{ userId: string; deleted: boolean }> = ({ userId, deleted }) => {\nconst UserContextFooter: FC<{ userId: string; deleted: boolean }> = ({ userId, deleted }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dismissUserAction = useDismissUserAction(userId, true);\n\tconst dismissUserAction = useDismissUserAction(userId, true);\n\tconst deactivateUserAction = useDeactivateUserAction(userId, true);\n\tconst deactivateUserAction = useDeactivateUserAction(userId, true);\n\n\treturn (\n\t\t<ButtonGroup stretch>\n\t\t\t<Button onClick={dismissUserAction.onClick}>{t('Moderation_Dismiss_all_reports')}</Button>"
        },
        "depth_rank": 11
    },
    {
        "file": "FederationDashboardPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/federationDashboard/FederationDashboardPage.tsx",
        "code": {
            "t": "function FederationDashboardPage(): ReactElement {\nfunction FederationDashboardPage(): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Federation')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ServersSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/federationDashboard/ServersSection.tsx",
        "code": {
            "servers": "\tconst servers = result.data.data;\n\tconst servers = result.data.data;\n\n\treturn (\n\t\t<Box withRichContent>\n\t\t\t<ul>\n\t\t\t\t{servers.map(({ domain }) => (\n\t\t\t\t\t<li key={domain}>{domain}</li>"
        },
        "depth_rank": 10
    },
    {
        "file": "ViewLogsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/viewLogs/ViewLogsPage.tsx",
        "code": {
            "t": "const ViewLogsPage = (): ReactElement => {\nconst ViewLogsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [tab, setTab] = useState('Logs');\n\tconst [tab, setTab] = useState('Logs');\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<PageHeader title={t('Reports')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ServerLogs.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/viewLogs/ServerLogs.tsx",
        "code": {
            "fetchLines": "const unserializeEntry = ({ ts, ...entry }: Serialized<StdOutLogEntry>): StdOutLogEntry => ({\nconst unserializeEntry = ({ ts, ...entry }: Serialized<StdOutLogEntry>): StdOutLogEntry => ({\n\tts: new Date(ts),\n\t...entry,\n});\n\nconst ServerLogs = (): ReactElement => {\nconst ServerLogs = (): ReactElement => {\n\tconst [entries, setEntries] = useState<StdOutLogEntry[]>([]);\n\tconst [entries, setEntries] = useState<StdOutLogEntry[]>([]);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getStdoutQueue = useEndpoint('GET', '/v1/stdout.queue');\n\tconst getStdoutQueue = useEndpoint('GET', '/v1/stdout.queue');\n\tconst subscribeToStdout = useStream('stdout');\n\tconst subscribeToStdout = useStream('stdout');\n\n\tuseEffect(() => {\n\t\tconst fetchLines = async (): Promise<void> => {\n\t\tconst fetchLines = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst { queue } = await getStdoutQueue(undefined);\n\t\t\t\tconst { queue } = await getStdoutQueue(undefined);",
            "observer": "\t\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\t\tmutations.forEach(() => {\n\t\t\t\t\tsendToBottomIfNecessary();\n\t\t\t\t});\n\t\t\t});\n\t\t\tobserver.observe(wrapper, { childList: true });",
            "handleClick": "\t\tconst handleSubtreeModified = (): void => {\n\t\tconst handleSubtreeModified = (): void => {\n\t\t\tsendToBottomIfNecessary();\n\t\t};\n\t\twrapper.addEventListener('DOMSubtreeModified', handleSubtreeModified);\n\n\t\treturn (): void => {\n\t\t\twrapper.removeEventListener('DOMSubtreeModified', handleSubtreeModified);\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\tuseEffect(() => {\n\t\tconst handleWindowResize = (): void => {\n\t\tconst handleWindowResize = (): void => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsendToBottomIfNecessary();\n\t\t\t}, 100);\n\t\t};\n\n\t\twindow.addEventListener('resize', handleWindowResize);\n\n\t\treturn (): void => {\n\t\t\twindow.removeEventListener('resize', handleWindowResize);\n\t\t};\n\t}, [sendToBottomIfNecessary]);\n\n\tconst handleWheel = useCallback(() => {\n\tconst handleWheel = useCallback(() => {\n\t\tatBottomRef.current = false;\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleTouchStart = (): void => {\n\tconst handleTouchStart = (): void => {\n\t\tatBottomRef.current = false;\n\t};\n\n\tconst handleTouchEnd = useCallback(() => {\n\tconst handleTouchEnd = useCallback(() => {\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleScroll = useCallback(() => {\n\tconst handleScroll = useCallback(() => {\n\t\tatBottomRef.current = false;\n\t\tsetTimeout(() => {\n\t\t\tcheckIfScrollIsAtBottom();\n\t\t}, 100);\n\t}, [checkIfScrollIsAtBottom]);\n\n\tconst handleClick = useCallback(() => {\n\tconst handleClick = useCallback(() => {\n\t\tatBottomRef.current = true;\n\t\tsendToBottomIfNecessary();\n\t}, [sendToBottomIfNecessary]);\n\n\treturn (\n\t\t<Box width='full' height='full' overflow='hidden' position='relative' display='flex' mbe={8}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AnalyticsReports.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/viewLogs/AnalyticsReports.tsx",
        "code": {
            "t": "const AnalyticsReports = () => {\nconst AnalyticsReports = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data, isLoading, isSuccess, isError } = useStatistics();\n\tconst { data, isLoading, isSuccess, isError } = useStatistics();"
        },
        "depth_rank": 10
    },
    {
        "file": "MailerPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/mailer/MailerPage.tsx",
        "code": {
            "initialData": "const initialData = { fromEmail: '', query: '', dryRun: false, subject: '', emailBody: '' };\nconst initialData = { fromEmail: '', query: '', dryRun: false, subject: '', emailBody: '' };",
            "dispatchToastMessage": "const MailerPage = () => {\nconst MailerPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\tformState: { errors, isDirty },",
            "sendMailAction": "\tconst mailerEndpoint = useEndpoint('POST', '/v1/mailer');\n\tconst mailerEndpoint = useEndpoint('POST', '/v1/mailer');\n\tconst sendMailAction = useMutation({\n\tconst sendMailAction = useMutation({\n\t\tmutationFn: mailerEndpoint,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('The_emails_are_being_sent'),\n\t\t\t});\n\t\t},\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleSendEmail": "\tconst handleSendEmail = async ({ fromEmail, subject, emailBody, dryRun, query }: SendEmailFormValue) => {\n\tconst handleSendEmail = async ({ fromEmail, subject, emailBody, dryRun, query }: SendEmailFormValue) => {\n\t\tsendMailAction.mutateAsync({ from: fromEmail, subject, body: emailBody, dryrun: dryRun, query });",
            "emailBodyId": "\tconst mailerFormId = useUniqueId();\n\tconst mailerFormId = useUniqueId();\n\tconst fromEmailId = useUniqueId();\n\tconst fromEmailId = useUniqueId();\n\tconst queryId = useUniqueId();\n\tconst queryId = useUniqueId();\n\tconst dryRunId = useUniqueId();\n\tconst dryRunId = useUniqueId();\n\tconst subjectId = useUniqueId();\n\tconst subjectId = useUniqueId();\n\tconst emailBodyId = useUniqueId();\n\tconst emailBodyId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Mailer')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserStatusDisabledModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusDisabledModal.tsx",
        "code": {
            "t": "const CustomUserStatusDisabledModal = ({ isAdmin, onConfirm, onClose }: CustomUserStatusDisabledModalProps) => {\nconst CustomUserStatusDisabledModal = ({ isAdmin, onConfirm, onClose }: CustomUserStatusDisabledModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn isAdmin ? (\n\t\t<GenericModal\n\t\t\ttitle={t('User_status_disabled_learn_more')}"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserStatusRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusRoute.tsx",
        "code": {
            "handleNewButtonClick": "\tconst handleItemClick = (id: string): void => {\n\tconst handleItemClick = (id: string): void => {\n\t\troute.push({\n\t\t\tcontext: 'edit',\n\t\t\tid,\n\t\t});\n\t};\n\n\tconst handleNewButtonClick = useCallback(() => {\n\tconst handleNewButtonClick = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\troute.push({});"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserStatusForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusForm.tsx",
        "code": {
            "t": "const CustomUserStatusForm = ({ onClose, onReload, status }: CustomUserStatusFormProps): ReactElement => {\nconst CustomUserStatusForm = ({ onClose, onReload, status }: CustomUserStatusFormProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { _id, name, statusType } = status || {};\n\tconst { _id, name, statusType } = status || {};",
            "formId": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst formId = useUniqueId();\n\tconst formId = useUniqueId();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty, errors },",
            "handleSave": "\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\tasync (data) => {\n\t\t\ttry {\n\t\t\t\tawait saveStatus({ _id, name, statusType, ...data });",
            "handleDelete": "\tconst handleDeleteStatus = useCallback(() => {\n\tconst handleDeleteStatus = useCallback(() => {\n\t\tconst handleCancel = (): void => {\n\t\tconst handleCancel = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteStatus({ customUserStatusId: _id || '' });"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserActiveConnections.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserActiveConnections.tsx",
        "code": {
            "result": "const CustomUserActiveConnections = () => {\nconst CustomUserActiveConnections = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst result = useActiveConnections();\n\tconst result = useActiveConnections();\n\n\tif (result.isLoading || result.isError) {\n\t\treturn <GenericResourceUsageSkeleton title={t('Active_connections')} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserStatusFormWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusFormWithData.tsx",
        "code": {
            "query": "const CustomUserStatusFormWithData = ({ _id, onReload, onClose }: CustomUserStatusFormWithDataProps): ReactElement => {\nconst CustomUserStatusFormWithData = ({ _id, onReload, onClose }: CustomUserStatusFormWithDataProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);\n\tconst query = useMemo(() => ({ query: JSON.stringify({ _id }) }), [_id]);"
        },
        "depth_rank": 10
    },
    {
        "file": "CustomUserStatusService.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusService.tsx",
        "code": {
            "CustomUserStatusService": "const CustomUserStatusService = () => {\nconst CustomUserStatusService = () => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "disablePresenceService": "\tconst result = useActiveConnections();\n\tconst result = useActiveConnections();\n\tconst presenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst presenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst togglePresenceServiceEndpoint = useEndpoint('POST', '/v1/presence.enableBroadcast');\n\tconst togglePresenceServiceEndpoint = useEndpoint('POST', '/v1/presence.enableBroadcast');\n\tconst disablePresenceService = useMutation(() => togglePresenceServiceEndpoint());\n\tconst disablePresenceService = useMutation(() => togglePresenceServiceEndpoint());\n\tconst { data: license, isLoading: licenseIsLoading } = useIsEnterprise();\n\tconst { data: license, isLoading: licenseIsLoading } = useIsEnterprise();"
        },
        "depth_rank": 10
    },
    {
        "file": "useStatusDisabledModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/hooks/useStatusDisabledModal.tsx",
        "code": {
            "handleSetModal": "\tconst isAdmin = useRole('admin');\n\tconst isAdmin = useRole('admin');\n\n\tconst handleSetModal = () => {\n\tconst handleSetModal = () => {\n\t\tsetModal(<CustomUserStatusDisabledModal isAdmin={isAdmin} onConfirm={handleGoToSettings} onClose={closeModal} />);"
        },
        "depth_rank": 11
    },
    {
        "file": "CustomUserStatusRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusTable/CustomUserStatusRow.tsx",
        "code": {
            "CustomUserStatusRow": "const CustomUserStatusRow = ({ status, onClick }: CustomUserStatusRowProps): ReactElement => {\nconst CustomUserStatusRow = ({ status, onClick }: CustomUserStatusRowProps): ReactElement => {\n\tconst { _id, name, statusType } = status;\n\tconst { _id, name, statusType } = status;"
        },
        "depth_rank": 11
    },
    {
        "file": "CustomUserStatusTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customUserStatus/CustomUserStatusTable/CustomUserStatusTable.tsx",
        "code": {
            "t": "const CustomUserStatus = ({ reload, onClick }: CustomUserStatusProps): ReactElement | null => {\nconst CustomUserStatus = ({ reload, onClick }: CustomUserStatusProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, refetch, isFetched } = useQuery(\n\tconst { data, isLoading, refetch, isFetched } = useQuery("
        },
        "depth_rank": 11
    },
    {
        "file": "CustomSoundsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customSounds/CustomSoundsPage.tsx",
        "code": {
            "handleNewButtonClick": "\tconst context = useRouteParameter('context');\n\tconst context = useRouteParameter('context');\n\n\tconst reload = useRef(() => null);\n\tconst reload = useRef(() => null);\n\n\tconst handleItemClick = useCallback(\n\tconst handleItemClick = useCallback(\n\t\t(_id) => (): void => {\n\t\t\troute.push({\n\t\t\t\tcontext: 'edit',\n\t\t\t\tid: _id,\n\t\t\t});\n\t\t},\n\t\t[route],\n\t);\n\n\tconst handleNewButtonClick = useCallback(() => {\n\tconst handleNewButtonClick = useCallback(() => {\n\t\troute.push({ context: 'new' });",
            "handleClose": "\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\troute.push({});"
        },
        "depth_rank": 10
    },
    {
        "file": "EditSound.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customSounds/EditSound.tsx",
        "code": {
            "setModal": "function EditSound({ close, onChange, data, ...props }: EditSoundProps): ReactElement {\nfunction EditSound({ close, onChange, data, ...props }: EditSoundProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { _id, name: previousName } = data || {};\n\tconst { _id, name: previousName } = data || {};",
            "previousSound": "\tconst previousSound = useMemo(() => data || {}, [data]);\n\tconst previousSound = useMemo(() => data || {}, [data]);",
            "soundData": "\tconst saveAction = useCallback(\n\tconst saveAction = useCallback(\n\t\tasync (sound) => {\n\t\t\tconst soundData = createSoundData(sound, name, { previousName, previousSound, _id, extension: sound.extension });\n\t\t\tconst soundData = createSoundData(sound, name, { previousName, previousSound, _id, extension: sound.extension });",
            "validation": "\t\t\tconst validation = validate(soundData, sound);\n\t\t\tconst validation = validate(soundData, sound);\n\t\t\tif (validation.length === 0) {\n\t\t\t\tlet soundId: string;\n\t\t\t\ttry {\n\t\t\t\t\tsoundId = await insertOrUpdateSound(soundData);\n\t\t\t\t} catch (error) {",
            "reader": "\t\t\t\t\tconst reader = new FileReader();\n\t\t\t\t\tconst reader = new FileReader();\n\t\t\t\t\treader.readAsBinaryString(sound);\n\t\t\t\t\treader.onloadend = (): void => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tuploadCustomSound(reader.result as string, sound.type, { ...soundData, _id: soundId });",
            "handleDelete": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\tsaveAction(sound);\n\t\tonChange();\n\t}, [saveAction, sound, onChange]);\n\n\tconst handleDeleteButtonClick = useCallback(() => {\n\tconst handleDeleteButtonClick = useCallback(() => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\tconst handleDelete = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteCustomSound(_id);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Sound_Has_Been_Deleted') });",
            "handleCancel": "\t\tconst handleCancel = (): void => setModal(null);\n\t\tconst handleCancel = (): void => setModal(null);\n\n\t\tsetModal(() => (\n\t\t\t<GenericModal variant='danger' onConfirm={handleDelete} onCancel={handleCancel} onClose={handleCancel} confirmText={t('Delete')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AddCustomSound.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customSounds/AddCustomSound.tsx",
        "code": {
            "dispatchToastMessage": "const AddCustomSound = ({ goToNew, close, onChange, ...props }: AddCustomSoundProps): ReactElement => {\nconst AddCustomSound = ({ goToNew, close, onChange, ...props }: AddCustomSoundProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [name, setName] = useState('');\n\tconst [name, setName] = useState('');\n\tconst [sound, setSound] = useState<{ name: string }>();\n\tconst [sound, setSound] = useState<{ name: string }>();",
            "result": "\tconst handleSave = useCallback(async () => {\n\tconst handleSave = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await saveAction(name, sound);\n\t\t\tconst result = await saveAction(name, sound);\n\t\t\tif (result) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_Sound_Saved_Successfully') });"
        },
        "depth_rank": 10
    },
    {
        "file": "EditCustomSound.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customSounds/EditCustomSound.tsx",
        "code": {
            "dispatchToastMessage": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst { data, isLoading, refetch } = useQuery(\n\tconst { data, isLoading, refetch } = useQuery("
        },
        "depth_rank": 10
    },
    {
        "file": "CustomSoundsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/customSounds/CustomSoundsTable/CustomSoundsTable.tsx",
        "code": {
            "t": "const CustomSoundsTable = ({ reload, onClick }: CustomSoundsTableProps) => {\nconst CustomSoundsTable = ({ reload, onClick }: CustomSoundsTableProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');\n\tconst { sortBy, sortDirection, setSort } = useSort<'name'>('name');",
            "headers": "\tconst headers = (\n\tconst headers = (\n\t\t<>\n\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>"
        },
        "depth_rank": 11
    },
    {
        "file": "WorkspacePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/WorkspacePage.tsx",
        "code": {
            "WorkspacePage": "const WorkspacePage = ({\nconst WorkspacePage = ({\n\tcanViewStatistics,\n\tserverInfo,\n\tstatistics,\n\tstatisticsIsLoading,\n\tinstances,\n\tonClickRefreshButton,\n\tonClickDownloadInfo,\n}: WorkspaceStatusPageProps) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();"
        },
        "depth_rank": 10
    },
    {
        "file": "WorkspaceRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/WorkspaceRoute.tsx",
        "code": {
            "handleClickDownloadInfo": "\tconst handleClickRefreshButton = async () => {\n\tconst handleClickRefreshButton = async () => {\n\t\tsetRefreshStatistics(true);\n\t\tstatisticsQuery.refetch();\n\t};\n\n\tconst handleClickDownloadInfo = (): void => {\n\tconst handleClickDownloadInfo = (): void => {\n\t\tdownloadJsonAs(statisticsQuery.data, 'statistics');\n\t};\n\n\tif (serverInfoQuery.isError || instancesQuery.isError || statisticsQuery.isError) {\n\t\treturn (\n\t\t\t<Page>\n\t\t\t\t<PageHeader title={t('Workspace')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "DeploymentCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/DeploymentCard/DeploymentCard.tsx",
        "code": {
            "setModal": "const DeploymentCard = ({ serverInfo: { info }, statistics, instances }: DeploymentCardProps): ReactElement => {\nconst DeploymentCard = ({ serverInfo: { info }, statistics, instances }: DeploymentCardProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { commit = {}, marketplaceApiVersion: appsEngineVersion } = info || {};\n\tconst { commit = {}, marketplaceApiVersion: appsEngineVersion } = info || {};",
            "handleInstancesModal": "\tconst handleInstancesModal = useMutableCallback(() => {\n\tconst handleInstancesModal = useMutableCallback(() => {\n\t\tsetModal(<InstancesModal instances={instances} onClose={(): void => setModal()} />);"
        },
        "depth_rank": 11
    },
    {
        "file": "DescriptionListEntry.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/DeploymentCard/components/InstancesModal/DescriptionListEntry.tsx",
        "code": {
            "DescriptionListEntry": "const DescriptionListEntry = ({ children, label }: DescriptionListEntryProps) => (\nconst DescriptionListEntry = ({ children, label }: DescriptionListEntryProps) => ("
        },
        "depth_rank": 13
    },
    {
        "file": "DescriptionList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/DeploymentCard/components/InstancesModal/DescriptionList.tsx",
        "code": {
            "DescriptionList": "const DescriptionList = ({ children, title }: DescriptionListProps) => (\nconst DescriptionList = ({ children, title }: DescriptionListProps) => ("
        },
        "depth_rank": 13
    },
    {
        "file": "InstancesModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/DeploymentCard/components/InstancesModal/InstancesModal.tsx",
        "code": {
            "formatDateAndTime": "const InstancesModal = ({ instances = [], onClose }: InstancesModalProps) => {\nconst InstancesModal = ({ instances = [], onClose }: InstancesModalProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\treturn (\n\t\t<GenericModal onConfirm={onClose} confirmText={t('Close')} icon={null} title={t('Instances')} onClose={onClose}>"
        },
        "depth_rank": 13
    },
    {
        "file": "VersionCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/VersionCard.tsx",
        "code": {
            "formatDate": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\tconst { data: licenseData, isLoading, refetch: refetchLicense } = useLicense({ loadValues: true });\n\tconst { data: licenseData, isLoading, refetch: refetchLicense } = useLicense({ loadValues: true });",
            "isOverLimits": "\t\tconst versionStatus = getVersionStatus(serverVersion, supportedVersions?.versions);\n\t\tconst versionStatus = getVersionStatus(serverVersion, supportedVersions?.versions);\n\n\t\treturn {\n\t\t\tversionStatus,\n\t\t\tversions: supportedVersions?.versions,\n\t\t};\n\t}, [serverInfo?.supportedVersions?.signed, serverVersion]);\n\n\tconst isOverLimits = limits && isOverLicenseLimits(limits);\n\tconst isOverLimits = limits && isOverLicenseLimits(limits);\n\n\tconst actionButton:\n\tconst actionButton:\n\t\t| undefined\n\t\t| {\n\t\t\t\tpath: LocationPathname;\n\t\t\t\tlabel: ReactNode;\n\t\t  }\n\t\t| {\n\t\t\t\taction: () => void;\n\t\t\t\tlabel: ReactNode;\n\t\t  } = useMemo(() => {",
            "handleModalClose": "\t\t\t\t\tconst handleModalClose = (): void => {\n\t\t\t\t\tconst handleModalClose = (): void => {\n\t\t\t\t\t\tsetModal(null);\n\t\t\t\t\t\trefetchLicense();\n\t\t\t\t\t};\n\t\t\t\t\tsetModal(<RegisterWorkspaceModal onClose={handleModalClose} onStatusChange={refetchLicense} />);"
        },
        "depth_rank": 11
    },
    {
        "file": "useFeatureBullets.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/hooks/useFeatureBullets.tsx",
        "code": {
            "useFeatureBullets": "const useFeatureBullets = () => {\nconst useFeatureBullets = () => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 12
    },
    {
        "file": "RegisterWorkspaceTokenModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/modals/RegisterWorkspaceTokenModal.tsx",
        "code": {
            "handleModalClose": "const RegisterWorkspaceTokenModal = ({ onClose, onStatusChange, ...props }: RegisterWorkspaceTokenModalProps) => {\nconst RegisterWorkspaceTokenModal = ({ onClose, onStatusChange, ...props }: RegisterWorkspaceTokenModalProps) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst connectWorkspace = useMethod('cloud:connectWorkspace');\n\tconst connectWorkspace = useMethod('cloud:connectWorkspace');\n\n\tconst [token, setToken] = useState('');\n\tconst [token, setToken] = useState('');\n\tconst [processing, setProcessing] = useState(false);\n\tconst [processing, setProcessing] = useState(false);\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\n\tconst handleBackAction = (): void => {\n\tconst handleBackAction = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<WorkspaceRegistrationModal onClose={handleModalClose} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "RegisterWorkspaceModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/modals/RegisterWorkspaceModal.tsx",
        "code": {
            "handleModalClose": "\tconst handleSetupModal = (): void => {\n\tconst handleSetupModal = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisterWorkspaceSetupModal onClose={handleModalClose} onStatusChange={onStatusChange} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "RegisterWorkspaceSetupModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupModal.tsx",
        "code": {
            "handleModalClose": "const RegisterWorkspaceSetupModal = ({ onClose }: RegisterWorkspaceSetupModalProps) => {\nconst RegisterWorkspaceSetupModal = ({ onClose }: RegisterWorkspaceSetupModalProps) => {\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst [step, setStep] = useState(1);\n\tconst [step, setStep] = useState(1);\n\tconst [email, setEmail] = useState('');\n\tconst [email, setEmail] = useState('');\n\tconst [terms, setTerms] = useState(false);\n\tconst [terms, setTerms] = useState(false);\n\tconst [validInfo, setValidInfo] = useState(false);\n\tconst [validInfo, setValidInfo] = useState(false);\n\tconst [intentData, setIntentData] = useState({\n\tconst [intentData, setIntentData] = useState({\n\t\tdevice_code: '',\n\t\tinterval: 0,\n\t\tuser_code: '',\n\t});\n\n\t// reset validInfo when users go back to step 1\n\tuseEffect(() => {\n\t\tsetValidInfo(false);\n\t}, [step]);\n\n\tuseEffect(() => {\n\t\tif (step === 1) {\n\t\t\tsetValidInfo(validateEmail(email) && terms);\n\t\t}\n\t}, [email, terms]);\n\n\tconst onSuccess = () => {\n\tconst onSuccess = () => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<RegisteredWorkspaceModal onClose={handleModalClose} />);"
        },
        "depth_rank": 13
    },
    {
        "file": "RegisterWorkspaceSetupStepOneModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupStepOneModal.tsx",
        "code": {
            "RegisterWorkspaceSetupStepOneModal": "const RegisterWorkspaceSetupStepOneModal = ({\nconst RegisterWorkspaceSetupStepOneModal = ({\n\temail,\n\tsetEmail,\n\tstep,\n\tsetStep,\n\tterms,\n\tsetTerms,\n\tonClose,\n\tvalidInfo,\n\tsetIntentData,\n\t...props\n}: Props) => {",
            "handleModalClose": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst createRegistrationIntent = useEndpoint('POST', '/v1/cloud.createRegistrationIntent');\n\tconst createRegistrationIntent = useEndpoint('POST', '/v1/cloud.createRegistrationIntent');\n\n\tconst handleBack = (): void => {\n\tconst handleBack = (): void => {\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tconst handleModalClose = (): void => setModal(null);\n\t\tsetModal(<WorkspaceRegistrationModal onClose={handleModalClose} />);",
            "handleRegisterWorkspace": "\tconst handleRegisterWorkspace = async () => {\n\tconst handleRegisterWorkspace = async () => {\n\t\ttry {\n\t\t\tconst { intentData } = await createRegistrationIntent({ resend: false, email });\n\t\t\tconst { intentData } = await createRegistrationIntent({ resend: false, email });",
            "termsField": "\tconst emailField = useUniqueId();\n\tconst emailField = useUniqueId();\n\tconst termsField = useUniqueId();\n\tconst termsField = useUniqueId();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 13
    },
    {
        "file": "RegisterWorkspaceSetupStepTwoModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/modals/RegisterWorkspaceSetupModal/RegisterWorkspaceSetupStepTwoModal.tsx",
        "code": {
            "handleResendRegistrationEmail": "\tconst handleResendRegistrationEmail = async () => {\n\tconst handleResendRegistrationEmail = async () => {\n\t\ttry {\n\t\t\tawait createRegistrationIntent({ resend: true, email });",
            "getConfirmation": "\tconst getConfirmation = useCallback(async () => {\n\tconst getConfirmation = useCallback(async () => {\n\t\ttry {\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\tdeviceCode: intentData.device_code,\n\t\t\t});\n\n\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Workspace_registered') });",
            "pollInterval": "\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(intentData.interval));\n\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(intentData.interval));\n\n\t\treturn (): void => clearInterval(pollInterval);\n\t}, [getConfirmation, intentData]);\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 13
    },
    {
        "file": "VersionCardActionButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/VersionCard/components/VersionCardActionButton.tsx",
        "code": {
            "handleActionButton": "const VersionCardActionButton = (item: VersionCardActionButtonProps): ReactElement => {\nconst VersionCardActionButton = (item: VersionCardActionButtonProps): ReactElement => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleActionButton = useMutableCallback(() => {\n\tconst handleActionButton = useMutableCallback(() => {\n\t\tif ('action' in item) {\n\t\t\treturn item.action();\n\t\t}\n\n\t\trouter.navigate(item.path);\n\t});\n\n\treturn (\n\t\t<Button primary onClick={() => handleActionButton()}>"
        },
        "depth_rank": 12
    },
    {
        "file": "MessagesRoomsCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/MessagesRoomsCard/MessagesRoomsCard.tsx",
        "code": {
            "t": "const MessagesRoomsCard = ({ statistics }: MessagesRoomsCardProps): ReactElement => {\nconst MessagesRoomsCard = ({ statistics }: MessagesRoomsCardProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Card height='full'>\n\t\t\t<WorkspaceCardSection\n\t\t\t\ttitle={t('Total_rooms')}"
        },
        "depth_rank": 11
    },
    {
        "file": "WorkspaceCardTextSeparator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/components/WorkspaceCardTextSeparator.tsx",
        "code": {
            "WorkspaceCardTextSeparator": "const WorkspaceCardTextSeparator = ({ icon, label, value, status }: WorkspaceCardTextSeparatorProps) => (\nconst WorkspaceCardTextSeparator = ({ icon, label, value, status }: WorkspaceCardTextSeparatorProps) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "WorkspaceCardSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/workspace/components/WorkspaceCardSection.tsx",
        "code": {
            "WorkspaceCardSection": "const WorkspaceCardSection = ({ title, body }: WorkspaceCardSectionProps) => {\nconst WorkspaceCardSection = ({ title, body }: WorkspaceCardSectionProps) => {\n\treturn (\n\t\t<Box fontScale='c1'>\n\t\t\t<Box fontScale='c2'>{title}</Box>"
        },
        "depth_rank": 11
    },
    {
        "file": "InviteRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/invites/InviteRow.tsx",
        "code": {
            "removeInvite": "const isExpired = (expires: IInvite['expires']): boolean => {\nconst isExpired = (expires: IInvite['expires']): boolean => {\n\tif (expires && expires.getTime() < new Date().getTime()) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\ntype InviteRowProps = Omit<IInvite, 'createdAt' | 'expires' | '_updatedAt'> & {\n\tonRemove: (removeInvite: () => Promise<boolean>) => void;\n\t_updatedAt: string;\n\tcreatedAt: string;\n\texpires: string | null;\n};\n\nconst InviteRow = ({ _id, createdAt, expires, uses, maxUses, onRemove }: InviteRowProps): ReactElement => {\nconst InviteRow = ({ _id, createdAt, expires, uses, maxUses, onRemove }: InviteRowProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst removeInvite = useEndpoint('DELETE', '/v1/removeInvite/:_id', { _id });\n\tconst removeInvite = useEndpoint('DELETE', '/v1/removeInvite/:_id', { _id });"
        },
        "depth_rank": 10
    },
    {
        "file": "InvitesPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/invites/InvitesPage.tsx",
        "code": {
            "getInvites": "const InvitesPage = (): ReactElement => {\nconst InvitesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst getInvites = useEndpoint('GET', '/v1/listInvites');\n\tconst getInvites = useEndpoint('GET', '/v1/listInvites');\n\n\tconst { data, isLoading, refetch, isSuccess, isError } = useQuery(\n\tconst { data, isLoading, refetch, isSuccess, isError } = useQuery(",
            "invites": "\t\t\tconst invites = await getInvites();\n\t\t\tconst invites = await getInvites();\n\t\t\treturn invites;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "confirmRemove": "\tconst onRemove = (removeInvite: () => Promise<boolean>): void => {\n\tconst onRemove = (removeInvite: () => Promise<boolean>): void => {\n\t\tconst confirmRemove = async (): Promise<void> => {\n\t\tconst confirmRemove = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait removeInvite();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Invite_removed') });",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() => (\n\t\t\t<>\n\t\t\t\t<GenericTableHeaderCell w={notSmall ? '20%' : '80%'}>{t('Token')}</GenericTableHeaderCell>"
        },
        "depth_rank": 10
    },
    {
        "file": "GroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/GroupPage.tsx",
        "code": {
            "originalSettings": "\tconst dispatch = useSettingsDispatch();\n\tconst dispatch = useSettingsDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst loadLanguage = useLoadLanguage();\n\tconst loadLanguage = useLoadLanguage();\n\n\tconst changedEditableSettings = useEditableSettings(\n\tconst changedEditableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t\tchanged: true,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst originalSettings = useSettings(\n\tconst originalSettings = useSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\t_id: changedEditableSettings.map(({ _id }) => _id),",
            "lng": "\tconst isColorSetting = (setting: ISetting): setting is ISettingColor => setting.type === 'color';\n\tconst isColorSetting = (setting: ISetting): setting is ISettingColor => setting.type === 'color';\n\n\tconst save = useMutableCallback(async () => {\n\tconst save = useMutableCallback(async () => {\n\t\tconst changes = changedEditableSettings.map((setting) => {\n\t\tconst changes = changedEditableSettings.map((setting) => {\n\t\t\tif (isColorSetting(setting)) {\n\t\t\t\treturn {\n\t\t\t\t\t_id: setting._id,\n\t\t\t\t\tvalue: setting.value,\n\t\t\t\t\teditor: setting.editor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t_id: setting._id,\n\t\t\t\tvalue: setting.value,\n\t\t\t};\n\t\t});\n\n\t\tif (changes.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait dispatch(changes);\n\n\t\t\tif (changes.some(({ _id }) => _id === 'Language')) {\n\t\t\t\tconst lng = user?.language || changes.filter(({ _id }) => _id === 'Language').shift()?.value || 'en';\n\t\t\t\tconst lng = user?.language || changes.filter(({ _id }) => _id === 'Language').shift()?.value || 'en';",
            "settingsToDispatch": "\tconst dispatchToEditing = useEditableSettingsDispatch();\n\tconst dispatchToEditing = useEditableSettingsDispatch();\n\n\tconst cancel = useMutableCallback(() => {\n\tconst cancel = useMutableCallback(() => {\n\t\tconst settingsToDispatch = changedEditableSettings\n\t\tconst settingsToDispatch = changedEditableSettings\n\t\t\t.map(({ _id }) => originalSettings.find((setting) => setting._id === _id))",
            "handleBack": "\tconst handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n\tconst handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n\t\tevent.preventDefault();\n\t\tsave();\n\t};\n\n\tconst handleBack = useMutableCallback(() => router.push({}));\n\tconst handleBack = useMutableCallback(() => router.push({}));"
        },
        "depth_rank": 10
    },
    {
        "file": "ResetSettingButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/ResetSettingButton.tsx",
        "code": {
            "t": "function ResetSettingButton(props: ComponentProps<typeof Button>): ReactElement {\nfunction ResetSettingButton(props: ComponentProps<typeof Button>): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <IconButton icon='undo' danger small title={t('Reset')} {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "Section.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/Section.tsx",
        "code": {
            "changed": "function Section({ groupId, hasReset = true, sectionName, tabName = '', solo, help, children }: SectionProps): ReactElement {\nfunction Section({ groupId, hasReset = true, sectionName, tabName = '', solo, help, children }: SectionProps): ReactElement {\n\tconst editableSettings = useEditableSettings(\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: groupId,\n\t\t\t\tsection: sectionName,\n\t\t\t\ttab: tabName,\n\t\t\t}),\n\t\t\t[groupId, sectionName, tabName],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);"
        },
        "depth_rank": 10
    },
    {
        "file": "SectionSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/SectionSkeleton.tsx",
        "code": {
            "SectionSkeleton": "function SectionSkeleton(): ReactElement {\nfunction SectionSkeleton(): ReactElement {\n\treturn (\n\t\t<Accordion.Item noncollapsible title={<Skeleton />}>"
        },
        "depth_rank": 10
    },
    {
        "file": "Setting.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/Setting.tsx",
        "code": {
            "onChangeValue": "\tconst onChangeValue = useCallback(\n\tconst onChangeValue = useCallback(\n\t\t(value) => {\n\t\t\tsetValue(value);\n\t\t\tupdate({ value });",
            "onChangeEditor": "\tconst onChangeEditor = useCallback(\n\tconst onChangeEditor = useCallback(\n\t\t(editor) => {\n\t\t\tsetEditor(editor);\n\t\t\tupdate({ editor });",
            "onResetButtonClick": "\tconst onResetButtonClick = useCallback(() => {\n\tconst onResetButtonClick = useCallback(() => {\n\t\tsetValue(setting.value);\n\t\tsetEditor(isSettingColor(setting) ? setting.editor : undefined);\n\t\tupdate({\n\t\t\tvalue: persistedSetting.packageValue,\n\t\t\t...(isSettingColor(persistedSetting) && { editor: persistedSetting.packageEditor }),",
            "hint": "\tconst label = (t.has(i18nLabel) && t(i18nLabel)) || (t.has(_id) && t(_id)) || i18nLabel || _id;\n\tconst label = (t.has(i18nLabel) && t(i18nLabel)) || (t.has(_id) && t(_id)) || i18nLabel || _id;\n\n\tconst hint = useMemo(\n\tconst hint = useMemo(\n\t\t() =>\n\t\t\ti18nDescription && t.has(i18nDescription) ? <MarkdownText variant='inline' preserveHtml content={t(i18nDescription)} /> : undefined,",
            "callout": "\tconst callout = useMemo(() => alert && <span dangerouslySetInnerHTML={{ __html: t.has(alert) ? t(alert) : alert }} />, [alert, t]);\n\tconst callout = useMemo(() => alert && <span dangerouslySetInnerHTML={{ __html: t.has(alert) ? t(alert) : alert }} />, [alert, t]);",
            "showUpgradeButton": "\tconst showUpgradeButton = useMemo(\n\tconst showUpgradeButton = useMemo(\n\t\t() =>\n\t\t\tshouldDisableEnterprise ? (\n\t\t\t\t<Button mbs={4} is='a' href={PRICING_URL} target='_blank'>"
        },
        "depth_rank": 10
    },
    {
        "file": "MemoizedSetting.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/MemoizedSetting.tsx",
        "code": {
            "MemoizedSetting": "const MemoizedSetting = ({\nconst MemoizedSetting = ({\n\ttype,\n\thint = undefined,\n\tcallout = undefined,\n\tvalue = undefined,\n\teditor = undefined,\n\tonChangeValue,\n\tonChangeEditor,\n\tdisabled,\n\tshowUpgradeButton,\n\tclassName = undefined,\n\tinvisible = undefined,\n\t...inputProps\n}: MemoizedSettingProps): ReactElement | null => {"
        },
        "depth_rank": 10
    },
    {
        "file": "EditableSettingsProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/EditableSettingsProvider.tsx",
        "code": {
            "queryEditableSettings": "\tconst queryEditableSettings = useMemo(\n\tconst queryEditableSettings = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((query = {}) =>",
            "queryGroupTabs": "\tconst queryGroupTabs = useMemo(\n\tconst queryGroupTabs = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((_id: GroupId) =>\n\t\t\t\tArray.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tgetSettingsCollection()\n\t\t\t\t\t\t\t.find(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgroup: _id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\ttab: 1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\t\t\tsorter: 1,\n\t\t\t\t\t\t\t\t\t\ttab: 1,\n\t\t\t\t\t\t\t\t\t\ti18nLabel: 1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.fetch()\n\t\t\t\t\t\t\t.map(({ tab }) => tab || ''),",
            "contextValue": "\tconst isEnterprise = data?.isEnterprise ?? false;\n\tconst isEnterprise = data?.isEnterprise ?? false;\n\n\tconst contextValue = useMemo<EditableSettingsContextValue>(\n\tconst contextValue = useMemo<EditableSettingsContextValue>(\n\t\t() => ({\n\t\t\tqueryEditableSetting,\n\t\t\tqueryEditableSettings,\n\t\t\tqueryGroupSections,\n\t\t\tqueryGroupTabs,\n\t\t\tdispatch,\n\t\t\tisEnterprise,\n\t\t}),\n\t\t[queryEditableSetting, queryEditableSettings, queryGroupSections, queryGroupTabs, dispatch, isEnterprise],\n\t);\n\n\treturn <EditableSettingsContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "GroupPageSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/GroupPageSkeleton.tsx",
        "code": {
            "GroupPageSkeleton": "const GroupPageSkeleton = () => (\nconst GroupPageSkeleton = () => (\n\t<Page>\n\t\t<PageHeader title={<Skeleton style={{ width: '20rem' }} />} />"
        },
        "depth_rank": 10
    },
    {
        "file": "SettingsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/SettingsPage.tsx",
        "code": {
            "isLoadingGroups": "const SettingsPage = (): ReactElement => {\nconst SettingsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst handleChange = useCallback((e) => setFilter(e.currentTarget.value), []);\n\tconst handleChange = useCallback((e) => setFilter(e.currentTarget.value), []);\n\n\tconst groups = useSettingsGroups(useDebouncedValue(filter, 400));\n\tconst groups = useSettingsGroups(useDebouncedValue(filter, 400));\n\tconst isLoadingGroups = useIsSettingsContextLoading();\n\tconst isLoadingGroups = useIsSettingsContextLoading();\n\n\treturn (\n\t\t<Page background='tint'>\n\t\t\t<PageHeader title={t('Settings')} borderBlockEndColor='' />"
        },
        "depth_rank": 10
    },
    {
        "file": "useSettingsGroups.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/hooks/useSettingsGroups.ts",
        "code": {
            "filterRegex": "\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\t\t[setting.i18nLabel && t(setting.i18nLabel as TranslationKey), t(setting._id as TranslationKey), setting._id].filter(Boolean);\n\n\t\ttry {\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => filterRegex.test(text));\n\t\t} catch (e) {",
            "groupIds": "\t\tconst groupIds = Array.from(\n\t\tconst groupIds = Array.from(\n\t\t\tnew Set(\n\t\t\t\tsettings.filter(filterPredicate).map((setting) => {\n\t\t\t\t\tif (setting.type === 'group') {\n\t\t\t\t\t\treturn setting._id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn setting.group;\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\treturn settings\n\t\t\t.filter(({ type, group, _id }) => type === 'group' && groupIds.includes(group || _id))"
        },
        "depth_rank": 11
    },
    {
        "file": "LookupSettingInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/LookupSettingInput.tsx",
        "code": {
            "handleChange": "\tconst handleChange = (value: string): void => {\n\tconst handleChange = (value: string): void => {\n\t\tonChangeValue?.(value);\n\t};\n\n\tconst { value: options } = useEndpointData(lookupEndpoint) as AsyncState<{ data: { key: string; label: string }[] }>;\n\tconst { value: options } = useEndpointData(lookupEndpoint) as AsyncState<{ data: { key: string; label: string }[] }>;"
        },
        "depth_rank": 11
    },
    {
        "file": "ActionSettingInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/ActionSettingInput.tsx",
        "code": {
            "handleClick": "function ActionSettingInput({ _id, actionText, value, disabled, sectionChanged }: ActionSettingInputProps): ReactElement {\nfunction ActionSettingInput({ _id, actionText, value, disabled, sectionChanged }: ActionSettingInputProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst actionMethod = useMethod(value);\n\tconst actionMethod = useMethod(value);\n\n\tconst handleClick = async (): Promise<void> => {\n\tconst handleClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst data: { message: TranslationKey; params?: string[] } = await actionMethod();\n\t\t\tconst data: { message: TranslationKey; params?: string[] } = await actionMethod();",
            "params": "\t\t\tconst params = data.params || [];\n\t\t\tconst params = data.params || [];\n\t\t\tdispatchToastMessage({ type: 'success', message: t(data.message, ...params) });"
        },
        "depth_rank": 11
    },
    {
        "file": "BooleanSettingInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/BooleanSettingInput.tsx",
        "code": {
            "value": "\tconst handleChange = (event: SyntheticEvent<HTMLInputElement>): void => {\n\tconst handleChange = (event: SyntheticEvent<HTMLInputElement>): void => {\n\t\tconst value = event.currentTarget.checked;\n\t\tconst value = event.currentTarget.checked;\n\t\tonChangeValue?.(value);\n\t};\n\n\treturn (\n\t\t<Field>\n\t\t\t<FieldRow marginBlockEnd={8}>"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomPickSettingInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/RoomPickSettingInput.tsx",
        "code": {
            "parsedValue": "\tconst parsedValue = (value || []).map(({ _id }) => _id);\n\tconst parsedValue = (value || []).map(({ _id }) => _id);",
            "newValue": "\tconst handleChange = (value: string | string[]) => {\n\tconst handleChange = (value: string | string[]) => {\n\t\tif (typeof value === 'object') {\n\t\t\tconst newValue = value.map((currentValue: string) => ({ _id: currentValue }));\n\t\t\tconst newValue = value.map((currentValue: string) => ({ _id: currentValue }));"
        },
        "depth_rank": 11
    },
    {
        "file": "AssetSettingInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/AssetSettingInput.tsx",
        "code": {
            "isDataTransferEvent": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setAsset = useUpload('/v1/assets.setAsset');\n\tconst setAsset = useUpload('/v1/assets.setAsset');\n\tconst unsetAsset = useEndpoint('POST', '/v1/assets.unsetAsset');\n\tconst unsetAsset = useEndpoint('POST', '/v1/assets.unsetAsset');\n\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\tconst isDataTransferEvent = <T extends SyntheticEvent>(event: T): event is T & DragEvent<HTMLInputElement> =>\n\t\tBoolean('dataTransfer' in event && (event as any).dataTransfer.files);\n\n\tconst handleUpload: ChangeEventHandler<HTMLInputElement> = (event): void => {\n\tconst handleUpload: ChangeEventHandler<HTMLInputElement> = (event): void => {\n\t\tlet { files } = event.target;",
            "fileData": "\t\t\tconst fileData = new FormData();\n\t\t\tconst fileData = new FormData();\n\t\t\tfileData.append('asset', blob, asset);\n\t\t\tfileData.append('assetName', asset);\n\n\t\t\ttry {\n\t\t\t\tawait setAsset(fileData);\n\t\t\t} catch (e) {",
            "handleDeleteButtonClick": "\tconst handleDeleteButtonClick = async (): Promise<void> => {\n\tconst handleDeleteButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait unsetAsset({ assetName: asset });"
        },
        "depth_rank": 11
    },
    {
        "file": "CodeMirror.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/inputs/CodeMirror/CodeMirror.tsx",
        "code": {
            "CodeMirror": "function CodeMirror({\nfunction CodeMirror({\n\tlineNumbers = true,\n\tlineWrapping = true,\n\tmode = 'javascript',\n\tgutters = defaultGutters,\n\tfoldGutter = true,\n\tmatchBrackets = true,\n\tautoCloseBrackets = true,\n\tmatchTags = true,\n\tshowTrailingSpace = true,\n\thighlightSelectionMatches = true,\n\treadOnly,\n\tvalue: valueProp,\n\tdefaultValue,\n\tonChange,\n\t...props\n}: CodeMirrorProps): ReactElement {"
        },
        "depth_rank": 12
    },
    {
        "file": "VoipGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/VoipGroupPage.tsx",
        "code": {
            "tabsComponent": "\tconst tabsComponent = (\n\tconst tabsComponent = (\n\t\t<Tabs>\n\t\t\t{tabs.map((tabName) => (\n\t\t\t\t<Tabs.Item key={tabName || ''} selected={tab === tabName} onClick={handleTabClick(tabName)}>",
            "ExtensionsPageComponent": "\tconst ExtensionsPageComponent = useMemo(\n\tconst ExtensionsPageComponent = useMemo(\n\t\t() =>\n\t\t\tvoipEnabled ? (\n\t\t\t\t<VoipExtensionsPage />\n\t\t\t) : (\n\t\t\t\t<GenericNoResults icon='warning' title={t('Voip_is_disabled')} description={t('Voip_is_disabled_description')}></GenericNoResults>"
        },
        "depth_rank": 11
    },
    {
        "file": "TabbedGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/TabbedGroupPage.tsx",
        "code": {
            "tabsComponent": "\tconst tabsComponent = (\n\tconst tabsComponent = (\n\t\t<Tabs>\n\t\t\t{tabs.map((tabName) => (\n\t\t\t\t<Tabs.Item key={tabName || ''} selected={tab === tabName} onClick={handleTabClick(tabName)}>"
        },
        "depth_rank": 11
    },
    {
        "file": "LDAPGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/LDAPGroupPage.tsx",
        "code": {
            "changed": "function LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\nfunction LDAPGroupPage({ _id, ...group }: ISetting): JSX.Element {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst testConnection = useEndpoint('POST', '/v1/ldap.testConnection');\n\tconst testConnection = useEndpoint('POST', '/v1/ldap.testConnection');\n\tconst syncNow = useEndpoint('POST', '/v1/ldap.syncNow');\n\tconst syncNow = useEndpoint('POST', '/v1/ldap.syncNow');\n\tconst testSearch = useEndpoint('POST', '/v1/ldap.testSearch');\n\tconst testSearch = useEndpoint('POST', '/v1/ldap.testSearch');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst ldapEnabled = useSetting('LDAP_Enable');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst closeModal = useMutableCallback(() => setModal());\n\tconst closeModal = useMutableCallback(() => setModal());\n\n\tconst handleLinkClick = useExternalLink();\n\tconst handleLinkClick = useExternalLink();\n\n\tconst editableSettings = useEditableSettings(\n\tconst editableSettings = useEditableSettings(\n\t\tuseMemo(\n\t\t\t() => ({\n\t\t\t\tgroup: _id,\n\t\t\t}),\n\t\t\t[_id],\n\t\t),\n\t);\n\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);\n\tconst changed = useMemo(() => editableSettings.some(({ changed }) => changed), [editableSettings]);",
            "handleTestConnectionButtonClick": "\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\tconst handleTestConnectionButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst { message } = await testConnection();\n\t\t\tconst { message } = await testConnection();",
            "confirmSync": "\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\tconst handleSyncNowButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\tconst confirmSync = async (): Promise<void> => {\n\t\t\t\tcloseModal();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await syncNow();\n\t\t\t\t\tconst { message } = await syncNow();",
            "confirmSearch": "\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\tconst handleSearchTestButtonClick = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait testConnection();\n\t\t\tlet username = '';\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\tconst handleChangeUsername = (event: FormEvent<HTMLInputElement>): void => {\n\t\t\t\tusername = event.currentTarget.value;\n\t\t\t};\n\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\tconst confirmSearch = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { message } = await testSearch({ username });\n\t\t\t\t\tconst { message } = await testSearch({ username });"
        },
        "depth_rank": 11
    },
    {
        "file": "AssetsGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/AssetsGroupPage.tsx",
        "code": {
            "solo": "function AssetsGroupPage({ _id, ...group }: AssetsGroupPageProps): ReactElement {\nfunction AssetsGroupPage({ _id, ...group }: AssetsGroupPageProps): ReactElement {\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst solo = sections.length === 1;\n\tconst solo = sections.length === 1;\n\n\treturn (\n\t\t<GroupPage _id={_id} {...group}>"
        },
        "depth_rank": 11
    },
    {
        "file": "OAuthGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/OAuthGroupPage.tsx",
        "code": {
            "handleRefreshOAuthServicesButtonClick": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst refreshOAuthService = useMethod('refreshOAuthService');\n\tconst refreshOAuthService = useMethod('refreshOAuthService');\n\tconst addOAuthService = useMethod('addOAuthService');\n\tconst addOAuthService = useMethod('addOAuthService');\n\tconst removeOAuthService = useMethod('removeOAuthService');\n\tconst removeOAuthService = useMethod('removeOAuthService');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst handleRefreshOAuthServicesButtonClick = async (): Promise<void> => {\n\tconst handleRefreshOAuthServicesButtonClick = async (): Promise<void> => {\n\t\tdispatchToastMessage({ type: 'info', message: t('Refreshing') });",
            "onConfirm": "\tconst handleAddCustomOAuthButtonClick = (): void => {\n\tconst handleAddCustomOAuthButtonClick = (): void => {\n\t\tconst onConfirm = async (text: string): Promise<void> => {\n\t\tconst onConfirm = async (text: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait addOAuthService(text);\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_OAuth_has_been_added') });",
            "handleConfirm": "\tconst removeCustomOauthFactory =\n\tconst removeCustomOauthFactory =\n\t\t(id: string): (() => void) =>\n\t\t(): void => {\n\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\t\ttry {\n\t\t\t\t\tawait removeOAuthService(id);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Custom_OAuth_has_been_removed') });",
            "handleRemoveCustomOAuthButtonClick": "\t\t\t\t\tconst id = strRight(sectionName, 'Custom OAuth: ').toLowerCase();\n\t\t\t\t\tconst id = strRight(sectionName, 'Custom OAuth: ').toLowerCase();\n\n\t\t\t\t\tconst handleRemoveCustomOAuthButtonClick = removeCustomOauthFactory(id);\n\t\t\t\t\tconst handleRemoveCustomOAuthButtonClick = removeCustomOauthFactory(id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Section\n\t\t\t\t\t\t\tkey={sectionName}"
        },
        "depth_rank": 11
    },
    {
        "file": "GenericGroupPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/GenericGroupPage.tsx",
        "code": {
            "solo": "function GenericGroupPage({ _id, ...props }: GenericGroupPageProps): ReactElement {\nfunction GenericGroupPage({ _id, ...props }: GenericGroupPageProps): ReactElement {\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst sections = useEditableSettingsGroupSections(_id);\n\tconst solo = sections.length === 1;\n\tconst solo = sections.length === 1;\n\n\treturn (\n\t\t<GroupPage _id={_id} {...props}>"
        },
        "depth_rank": 11
    },
    {
        "file": "AssignAgentModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/AssignAgentModal.tsx",
        "code": {
            "query": "const AssignAgentModal: FC<AssignAgentModalParams> = ({ existingExtension, closeModal, reload }) => {\nconst AssignAgentModal: FC<AssignAgentModalParams> = ({ existingExtension, closeModal, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [agent, setAgent] = useState('');\n\tconst [agent, setAgent] = useState('');\n\tconst [extension, setExtension] = useState(existingExtension || '');\n\tconst [extension, setExtension] = useState(existingExtension || '');\n\tconst query = useMemo(() => ({ type: 'available' as const, userId: agent }), [agent]);\n\tconst query = useMemo(() => ({ type: 'available' as const, userId: agent }), [agent]);",
            "handleAssignment": "\tconst assignAgent = useEndpoint('POST', '/v1/omnichannel/agent/extension');\n\tconst assignAgent = useEndpoint('POST', '/v1/omnichannel/agent/extension');\n\n\tconst handleAssignment = useMutableCallback(async (e) => {\n\tconst handleAssignment = useMutableCallback(async (e) => {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait assignAgent({ username: agent, extension });",
            "handleAgentChange": "\tconst handleAgentChange = useMutableCallback((e) => setAgent(e));\n\tconst handleAgentChange = useMutableCallback((e) => setAgent(e));\n\n\tconst { value: availableExtensions, phase: state } = useEndpointData('/v1/omnichannel/extension', { params: query });\n\tconst { value: availableExtensions, phase: state } = useEndpointData('/v1/omnichannel/extension', { params: query });"
        },
        "depth_rank": 12
    },
    {
        "file": "VoipExtensionsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/VoipExtensionsPage.tsx",
        "code": {
            "setModal": "const VoipExtensionsPage = () => {\nconst VoipExtensionsPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "query": "\tconst query = useMemo(\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\t...(itemsPerPage && { count: itemsPerPage }),"
        },
        "depth_rank": 12
    },
    {
        "file": "AssignAgentButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/AssignAgentButton.tsx",
        "code": {
            "handleAssociation": "const AssignAgentButton: FC<{ extension: string; reload: () => void }> = ({ extension, reload }) => {\nconst AssignAgentButton: FC<{ extension: string; reload: () => void }> = ({ extension, reload }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst handleAssociation = useMutableCallback((e) => {\n\tconst handleAssociation = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tsetModal(<AssignAgentModal existingExtension={extension} closeModal={(): void => setModal()} reload={reload} />);"
        },
        "depth_rank": 12
    },
    {
        "file": "RemoveAgentButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/settings/groups/voip/RemoveAgentButton.tsx",
        "code": {
            "removeAgent": "const RemoveAgentButton: FC<{ username: string; reload: () => void }> = ({ username, reload }) => {\nconst RemoveAgentButton: FC<{ username: string; reload: () => void }> = ({ username, reload }) => {\n\tconst removeAgent = useEndpoint('DELETE', '/v1/omnichannel/agent/extension/:username', { username });\n\tconst removeAgent = useEndpoint('DELETE', '/v1/omnichannel/agent/extension/:username', { username });",
            "handleRemoveClick": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\tconst handleRemoveClick = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait removeAgent();\n\t\t} catch (error: unknown) {",
            "onDeleteAgent": "\tconst handleDelete = useMutableCallback((e) => {\n\tconst handleDelete = useMutableCallback((e) => {\n\t\te.stopPropagation();\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\tconst onDeleteAgent = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait handleRemoveClick();\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Agent_removed') });"
        },
        "depth_rank": 12
    },
    {
        "file": "AdminSidebar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/sidebar/AdminSidebar.tsx",
        "code": {
            "t": "const AdminSidebar: FC = () => {\nconst AdminSidebar: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\t// TODO: uplift this provider\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header\n\t\t\t\t\tonClose={sidebar.close}"
        },
        "depth_rank": 10
    },
    {
        "file": "AdminSidebarPages.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/admin/sidebar/AdminSidebarPages.tsx",
        "code": {
            "items": "const AdminSidebarPages: FC<AdminSidebarPagesProps> = ({ currentPath }) => {\nconst AdminSidebarPages: FC<AdminSidebarPagesProps> = ({ currentPath }) => {\n\tconst items = useSyncExternalStore(subscribeToAdminSidebarItems, getAdminSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToAdminSidebarItems, getAdminSidebarItems);\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' flexShrink={0} pb={8}>"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomTags.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/RoomTags.tsx",
        "code": {
            "t": "const RoomTags = ({ room }: { room: IRoom }): ReactElement => {\nconst RoomTags = ({ room }: { room: IRoom }): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mi={4} alignItems='center' display='flex' withTruncatedText>"
        },
        "depth_rank": 9
    },
    {
        "file": "TeamsTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/teams/TeamsTable/TeamsTableRow.tsx",
        "code": {
            "formatDate": "const TeamsTableRow = ({ onClick, team, mediaQuery }: TeamsTableRowProps) => {\nconst TeamsTableRow = ({ onClick, team, mediaQuery }: TeamsTableRowProps) => {\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst { _id, ts, t, name, fname, topic, roomsCount } = team;\n\tconst { _id, ts, t, name, fname, topic, roomsCount } = team;",
            "avatarUrl": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(team);\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(team);\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(name, t)} onClick={onClick(name, t)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 12
    },
    {
        "file": "TeamsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/teams/TeamsTable/TeamsTable.tsx",
        "code": {
            "debouncedText": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst channelsRoute = useRoute('channel');\n\tconst channelsRoute = useRoute('channel');\n\tconst groupsRoute = useRoute('group');\n\tconst groupsRoute = useRoute('group');\n\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'teams');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'teams');",
            "onClick": "\tconst onClick = useMemo(\n\tconst onClick = useMemo(\n\t\t() => (name: IRoom['name'], type: IRoom['t']) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (name && (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter')) {\n\t\t\t\ttype === 'c' ? channelsRoute.push({ name }) : groupsRoute.push({ name });"
        },
        "depth_rank": 12
    },
    {
        "file": "UsersTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/users/UsersTable/UsersTableRow.tsx",
        "code": {
            "UsersTableRow": "const UsersTableRow = ({\nconst UsersTableRow = ({\n\tuser: { createdAt, emails, domain, _id, username, name, bio, avatarETag, nickname },",
            "formatDate": "\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(username)} onClick={onClick(username)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 12
    },
    {
        "file": "UsersTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/users/UsersTable/UsersTable.tsx",
        "code": {
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'users', workspace);\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'users', workspace);",
            "getDirectoryData": "\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\n\tconst { data, isFetched, isLoading, isError, refetch } = useQuery(['getDirectoryData', query], () => getDirectoryData(query));\n\tconst { data, isFetched, isLoading, isError, refetch } = useQuery(['getDirectoryData', query], () => getDirectoryData(query));",
            "handleClick": "\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\t(username) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter') {\n\t\t\t\tdirectRoute.push({ rid: username });"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelsTableRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/channels/ChannelsTable/ChannelsTableRow.tsx",
        "code": {
            "formatDate": "const ChannelsTableRow = ({ onClick, room, mediaQuery }: ChannelsTableRowProps) => {\nconst ChannelsTableRow = ({ onClick, room, mediaQuery }: ChannelsTableRowProps) => {\n\tconst formatDate = useFormatDate();\n\tconst formatDate = useFormatDate();\n\tconst { _id, ts, t, name, fname, usersCount, lastMessage, topic, belongsTo } = room;\n\tconst { _id, ts, t, name, fname, usersCount, lastMessage, topic, belongsTo } = room;",
            "avatarUrl": "\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(room);\n\tconst avatarUrl = roomCoordinator.getRoomDirectives(t).getAvatarPath(room);\n\n\treturn (\n\t\t<GenericTableRow key={_id} onKeyDown={onClick(name, t)} onClick={onClick(name, t)} tabIndex={0} role='link' action>"
        },
        "depth_rank": 12
    },
    {
        "file": "ChannelsTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/directory/tabs/channels/ChannelsTable/ChannelsTable.tsx",
        "code": {
            "groupsRoute": "\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\tconst debouncedText = useDebouncedValue(text, 500);\n\tconst debouncedText = useDebouncedValue(text, 500);\n\n\tconst channelRoute = useRoute('channel');\n\tconst channelRoute = useRoute('channel');\n\tconst groupsRoute = useRoute('group');\n\tconst groupsRoute = useRoute('group');\n\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();\n\tconst { current, itemsPerPage, setItemsPerPage: onSetItemsPerPage, setCurrent: onSetCurrent, ...paginationProps } = usePagination();",
            "headers": "\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name' direction={sortDirection} active={sortBy === 'name'} onClick={setSort} sort='name'>",
            "query": "\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst getDirectoryData = useEndpoint('GET', '/v1/directory');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'channels');\n\tconst query = useDirectoryQuery({ text: debouncedText, current, itemsPerPage }, [sortBy, sortDirection], 'channels');",
            "onClick": "\tconst onClick = useMemo(\n\tconst onClick = useMemo(\n\t\t() => (name: IRoom['name'], type: IRoom['t']) => (e: React.KeyboardEvent | React.MouseEvent) => {\n\t\t\tif (name && (e.type === 'click' || (e as React.KeyboardEvent).key === 'Enter')) {\n\t\t\t\ttype === 'c' ? channelRoute.push({ name }) : groupsRoute.push({ name });"
        },
        "depth_rank": 12
    },
    {
        "file": "OAuthErrorPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/oauth/OAuthErrorPage.tsx",
        "code": {
            "errorType": "const OAuthErrorPage = () => {\nconst OAuthErrorPage = () => {\n\tconst errorType = useRouteParameter('error');\n\tconst errorType = useRouteParameter('error');\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "ErrorPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/oauth/components/ErrorPage.tsx",
        "code": {
            "ErrorPage": "const ErrorPage = ({ error }: ErrorPageProps) => {\nconst ErrorPage = ({ error }: ErrorPageProps) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 10
    },
    {
        "file": "Layout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/oauth/components/Layout.tsx",
        "code": {
            "customBackground": "const Layout = ({ children }: LayoutProps) => {\nconst Layout = ({ children }: LayoutProps) => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 10
    },
    {
        "file": "AuthorizationFormPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/oauth/components/AuthorizationFormPage.tsx",
        "code": {
            "formLabelId": "const AuthorizationFormPage = ({ oauthApp, redirectUri, user }: AuthorizationFormPageProps) => {\nconst AuthorizationFormPage = ({ oauthApp, redirectUri, user }: AuthorizationFormPageProps) => {\n\tconst token = useMemo(() => Meteor._localStorage.getItem(Accounts.LOGIN_TOKEN_KEY) ?? undefined, []);\n\tconst token = useMemo(() => Meteor._localStorage.getItem(Accounts.LOGIN_TOKEN_KEY) ?? undefined, []);\n\n\tconst formLabelId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 10
    },
    {
        "file": "CurrentUserDisplay.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/oauth/components/CurrentUserDisplay.tsx",
        "code": {
            "getRoles": "const CurrentUserDisplay = ({ user }: CurrentUserDisplayProps) => {\nconst CurrentUserDisplay = ({ user }: CurrentUserDisplayProps) => {\n\tconst showRealNames = useSetting<boolean>('UI_Use_Real_Name');\n\tconst showRealNames = useSetting<boolean>('UI_Use_Real_Name');\n\tconst getRoles = useRolesDescription();\n\tconst getRoles = useRolesDescription();\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 10
    },
    {
        "file": "SetupWizardPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/setupWizard/SetupWizardPage.tsx",
        "code": {
            "SetupWizardPage": "const SetupWizardPage = (): ReactElement => {\nconst SetupWizardPage = (): ReactElement => {\n\tconst { currentStep } = useSetupWizardContext();\n\tconst { currentStep } = useSetupWizardContext();"
        },
        "depth_rank": 9
    },
    {
        "file": "SetupWizardProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/setupWizard/providers/SetupWizardProvider.tsx",
        "code": {
            "t": "const SetupWizardProvider = ({ children }: { children: ReactElement }): ReactElement => {\nconst SetupWizardProvider = ({ children }: { children: ReactElement }): ReactElement => {\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [setupWizardData, setSetupWizardData] = useState<ContextType<typeof SetupWizardContext>['setupWizardData']>(initialData);\n\tconst [setupWizardData, setSetupWizardData] = useState<ContextType<typeof SetupWizardContext>['setupWizardData']>(initialData);\n\tconst [currentStep, setCurrentStep] = useStepRouting();\n\tconst [currentStep, setCurrentStep] = useStepRouting();\n\tconst { isSuccess, data } = useParameters();\n\tconst { isSuccess, data } = useParameters();",
            "registerAdminUser": "\tconst registerAdminUser = useCallback(\n\tconst registerAdminUser = useCallback(\n\t\tasync ({ fullname, username, email, password }): Promise<void> => {\n\t\t\tawait registerUser({ name: fullname, username, email, pass: password });",
            "saveWorkspaceData": "\tconst saveAgreementData = useCallback(\n\tconst saveAgreementData = useCallback(\n\t\tasync (agreement): Promise<void> => {\n\t\t\tawait dispatchSettings([\n\t\t\t\t{\n\t\t\t\t\t_id: 'Cloud_Service_Agree_PrivacyTerms',\n\t\t\t\t\tvalue: agreement,\n\t\t\t\t},\n\t\t\t]);\n\t\t},\n\t\t[dispatchSettings],\n\t);\n\n\tconst saveWorkspaceData = useCallback(async (): Promise<void> => {\n\tconst saveWorkspaceData = useCallback(async (): Promise<void> => {\n\t\tconst {\n\t\tconst {\n\t\t\tserverData: { updates, agreement },",
            "saveOrganizationData": "\tconst saveOrganizationData = useCallback(\n\tconst saveOrganizationData = useCallback(\n\t\tasync (organizationData: ContextType<typeof SetupWizardContext>['setupWizardData']['organizationData']): Promise<void> => {\n\t\t\tconst { organizationName, organizationIndustry, organizationSize, country } = organizationData;\n\t\t\tconst { organizationName, organizationIndustry, organizationSize, country } = organizationData;",
            "completeSetupWizard": "\tconst completeSetupWizard = useMutableCallback(async (): Promise<void> => {\n\tconst completeSetupWizard = useMutableCallback(async (): Promise<void> => {\n\t\tdispatchToastMessage({ type: 'success', message: t('Your_workspace_is_ready') });",
            "value": "\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tsetupWizardData,\n\t\t\tsetSetupWizardData,\n\t\t\tcurrentStep,\n\t\t\tloaded: isSuccess,\n\t\t\tsettings: data.settings,\n\t\t\tskipCloudRegistration: data.serverAlreadyRegistered,\n\t\t\tgoToPreviousStep,\n\t\t\tgoToNextStep,\n\t\t\tgoToStep,\n\t\t\tregisterAdminUser,\n\t\t\tvalidateEmail: _validateEmail,\n\t\t\tregisterServer,\n\t\t\tsaveAgreementData,\n\t\t\tsaveWorkspaceData,\n\t\t\tsaveOrganizationData,\n\t\t\tcompleteSetupWizard,\n\t\t\tmaxSteps: data.serverAlreadyRegistered ? 2 : 4,\n\t\t}),\n\t\t[\n\t\t\tsetupWizardData,\n\t\t\tcurrentStep,\n\t\t\tisSuccess,\n\t\t\tdata.settings,\n\t\t\tdata.serverAlreadyRegistered,\n\t\t\tgoToPreviousStep,\n\t\t\tgoToNextStep,\n\t\t\tgoToStep,\n\t\t\tregisterAdminUser,\n\t\t\t_validateEmail,\n\t\t\tregisterServer,\n\t\t\tsaveAgreementData,\n\t\t\tsaveWorkspaceData,\n\t\t\tsaveOrganizationData,\n\t\t\tcompleteSetupWizard,\n\t\t],\n\t);\n\n\treturn <SetupWizardContext.Provider value={value}>{children}</SetupWizardContext.Provider>;"
        },
        "depth_rank": 10
    },
    {
        "file": "OrganizationInfoStep.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/setupWizard/steps/OrganizationInfoStep.tsx",
        "code": {
            "setting": "\tconst setting = settings.find(({ _id }) => _id === settingId);\n\tconst setting = settings.find(({ _id }) => _id === settingId);",
            "hasAdminRole": "const OrganizationInfoStep = (): ReactElement => {\nconst OrganizationInfoStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst hasAdminRole = useRole('admin');\n\tconst hasAdminRole = useRole('admin');\n\n\tconst {\n\tconst {\n\t\tsetupWizardData: { organizationData },",
            "organizationSizeOptions": "\tconst countryOptions = getSettingOptions(settings, 'Country', t);\n\tconst countryOptions = getSettingOptions(settings, 'Country', t);\n\tconst organizationIndustryOptions = getSettingOptions(settings, 'Industry', t);\n\tconst organizationIndustryOptions = getSettingOptions(settings, 'Industry', t);\n\tconst organizationSizeOptions = getSettingOptions(settings, 'Size', t);\n\tconst organizationSizeOptions = getSettingOptions(settings, 'Size', t);\n\n\tconst handleSubmit: ComponentProps<typeof OrganizationInfoPage>['onSubmit'] = async (data) => {\n\tconst handleSubmit: ComponentProps<typeof OrganizationInfoPage>['onSubmit'] = async (data) => {\n\t\tif (skipCloudRegistration) {\n\t\t\treturn completeSetupWizard();\n\t\t}\n\n\t\tsetSetupWizardData((prevState) => ({ ...prevState, organizationData: data }));"
        },
        "depth_rank": 10
    },
    {
        "file": "RegisterServerStep.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/setupWizard/steps/RegisterServerStep.tsx",
        "code": {
            "t": "const SERVER_OPTIONS = {\nconst SERVER_OPTIONS = {\n\tREGISTERED: 'REGISTERED',\n\tOFFLINE: 'OFFLINE',\n};\n\nconst RegisterServerStep = (): ReactElement => {\nconst RegisterServerStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { currentStep, goToNextStep, setSetupWizardData, registerServer, maxSteps, completeSetupWizard, saveAgreementData } =\n\tconst { currentStep, goToNextStep, setSetupWizardData, registerServer, maxSteps, completeSetupWizard, saveAgreementData } =",
            "invalidateLicenseQuery": "\tconst [serverOption, setServerOption] = useState(SERVER_OPTIONS.REGISTERED);\n\tconst [serverOption, setServerOption] = useState(SERVER_OPTIONS.REGISTERED);\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\tconst invalidateLicenseQuery = useInvalidateLicense();\n\n\tconst handleRegister: ComponentProps<typeof RegisterServerPage>['onSubmit'] = async (data: {\n\tconst handleRegister: ComponentProps<typeof RegisterServerPage>['onSubmit'] = async (data: {\n\t\temail: string;\n\t\tagreement: boolean;\n\t\tupdates: boolean;\n\t\tresend?: boolean;\n\t}) => {",
            "getWorkspaceRegisterData": "\tconst registerManually = useEndpoint('POST', '/v1/cloud.manualRegister');\n\tconst registerManually = useEndpoint('POST', '/v1/cloud.manualRegister');\n\tconst registerPreIntent = useEndpoint('POST', '/v1/cloud.registerPreIntent');\n\tconst registerPreIntent = useEndpoint('POST', '/v1/cloud.registerPreIntent');\n\tconst getWorkspaceRegisterData = useMethod('cloud:getWorkspaceRegisterData');\n\tconst getWorkspaceRegisterData = useMethod('cloud:getWorkspaceRegisterData');\n\n\tconst { data: clientKey } = useQuery(['setupWizard/clientKey'], async () => getWorkspaceRegisterData(), {\n\tconst { data: clientKey } = useQuery(['setupWizard/clientKey'], async () => getWorkspaceRegisterData(), {\n\t\tstaleTime: Infinity,\n\t});\n\n\tconst {\n\tconst {\n\t\tdata: offline,\n\t\tisLoading,\n\t\tisError,\n\t} = useQuery(['setupWizard/registerIntent'], async () => registerPreIntent(), {"
        },
        "depth_rank": 10
    },
    {
        "file": "CloudAccountConfirmation.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/setupWizard/steps/CloudAccountConfirmation.tsx",
        "code": {
            "CloudAccountConfirmation": "const CloudAccountConfirmation = (): ReactElement => {\nconst CloudAccountConfirmation = (): ReactElement => {\n\tconst {\n\tconst {\n\t\tregisterServer,\n\t\tcurrentStep,\n\t\tmaxSteps,\n\t\tgoToStep,\n\t\tsetupWizardData: { registrationData },",
            "getConfirmation": "\tconst setShowSetupWizard = useSettingSetValue('Show_Setup_Wizard');\n\tconst setShowSetupWizard = useSettingSetValue('Show_Setup_Wizard');\n\tconst cloudConfirmationPoll = useEndpoint('GET', '/v1/cloud.confirmationPoll');\n\tconst cloudConfirmationPoll = useEndpoint('GET', '/v1/cloud.confirmationPoll');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst getConfirmation = useCallback(async () => {\n\tconst getConfirmation = useCallback(async () => {\n\t\ttry {\n\t\t\tif (registrationData.device_code) {\n\t\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\tconst { pollData } = await cloudConfirmationPoll({\n\t\t\t\t\tdeviceCode: registrationData.device_code,\n\t\t\t\t});\n\n\t\t\t\tif ('successful' in pollData && pollData.successful) {\n\t\t\t\t\tawait saveWorkspaceData();\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Your_workspace_is_ready') });",
            "pollInterval": "\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(registrationData.interval));\n\t\tconst pollInterval = setInterval(() => getConfirmation(), setIntervalTime(registrationData.interval));\n\n\t\treturn (): void => clearInterval(pollInterval);\n\t}, [getConfirmation, registrationData.interval]);\n\n\treturn (\n\t\t<AwaitingConfirmationPage\n\t\t\tcurrentStep={currentStep}"
        },
        "depth_rank": 10
    },
    {
        "file": "MailerUnsubscriptionPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/mailer/MailerUnsubscriptionPage.tsx",
        "code": {
            "useMailerUnsubscriptionState": "const useMailerUnsubscriptionState = (): AsyncState<boolean> => {\nconst useMailerUnsubscriptionState = (): AsyncState<boolean> => {\n\tconst { resolve, reject, ...unsubscribedState } = useAsyncState<boolean>();\n\tconst { resolve, reject, ...unsubscribedState } = useAsyncState<boolean>();",
            "doUnsubscribe": "\tconst unsubscribe = useEndpoint('POST', '/v1/mailer.unsubscribe');\n\tconst unsubscribe = useEndpoint('POST', '/v1/mailer.unsubscribe');\n\tconst _id = useRouteParameter('_id');\n\tconst _id = useRouteParameter('_id');\n\tconst createdAt = useRouteParameter('createdAt');\n\tconst createdAt = useRouteParameter('createdAt');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tuseEffect(() => {\n\t\tconst doUnsubscribe = async (_id: string, createdAt: string): Promise<void> => {\n\t\tconst doUnsubscribe = async (_id: string, createdAt: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait unsubscribe({ _id, createdAt });",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<HeroLayout>\n\t\t\t<Box color='default' marginInline='auto' marginBlock={16} maxWidth={800}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalRegion.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/modal/ModalRegion.tsx",
        "code": {
            "currentModal": "const ModalRegion = (): ReactElement | null => {\nconst ModalRegion = (): ReactElement | null => {\n\tconst currentModal = useCurrentModal();\n\tconst currentModal = useCurrentModal();\n\tconst { setModal } = useModal();\n\tconst { setModal } = useModal();"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/modal/uikit/ModalBlock.tsx",
        "code": {
            "element": "\t\t\tconst element = ref.current.querySelector<HTMLElement>(focusableElementsStringInvalid);\n\t\t\tconst element = ref.current.querySelector<HTMLElement>(focusableElementsStringInvalid);\n\t\t\telement?.focus();\n\t\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "UiKitModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/modal/uikit/UiKitModal.tsx",
        "code": {
            "actionManager": "const UiKitModal = ({ initialView }: UiKitModalProps) => {\nconst UiKitModal = ({ initialView }: UiKitModalProps) => {\n\tconst actionManager = useUiKitActionManager();\n\tconst actionManager = useUiKitActionManager();\n\tconst { view, errors, values, updateValues, state } = useUiKitView(initialView);\n\tconst { view, errors, values, updateValues, state } = useUiKitView(initialView);",
            "contextValue": "\tconst contextValue = useModalContextValue({ view, values, updateValues });\n\tconst contextValue = useModalContextValue({ view, values, updateValues });",
            "handleClose": "\tconst handleSubmit = useMutableCallback((e: FormEvent) => {\n\tconst handleSubmit = useMutableCallback((e: FormEvent) => {\n\t\tpreventSyntheticEvent(e);\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewSubmit',\n\t\t\t\tpayload: {\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tviewId: view.id,\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\tconst handleCancel = useMutableCallback((e: FormEvent) => {\n\tconst handleCancel = useMutableCallback((e: FormEvent) => {\n\t\tpreventSyntheticEvent(e);\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewClosed',\n\t\t\t\tpayload: {\n\t\t\t\t\tviewId: view.id,\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t\tisCleared: false,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\tconst handleClose = useMutableCallback(() => {\n\tconst handleClose = useMutableCallback(() => {\n\t\tvoid actionManager\n\t\t\t.emitInteraction(view.appId, {\n\t\t\t\ttype: 'viewClosed',\n\t\t\t\tpayload: {\n\t\t\t\t\tviewId: view.id,\n\t\t\t\t\tview: {\n\t\t\t\t\t\t...view,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t},\n\t\t\t\t\tisCleared: true,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tactionManager.disposeView(view.id);\n\t\t\t});\n\t});\n\n\treturn (\n\t\t<UiKitContext.Provider value={contextValue}>"
        },
        "depth_rank": 10
    },
    {
        "file": "useValues.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/modal/uikit/hooks/useValues.ts",
        "code": {
            "hasInitialValueAndActionId": "const hasElementInBlock = (block: LayoutBlock): block is LayoutBlockWithElement => 'element' in block;\nconst hasElementInBlock = (block: LayoutBlock): block is LayoutBlockWithElement => 'element' in block;\nconst hasElementsInBlock = (block: LayoutBlock): block is LayoutBlockWithElements => 'elements' in block;\nconst hasElementsInBlock = (block: LayoutBlock): block is LayoutBlockWithElements => 'elements' in block;\nconst hasInitialValueAndActionId = (\nconst hasInitialValueAndActionId = (\n\telement: ElementFromLayoutBlock,\n): element is Extract<ElementFromLayoutBlock, { actionId: string }> & { initialValue: unknown } =>",
            "extractValue": "const extractValue = (element: ElementFromLayoutBlock, obj: Record<string, { value: unknown; blockId?: string }>, blockId?: string) => {\nconst extractValue = (element: ElementFromLayoutBlock, obj: Record<string, { value: unknown; blockId?: string }>, blockId?: string) => {\n\tif (hasInitialValueAndActionId(element)) {\n\t\tobj[element.actionId] = { value: element.initialValue, blockId };",
            "initializer": "\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\tconst reducer = useMutableCallback((values, { actionId, payload }) => ({\n\t\t...values,\n\t\t[actionId]: payload,\n\t}));\n\n\tconst initializer = useMutableCallback((blocks: LayoutBlock[]) => {\n\tconst initializer = useMutableCallback((blocks: LayoutBlock[]) => {\n\t\tconst obj: Record<string, { value: unknown; blockId?: string }> = {};\n\t\tconst obj: Record<string, { value: unknown; blockId?: string }> = {};"
        },
        "depth_rank": 11
    },
    {
        "file": "NotFoundPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/notFound/NotFoundPage.tsx",
        "code": {
            "t": "const NotFoundPage = (): ReactElement => {\nconst NotFoundPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn <NotFoundState title={t('Page_not_found')} subtitle={t('Page_not_exist_or_not_permission')} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "IndexRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/IndexRoute.tsx",
        "code": {
            "room": "\t\tconst computation = Tracker.autorun((c) => {\n\t\tconst computation = Tracker.autorun((c) => {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tif (user?.defaultRoom) {\n\t\t\t\t\tconst room = user.defaultRoom.split('/') as [routeName: RouteName, routeParam: string];\n\t\t\t\t\tconst room = user.defaultRoom.split('/') as [routeName: RouteName, routeParam: string];\n\t\t\t\t\trouter.navigate({\n\t\t\t\t\t\tname: room[0],\n\t\t\t\t\t\tparams: { name: room[1] },"
        },
        "depth_rank": 9
    },
    {
        "file": "PortalsWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/PortalsWrapper.tsx",
        "code": {
            "portals": "const PortalsWrapper: FC = () => {\nconst PortalsWrapper: FC = () => {\n\tconst portals = useSyncExternalStore(portalsSubscription.subscribe, portalsSubscription.getSnapshot);\n\tconst portals = useSyncExternalStore(portalsSubscription.subscribe, portalsSubscription.getSnapshot);\n\n\treturn (\n\t\t<>\n\t\t\t{portals.map(({ key, portal }) => (\n\t\t\t\t<PortalWrapper key={key} portal={portal} />"
        },
        "depth_rank": 9
    },
    {
        "file": "AppLayout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/AppLayout.tsx",
        "code": {
            "layout": "\tconst layout = useSyncExternalStore(appLayout.subscribe, appLayout.getSnapshot);\n\tconst layout = useSyncExternalStore(appLayout.subscribe, appLayout.getSnapshot);\n\n\treturn (\n\t\t<Suspense fallback={<PageLoading />}>"
        },
        "depth_rank": 9
    },
    {
        "file": "OutermostErrorBoundary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/OutermostErrorBoundary.tsx",
        "code": {
            "OutermostErrorBoundary": "const OutermostErrorBoundary = ({ children }: OutermostErrorBoundaryProps) => {\nconst OutermostErrorBoundary = ({ children }: OutermostErrorBoundaryProps) => {\n\tif (BugsnagErrorBoundary) {\n\t\treturn <BugsnagErrorBoundary FallbackComponent={AppErrorPage}>{children}</BugsnagErrorBoundary>;"
        },
        "depth_rank": 9
    },
    {
        "file": "SAMLLoginRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/SAMLLoginRoute.tsx",
        "code": {
            "dispatchToastMessage": "const SAMLLoginRoute = () => {\nconst SAMLLoginRoute = () => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tuseEffect(() => {\n\t\tconst { token } = router.getRouteParameters();\n\t\tconst { token } = router.getRouteParameters();"
        },
        "depth_rank": 9
    },
    {
        "file": "LoginPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/LoginPage.tsx",
        "code": {
            "iframeLoginUrl": "const LoginPage = ({ defaultRoute, children }: { defaultRoute?: LoginRoutes; children?: ReactNode }): ReactElement => {\nconst LoginPage = ({ defaultRoute, children }: { defaultRoute?: LoginRoutes; children?: ReactNode }): ReactElement => {\n\tconst showForcedLogoutBanner = useSession('force_logout');\n\tconst showForcedLogoutBanner = useSession('force_logout');\n\tconst iframeLoginUrl = useIframeLogin();\n\tconst iframeLoginUrl = useIframeLogin();\n\n\tif (iframeLoginUrl) {\n\t\treturn <iframe src={iframeLoginUrl} style={{ height: '100%', width: '100%' }} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "UsernameCheck.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/UsernameCheck.tsx",
        "code": {
            "userId": "const UsernameCheck = ({ children }: { children: ReactNode }): ReactElement => {\nconst UsernameCheck = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\tconst { data: userData, isLoading } = useUserInfoQuery({ userId: userId || '' });\n\tconst { data: userData, isLoading } = useUserInfoQuery({ userId: userId || '' });"
        },
        "depth_rank": 10
    },
    {
        "file": "MainLayout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/MainLayout.tsx",
        "code": {
            "MainLayout": "const MainLayout = ({ children = null }: MainLayoutProps): ReactElement => {\nconst MainLayout = ({ children = null }: MainLayoutProps): ReactElement => {\n\tuseCustomScript();\n\n\treturn (\n\t\t<Preload>\n\t\t\t<AuthenticationCheck>\n\t\t\t\t<Suspense fallback={null}>{children}</Suspense>"
        },
        "depth_rank": 10
    },
    {
        "file": "TwoFactorAuthSetupCheck.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/TwoFactorAuthSetupCheck.tsx",
        "code": {
            "TwoFactorAuthSetupCheck": "const TwoFactorAuthSetupCheck = ({ children }: { children: ReactNode }): ReactElement => {\nconst TwoFactorAuthSetupCheck = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 10
    },
    {
        "file": "LayoutWithSidebar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/LayoutWithSidebar.tsx",
        "code": {
            "LayoutWithSidebar": "const LayoutWithSidebar = ({ children }: { children: ReactNode }): ReactElement => {\nconst LayoutWithSidebar = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 10
    },
    {
        "file": "RegisterUsername.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/RegisterUsername.tsx",
        "code": {
            "usernameSuggestion": "\tconst setUsername = useMethod('setUsername');\n\tconst setUsername = useMethod('setUsername');\n\tconst saveCustomFields = useMethod('saveCustomFields');\n\tconst saveCustomFields = useMethod('saveCustomFields');\n\tconst usernameSuggestion = useEndpoint('GET', '/v1/users.getUsernameSuggestion');\n\tconst usernameSuggestion = useEndpoint('GET', '/v1/users.getUsernameSuggestion');\n\tconst { data, isLoading } = useQuery(['suggestion'], async () => usernameSuggestion());\n\tconst { data, isLoading } = useQuery(['suggestion'], async () => usernameSuggestion());",
            "registerUsernameMutation": "\tconst registerUsernameMutation = useMutation({\n\tconst registerUsernameMutation = useMutation({\n\t\tmutationFn: async (data: RegisterUsernamePayload) => {\n\t\t\tconst { username, ...customFields } = data;\n\t\t\tconst { username, ...customFields } = data;"
        },
        "depth_rank": 10
    },
    {
        "file": "AuthenticationCheck.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/MainLayout/AuthenticationCheck.tsx",
        "code": {
            "forceLogin": "const AuthenticationCheck = ({ children, guest }: { children: ReactNode; guest?: boolean }): ReactElement => {\nconst AuthenticationCheck = ({ children, guest }: { children: ReactNode; guest?: boolean }): ReactElement => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst allowAnonymousRead = useSetting('Accounts_AllowAnonymousRead');\n\tconst forceLogin = useSession('forceLogin');\n\tconst forceLogin = useSession('forceLogin');\n\n\tif (uid) {\n\t\treturn <UsernameCheck>{children}</UsernameCheck>;"
        },
        "depth_rank": 10
    },
    {
        "file": "useClearUnreadAllMessagesMutation.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/hooks/useClearUnreadAllMessagesMutation.ts",
        "code": {
            "promises": "\tconst readSubscription = useEndpoint('POST', '/v1/subscriptions.read');\n\tconst readSubscription = useEndpoint('POST', '/v1/subscriptions.read');\n\n\treturn useMutation(async () => {\n\t\tconst promises = ChatSubscription.find(\n\t\tconst promises = ChatSubscription.find(\n\t\t\t{\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfields: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t\talert: 1,\n\t\t\t\t\trid: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).map((subscription) => {\n\t\t\tif (subscription.alert || subscription.unread > 0) {\n\t\t\t\treturn readSubscription({ rid: subscription.rid, readThreads: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "useMessageLinkClicks.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/hooks/useMessageLinkClicks.ts",
        "code": {
            "absoluteUrl": "\tconst absoluteUrl = useAbsoluteUrl();\n\tconst absoluteUrl = useAbsoluteUrl();\n\tconst { isEmbedded: embeddedLayout } = useLayout();\n\tconst { isEmbedded: embeddedLayout } = useLayout();"
        },
        "depth_rank": 10
    },
    {
        "file": "useEscapeKeyStroke.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/root/hooks/useEscapeKeyStroke.ts",
        "code": {
            "clearUnreadAllMessagesMutation": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst clearUnreadAllMessagesMutation = useClearUnreadAllMessagesMutation({\n\tconst clearUnreadAllMessagesMutation = useClearUnreadAllMessagesMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 10
    },
    {
        "file": "MeetPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/meet/MeetPage.tsx",
        "code": {
            "room": "\t\tconst room = (await sdk.rest.get('/v1/rooms.info', { roomId })) as any;\n\t\tconst room = (await sdk.rest.get('/v1/rooms.info', { roomId })) as any;"
        },
        "depth_rank": 9
    },
    {
        "file": "CallPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/meet/CallPage.tsx",
        "code": {
            "isMobileDevice": "\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId, visitorId as any);\n\t\t\tconst webrtcInstance = WebRTC.getInstanceByRoomId(roomId, visitorId as any);\n\t\t\tconst isMobileDevice = (): boolean => {\n\t\t\tconst isMobileDevice = (): boolean => {\n\t\t\t\tif (isLayoutEmbedded) {\n\t\t\t\t\tsetCallInIframe(true);\n\t\t\t\t}\n\t\t\t\tif (window.innerWidth <= 450 && window.innerHeight >= 629 && window.innerHeight <= 900) {\n\t\t\t\t\tsetIsLocalMobileDevice(true);\n\t\t\t\t\twebrtcInstance.media = {\n\t\t\t\t\t\taudio: true,\n\t\t\t\t\t\tvideo: {\n\t\t\t\t\t\t\twidth: { ideal: 440 },",
            "showCallPage": "\tconst closeWindow = (): void => {\n\tconst closeWindow = (): void => {\n\t\tif (isLayoutEmbedded) {\n\t\t\treturn (parent as any)?.handleIframeClose();\n\t\t}\n\t\treturn window.close();\n\t};\n\n\tconst getCallDuration = (callStartTime: any): any => moment.duration(moment(new Date()).diff(moment(callStartTime))).asSeconds();\n\tconst getCallDuration = (callStartTime: any): any => moment.duration(moment(new Date()).diff(moment(callStartTime))).asSeconds();\n\n\tconst showCallPage = (localAvatar: any, remoteAvatar: any): any => (\n\tconst showCallPage = (localAvatar: any, remoteAvatar: any): any => (\n\t\t<Flex.Container direction='column' justifyContent='center'>\n\t\t\t<Box width='full' minHeight='sh' alignItems='center' backgroundColor='dark' overflow='hidden' position='relative'>\n\t\t\t\t<Box\n\t\t\t\t\tposition='absolute'\n\t\t\t\t\tzIndex={1}"
        },
        "depth_rank": 9
    },
    {
        "file": "MeetRoute.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/meet/MeetRoute.tsx",
        "code": {
            "dispatchToastMessage": "const MeetRoute = () => {\nconst MeetRoute = () => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "getVisitorByToken": "\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst token = useSearchParameter('token') ?? '';\n\tconst token = useSearchParameter('token') ?? '';\n\tconst getVisitorByToken = useEndpoint('GET', '/v1/livechat/visitor/:token', { token });\n\tconst getVisitorByToken = useEndpoint('GET', '/v1/livechat/visitor/:token', { token });"
        },
        "depth_rank": 9
    },
    {
        "file": "NotAuthorizedPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/notAuthorized/NotAuthorizedPage.tsx",
        "code": {
            "t": "const NotAuthorizedPage = (): ReactElement => {\nconst NotAuthorizedPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageContent pb={24}>"
        },
        "depth_rank": 9
    },
    {
        "file": "CategoriesResult.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/CategoriesResult.tsx",
        "code": {
            "CategoriesResult": "const CategoriesResult = forwardRef<VirtuosoHandle, CategoriesResultProps>(function CategoriesResult(\nconst CategoriesResult = forwardRef<VirtuosoHandle, CategoriesResultProps>(function CategoriesResult(\n\t{ emojiListByCategory, categoriesPosition, customItemsLimit, handleLoadMore, handleSelectEmoji, handleScroll },",
            "wrapper": "\tconst wrapper = useRef<HTMLDivElement>(null);\n\tconst wrapper = useRef<HTMLDivElement>(null);\n\n\treturn (\n\t\t<Box\n\t\t\tref={wrapper}"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiPickerCategoryItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerCategoryItem.tsx",
        "code": {
            "icon": "const EmojiPickerCategoryItem = ({ category, index, active, handleGoToCategory, ...props }: EmojiPickerCategoryItemProps) => {\nconst EmojiPickerCategoryItem = ({ category, index, active, handleGoToCategory, ...props }: EmojiPickerCategoryItemProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst icon = mapCategoryIcon(category.key);\n\tconst icon = mapCategoryIcon(category.key);\n\n\treturn (\n\t\t<IconButton\n\t\t\trole='tab'\n\t\t\tpressed={active}"
        },
        "depth_rank": 10
    },
    {
        "file": "SearchingResult.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/SearchingResult.tsx",
        "code": {
            "ref": "const SearchingResult = ({ searchResults, handleSelectEmoji }: SearchingResultProps) => {\nconst SearchingResult = ({ searchResults, handleSelectEmoji }: SearchingResultProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst ref = useRef<VirtuosoGridHandle>(null);\n\tconst ref = useRef<VirtuosoGridHandle>(null);\n\n\tif (searchResults.length === 0) {\n\t\treturn <EmojiPickerNotFound>{t('No_emojis_found')}</EmojiPickerNotFound>;"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiPickerDropDown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerDropDown.tsx",
        "code": {
            "EmojiPickerDropdown": "const EmojiPickerDropdown = forwardRef(function EmojiPickerDropdown<TReferenceElement extends HTMLElement>(\nconst EmojiPickerDropdown = forwardRef(function EmojiPickerDropdown<TReferenceElement extends HTMLElement>(\n\t{ children, reference }: EmojiPickerDropdownProps<TReferenceElement>,",
            "Dropdown": "\tconst Dropdown = isMobile ? DropdownMobile : EmojiPickerDesktopDropdown;\n\tconst Dropdown = isMobile ? DropdownMobile : EmojiPickerDesktopDropdown;\n\n\treturn (\n\t\t<Dropdown ref={ref} reference={reference}>"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiElement.tsx",
        "code": {
            "EmojiElement": "const EmojiElement = ({ emoji, image, onClick, small = false, ...props }: EmojiElementProps) => {\nconst EmojiElement = ({ emoji, image, onClick, small = false, ...props }: EmojiElementProps) => {\n\tconst { handlePreview, handleRemovePreview } = usePreviewEmoji();\n\tconst { handlePreview, handleRemovePreview } = usePreviewEmoji();",
            "emojiElement": "\tconst emojiSmallClass = css`\n\tconst emojiSmallClass = css`\n\t\t> .emoji,\n\t\t.emojione {\n\t\t\twidth: 1.125rem;\n\t\t\theight: 1.125rem;\n\t\t}\n\t`;\n\n\tconst emojiElement = <div dangerouslySetInnerHTML={{ __html: image }} />;\n\tconst emojiElement = <div dangerouslySetInnerHTML={{ __html: image }} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiCategoryRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiCategoryRow.tsx",
        "code": {
            "EmojiCategoryRow": "const EmojiCategoryRow = ({\nconst EmojiCategoryRow = ({\n\tcategoryKey,\n\tcategoriesPosition,\n\ti18n,\n\temojis,\n\tcustomItemsLimit,\n\thandleLoadMore,\n\thandleSelectEmoji,\n}: EmojiCategoryRowProps) => {"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiPickerDesktopDropdown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPickerDesktopDropdown.tsx",
        "code": {
            "EmojiPickerDesktopDropdown": "const EmojiPickerDesktopDropdown = forwardRef(function ToolboxDropdownDesktop(\nconst EmojiPickerDesktopDropdown = forwardRef(function ToolboxDropdownDesktop(\n\t{ reference, children }: EmojiPickerDesktopDropdownProps,",
            "style": "\tconst targetRef = useRef<HTMLElement>(null);\n\tconst targetRef = useRef<HTMLElement>(null);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\tconst mergedRef = useMergedRefs(ref, targetRef);\n\n\tconst style = useDropdownPosition(reference, targetRef);\n\tconst style = useDropdownPosition(reference, targetRef);\n\n\treturn (\n\t\t<Tile style={style} ref={mergedRef} elevation='2' pi='0' pb='0' display='flex' flexDirection='column' overflow='auto'>"
        },
        "depth_rank": 10
    },
    {
        "file": "EmojiPicker.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/EmojiPicker.tsx",
        "code": {
            "customEmojiList": "\t\t\tconst customEmojiList = getEmojiListsByCategory().filter(({ key }) => key === 'rocket');\n\t\t\tconst customEmojiList = getEmojiListsByCategory().filter(({ key }) => key === 'rocket');",
            "handleGoToCategory": "\tconst handleGoToCategory = (categoryIndex: number) => {\n\tconst handleGoToCategory = (categoryIndex: number) => {\n\t\tsetSearching(false);\n\t\tvirtuosoRef.current?.scrollToIndex({ index: categoryIndex });",
            "handleGoToAddCustom": "\tconst handleGoToAddCustom = () => {\n\tconst handleGoToAddCustom = () => {\n\t\tcustomEmojiRoute.push();\n\t\tonClose();\n\t};\n\n\treturn (\n\t\t<EmojiPickerDropdown reference={ref as RefObject<HTMLElement>} ref={emojiContainerRef}>"
        },
        "depth_rank": 10
    },
    {
        "file": "ToneSelector.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/ToneSelector/ToneSelector.tsx",
        "code": {
            "renderOption": "const ToneSelector = ({ tone, setTone }: { tone: number; setTone: (tone: number) => void }) => {\nconst ToneSelector = ({ tone, setTone }: { tone: number; setTone: (tone: number) => void }) => {\n\tconst options = useMemo(() => {\n\tconst options = useMemo(() => {\n\t\tconst renderOption = (tone: number): ReactElement => <ToneItem tone={tone} />;\n\t\tconst renderOption = (tone: number): ReactElement => <ToneItem tone={tone} />;",
            "handleSelection": "\tconst handleSelection = useCallback(\n\tconst handleSelection = useCallback(\n\t\t([selected]) => {\n\t\t\tsetTone(selected);\n\t\t\treset();\n\t\t\thide();\n\t\t},\n\t\t[hide, reset, setTone],\n\t);\n\n\tuseEffect(() => setTone(tone), [tone, setTone]);\n\n\treturn (\n\t\t<>\n\t\t\t<IconButton\n\t\t\t\tmedium\n\t\t\t\tref={ref}"
        },
        "depth_rank": 11
    },
    {
        "file": "ToneSelectorWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/EmojiPicker/ToneSelector/ToneSelectorWrapper.tsx",
        "code": {
            "ToneSelectorWrapper": "const ToneSelectorWrapper = ({ caption, children, ...props }: { caption: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\nconst ToneSelectorWrapper = ({ caption, children, ...props }: { caption: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\n\treturn (\n\t\t<Box {...props} display='flex' alignItems='center'>"
        },
        "depth_rank": 11
    },
    {
        "file": "VideoMessageRecorder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/VideoMessageRecorder/VideoMessageRecorder.tsx",
        "code": {
            "stopVideoRecording": "\tconst chat = useChat() ?? chatContext;\n\tconst chat = useChat() ?? chatContext;\n\n\tconst stopVideoRecording = async (rid: IRoom['_id'], tmid?: IMessage['_id']) => {\n\tconst stopVideoRecording = async (rid: IRoom['_id'], tmid?: IMessage['_id']) => {\n\t\tif (recordingInterval) {\n\t\t\tclearInterval(recordingInterval);\n\t\t}\n\t\tsetRecordingInterval(null);\n\t\tVideoRecorder.stopRecording();\n\t\tUserAction.stop(rid, USER_ACTIVITIES.USER_RECORDING, { tmid });",
            "handleRecord": "\tconst handleRecord = async () => {\n\tconst handleRecord = async () => {\n\t\tif (recordingState === 'recording') {\n\t\t\tstopVideoRecording(rid, tmid);\n\t\t} else {",
            "file": "\t\t\tconst file = new File([blob], fileName, { type: VideoRecorder.getSupportedMimeTypes().split(';')[0] });\n\t\t\tconst file = new File([blob], fileName, { type: VideoRecorder.getSupportedMimeTypes().split(';')[0] });"
        },
        "depth_rank": 10
    },
    {
        "file": "AudioMessageRecorder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/composer/AudioMessageRecorder/AudioMessageRecorder.tsx",
        "code": {
            "file": "\t\tconst file = new File([blob], fileName, { type: 'audio/mpeg' });\n\t\tconst file = new File([blob], fileName, { type: 'audio/mpeg' });"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountSidebar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/AccountSidebar.tsx",
        "code": {
            "items": "const AccountSidebar: FC = () => {\nconst AccountSidebar: FC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst items = useSyncExternalStore(subscribeToAccountSidebarItems, getAccountSidebarItems);\n\tconst items = useSyncExternalStore(subscribeToAccountSidebarItems, getAccountSidebarItems);\n\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentPath": "\tconst currentPath = useCurrentRoutePath();\n\tconst currentPath = useCurrentRoutePath();\n\n\t// TODO: uplift this provider\n\treturn (\n\t\t<SettingsProvider privileged>\n\t\t\t<Sidebar>\n\t\t\t\t<Sidebar.Header onClose={sidebar.close} title={t('Account')} />"
        },
        "depth_rank": 9
    },
    {
        "file": "MyDataModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/MyDataModal.tsx",
        "code": {
            "t": "const MyDataModal: FC<MyDataModalProps> = ({ onCancel, title, text, ...props }) => {\nconst MyDataModal: FC<MyDataModalProps> = ({ onCancel, title, text, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountPreferencesPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/AccountPreferencesPage.tsx",
        "code": {
            "methods": "const AccountPreferencesPage = (): ReactElement => {\nconst AccountPreferencesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dataDownloadEnabled = useSetting('UserData_EnableDownload');\n\tconst dataDownloadEnabled = useSetting('UserData_EnableDownload');\n\tconst preferencesValues = useAccountPreferencesValues();\n\tconst preferencesValues = useAccountPreferencesValues();\n\n\tconst methods = useForm({ defaultValues: preferencesValues });\n\tconst methods = useForm({ defaultValues: preferencesValues });",
            "setPreferencesAction": "\tconst currentData = watch();\n\tconst currentData = watch();\n\n\tconst setPreferencesEndpoint = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setPreferencesEndpoint = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setPreferencesAction = useMutation({\n\tconst setPreferencesAction = useMutation({\n\t\tmutationFn: setPreferencesEndpoint,\n\t\tonSuccess: () => {\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Preferences_saved') });",
            "handleSaveData": "\tconst handleSaveData = async (formData: AccountPreferencesData) => {\n\tconst handleSaveData = async (formData: AccountPreferencesData) => {\n\t\tconst { highlights, dontAskAgainList, ...data } = getDirtyFields(formData, dirtyFields);\n\t\tconst { highlights, dontAskAgainList, ...data } = getDirtyFields(formData, dirtyFields);",
            "list": "\t\t\tconst list =\n\t\t\tconst list =\n\t\t\t\tArray.isArray(dontAskAgainList) && dontAskAgainList.length > 0\n\t\t\t\t\t? dontAskAgainList.map(([action, label]) => ({ action, label }))",
            "preferencesFormId": "\tconst preferencesFormId = useUniqueId();\n\tconst preferencesFormId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Preferences')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesUserPresenceSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesUserPresenceSection.tsx",
        "code": {
            "t": "const PreferencesUserPresenceSection = () => {\nconst PreferencesUserPresenceSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { register, control } = useFormContext();\n\tconst { register, control } = useFormContext();",
            "idleTimeLimit": "\tconst enableAutoAwayId = useUniqueId();\n\tconst enableAutoAwayId = useUniqueId();\n\tconst idleTimeLimit = useUniqueId();\n\tconst idleTimeLimit = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('User_Presence')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesMessagesSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesMessagesSection.tsx",
        "code": {
            "t": "const PreferencesMessagesSection = () => {\nconst PreferencesMessagesSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { control } = useFormContext();\n\tconst { control } = useFormContext();",
            "sendOnEnterId": "\tconst alsoSendThreadMessageToChannelOptions = useMemo(\n\tconst alsoSendThreadMessageToChannelOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['default', t('Selected_first_reply_unselected_following_replies')],\n\t\t\t['always', t('Selected_by_default')],\n\t\t\t['never', t('Unselected_by_default')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst sendOnEnterOptions = useMemo(\n\tconst sendOnEnterOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['normal', t('Enter_Normal')],\n\t\t\t['alternative', t('Enter_Alternative')],\n\t\t\t['desktop', t('Only_On_Desktop')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst unreadAlertId = useUniqueId();\n\tconst unreadAlertId = useUniqueId();\n\tconst showThreadsInMainChannelId = useUniqueId();\n\tconst showThreadsInMainChannelId = useUniqueId();\n\tconst alsoSendThreadToChannelId = useUniqueId();\n\tconst alsoSendThreadToChannelId = useUniqueId();\n\tconst useEmojisId = useUniqueId();\n\tconst useEmojisId = useUniqueId();\n\tconst convertAsciiEmojiId = useUniqueId();\n\tconst convertAsciiEmojiId = useUniqueId();\n\tconst autoImageLoadId = useUniqueId();\n\tconst autoImageLoadId = useUniqueId();\n\tconst saveMobileBandwidthId = useUniqueId();\n\tconst saveMobileBandwidthId = useUniqueId();\n\tconst collapseMediaByDefaultId = useUniqueId();\n\tconst collapseMediaByDefaultId = useUniqueId();\n\tconst hideFlexTabId = useUniqueId();\n\tconst hideFlexTabId = useUniqueId();\n\tconst displayAvatarsId = useUniqueId();\n\tconst displayAvatarsId = useUniqueId();\n\tconst sendOnEnterId = useUniqueId();\n\tconst sendOnEnterId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Messages')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesGlobalSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesGlobalSection.tsx",
        "code": {
            "userDontAskAgainList": "const PreferencesGlobalSection = () => {\nconst PreferencesGlobalSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList') || [];\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList') || [];",
            "dontAskAgainListId": "\tconst dontAskAgainListId = useUniqueId();\n\tconst dontAskAgainListId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Global')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesSoundSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesSoundSection.tsx",
        "code": {
            "customSound": "const PreferencesSoundSection = () => {\nconst PreferencesSoundSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst customSound = useCustomSound();\n\tconst customSound = useCustomSound();\n\tconst soundsList: SelectOption[] = customSound?.getList()?.map((value) => [value._id, value.name]) || [];\n\tconst soundsList: SelectOption[] = customSound?.getList()?.map((value) => [value._id, value.name]) || [];\n\tconst { control, watch } = useFormContext();\n\tconst { control, watch } = useFormContext();",
            "notificationsSoundVolumeId": "\tconst newRoomNotificationId = useUniqueId();\n\tconst newRoomNotificationId = useUniqueId();\n\tconst newMessageNotificationId = useUniqueId();\n\tconst newMessageNotificationId = useUniqueId();\n\tconst muteFocusedConversationsId = useUniqueId();\n\tconst muteFocusedConversationsId = useUniqueId();\n\tconst notificationsSoundVolumeId = useUniqueId();\n\tconst notificationsSoundVolumeId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Sound')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesLocalizationSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesLocalizationSection.tsx",
        "code": {
            "languages": "const PreferencesLocalizationSection = () => {\nconst PreferencesLocalizationSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst languages = useLanguages();\n\tconst languages = useLanguages();\n\n\tconst { control } = useFormContext();\n\tconst { control } = useFormContext();",
            "languageOptions": "\tconst languageOptions = useMemo(() => {\n\tconst languageOptions = useMemo(() => {\n\t\tconst mapOptions: SelectOption[] = languages.map(({ key, name }) => [key, name]);\n\t\tconst mapOptions: SelectOption[] = languages.map(({ key, name }) => [key, name]);",
            "languageId": "\tconst languageId = useUniqueId();\n\tconst languageId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Localization')} defaultExpanded>"
        },
        "depth_rank": 10
    },
    {
        "file": "useAccountPreferencesValues.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/useAccountPreferencesValues.ts",
        "code": {
            "userDontAskAgainList": "\tconst language = useUserPreference<string>('language') || '';\n\tconst language = useUserPreference<string>('language') || '';\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList') || [];\n\tconst userDontAskAgainList = useUserPreference<{ action: string; label: string }[]>('dontAskAgainList') || [];",
            "dontAskAgainList": "\tconst dontAskAgainList = userDontAskAgainList.map(({ action }) => action);\n\tconst dontAskAgainList = userDontAskAgainList.map(({ action }) => action);"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesNotificationsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesNotificationsSection.tsx",
        "code": {
            "onSendNotification": "const notificationOptionsLabelMap = {\nconst notificationOptionsLabelMap = {\n\tall: 'All_messages',\n\tmentions: 'Mentions',\n\tnothing: 'Nothing',\n};\n\nconst emailNotificationOptionsLabelMap = {\nconst emailNotificationOptionsLabelMap = {\n\tmentions: 'Email_Notification_Mode_All',\n\tnothing: 'Email_Notification_Mode_Disabled',\n};\n\n// TODO: Test Notification Button not working\nconst PreferencesNotificationsSection = () => {\nconst PreferencesNotificationsSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [notificationsPermission, setNotificationsPermission] = useState<NotificationPermission>();\n\tconst [notificationsPermission, setNotificationsPermission] = useState<NotificationPermission>();\n\n\tconst defaultDesktopNotifications = useSetting(\n\tconst defaultDesktopNotifications = useSetting(\n\t\t'Accounts_Default_User_Preferences_desktopNotifications',\n\t) as keyof typeof notificationOptionsLabelMap;\n\tconst defaultMobileNotifications = useSetting(\n\tconst defaultMobileNotifications = useSetting(\n\t\t'Accounts_Default_User_Preferences_pushNotifications',\n\t) as keyof typeof notificationOptionsLabelMap;\n\tconst canChangeEmailNotification = useSetting('Accounts_AllowEmailNotifications');\n\tconst canChangeEmailNotification = useSetting('Accounts_AllowEmailNotifications');\n\n\tconst loginEmailEnabled = useSetting('Device_Management_Enable_Login_Emails');\n\tconst loginEmailEnabled = useSetting('Device_Management_Enable_Login_Emails');\n\tconst allowLoginEmailPreference = useSetting('Device_Management_Allow_Login_Email_preference');\n\tconst allowLoginEmailPreference = useSetting('Device_Management_Allow_Login_Email_preference');\n\tconst showNewLoginEmailPreference = loginEmailEnabled && allowLoginEmailPreference;\n\tconst showNewLoginEmailPreference = loginEmailEnabled && allowLoginEmailPreference;\n\tconst showCalendarPreference = useSetting('Outlook_Calendar_Enabled');\n\tconst showCalendarPreference = useSetting('Outlook_Calendar_Enabled');\n\tconst showMobileRinging = useSetting('VideoConf_Mobile_Ringing');\n\tconst showMobileRinging = useSetting('VideoConf_Mobile_Ringing');\n\n\tconst userEmailNotificationMode = useUserPreference('emailNotificationMode') as keyof typeof emailNotificationOptionsLabelMap;\n\tconst userEmailNotificationMode = useUserPreference('emailNotificationMode') as keyof typeof emailNotificationOptionsLabelMap;\n\n\tuseEffect(() => setNotificationsPermission(window.Notification && Notification.permission), []);\n\n\tconst onSendNotification = useCallback(() => {\n\tconst onSendNotification = useCallback(() => {\n\t\tKonchatNotification.notify({\n\t\t\tpayload: { sender: { _id: 'rocket.cat', username: 'rocket.cat' }, rid: 'GENERAL' } as INotificationDesktop['payload'],",
            "enableMobileRingingId": "\tconst notificationRequireId = useUniqueId();\n\tconst notificationRequireId = useUniqueId();\n\tconst desktopNotificationsId = useUniqueId();\n\tconst desktopNotificationsId = useUniqueId();\n\tconst pushNotificationsId = useUniqueId();\n\tconst pushNotificationsId = useUniqueId();\n\tconst emailNotificationModeId = useUniqueId();\n\tconst emailNotificationModeId = useUniqueId();\n\tconst receiveLoginDetectionEmailId = useUniqueId();\n\tconst receiveLoginDetectionEmailId = useUniqueId();\n\tconst notifyCalendarEventsId = useUniqueId();\n\tconst notifyCalendarEventsId = useUniqueId();\n\tconst enableMobileRingingId = useUniqueId();\n\tconst enableMobileRingingId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Notifications')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesHighlightsSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesHighlightsSection.tsx",
        "code": {
            "t": "const PreferencesHighlightsSection = () => {\nconst PreferencesHighlightsSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { register } = useFormContext();\n\tconst { register } = useFormContext();",
            "highlightsId": "\tconst highlightsId = useUniqueId();\n\tconst highlightsId = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item title={t('Highlights')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesMyDataSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/preferences/PreferencesMyDataSection.tsx",
        "code": {
            "result": "const PreferencesMyDataSection = () => {\nconst PreferencesMyDataSection = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst requestDataDownload = useMethod('requestDataDownload');\n\tconst requestDataDownload = useMethod('requestDataDownload');\n\n\tconst downloadData = useCallback(\n\tconst downloadData = useCallback(\n\t\tasync (fullExport) => {\n\t\t\ttry {\n\t\t\t\tconst result = await requestDataDownload({ fullExport });\n\t\t\t\tconst result = await requestDataDownload({ fullExport });",
            "text": "\t\t\t\t\tconst text = t('UserDataDownload_RequestExisted_Text', {\n\t\t\t\t\tconst text = t('UserDataDownload_RequestExisted_Text', {\n\t\t\t\t\t\tpending_operations: result.pendingOperationsBeforeMyRequest,\n\t\t\t\t\t});\n\t\t\t\t\tsetModal(\n\t\t\t\t\t\t<MyDataModal\n\t\t\t\t\t\t\ttitle={t('UserDataDownload_Requested')}",
            "handleClickExport": "\tconst handleClickDownload = useCallback(() => downloadData(false), [downloadData]);\n\tconst handleClickDownload = useCallback(() => downloadData(false), [downloadData]);\n\tconst handleClickExport = useCallback(() => downloadData(true), [downloadData]);\n\tconst handleClickExport = useCallback(() => downloadData(true), [downloadData]);\n\n\treturn (\n\t\t<Accordion.Item title={t('My Data')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountIntegrationsPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/integrations/AccountIntegrationsPage.tsx",
        "code": {
            "t": "const getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\nconst getWebdavAccounts = (): IWebdavAccountIntegration[] => WebdavAccounts.find().fetch();\n\nconst AccountIntegrationsPage = (): ReactElement => {\nconst AccountIntegrationsPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { handleSubmit, control } = useForm();\n\tconst { handleSubmit, control } = useForm();",
            "removeWebdavAccount": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst accounts = useReactiveValue(getWebdavAccounts);\n\tconst accounts = useReactiveValue(getWebdavAccounts);\n\tconst removeWebdavAccount = useEndpoint('POST', '/v1/webdav.removeWebdavAccount');\n\tconst removeWebdavAccount = useEndpoint('POST', '/v1/webdav.removeWebdavAccount');\n\n\tconst options: SelectOption[] = useMemo(() => accounts?.map(({ _id, ...current }) => [_id, getWebdavServerName(current)]), [accounts]);\n\tconst options: SelectOption[] = useMemo(() => accounts?.map(({ _id, ...current }) => [_id, getWebdavServerName(current)]), [accounts]);",
            "handleClickRemove": "\tconst handleClickRemove = useMutableCallback(({ accountSelected }) => {\n\tconst handleClickRemove = useMutableCallback(({ accountSelected }) => {\n\t\ttry {\n\t\t\tremoveWebdavAccount({ accountId: accountSelected });"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesConversationTranscript.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/omnichannel/PreferencesConversationTranscript.tsx",
        "code": {
            "t": "const PreferencesConversationTranscript = () => {\nconst PreferencesConversationTranscript = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { register } = useFormContext();\n\tconst { register } = useFormContext();",
            "omnichannelTranscriptEmail": "\tconst omnichannelTranscriptPDF = useUniqueId();\n\tconst omnichannelTranscriptPDF = useUniqueId();\n\tconst omnichannelTranscriptEmail = useUniqueId();\n\tconst omnichannelTranscriptEmail = useUniqueId();\n\n\treturn (\n\t\t<Accordion.Item defaultExpanded title={t('Conversational_transcript')}>"
        },
        "depth_rank": 10
    },
    {
        "file": "PreferencesGeneral.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/omnichannel/PreferencesGeneral.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { register } = useFormContext();\n\tconst { register } = useFormContext();",
            "omnichannelHideAfterClosing": "\tconst omnichannelHideAfterClosing = useUniqueId();\n\tconst omnichannelHideAfterClosing = useUniqueId();\n\n\treturn (\n\t\t<FieldGroup marginBlockEnd='1.5rem' paddingInline='0.5rem'>\n\t\t\t<Field>\n\t\t\t\t<FieldRow>\n\t\t\t\t\t<FieldLabel htmlFor={omnichannelHideAfterClosing}>{t('Omnichannel_hide_conversation_after_closing')}</FieldLabel>"
        },
        "depth_rank": 10
    },
    {
        "file": "OmnichannelPreferencesPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/omnichannel/OmnichannelPreferencesPage.tsx",
        "code": {
            "methods": "const OmnichannelPreferencesPage = (): ReactElement => {\nconst OmnichannelPreferencesPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst omnichannelTranscriptPDF = useUserPreference<boolean>('omnichannelTranscriptPDF') ?? false;\n\tconst omnichannelTranscriptPDF = useUserPreference<boolean>('omnichannelTranscriptPDF') ?? false;\n\tconst omnichannelTranscriptEmail = useUserPreference<boolean>('omnichannelTranscriptEmail') ?? false;\n\tconst omnichannelTranscriptEmail = useUserPreference<boolean>('omnichannelTranscriptEmail') ?? false;\n\tconst omnichannelHideConversationAfterClosing = useUserPreference<boolean>('omnichannelHideConversationAfterClosing') ?? true;\n\tconst omnichannelHideConversationAfterClosing = useUserPreference<boolean>('omnichannelHideConversationAfterClosing') ?? true;\n\n\tconst methods = useForm({\n\tconst methods = useForm({\n\t\tdefaultValues: { omnichannelTranscriptPDF, omnichannelTranscriptEmail, omnichannelHideConversationAfterClosing },",
            "handleSave": "\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst handleSave = async (data: FormData) => {\n\tconst handleSave = async (data: FormData) => {\n\t\ttry {\n\t\t\tawait saveFn({ data });"
        },
        "depth_rank": 10
    },
    {
        "file": "TwoFactorTOTP.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/security/TwoFactorTOTP.tsx",
        "code": {
            "regenerateCodesFn": "const TwoFactorTOTP = (props: ComponentProps<typeof Box>): ReactElement => {\nconst TwoFactorTOTP = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst enableTotpFn = useMethod('2fa:enable');\n\tconst enableTotpFn = useMethod('2fa:enable');\n\tconst disableTotpFn = useMethod('2fa:disable');\n\tconst disableTotpFn = useMethod('2fa:disable');\n\tconst verifyCodeFn = useMethod('2fa:validateTempToken');\n\tconst verifyCodeFn = useMethod('2fa:validateTempToken');\n\tconst checkCodesRemainingFn = useMethod('2fa:checkCodesRemaining');\n\tconst checkCodesRemainingFn = useMethod('2fa:checkCodesRemaining');\n\tconst regenerateCodesFn = useMethod('2fa:regenerateCodes');\n\tconst regenerateCodesFn = useMethod('2fa:regenerateCodes');\n\n\tconst [registeringTotp, setRegisteringTotp] = useSafely(useState(false));\n\tconst [registeringTotp, setRegisteringTotp] = useSafely(useState(false));\n\tconst [qrCode, setQrCode] = useSafely(useState<string>());\n\tconst [qrCode, setQrCode] = useSafely(useState<string>());\n\tconst [totpSecret, setTotpSecret] = useSafely(useState<string>());\n\tconst [totpSecret, setTotpSecret] = useSafely(useState<string>());\n\tconst [codesRemaining, setCodesRemaining] = useSafely(useState(0));\n\tconst [codesRemaining, setCodesRemaining] = useSafely(useState(0));\n\n\tconst { register, handleSubmit } = useForm({ defaultValues: { authCode: '' } });\n\tconst { register, handleSubmit } = useForm({ defaultValues: { authCode: '' } });",
            "result": "\t\t\tconst result = await checkCodesRemainingFn();\n\t\t\tconst result = await checkCodesRemainingFn();\n\t\t\tsetCodesRemaining(result.remaining);\n\t\t};\n\t\tupdateCodesRemaining();\n\t}, [checkCodesRemainingFn, setCodesRemaining, totpEnabled]);\n\n\tconst handleEnableTotp = useCallback(async () => {\n\tconst handleEnableTotp = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await enableTotpFn();\n\t\t\tconst result = await enableTotpFn();\n\n\t\t\tsetTotpSecret(result.secret);\n\t\t\tsetQrCode(qrcode(result.url, { size: 200 }));"
        },
        "depth_rank": 10
    },
    {
        "file": "BackupCodesModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/security/BackupCodesModal.tsx",
        "code": {
            "codesText": "const BackupCodesModal: FC<BackupCodesModalProps> = ({ codes, onClose, ...props }) => {\nconst BackupCodesModal: FC<BackupCodesModalProps> = ({ codes, onClose, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst codesText = useMemo(() => codes.join(' '), [codes]);\n\tconst codesText = useMemo(() => codes.join(' '), [codes]);\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "EndToEnd.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/security/EndToEnd.tsx",
        "code": {
            "resetE2eKey": "const EndToEnd = (props: ComponentProps<typeof Box>): ReactElement => {\nconst EndToEnd = (props: ComponentProps<typeof Box>): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst logout = useLogout();\n\tconst logout = useLogout();\n\n\tconst publicKey = localStorage.getItem('public_key');\n\tconst publicKey = localStorage.getItem('public_key');\n\tconst privateKey = localStorage.getItem('private_key');\n\tconst privateKey = localStorage.getItem('private_key');\n\n\tconst resetE2eKey = useMethod('e2e.resetOwnE2EKey');\n\tconst resetE2eKey = useMethod('e2e.resetOwnE2EKey');\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\twatch,\n\t\tresetField,\n\t\tformState: { errors, isValid },",
            "saveNewPassword": "\tconst keysExist = Boolean(publicKey && privateKey);\n\tconst keysExist = Boolean(publicKey && privateKey);\n\n\tconst hasTypedPassword = Boolean(password?.trim().length);\n\tconst hasTypedPassword = Boolean(password?.trim().length);\n\n\tconst saveNewPassword = async (data: { password: string; passwordConfirm: string }) => {\n\tconst saveNewPassword = async (data: { password: string; passwordConfirm: string }) => {\n\t\ttry {\n\t\t\tawait e2e.changePassword(data.password);\n\t\t\tresetField('password');\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Encryption_key_saved_successfully') });",
            "result": "\tconst handleResetE2eKey = useCallback(async () => {\n\tconst handleResetE2eKey = useCallback(async () => {\n\t\ttry {\n\t\t\tconst result = await resetE2eKey();\n\t\t\tconst result = await resetE2eKey();\n\t\t\tif (result) {\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('User_e2e_key_was_reset') });"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountSecurityPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/security/AccountSecurityPage.tsx",
        "code": {
            "passwordDefaultValues": "const passwordDefaultValues = { password: '', confirmationPassword: '' };\nconst passwordDefaultValues = { password: '', confirmationPassword: '' };",
            "methods": "const AccountSecurityPage = (): ReactElement => {\nconst AccountSecurityPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst methods = useForm({\n\tconst methods = useForm({\n\t\tdefaultValues: passwordDefaultValues,\n\t\tmode: 'onBlur',\n\t});\n\tconst {\n\tconst {\n\t\treset,\n\t\tformState: { isDirty },"
        },
        "depth_rank": 10
    },
    {
        "file": "ChangePassword.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/security/ChangePassword.tsx",
        "code": {
            "passwordVerifierId": "const ChangePassword = (props: AllHTMLAttributes<HTMLFormElement>) => {\nconst ChangePassword = (props: AllHTMLAttributes<HTMLFormElement>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst passwordId = useUniqueId();\n\tconst passwordId = useUniqueId();\n\tconst confirmPasswordId = useUniqueId();\n\tconst confirmPasswordId = useUniqueId();\n\tconst passwordVerifierId = useUniqueId();\n\tconst passwordVerifierId = useUniqueId();\n\n\tconst {\n\tconst {\n\t\twatch,\n\t\tformState: { errors },",
            "passwordIsValid": "\tconst password = watch('password');\n\tconst password = watch('password');\n\tconst passwordIsValid = useValidatePassword(password);\n\tconst passwordIsValid = useValidatePassword(password);\n\tconst { allowPasswordChange } = useAllowPasswordChange();\n\tconst { allowPasswordChange } = useAllowPasswordChange();",
            "handleSave": "\tconst updatePassword = useMethod('saveUserProfile');\n\tconst updatePassword = useMethod('saveUserProfile');\n\n\tconst handleSave = async ({ password }: { password?: string }) => {\n\tconst handleSave = async ({ password }: { password?: string }) => {\n\t\ttry {\n\t\t\tawait updatePassword({ newPassword: password }, {});"
        },
        "depth_rank": 10
    },
    {
        "file": "AccessibilityPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/accessibility/AccessibilityPage.tsx",
        "code": {
            "hideRolesId": "const AccessibilityPage = () => {\nconst AccessibilityPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst preferencesValues = useAccessiblityPreferencesValues();\n\tconst preferencesValues = useAccessiblityPreferencesValues();\n\n\tconst createFontStyleElement = useCreateFontStyleElement();\n\tconst createFontStyleElement = useCreateFontStyleElement();\n\tconst displayRolesEnabled = useSetting('UI_DisplayRoles');\n\tconst displayRolesEnabled = useSetting('UI_DisplayRoles');\n\n\tconst timeFormatOptions = useMemo(\n\tconst timeFormatOptions = useMemo(\n\t\t(): SelectOption[] => [\n\t\t\t['0', t('Default')],\n\t\t\t['1', t('12_Hour')],\n\t\t\t['2', t('24_Hour')],\n\t\t],\n\t\t[t],\n\t);\n\n\tconst pageFormId = useUniqueId();\n\tconst pageFormId = useUniqueId();\n\tconst fontSizeId = useUniqueId();\n\tconst fontSizeId = useUniqueId();\n\tconst mentionsWithSymbolId = useUniqueId();\n\tconst mentionsWithSymbolId = useUniqueId();\n\tconst clockModeId = useUniqueId();\n\tconst clockModeId = useUniqueId();\n\tconst hideUsernamesId = useUniqueId();\n\tconst hideUsernamesId = useUniqueId();\n\tconst hideRolesId = useUniqueId();\n\tconst hideRolesId = useUniqueId();\n\n\tconst {\n\tconst {\n\t\tformState: { isDirty, dirtyFields, isSubmitting },",
            "setPreferencesAction": "\tconst currentData = watch();\n\tconst currentData = watch();\n\n\tconst setUserPreferencesEndpoint = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setUserPreferencesEndpoint = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst setPreferencesAction = useMutation({\n\tconst setPreferencesAction = useMutation({\n\t\tmutationFn: setUserPreferencesEndpoint,\n\t\tonSuccess: () => dispatchToastMessage({ type: 'success', message: t('Preferences_saved') }),",
            "data": "\tconst handleSaveData = (formData: AccessibilityPreferencesData) => {\n\tconst handleSaveData = (formData: AccessibilityPreferencesData) => {\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tconst data = getDirtyFields(formData, dirtyFields);\n\t\tsetPreferencesAction.mutateAsync({ data });"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountFeaturePreviewPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/featurePreview/AccountFeaturePreviewPage.tsx",
        "code": {
            "dispatchToastMessage": "const AccountFeaturePreviewPage = () => {\nconst AccountFeaturePreviewPage = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { features, unseenFeatures } = useFeaturePreviewList();\n\tconst { features, unseenFeatures } = useFeaturePreviewList();",
            "featuresPreview": "\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tuseEffect(() => {\n\t\tif (unseenFeatures) {\n\t\t\tconst featuresPreview = features.map((feature) => ({\n\t\t\tconst featuresPreview = features.map((feature) => ({\n\t\t\t\tname: feature.name,\n\t\t\t\tvalue: feature.value,\n\t\t\t}));\n\n\t\t\tvoid setUserPreferences({ data: { featuresPreview } });",
            "handleSave": "\tconst handleSave = async () => {\n\tconst handleSave = async () => {\n\t\ttry {\n\t\t\tawait setUserPreferences({ data: { featuresPreview } });",
            "updated": "\tconst handleFeatures = (e: ChangeEvent<HTMLInputElement>) => {\n\tconst handleFeatures = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tconst updated = featuresPreview.map((item) => (item.name === e.target.name ? { ...item, value: e.target.checked } : item));\n\t\tconst updated = featuresPreview.map((item) => (item.name === e.target.name ? { ...item, value: e.target.checked } : item));",
            "grouppedFeaturesPreview": "\tconst grouppedFeaturesPreview = Object.entries(\n\tconst grouppedFeaturesPreview = Object.entries(\n\t\tfeaturesPreview.reduce((result, currentValue) => {\n\t\t\t(result[currentValue.group] = result[currentValue.group] || []).push(currentValue);\n\t\t\treturn result;\n\t\t}, {} as Record<FeaturePreviewProps['group'], FeaturePreviewProps[]>),\n\t);\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Feature_preview')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountFeaturePreviewBadge.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/featurePreview/AccountFeaturePreviewBadge.tsx",
        "code": {
            "t": "const AccountFeaturePreviewBadge = () => {\nconst AccountFeaturePreviewBadge = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { unseenFeatures } = useFeaturePreviewList();\n\tconst { unseenFeatures } = useFeaturePreviewList();"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountTokensPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensPage.tsx",
        "code": {
            "t": "const AccountTokensPage = (): ReactElement => {\nconst AccountTokensPage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Personal_Access_Tokens')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountTokensTable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensTable/AccountTokensTable.tsx",
        "code": {
            "removeToken": "const AccountTokensTable = (): ReactElement => {\nconst AccountTokensTable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst userId = useUserId();\n\tconst userId = useUserId();\n\n\tconst regenerateToken = useMethod('personalAccessTokens:regenerateToken');\n\tconst regenerateToken = useMethod('personalAccessTokens:regenerateToken');\n\tconst removeToken = useMethod('personalAccessTokens:removeToken');\n\tconst removeToken = useMethod('personalAccessTokens:removeToken');\n\tconst { value: data, phase, error, reload } = useEndpointData('/v1/users.getPersonalAccessTokens');\n\tconst { value: data, phase, error, reload } = useEndpointData('/v1/users.getPersonalAccessTokens');",
            "headers": "\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\tconst closeModal = useCallback(() => setModal(null), [setModal]);\n\n\tconst headers = useMemo(\n\tconst headers = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t<GenericTableHeaderCell key='name'>{t('API_Personal_Access_Token_Name')}</GenericTableHeaderCell>,",
            "token": "\tconst handleRegenerate = useCallback(\n\tconst handleRegenerate = useCallback(\n\t\t(name) => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tsetModal(null);\n\t\t\t\t\tconst token = await regenerateToken({ tokenName: name });\n\t\t\t\t\tconst token = await regenerateToken({ tokenName: name });",
            "handleRemove": "\tconst handleRemove = useCallback(\n\tconst handleRemove = useCallback(\n\t\t(name) => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\tconst onConfirm: () => Promise<void> = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait removeToken({ tokenName: name });"
        },
        "depth_rank": 11
    },
    {
        "file": "AddToken.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/tokens/AccountTokensTable/AddToken.tsx",
        "code": {
            "token": "\tconst handleAddToken = useCallback(\n\tconst handleAddToken = useCallback(\n\t\tasync ({ name: tokenName, bypassTwoFactor }) => {\n\t\t\ttry {\n\t\t\t\tconst token = await createTokenFn({ tokenName, bypassTwoFactor: bypassTwoFactor === 'bypass' });\n\t\t\t\tconst token = await createTokenFn({ tokenName, bypassTwoFactor: bypassTwoFactor === 'bypass' });"
        },
        "depth_rank": 11
    },
    {
        "file": "AccountProfileForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/profile/AccountProfileForm.tsx",
        "code": {
            "mutateConfirmationEmail": "\tconst previousEmail = user ? getUserEmailAddress(user) : '';\n\tconst previousEmail = user ? getUserEmailAddress(user) : '';\n\tconst previousUsername = user?.username || '';\n\tconst previousUsername = user?.username || '';\n\tconst isUserVerified = user?.emails?.[0]?.verified ?? false;\n\tconst isUserVerified = user?.emails?.[0]?.verified ?? false;\n\n\tconst mutateConfirmationEmail = useMutation({\n\tconst mutateConfirmationEmail = useMutation({\n\t\tmutationFn: sendConfirmationEmail,\n\t\tonSuccess: () => dispatchToastMessage({ type: 'success', message: t('Verification_email_sent') }),",
            "emailId": "\tconst nameId = useUniqueId();\n\tconst nameId = useUniqueId();\n\tconst usernameId = useUniqueId();\n\tconst usernameId = useUniqueId();\n\tconst nicknameId = useUniqueId();\n\tconst nicknameId = useUniqueId();\n\tconst statusTextId = useUniqueId();\n\tconst statusTextId = useUniqueId();\n\tconst bioId = useUniqueId();\n\tconst bioId = useUniqueId();\n\tconst emailId = useUniqueId();\n\tconst emailId = useUniqueId();\n\n\treturn (\n\t\t<Box {...props} is='form' autoComplete='off' onSubmit={handleSubmit(handleSave)}>"
        },
        "depth_rank": 10
    },
    {
        "file": "ActionConfirmModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/profile/ActionConfirmModal.tsx",
        "code": {
            "handleSave": "\tconst handleSave = useCallback(\n\tconst handleSave = useCallback(\n\t\t(e) => {\n\t\t\te.preventDefault();\n\t\t\tif (inputText === '') {\n\t\t\t\tsetInputError(t('Invalid_field'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonConfirm(inputText);\n\t\t\tonCancel();\n\t\t},\n\t\t[inputText, onConfirm, onCancel, t],\n\t);\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={handleSave} {...props} />}"
        },
        "depth_rank": 10
    },
    {
        "file": "AccountProfilePage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/views/account/profile/AccountProfilePage.tsx",
        "code": {
            "allowDeleteOwnAccount": "const AccountProfilePage = (): ReactElement => {\nconst AccountProfilePage = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst logout = useLogout();\n\tconst logout = useLogout();\n\tconst [loggingOut, setLoggingOut] = useState(false);\n\tconst [loggingOut, setLoggingOut] = useState(false);\n\n\tconst erasureType = useSetting('Message_ErasureType');\n\tconst erasureType = useSetting('Message_ErasureType');\n\tconst allowDeleteOwnAccount = useSetting('Accounts_AllowDeleteOwnAccount');\n\tconst allowDeleteOwnAccount = useSetting('Accounts_AllowDeleteOwnAccount');\n\tconst { hasLocalPassword } = useAllowPasswordChange();\n\tconst { hasLocalPassword } = useAllowPasswordChange();",
            "methods": "\tconst methods = useForm({\n\tconst methods = useForm({\n\t\tdefaultValues: getProfileInitialValues(user),\n\t\tmode: 'onBlur',\n\t});\n\n\tconst {\n\tconst {\n\t\treset,\n\t\tformState: { isDirty, isSubmitting },",
            "handleLogoutOtherLocations": "\tconst logoutOtherClients = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\tconst logoutOtherClients = useEndpoint('POST', '/v1/users.logoutOtherClients');\n\tconst deleteOwnAccount = useEndpoint('POST', '/v1/users.deleteOwnAccount');\n\tconst deleteOwnAccount = useEndpoint('POST', '/v1/users.deleteOwnAccount');\n\n\tconst handleLogoutOtherLocations = useCallback(async () => {\n\tconst handleLogoutOtherLocations = useCallback(async () => {\n\t\tsetLoggingOut(true);\n\t\ttry {\n\t\t\tawait logoutOtherClients();\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t('Logged_out_of_other_clients_successfully'),\n\t\t\t});\n\t\t} catch (error) {",
            "handleConfirm": "\tconst handleDeleteOwnAccount = useCallback(async () => {\n\tconst handleDeleteOwnAccount = useCallback(async () => {\n\t\tconst handleConfirm = async (passwordOrUsername: string): Promise<void> => {\n\t\tconst handleConfirm = async (passwordOrUsername: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait deleteOwnAccount({ password: SHA256(passwordOrUsername) });",
            "profileFormId": "\tconst profileFormId = useUniqueId();\n\tconst profileFormId = useUniqueId();\n\n\treturn (\n\t\t<Page>\n\t\t\t<PageHeader title={t('Profile')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "ModalProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/ModalProvider.tsx",
        "code": {
            "mapCurrentModal": "const mapCurrentModal = (descriptor: typeof imperativeModal.current): ReactNode => {\nconst mapCurrentModal = (descriptor: typeof imperativeModal.current): ReactNode => {\n\tif (descriptor === null) {\n\t\treturn null;\n\t}\n\n\tif ('component' in descriptor) {\n\t\treturn (\n\t\t\t<Suspense fallback={<div />}>",
            "contextValue": "const ModalProvider = ({ children }: ModalProviderProps) => {\nconst ModalProvider = ({ children }: ModalProviderProps) => {\n\tconst [currentModal, setCurrentModal] = useState<ReactNode>(() => mapCurrentModal(imperativeModal.current));\n\tconst [currentModal, setCurrentModal] = useState<ReactNode>(() => mapCurrentModal(imperativeModal.current));\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tmodal: {\n\t\t\t\tsetModal: setCurrentModal,\n\t\t\t},\n\t\t\tcurrentModal,\n\t\t}),\n\t\t[currentModal],\n\t);\n\n\tuseEffect(\n\t\t() =>\n\t\t\timperativeModal.on('update', (descriptor) => {\n\t\t\t\tsetCurrentModal(mapCurrentModal(descriptor));\n\t\t\t}),\n\t\t[],\n\t);\n\n\treturn <ModalContext.Provider value={contextValue} children={children} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/VideoConfProvider.tsx",
        "code": {
            "contextValue": "const VideoConfContextProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst VideoConfContextProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst [outgoing, setOutgoing] = useState<VideoConfPopupPayload | undefined>();\n\tconst [outgoing, setOutgoing] = useState<VideoConfPopupPayload | undefined>();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\tconst handleOpenCall = useVideoConfOpenCall();\n\n\tuseEffect(\n\t\t() =>\n\t\t\tVideoConfManager.on('call/join', (props) => {\n\t\t\t\thandleOpenCall(props.url, props.providerName);\n\t\t\t}),\n\t\t[handleOpenCall],\n\t);\n\n\tuseEffect(() => {\n\t\tVideoConfManager.on('direct/stopped', () => setOutgoing(undefined));\n\t\tVideoConfManager.on('calling/ended', () => setOutgoing(undefined));\n\t}, []);\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\tmanager: VideoConfManager,\n\t\t\tdispatchOutgoing: (option: Omit<VideoConfPopupPayload, 'id'>): void => setOutgoing({ ...option, id: option.rid }),"
        },
        "depth_rank": 8
    },
    {
        "file": "ConnectionStatusProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/ConnectionStatusProvider.tsx",
        "code": {
            "status": "const getValue = (): ConnectionStatusContextValue => ({\nconst getValue = (): ConnectionStatusContextValue => ({\n\t...Meteor.status(),\n\treconnect: Meteor.reconnect,\n});\n\nconst ConnectionStatusProvider: FC = ({ children }) => {\nconst ConnectionStatusProvider: FC = ({ children }) => {\n\tconst status = useReactiveValue(getValue);\n\tconst status = useReactiveValue(getValue);\n\n\treturn <ConnectionStatusContext.Provider children={children} value={status} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "TooltipProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/TooltipProvider.tsx",
        "code": {
            "previousAnchor": "\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t() => ({\n\t\t\topen: (tooltip: ReactNode, anchor: HTMLElement): void => {\n\t\t\t\tconst previousAnchor = lastAnchor.current;\n\t\t\t\tconst previousAnchor = lastAnchor.current;\n\t\t\t\tsetTooltip(<TooltipComponent key={new Date().toISOString()} title={tooltip} anchor={anchor} />);",
            "dismissOnClick": "\t\tconst dismissOnClick = (): void => {\n\t\tconst dismissOnClick = (): void => {\n\t\t\tcontextValue.dismiss();\n\t\t};\n\n\t\tdocument.body.addEventListener('mouseover', handleMouseOver, {\n\t\t\tpassive: true,\n\t\t});\n\t\tdocument.body.addEventListener('click', dismissOnClick, { capture: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "AppsProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/AppsProvider.tsx",
        "code": {
            "getAppState": "const getAppState = (\nconst getAppState = (\n\tloading: boolean,\n\tapps: App[] | undefined,\n): Omit<\n\tAsyncState<{\n\t\tapps: App[];\n\t}>,\n\t'error'\n> => ({\n\tphase: loading ? AsyncStatePhase.LOADING : AsyncStatePhase.RESOLVED,\n\tvalue: { apps: apps || [] },",
            "queryClient": "\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "appIndex": "\t\t\tconst marketplaceApps: App[] = [];\n\t\t\tconst marketplaceApps: App[] = [];\n\t\t\tconst installedApps: App[] = [];\n\t\t\tconst installedApps: App[] = [];\n\t\t\tconst privateApps: App[] = [];\n\t\t\tconst privateApps: App[] = [];\n\t\t\tconst clonedData = [...(instance.data || [])];\n\t\t\tconst clonedData = [...(instance.data || [])];\n\n\t\t\tsortByName(marketplace.data || []).forEach((app) => {\n\t\t\t\tconst appIndex = clonedData.findIndex(({ id }) => id === app.id);\n\t\t\t\tconst appIndex = clonedData.findIndex(({ id }) => id === app.id);",
            "record": "\t\t\t\tconst record = {\n\t\t\t\tconst record = {\n\t\t\t\t\t...app,\n\t\t\t\t\t...(installedApp && {\n\t\t\t\t\t\tprivate: installedApp.private,\n\t\t\t\t\t\tinstalled: true,\n\t\t\t\t\t\tstatus: installedApp.status,\n\t\t\t\t\t\tversion: installedApp.version,\n\t\t\t\t\t\tlicenseValidation: installedApp.licenseValidation,\n\t\t\t\t\t\tmigrated: installedApp.migrated,\n\t\t\t\t\t}),\n\t\t\t\t\tbundledIn: app.bundledIn,\n\t\t\t\t\tmarketplaceVersion: app.version,\n\t\t\t\t};\n\n\t\t\t\tif (installedApp) {\n\t\t\t\t\tif (installedApp.private) {\n\t\t\t\t\t\tprivateApps.push(record);\n\t\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "AuthorizationProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/AuthorizationProvider.tsx",
        "code": {
            "roles": "const AuthorizationProvider: FC = ({ children }) => {\nconst AuthorizationProvider: FC = ({ children }) => {\n\tconst roles = useReactiveValue(\n\tconst roles = useReactiveValue(\n\t\tuseCallback(\n\t\t\t() =>\n\t\t\t\tRoles.find()\n\t\t\t\t\t.fetch()\n\t\t\t\t\t.reduce((ret, obj) => {\n\t\t\t\t\t\tret[obj._id] = obj;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}, {} as Record<string, IRole>),\n\t\t\t[],\n\t\t),\n\t);\n\n\tuseEffect(() => {\n\t\tcontextValue.roleStore.roles = roles;\n\t\tcontextValue.roleStore.emit('change', roles);\n\t}, [roles]);\n\n\treturn <AuthorizationContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "SessionProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/SessionProvider.tsx",
        "code": {
            "contextValue": "const contextValue = {\nconst contextValue = {\n\tquery: createReactiveSubscriptionFactory<unknown>((name) => Session.get(name)),\n\tdispatch: (name: string, value: unknown): void => {\n\t\tSession.set(name, value);\n\t},\n};\n\nconst SessionProvider: FC = ({ children }) => <SessionContext.Provider children={children} value={contextValue} />;\nconst SessionProvider: FC = ({ children }) => <SessionContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "RouterProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/RouterProvider.tsx",
        "code": {
            "getRouteParameters": "const subscribers = new Set<() => void>();\nconst subscribers = new Set<() => void>();\n\nconst listenToRouteChange = () => {\nconst listenToRouteChange = () => {\n\tFlowRouter.watchPathChange();\n\tsubscribers.forEach((onRouteChange) => onRouteChange());\n};\n\nlet computation: Tracker.Computation | undefined;\n\nqueueMicrotask(() => {\n\tcomputation = Tracker.autorun(listenToRouteChange);\n});\n\nconst subscribeToRouteChange = (onRouteChange: () => void): (() => void) => {\nconst subscribeToRouteChange = (onRouteChange: () => void): (() => void) => {\n\tsubscribers.add(onRouteChange);\n\n\tcomputation?.invalidate();\n\n\treturn () => {\n\t\tsubscribers.delete(onRouteChange);\n\n\t\tif (subscribers.size === 0) {\n\t\t\tqueueMicrotask(() => computation?.stop());\n\t\t}\n\t};\n};\n\nconst getLocationPathname = () => FlowRouter.current().path as LocationPathname;\nconst getLocationPathname = () => FlowRouter.current().path as LocationPathname;\n\nconst getLocationSearch = () => location.search as LocationSearch;\nconst getLocationSearch = () => location.search as LocationSearch;\n\nconst getRouteParameters = () => (FlowRouter.current().params ?? {}) as RouteParameters;\nconst getRouteParameters = () => (FlowRouter.current().params ?? {}) as RouteParameters;",
            "getSearchParameters": "const getSearchParameters = () => (FlowRouter.current().queryParams ?? {}) as SearchParameters;\nconst getSearchParameters = () => (FlowRouter.current().queryParams ?? {}) as SearchParameters;",
            "state": "const navigate = (\nconst navigate = (\n\ttoOrDelta: To | number,\n\toptions?: {\n\t\treplace?: boolean;\n\t},\n) => {\n\tif (typeof toOrDelta === 'number') {\n\t\thistory.go(toOrDelta);\n\t\treturn;\n\t}\n\n\tconst path = buildRoutePath(toOrDelta);\n\tconst path = buildRoutePath(toOrDelta);\n\tconst state = { path };\n\tconst state = { path };"
        },
        "depth_rank": 8
    },
    {
        "file": "SettingsProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/SettingsProvider.tsx",
        "code": {
            "subscription": "\tconst querySetting = useMemo(\n\tconst querySetting = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((_id): ISetting | undefined => {\n\t\t\t\tconst subscription = cachedCollection.collection.findOne(_id);\n\t\t\t\tconst subscription = cachedCollection.collection.findOne(_id);\n\t\t\t\treturn subscription ? { ...subscription } : undefined;",
            "querySettings": "\tconst querySettings = useMemo(\n\tconst querySettings = useMemo(\n\t\t() =>\n\t\t\tcreateReactiveSubscriptionFactory((query = {}) =>",
            "contextValue": "\tconst settingsChangeCallback = (changes: { _id: string }[]): void => {\n\tconst settingsChangeCallback = (changes: { _id: string }[]): void => {\n\t\tchanges.forEach((val) => {\n\t\t\tswitch (val._id) {\n\t\t\t\tcase 'Enterprise_License':\n\t\t\t\t\tqueryClient.invalidateQueries(['licenses']);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t};\n\n\tconst saveSettings = useMethod('saveSettings');\n\tconst saveSettings = useMethod('saveSettings');\n\tconst dispatch = useCallback(\n\tconst dispatch = useCallback(\n\t\tasync (changes) => {\n\t\t\tsettingsChangeCallback(changes);\n\t\t\tawait saveSettings(changes);\n\t\t},\n\t\t[saveSettings],\n\t);\n\n\tconst contextValue = useMemo<SettingsContextValue>(\n\tconst contextValue = useMemo<SettingsContextValue>(\n\t\t() => ({\n\t\t\thasPrivateAccess,\n\t\t\tisLoading,\n\t\t\tquerySetting,\n\t\t\tquerySettings,\n\t\t\tdispatch,\n\t\t}),\n\t\t[hasPrivateAccess, isLoading, querySetting, querySettings, dispatch],\n\t);\n\n\treturn <SettingsContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "OmnichannelProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/OmnichannelProvider.tsx",
        "code": {
            "routeConfig": "\t\tconst update = async (): Promise<void> => {\n\t\tconst update = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tconst routeConfig = await getRoutingConfig();\n\t\t\t\tconst routeConfig = await getRoutingConfig();\n\t\t\t\tsetRouteConfig(routeConfig);\n\t\t\t} catch (error) {"
        },
        "depth_rank": 8
    },
    {
        "file": "ServerProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/ServerProvider.tsx",
        "code": {
            "callEndpoint": "const absoluteUrl = (path: string): string => Meteor.absoluteUrl(path);\nconst absoluteUrl = (path: string): string => Meteor.absoluteUrl(path);\n\nconst callMethod = <MethodName extends ServerMethodName>(\nconst callMethod = <MethodName extends ServerMethodName>(\n\tmethodName: MethodName,\n\t...args: ServerMethodParameters<MethodName>\n): Promise<ServerMethodReturn<MethodName>> => Meteor.callAsync(methodName, ...args);\n\nconst callEndpoint = <TMethod extends Method, TPathPattern extends PathPattern>({\nconst callEndpoint = <TMethod extends Method, TPathPattern extends PathPattern>({\n\tmethod,\n\tpathPattern,\n\tkeys,\n\tparams,\n}: {",
            "compiledPath": "\tconst compiledPath = compile(pathPattern, { encode: encodeURIComponent })(keys) as any;\n\tconst compiledPath = compile(pathPattern, { encode: encodeURIComponent })(keys) as any;",
            "contextValue": "const uploadToEndpoint = (endpoint: PathFor<'POST'>, formData: any): Promise<UploadResult> => sdk.rest.post(endpoint as any, formData);\nconst uploadToEndpoint = (endpoint: PathFor<'POST'>, formData: any): Promise<UploadResult> => sdk.rest.post(endpoint as any, formData);\n\nconst getStream =\nconst getStream =\n\t<N extends StreamNames>(\n\t\tstreamName: N,\n\t\t_options?: {\n\t\t\tretransmit?: boolean | undefined;\n\t\t\tretransmitToSelf?: boolean | undefined;\n\t\t},\n\t) =>\n\t<K extends StreamKeys<N>>(eventName: K, callback: (...args: StreamerCallbackArgs<N, K>) => void): (() => void) =>\n\t\tsdk.stream(streamName, [eventName], callback).stop;\n\nconst contextValue = {\nconst contextValue = {\n\tinfo,\n\tabsoluteUrl,\n\tcallMethod,\n\tcallEndpoint,\n\tuploadToEndpoint,\n\tgetStream,\n};\n\nconst ServerProvider: FC = ({ children }) => <ServerContext.Provider children={children} value={contextValue} />;\nconst ServerProvider: FC = ({ children }) => <ServerContext.Provider children={children} value={contextValue} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "ToastMessagesProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/ToastMessagesProvider.tsx",
        "code": {
            "dispatchToastBar": "const contextValue = {\nconst contextValue = {\n\tdispatch: dispatchToastMessage,\n};\n\nconst ToastMessageInnerProvider: FC = ({ children }) => {\nconst ToastMessageInnerProvider: FC = ({ children }) => {\n\tconst dispatchToastBar = useToastBarDispatch();\n\tconst dispatchToastBar = useToastBarDispatch();\n\n\tuseEffect(\n\t\t() =>\n\t\t\tsubscribeToToastMessages(({ type, message, title = '' }) => {\n\t\t\t\tif (type === 'error' && typeof message === 'object') {\n\t\t\t\t\tdispatchToastBar({ type, message: getErrorMessage(message) });"
        },
        "depth_rank": 8
    },
    {
        "file": "TranslationProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/TranslationProvider.tsx",
        "code": {
            "lang": "\tconst [language] = useLocalStorage('userLanguage', suggestedLanguage);\n\tconst [language] = useLocalStorage('userLanguage', suggestedLanguage);\n\n\tdocument.documentElement.classList[isRTLScriptLanguage(language) ? 'add' : 'remove']('rtl');\n\tdocument.documentElement.setAttribute('dir', isRTLScriptLanguage(language) ? 'rtl' : 'ltr');\n\tdocument.documentElement.lang = language;\n\n\t// if user has no language set, we should set it to the default language\n\treturn language || suggestedLanguage;\n};\n\nconst getLanguageName = (code: string, lng: string): string => {\nconst getLanguageName = (code: string, lng: string): string => {\n\ttry {\n\t\tconst lang = new Intl.DisplayNames([lng], { type: 'language' });\n\t\tconst lang = new Intl.DisplayNames([lng], { type: 'language' });",
            "cb": "\t\tconst cb = () => {\n\t\tconst cb = () => {\n\t\t\tAppClientOrchestratorInstance.getAppClientManager().initialize();\n\t\t\tAppClientOrchestratorInstance.load();\n\t\t};\n\t\tCachedCollectionManager.onLogin(cb);\n\t\treturn () => CachedCollectionManager.off('login', cb);\n\t}, []);\n\n\treturn (\n\t\t<I18nextProvider i18n={i18nextInstance}>",
            "TranslationProviderInner": "const TranslationProviderInner = ({\nconst TranslationProviderInner = ({\n\tchildren,\n\tavailableLanguages,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "UserPresenceProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/UserPresenceProvider.tsx",
        "code": {
            "get": "const UserPresenceProvider = ({ children }: UserPresenceProviderProps): ReactElement => {\nconst UserPresenceProvider = ({ children }: UserPresenceProviderProps): ReactElement => {\n\tconst usePresenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\tconst usePresenceDisabled = useSetting<boolean>('Presence_broadcast_disabled');\n\n\tuseEffect(() => {\n\t\tPresence.setStatus(usePresenceDisabled ? 'disabled' : 'enabled');\n\t}, [usePresenceDisabled]);\n\n\treturn (\n\t\t<UserPresenceContext.Provider\n\t\t\tvalue={useMemo(\n\t\t\t\t() => ({\n\t\t\t\t\tqueryUserData: (uid) => {\n\t\t\t\t\t\tconst subscribe = (callback: () => void) => {\n\t\t\t\t\t\tconst subscribe = (callback: () => void) => {\n\t\t\t\t\t\t\tPresence.listen(uid, callback);\n\n\t\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\t\tPresence.stop(uid, callback);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst get = () => Presence.store.get(uid);\n\t\t\t\t\t\tconst get = () => Presence.store.get(uid);\n\n\t\t\t\t\t\treturn { subscribe, get };"
        },
        "depth_rank": 8
    },
    {
        "file": "ActionManagerProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/ActionManagerProvider.tsx",
        "code": {
            "actionManager": "const ActionManagerProvider = ({ children }: ActionManagerProviderProps): ReactElement => {\nconst ActionManagerProvider = ({ children }: ActionManagerProviderProps): ReactElement => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst actionManager = useInstance(() => [new ActionManager(router)], [router]);\n\tconst actionManager = useInstance(() => [new ActionManager(router)], [router]);\n\tuseTranslationsForApps();\n\tuseAppActionButtons();\n\tuseAppSlashCommands();\n\tuseAppUiKitInteraction(actionManager.handleServerInteraction.bind(actionManager));\n\n\treturn <ActionManagerContext.Provider value={actionManager}>{children}</ActionManagerContext.Provider>;"
        },
        "depth_rank": 8
    },
    {
        "file": "AuthenticationProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/AuthenticationProvider/AuthenticationProvider.tsx",
        "code": {
            "contextValue": "const AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\n\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\n\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\n\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof AuthenticationContext> => ({\n\t\t\tloginWithToken: (token: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) =>\n\t\t\t\t\tMeteor.loginWithToken(token, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>",
            "clientConfig": "\t\t\t\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\n\t\t\t\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/EmojiPickerProvider/EmojiPickerProvider.tsx",
        "code": {
            "EmojiPickerProvider": "const DEFAULT_ITEMS_LIMIT = 90;\nconst DEFAULT_ITEMS_LIMIT = 90;\n\nconst EmojiPickerProvider = ({ children }: { children: ReactNode }): ReactElement => {\nconst EmojiPickerProvider = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst [emojiPicker, setEmojiPicker] = useState<ReactElement | null>(null);\n\tconst [emojiPicker, setEmojiPicker] = useState<ReactElement | null>(null);\n\tconst [emojiToPreview, setEmojiToPreview] = useDebouncedState<{ emoji: string; name: string } | null>(null, 100);\n\tconst [emojiToPreview, setEmojiToPreview] = useDebouncedState<{ emoji: string; name: string } | null>(null, 100);",
            "open": "\tconst open = useCallback((ref: Element, callback: (emoji: string) => void) => {\n\tconst open = useCallback((ref: Element, callback: (emoji: string) => void) => {\n\t\treturn setEmojiPicker(<EmojiPicker reference={ref} onClose={() => setEmojiPicker(null)} onPickEmoji={(emoji) => callback(emoji)} />);",
            "handlePreview": "\tconst handlePreview = useCallback((emoji: string, name: string) => setEmojiToPreview({ emoji, name }), [setEmojiToPreview]);\n\tconst handlePreview = useCallback((emoji: string, name: string) => setEmojiToPreview({ emoji, name }), [setEmojiToPreview]);"
        },
        "depth_rank": 9
    },
    {
        "file": "DeviceProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/DeviceProvider/DeviceProvider.tsx",
        "code": {
            "setMediaDevices": "\t\tconst setMediaDevices = (): void => {\n\t\tconst setMediaDevices = (): void => {\n\t\t\tnavigator.mediaDevices?.enumerateDevices().then((devices) => {\n\t\t\t\tconst audioInput: Device[] = [];\n\t\t\t\tconst audioInput: Device[] = [];\n\t\t\t\tconst audioOutput: Device[] = [];\n\t\t\t\tconst audioOutput: Device[] = [];\n\t\t\t\tdevices.forEach((device) => {\n\t\t\t\t\tconst mediaDevice: Device = {\n\t\t\t\t\tconst mediaDevice: Device = {\n\t\t\t\t\t\tid: device.deviceId,\n\t\t\t\t\t\tlabel: device.label,\n\t\t\t\t\t\ttype: device.kind,\n\t\t\t\t\t};\n\t\t\t\t\tif (device.kind === 'audioinput') {\n\t\t\t\t\t\taudioInput.push(mediaDevice);\n\t\t\t\t\t} else if (device.kind === 'audiooutput') {"
        },
        "depth_rank": 9
    },
    {
        "file": "CallProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/CallProvider/CallProvider.tsx",
        "code": {
            "remoteAudioMediaRef": "\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\tconst dispatchEvent = useEndpoint('POST', '/v1/voip/events');\n\tconst visitorEndpoint = useEndpoint('POST', '/v1/livechat/visitor');\n\tconst visitorEndpoint = useEndpoint('POST', '/v1/livechat/visitor');\n\tconst voipEndpoint = useEndpoint('GET', '/v1/voip/room');\n\tconst voipEndpoint = useEndpoint('GET', '/v1/voip/room');\n\tconst voipCloseRoomEndpoint = useEndpoint('POST', '/v1/voip/room.close');\n\tconst voipCloseRoomEndpoint = useEndpoint('POST', '/v1/voip/room.close');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst result = useVoipClient();\n\tconst result = useVoipClient();\n\tconst user = useUser();\n\tconst user = useUser();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst setOutputMediaDevice = useSetOutputMediaDevice();\n\tconst setOutputMediaDevice = useSetOutputMediaDevice();\n\tconst setInputMediaDevice = useSetInputMediaDevice();\n\tconst setInputMediaDevice = useSetInputMediaDevice();\n\n\tconst hasVoIPEnterpriseLicense = useIsVoipEnterprise();\n\tconst hasVoIPEnterpriseLicense = useIsVoipEnterprise();\n\n\tconst remoteAudioMediaRef = useRef<IExperimentalHTMLAudioElement>(null); // TODO: Create a dedicated file for the AUDIO and make the controls accessible\n\tconst remoteAudioMediaRef = useRef<IExperimentalHTMLAudioElement>(null); // TODO: Create a dedicated file for the AUDIO and make the controls accessible\n\n\tconst [queueCounter, setQueueCounter] = useState(0);\n\tconst [queueCounter, setQueueCounter] = useState(0);\n\tconst [queueName, setQueueName] = useState('');\n\tconst [queueName, setQueueName] = useState('');\n\tconst [roomInfo, setRoomInfo] = useState<{ v: { token?: string }; rid: string }>({ v: {}, rid: '' });\n\tconst [roomInfo, setRoomInfo] = useState<{ v: { token?: string }; rid: string }>({ v: {}, rid: '' });",
            "closeRoom": "\tconst voipSounds = useVoipSounds();\n\tconst voipSounds = useVoipSounds();\n\n\tconst closeRoom = useCallback(\n\tconst closeRoom = useCallback(\n\t\tasync (data = {}): Promise<void> => {\n\t\t\troomInfo &&\n\t\t\t\t(await voipCloseRoomEndpoint({\n\t\t\t\t\trid: roomInfo.rid,\n\t\t\t\t\ttoken: roomInfo.v.token || '',\n\t\t\t\t\toptions: { comment: data?.comment, tags: data?.tags },",
            "openWrapUpModal": "\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\tif (queueAggregator) {\n\t\t\t\tqueueAggregator.callEnded();\n\t\t\t}\n\t\t},\n\t\t[router, result?.voipClient, roomInfo, voipCloseRoomEndpoint],\n\t);\n\n\tconst openWrapUpModal = useCallback((): void => {\n\tconst openWrapUpModal = useCallback((): void => {\n\t\tsetModal(() => <WrapUpCallModal closeRoom={closeRoom} />);",
            "changeAudioOutputDevice": "\tconst changeAudioOutputDevice = useMutableCallback((selectedAudioDevice: Device): void => {\n\tconst changeAudioOutputDevice = useMutableCallback((selectedAudioDevice: Device): void => {\n\t\tremoteAudioMediaRef?.current &&\n\t\t\tsetOutputMediaDevice({ outputDevice: selectedAudioDevice, HTMLAudioElement: remoteAudioMediaRef.current });",
            "constraints": "\t\tconst constraints = { audio: { deviceId: { exact: selectedAudioDevice.id } } };\n\t\tconst constraints = { audio: { deviceId: { exact: selectedAudioDevice.id } } };",
            "openRoom": "\tconst openRoom = useCallback((rid: IVoipRoom['_id']): void => {\n\tconst openRoom = useCallback((rid: IVoipRoom['_id']): void => {\n\t\troomCoordinator.openRouteLink('v', { rid });",
            "phone": "\tconst findOrCreateVisitor = useCallback(\n\tconst findOrCreateVisitor = useCallback(\n\t\tasync (caller: ICallerInfo): Promise<Serialized<ILivechatVisitor>> => {\n\t\t\tconst phone = parseOutboundPhoneNumber(caller.callerId);\n\t\t\tconst phone = parseOutboundPhoneNumber(caller.callerId);\n\n\t\t\tconst { contact } = await getContactBy({ phone });\n\t\t\tconst { contact } = await getContactBy({ phone });",
            "voipRoom": "\t\t\t\tconst visitor = await findOrCreateVisitor(caller);\n\t\t\t\tconst visitor = await findOrCreateVisitor(caller);\n\t\t\t\tconst voipRoom = await voipEndpoint({ token: visitor.token, agentId: user._id, direction });\n\t\t\t\tconst voipRoom = await voipEndpoint({ token: visitor.token, agentId: user._id, direction });",
            "queueAggregator": "\t\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\t\tconst queueAggregator = result.voipClient?.getAggregator();\n\t\t\t\tif (queueAggregator) {\n\t\t\t\t\tqueueAggregator.callStarted();\n\t\t\t\t}\n\t\t\t\treturn voipRoom.room._id;\n\t\t\t} catch (error) {",
            "handleEventReceived": "\t\tconst handleEventReceived = async (event: VoipEventDataSignature): Promise<void> => {\n\t\tconst handleEventReceived = async (event: VoipEventDataSignature): Promise<void> => {\n\t\t\tif (isVoipEventAgentCalled(event)) {\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst { data } = event;",
            "onCallFailed": "\t\tconst onCallFailed = (reason: 'Not Found' | 'Address Incomplete' | 'Request Terminated' | string): void => {\n\t\tconst onCallFailed = (reason: 'Not Found' | 'Address Incomplete' | 'Request Terminated' | string): void => {\n\t\t\tswitch (reason) {\n\t\t\t\tcase 'Not Found':\n\t\t\t\t\t// This happens when the call matches dialplan and goes to the world, but the trunk doesnt find the number.\n\t\t\t\t\topenDialModal({ errorMessage: t('Dialed_number_doesnt_exist') });"
        },
        "depth_rank": 9
    },
    {
        "file": "UserProvider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/UserProvider/UserProvider.tsx",
        "code": {
            "contextValue": "const UserProvider = ({ children }: UserProviderProps): ReactElement => {\nconst UserProvider = ({ children }: UserProviderProps): ReactElement => {\n\tconst userId = useReactiveValue(getUserId);\n\tconst userId = useReactiveValue(getUserId);\n\tconst user = useReactiveValue(getUser);\n\tconst user = useReactiveValue(getUser);\n\tconst [userLanguage, setUserLanguage] = useLocalStorage('userLanguage', '');\n\tconst [userLanguage, setUserLanguage] = useLocalStorage('userLanguage', '');\n\tconst [preferedLanguage, setPreferedLanguage] = useLocalStorage('preferedLanguage', '');\n\tconst [preferedLanguage, setPreferedLanguage] = useLocalStorage('preferedLanguage', '');\n\n\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst createFontStyleElement = useCreateFontStyleElement();\n\tconst createFontStyleElement = useCreateFontStyleElement();\n\tcreateFontStyleElement(user?.settings?.preferences?.fontSize);\n\n\tuseEmailVerificationWarning(user ?? undefined);\n\tuseClearRemovedRoomsHistory(userId);\n\n\tuseDeleteUser();\n\tuseUpdateAvatar();\n\n\tconst contextValue = useMemo(\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof UserContext> => ({\n\t\t\tuserId,\n\t\t\tuser,\n\t\t\tqueryPreference: createReactiveSubscriptionFactory(\n\t\t\t\t<T,>(key: string, defaultValue?: T) => getUserPreference(userId, key, defaultValue) as T,\n\t\t\t),\n\t\t\tquerySubscription: createReactiveSubscriptionFactory<ISubscription | undefined>((query, fields, sort) =>\n\t\t\t\tSubscriptions.findOne(query, { fields, sort }),"
        },
        "depth_rank": 9
    },
    {
        "file": "useEmailVerificationWarning.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/providers/UserProvider/hooks/useEmailVerificationWarning.tsx",
        "code": {
            "dispatchToastMessage": "\tconst emailVerificationEnabled = useSetting<boolean>('Accounts_EmailVerification') === true;\n\tconst emailVerificationEnabled = useSetting<boolean>('Accounts_EmailVerification') === true;\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "warnedRef": "\tconst mainEmail = user?.emails?.[0];\n\tconst mainEmail = user?.emails?.[0];\n\tconst warnedRef = useRef(false);\n\tconst warnedRef = useRef(false);\n\n\tuseEffect(() => {\n\t\tconst { current: warned } = warnedRef;\n\t\tconst { current: warned } = warnedRef;"
        },
        "depth_rank": 10
    },
    {
        "file": "AutoCompleteAgentWithoutExtension.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/AutoCompleteAgentWithoutExtension.tsx",
        "code": {
            "debouncedAgentsFilter": "\tconst [agentsFilter, setAgentsFilter] = useState<string | number | undefined>('');\n\tconst [agentsFilter, setAgentsFilter] = useState<string | number | undefined>('');\n\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter as string, 500);\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter as string, 500);\n\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAvailableAgentsList(\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAvailableAgentsList("
        },
        "depth_rank": 8
    },
    {
        "file": "ActionManagerBusyState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/ActionManagerBusyState.tsx",
        "code": {
            "handleBusyStateChange": "\t\tconst handleBusyStateChange = ({ busy }: { busy: boolean }) => setBusy(busy);\n\t\tconst handleBusyStateChange = ({ busy }: { busy: boolean }) => setBusy(busy);"
        },
        "depth_rank": 8
    },
    {
        "file": "FingerprintChangeModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/FingerprintChangeModal.tsx",
        "code": {
            "t": "const FingerprintChangeModal = ({ onConfirm, onCancel, onClose }: FingerprintChangeModalProps): ReactElement => {\nconst FingerprintChangeModal = ({ onConfirm, onCancel, onClose }: FingerprintChangeModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={t('Unique_ID_change_detected')}"
        },
        "depth_rank": 8
    },
    {
        "file": "UserStatusMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserStatusMenu.tsx",
        "code": {
            "renderOption": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [status, setStatus] = useState(initialStatus);\n\tconst [status, setStatus] = useState(initialStatus);\n\tconst allowInvisibleStatus = useSetting('Accounts_AllowInvisibleStatusOption') as boolean;\n\tconst allowInvisibleStatus = useSetting('Accounts_AllowInvisibleStatusOption') as boolean;\n\n\tconst options = useMemo(() => {\n\tconst options = useMemo(() => {\n\t\tconst renderOption = (status: UserStatusType, label: string): ReactElement => (\n\t\tconst renderOption = (status: UserStatusType, label: string): ReactElement => (\n\t\t\t<Box display='flex' flexDirection='row' alignItems='center'>\n\t\t\t\t<Box marginInlineEnd={8}>",
            "handleSelection": "\tconst handleSelection = useCallback(\n\tconst handleSelection = useCallback(\n\t\t([selected]) => {\n\t\t\tsetStatus(selected);\n\t\t\treset();\n\t\t\thide();\n\t\t},\n\t\t[hide, reset],\n\t);\n\n\tuseEffect(() => onChange(status), [status, onChange]);\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tref={ref}"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoCompleteDepartment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/AutoCompleteDepartment.tsx",
        "code": {
            "AutoCompleteDepartment": "const AutoCompleteDepartment = ({\nconst AutoCompleteDepartment = ({\n\tvalue,\n\texcludeDepartmentId,\n\tonlyMyDepartments,\n\tonChange,\n\thaveAll,\n\thaveNone,\n\tshowArchived = false,\n\t...props\n}: AutoCompleteDepartmentProps): ReactElement | null => {",
            "debouncedDepartmentsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string>('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string>('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 8
    },
    {
        "file": "RawText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RawText.tsx",
        "code": {
            "RawText": "const RawText = ({ children }: { children: string }): ReactElement => <span dangerouslySetInnerHTML={{ __html: children }} />;\nconst RawText = ({ children }: { children: string }): ReactElement => <span dangerouslySetInnerHTML={{ __html: children }} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "FingerprintChangeModalConfirmation.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/FingerprintChangeModalConfirmation.tsx",
        "code": {
            "FingerprintChangeModalConfirmation": "const FingerprintChangeModalConfirmation = ({\nconst FingerprintChangeModalConfirmation = ({\n\tonConfirm,\n\tonCancel,\n\tnewWorkspace,\n}: FingerprintChangeModalConfirmationProps): ReactElement => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<GenericModal\n\t\t\tvariant='warning'\n\t\t\ttitle={newWorkspace ? t('Confirm_new_workspace') : t('Confirm_configuration_update')}"
        },
        "depth_rank": 8
    },
    {
        "file": "GazzodownText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GazzodownText.tsx",
        "code": {
            "alternatives": "\t\tconst alternatives = highlights.map(({ highlight }) => escapeRegExp(highlight)).join('|');\n\t\tconst alternatives = highlights.map(({ highlight }) => escapeRegExp(highlight)).join('|');",
            "filterTeam": "\t\t\tconst filterTeam = ({ name, type }: UserMention) => type === 'team' && name === mention;\n\t\t\tconst filterTeam = ({ name, type }: UserMention) => type === 'team' && name === mention;",
            "goToRoom": "\tconst goToRoom = useGoToRoom();\n\tconst goToRoom = useGoToRoom();\n\n\tconst { isEmbedded, isMobile } = useLayout();\n\tconst { isEmbedded, isMobile } = useLayout();",
            "resolveChannelMention": "\tconst resolveChannelMention = useCallback((mention: string) => channels?.find(({ name }) => name === mention), [channels]);\n\tconst resolveChannelMention = useCallback((mention: string) => channels?.find(({ name }) => name === mention), [channels]);",
            "onChannelMentionClick": "\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst onChannelMentionClick = useCallback(\n\tconst onChannelMentionClick = useCallback(\n\t\t({ _id: rid }: ChannelMention) =>"
        },
        "depth_rank": 8
    },
    {
        "file": "WarningModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/WarningModal.tsx",
        "code": {
            "t": "const WarningModal = ({ text, confirmText, close, cancel, cancelText, confirm, ...props }: WarningModalProps): ReactElement => {\nconst WarningModal = ({ text, confirmText, close, cancel, cancelText, confirm, ...props }: WarningModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 8
    },
    {
        "file": "UrlChangeModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UrlChangeModal.tsx",
        "code": {
            "t": "const UrlChangeModal = ({ onConfirm, siteUrl, currentUrl, onClose }: UrlChangeModalProps): ReactElement => {\nconst UrlChangeModal = ({ onConfirm, siteUrl, currentUrl, onClose }: UrlChangeModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<GenericModal variant='warning' title={t('Warning')} onConfirm={onConfirm} onClose={onClose} onCancel={onClose} confirmText={t('Yes')}>"
        },
        "depth_rank": 8
    },
    {
        "file": "Emoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Emoji.tsx",
        "code": {
            "EmojiComponent": "const EmojiComponent = styled('span', ({ fillContainer: _fillContainer, ...props }: { fillContainer?: boolean }) => props)`\nconst EmojiComponent = styled('span', ({ fillContainer: _fillContainer, ...props }: { fillContainer?: boolean }) => props)`",
            "Emoji": "function Emoji({ emojiHandle, className = undefined, fillContainer }: EmojiProps): ReactElement {\nfunction Emoji({ emojiHandle, className = undefined, fillContainer }: EmojiProps): ReactElement {\n\tconst { className: emojiClassName, image, ...props } = getEmojiClassNameAndDataTitle(emojiHandle);\n\tconst { className: emojiClassName, image, ...props } = getEmojiClassNameAndDataTitle(emojiHandle);"
        },
        "depth_rank": 8
    },
    {
        "file": "UTCClock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UTCClock.tsx",
        "code": {
            "time": "const UTCClock = ({ utcOffset }: UTCClockProps): ReactElement => {\nconst UTCClock = ({ utcOffset }: UTCClockProps): ReactElement => {\n\tconst time = useUTCClock(utcOffset);\n\tconst time = useUTCClock(utcOffset);\n\n\treturn <>{time}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoCompleteDepartmentMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/AutoCompleteDepartmentMultiple.tsx",
        "code": {
            "AutoCompleteDepartmentMultiple": "const AutoCompleteDepartmentMultiple = ({\nconst AutoCompleteDepartmentMultiple = ({\n\tvalue = [],\n\tonlyMyDepartments = false,\n\tshowArchived = false,\n\tenabled = false,\n\tonChange = () => undefined,\n}: AutoCompleteDepartmentMultipleProps) => {",
            "debouncedDepartmentsFilter": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState('');\n\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList("
        },
        "depth_rank": 8
    },
    {
        "file": "TextCopy.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/TextCopy.tsx",
        "code": {
            "t": "const TextCopy = ({ text, wrapper = defaultWrapperRenderer, ...props }: TextCopyProps): ReactElement => {\nconst TextCopy = ({ text, wrapper = defaultWrapperRenderer, ...props }: TextCopyProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { copy } = useClipboardWithToast(text);\n\tconst { copy } = useClipboardWithToast(text);"
        },
        "depth_rank": 8
    },
    {
        "file": "AutoCompleteAgent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/AutoCompleteAgent.tsx",
        "code": {
            "AutoCompleteAgent": "const AutoCompleteAgent = ({\nconst AutoCompleteAgent = ({\n\tvalue,\n\terror,\n\tplaceholder,\n\thaveAll = false,\n\thaveNoAgentsSelectedOption = false,\n\texcludeId,\n\tshowIdleAgents = true,\n\tonlyAvailable = false,\n\twithTitle = false,\n\tonChange,\n}: AutoCompleteAgentProps): ReactElement => {",
            "debouncedAgentsFilter": "\tconst [agentsFilter, setAgentsFilter] = useState<string>('');\n\tconst [agentsFilter, setAgentsFilter] = useState<string>('');\n\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter, 500);\n\tconst debouncedAgentsFilter = useDebouncedValue(agentsFilter, 500);\n\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAgentsList(\n\tconst { itemsList: AgentsList, loadMoreItems: loadMoreAgents } = useAgentsList("
        },
        "depth_rank": 8
    },
    {
        "file": "LocalTime.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/LocalTime.tsx",
        "code": {
            "t": "const LocalTime = ({ utcOffset }: LocalTimeProps): ReactElement => {\nconst LocalTime = ({ utcOffset }: LocalTimeProps): ReactElement => {\n\tconst time = useUTCClock(utcOffset);\n\tconst time = useUTCClock(utcOffset);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn <>{t('Local_Time_time', { time })}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "FilterByText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/FilterByText.tsx",
        "code": {
            "handleInputChange": "const isFilterByTextPropsWithButton = (props: any): props is FilterByTextPropsWithButton =>\nconst isFilterByTextPropsWithButton = (props: any): props is FilterByTextPropsWithButton =>\n\t'displayButton' in props && props.displayButton === true;\n\nconst FilterByText = ({ placeholder, onChange: setFilter, inputRef, children, autoFocus, ...props }: FilterByTextProps): ReactElement => {\nconst FilterByText = ({ placeholder, onChange: setFilter, inputRef, children, autoFocus, ...props }: FilterByTextProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n\tconst handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetText(event.currentTarget.value);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetFilter({ text });"
        },
        "depth_rank": 8
    },
    {
        "file": "PlanTag.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/PlanTag.tsx",
        "code": {
            "tags": "const developmentTag = process.env.NODE_ENV === 'development' ? 'Development' : null;\nconst developmentTag = process.env.NODE_ENV === 'development' ? 'Development' : null;\nfunction PlanTag() {\nfunction PlanTag() {\n\tconst license = useLicense();\n\tconst license = useLicense();\n\n\tconst tags = [\n\tconst tags = [\n\t\tdevelopmentTag && { name: developmentTag },"
        },
        "depth_rank": 8
    },
    {
        "file": "ScrollableContentWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/ScrollableContentWrapper.tsx",
        "code": {
            "ScrollableContentWrapper": "const ScrollableContentWrapper = forwardRef<HTMLElement, CustomScrollbarsProps>(function ScrollableContentWrapper(\nconst ScrollableContentWrapper = forwardRef<HTMLElement, CustomScrollbarsProps>(function ScrollableContentWrapper(\n\t{ children, style, onScroll, overflowX, renderView, ...props },",
            "scrollbarsStyle": "\tconst scrollbarsStyle = useMemo((): CSSProperties => ({ ...style, ...styleDefault }), [style]);\n\tconst scrollbarsStyle = useMemo((): CSSProperties => ({ ...style, ...styleDefault }), [style]);"
        },
        "depth_rank": 8
    },
    {
        "file": "InfiniteListAnchor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/InfiniteListAnchor.tsx",
        "code": {
            "observer": "\t\tconst observer = new IntersectionObserver(\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(e) => {\n\t\t\t\tif (e[0].isIntersecting) {\n\t\t\t\t\tloadMore();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\troot: null,\n\t\t\t\tthreshold: 0.1,\n\t\t\t},\n\t\t);\n\n\t\tobserver.observe(target);\n\n\t\treturn () => observer.disconnect();\n\t}, [loadMore]);\n\n\treturn <Box width={5} height={5} ref={ref} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MarkdownText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/MarkdownText.tsx",
        "code": {
            "markedHtml": "\tconst sanitizer = dompurify.sanitize;\n\tconst sanitizer = dompurify.sanitize;\n\n\tlet markedOptions: marked.MarkedOptions;\n\n\tconst schemes = 'http,https';\n\tconst schemes = 'http,https';\n\n\tswitch (variant) {\n\t\tcase 'inline':\n\t\t\tmarkedOptions = inlineOptions;\n\t\t\tbreak;\n\t\tcase 'inlineWithoutBreaks':\n\t\t\tmarkedOptions = inlineWithoutBreaksOptions;\n\t\t\tbreak;\n\t\tcase 'document':\n\t\tdefault:\n\t\t\tmarkedOptions = options;\n\t}\n\n\tconst __html = useMemo(() => {\n\tconst __html = useMemo(() => {\n\t\tconst html = ((): any => {\n\t\tconst html = ((): any => {\n\t\t\tif (content && typeof content === 'string') {\n\t\t\t\tconst markedHtml = /inline/.test(variant)\n\t\t\t\tconst markedHtml = /inline/.test(variant)\n\t\t\t\t\t? marked.parseInline(new Option(content).innerHTML, markedOptions)\n\t\t\t\t\t: marked.parse(new Option(content).innerHTML, markedOptions);\n\n\t\t\t\tif (parseEmoji) {\n\t\t\t\t\t// We are using the old emoji parser here. This could come\n\t\t\t\t\t// with additional processing use, but is the workaround available right now.\n\t\t\t\t\t// Should be replaced in the future with the new parser.\n\t\t\t\t\treturn renderMessageEmoji({ html: markedHtml });"
        },
        "depth_rank": 8
    },
    {
        "file": "NotFoundState.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/NotFoundState.tsx",
        "code": {
            "handleGoHomeClick": "const NotFoundState = ({ title, subtitle }: NotFoundProps): ReactElement => {\nconst NotFoundState = ({ title, subtitle }: NotFoundProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst handleGoHomeClick = () => {\n\tconst handleGoHomeClick = () => {\n\t\trouter.navigate('/home');\n\t};\n\n\treturn (\n\t\t<Box display='flex' justifyContent='center' height='full'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name='magnifier' />\n\t\t\t\t<StatesTitle>{title}</StatesTitle>"
        },
        "depth_rank": 8
    },
    {
        "file": "ConfirmOwnerChangeModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/ConfirmOwnerChangeModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tlet changeOwnerRooms = '';\n\tif (shouldChangeOwner.length > 0) {\n\t\tif (shouldChangeOwner.length === 1) {\n\t\t\tchangeOwnerRooms = t('A_new_owner_will_be_assigned_automatically_to_the__roomName__room', {\n\t\t\t\troomName: shouldChangeOwner.pop(),\n\t\t\t});\n\t\t} else if (shouldChangeOwner.length <= 5) {"
        },
        "depth_rank": 8
    },
    {
        "file": "PageSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/PageSkeleton.tsx",
        "code": {
            "PageSkeleton": "const PageSkeleton = (): ReactElement => (\nconst PageSkeleton = (): ReactElement => (\n\t<Page>\n\t\t<PageHeader title={<Skeleton width='x320' maxWidth='full' />}>"
        },
        "depth_rank": 8
    },
    {
        "file": "ImageGallery.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/ImageGallery/ImageGallery.tsx",
        "code": {
            "handleZoom": "\tconst swiperRef = useRef<SwiperRef>(null);\n\tconst swiperRef = useRef<SwiperRef>(null);\n\tconst [, setSwiperInst] = useState<SwiperClass>();\n\tconst [, setSwiperInst] = useState<SwiperClass>();\n\tconst [zoomScale, setZoomScale] = useState(1);\n\tconst [zoomScale, setZoomScale] = useState(1);\n\n\tconst handleZoom = (ratio: number) => {\n\tconst handleZoom = (ratio: number) => {\n\t\tif (swiperRef.current?.swiper.zoom) {\n\t\t\tconst { scale, in: zoomIn } = swiperRef.current?.swiper.zoom;\n\t\t\tconst { scale, in: zoomIn } = swiperRef.current?.swiper.zoom;",
            "preventPropagation": "\tconst preventPropagation = usePreventPropagation();\n\tconst preventPropagation = usePreventPropagation();\n\n\treturn createPortal(\n\t\t<FocusScope contain restoreFocus autoFocus>\n\t\t\t<Box className={swiperStyle}>"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAndRoomAutoCompleteMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAndRoomAutoCompleteMultiple/UserAndRoomAutoCompleteMultiple.tsx",
        "code": {
            "options": "\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\trooms.map(({ rid, fname, name, avatarETag, t }) => ({\n\t\t\t\tvalue: rid,\n\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericModalSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericModal/GenericModalSkeleton.tsx",
        "code": {
            "t": "const GenericModalSkeleton = ({ onClose, ...props }: ComponentProps<typeof GenericModal>) => {\nconst GenericModalSkeleton = ({ onClose, ...props }: ComponentProps<typeof GenericModal>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<GenericModal\n\t\t\t{...props}"
        },
        "depth_rank": 9
    },
    {
        "file": "withDoNotAskAgain.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericModal/withDoNotAskAgain.tsx",
        "code": {
            "dontAskAgainList": "function withDoNotAskAgain<T extends RequiredModalProps>(\nfunction withDoNotAskAgain<T extends RequiredModalProps>(\n\tComponent: ComponentType<any>,\n): FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> {\n\tconst WrappedComponent: FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> = function ({ onConfirm, dontAskAgain, ...props }) {\n\tconst WrappedComponent: FC<DoNotAskAgainProps & Omit<T, keyof RequiredModalProps>> = function ({ onConfirm, dontAskAgain, ...props }) {\n\t\tconst t = useTranslation();\n\t\tconst t = useTranslation();\n\t\tconst dontAskAgainList = useUserPreference<DontAskAgainList>('dontAskAgainList');\n\t\tconst dontAskAgainList = useUserPreference<DontAskAgainList>('dontAskAgainList');\n\t\tconst { action, label } = dontAskAgain;\n\t\tconst { action, label } = dontAskAgain;",
            "handleConfirm": "\t\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\t\tconst saveFn = useEndpoint('POST', '/v1/users.setPreferences');\n\t\tconst [state, setState] = useState<boolean>(false);\n\t\tconst [state, setState] = useState<boolean>(false);\n\n\t\tconst handleConfirm = async (): Promise<void> => {\n\t\tconst handleConfirm = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tif (state) {\n\t\t\t\t\tawait saveFn({ data: { dontAskAgainList: [...(dontAskAgainList || []), { action, label }] } });"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericModal/GenericModal.tsx",
        "code": {
            "getButtonProps": "const getButtonProps = (variant: VariantType): ComponentProps<typeof Button> => {\nconst getButtonProps = (variant: VariantType): ComponentProps<typeof Button> => {\n\tswitch (variant) {\n\t\tcase 'danger':\n\t\t\treturn { danger: true };",
            "renderIcon": "const renderIcon = (icon: GenericModalProps['icon'], variant: VariantType): ReactNode => {\nconst renderIcon = (icon: GenericModalProps['icon'], variant: VariantType): ReactNode => {\n\tif (icon === null) {\n\t\treturn null;\n\t}\n\n\tif (icon === undefined) {\n\t\treturn <Modal.Icon color={variant} name={iconMap[variant]} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomAutoCompleteMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RoomAutoCompleteMultiple/RoomAutoCompleteMultiple.tsx",
        "code": {
            "options": "const generateQuery = (\nconst generateQuery = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ name: term }) });\n\ntype RoomAutoCompleteProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'> & {\n\treadOnly?: boolean;\n};\n\nconst RoomAutoCompleteMultiple = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\nconst RoomAutoCompleteMultiple = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\t\tkeepPreviousData: true,\n\t});\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tresult.isSuccess\n\t\t\t\t? result.data.items.map(({ fname, name, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: _id,\n\t\t\t\t\t\tlabel: { name: fname || name, avatarETag, type: t },"
        },
        "depth_rank": 9
    },
    {
        "file": "PageBlockWithBorder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/PageBlockWithBorder.tsx",
        "code": {
            "PageBlockWithBorder": "const PageBlockWithBorder = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageBlockWithBorder(props, ref) {\nconst PageBlockWithBorder = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageBlockWithBorder(props, ref) {\n\tconst [border] = useContext(PageContext);\n\tconst [border] = useContext(PageContext);\n\treturn (\n\t\t<PageContent\n\t\t\t{...props}"
        },
        "depth_rank": 9
    },
    {
        "file": "Page.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/Page.tsx",
        "code": {
            "Page": "const Page = ({ background = 'light', ...props }: PageProps): ReactElement => {\nconst Page = ({ background = 'light', ...props }: PageProps): ReactElement => {\n\tconst [border, setBorder] = useState(false);\n\tconst [border, setBorder] = useState(false);\n\treturn (\n\t\t<PageContext.Provider value={[border, setBorder]}>"
        },
        "depth_rank": 9
    },
    {
        "file": "Page.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/Page.stories.tsx",
        "code": {
            "DummyContent": "const DummyContent = ({ rows = 10 }: { rows?: number }) => (\nconst DummyContent = ({ rows = 10 }: { rows?: number }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "PageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/PageContent.tsx",
        "code": {
            "PageContent": "const PageContent = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageContent(props, ref) {\nconst PageContent = forwardRef<HTMLElement, ComponentProps<typeof Box>>(function PageContent(props, ref) {\n\treturn <Box ref={ref} paddingInline={24} display='flex' flexDirection='column' overflowY='hidden' height='full' {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "PageScrollableContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/PageScrollableContent.tsx",
        "code": {
            "PageScrollableContent": "const PageScrollableContent = forwardRef<HTMLElement, PageScrollableContentProps>(function PageScrollableContent(\nconst PageScrollableContent = forwardRef<HTMLElement, PageScrollableContentProps>(function PageScrollableContent(\n\t{ onScrollContent, borderBlockEndColor, ...props },"
        },
        "depth_rank": 9
    },
    {
        "file": "PageHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Page/PageHeader.tsx",
        "code": {
            "t": "const PageHeader: FC<PageHeaderProps> = ({ children = undefined, title, onClickBack, borderBlockEndColor, ...props }) => {\nconst PageHeader: FC<PageHeaderProps> = ({ children = undefined, title, onClickBack, borderBlockEndColor, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [border] = useContext(PageContext);\n\tconst [border] = useContext(PageContext);\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();"
        },
        "depth_rank": 9
    },
    {
        "file": "TwoFactorTotpModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorTotpModal.tsx",
        "code": {
            "id": "const TwoFactorTotpModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorTotpModalProps): ReactElement => {\nconst TwoFactorTotpModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorTotpModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.TOTP);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmTotpCode} {...props} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "TwoFactorEmailModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorEmailModal.tsx",
        "code": {
            "onClickResendCode": "const TwoFactorEmailModal = ({ onConfirm, onClose, emailOrUsername, invalidAttempt }: TwoFactorEmailModalProps): ReactElement => {\nconst TwoFactorEmailModal = ({ onConfirm, onClose, emailOrUsername, invalidAttempt }: TwoFactorEmailModalProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\tconst ref = useAutoFocus<HTMLInputElement>();\n\n\tconst sendEmailCode = useEndpoint('POST', '/v1/users.2fa.sendEmailCode');\n\tconst sendEmailCode = useEndpoint('POST', '/v1/users.2fa.sendEmailCode');\n\n\tconst onClickResendCode = async (): Promise<void> => {\n\tconst onClickResendCode = async (): Promise<void> => {\n\t\ttry {\n\t\t\tawait sendEmailCode({ emailOrUsername });",
            "id": "\tconst onConfirmEmailCode = (e: SyntheticEvent): void => {\n\tconst onConfirmEmailCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.EMAIL);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmEmailCode} {...props} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "TwoFactorPasswordModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorPasswordModal.tsx",
        "code": {
            "id": "const TwoFactorPasswordModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorPasswordModalProps): ReactElement => {\nconst TwoFactorPasswordModal = ({ onConfirm, onClose, invalidAttempt }: TwoFactorPasswordModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [code, setCode] = useState<string>('');\n\tconst [code, setCode] = useState<string>('');\n\tconst ref = useAutoFocus();\n\tconst ref = useAutoFocus();\n\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\tconst onConfirmTotpCode = (e: SyntheticEvent): void => {\n\t\te.preventDefault();\n\t\tonConfirm(code, Method.PASSWORD);\n\t};\n\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\tconst onChange = ({ currentTarget }: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetCode(currentTarget.value);\n\t};\n\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<GenericModal\n\t\t\twrapperFunction={(props) => <Box is='form' onSubmit={onConfirmTotpCode} {...props} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "TwoFactorModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/TwoFactorModal/TwoFactorModal.tsx",
        "code": {
            "TwoFactorModal": "const TwoFactorModal = ({ onConfirm, onClose, invalidAttempt, ...props }: TwoFactorModalProps): ReactElement => {\nconst TwoFactorModal = ({ onConfirm, onClose, invalidAttempt, ...props }: TwoFactorModalProps): ReactElement => {\n\tif (props.method === Method.TOTP) {\n\t\treturn <TwoFactorTotp onConfirm={onConfirm} onClose={onClose} invalidAttempt={invalidAttempt} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserInfoAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoAction.tsx",
        "code": {
            "UserInfoAction": "const UserInfoAction = ({ icon, label, ...props }: UserInfoActionProps): ReactElement => (\nconst UserInfoAction = ({ icon, label, ...props }: UserInfoActionProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserInfoUsername.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoUsername.tsx",
        "code": {
            "UserInfoUsername": "const UserInfoUsername = ({ username, status, ...props }: UserInfoUsernameProps): ReactElement => (\nconst UserInfoUsername = ({ username, status, ...props }: UserInfoUsernameProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserInfoAvatar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfoAvatar.tsx",
        "code": {
            "UserInfoAvatar": "const UserInfoAvatar = ({ username, ...props }: ComponentProps<typeof UserAvatar>): ReactElement => (\nconst UserInfoAvatar = ({ username, ...props }: ComponentProps<typeof UserAvatar>): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserInfo/UserInfo.tsx",
        "code": {
            "UserInfo": "const UserInfo = ({\nconst UserInfo = ({\n\tusername,\n\tname,\n\tlastLogin,\n\tnickname,\n\tbio,\n\tavatarETag,\n\troles,\n\tutcOffset,\n\tphone,\n\temail,\n\tverified,\n\tcreatedAt,\n\tstatus,\n\tstatusText,\n\tcustomFields,\n\tcanViewAllInfo,\n\tactions,\n\t...props\n}: UserInfoProps): ReactElement => {",
            "userDisplayName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst timeAgo = useTimeAgo();\n\tconst timeAgo = useTimeAgo();\n\tconst userDisplayName = useUserDisplayName({ name, username });\n\tconst userDisplayName = useUserDisplayName({ name, username });",
            "userCustomFields": "\tconst userCustomFields = useUserCustomFields(customFields);\n\tconst userCustomFields = useUserCustomFields(customFields);\n\n\treturn (\n\t\t<ContextualbarScrollableContent p={24} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericNoResults.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericNoResults/GenericNoResults.tsx",
        "code": {
            "GenericNoResults": "const GenericNoResults = ({\nconst GenericNoResults = ({\n\ticon = 'magnifier',\n\ttitle,\n\tdescription,\n\tbuttonTitle,\n\tbuttonAction,\n\tlinkHref,\n\tlinkText,\n}: GenericNoResultsProps) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' height='100%' flexDirection='column' justifyContent='center'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name={icon} />"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAutoCompleteMultipleFederated.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleFederated.tsx",
        "code": {
            "UserAutoCompleteMultipleFederated": "const UserAutoCompleteMultipleFederated = ({\nconst UserAutoCompleteMultipleFederated = ({\n\tonChange,\n\tvalue,\n\tplaceholder,\n\t...props\n}: UserAutoCompleteMultipleFederatedProps): ReactElement => {",
            "getUsers": "\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst debouncedFilter = useDebouncedValue(filter, 500);\n\tconst getUsers = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst getUsers = useEndpoint('GET', '/v1/users.autocomplete');\n\n\tconst { data } = useQuery(\n\tconst { data } = useQuery(",
            "users": "\tconst onRemoveUser = useCallback(\n\tconst onRemoveUser = useCallback(\n\t\t(username: string): void =>\n\t\t\tsetSelectedCache((selectedCache) => {\n\t\t\t\tconst users = { ...selectedCache };\n\t\t\t\tconst users = { ...selectedCache };",
            "options": "\t\t\tconst options = users.items.map((item): [string, UserAutoCompleteOptionType] => [item.username, item]);\n\t\t\tconst options = users.items.map((item): [string, UserAutoCompleteOptionType] => [item.username, item]);\n\n\t\t\t// Add extra option if filter text matches `username:server`\n\t\t\t// Used to add federated users that do not exist yet\n\t\t\tif (matrixRegex.test(debouncedFilter)) {\n\t\t\t\toptions.unshift([debouncedFilter, { name: debouncedFilter, username: debouncedFilter, _federated: true }]);",
            "currentCachedOption": "\t\t\t\t\tconst currentCachedOption = selectedCache[value] || {};\n\t\t\t\t\tconst currentCachedOption = selectedCache[value] || {};"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAutoCompleteMultipleOption.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleOption.tsx",
        "code": {
            "UserAutoCompleteMultipleOption": "const UserAutoCompleteMultipleOption = ({ label, ...props }: UserAutoCompleteMultipleOptionProps): ReactElement => {\nconst UserAutoCompleteMultipleOption = ({ label, ...props }: UserAutoCompleteMultipleOptionProps): ReactElement => {\n\tconst { name, username, _federated } = label;\n\tconst { name, username, _federated } = label;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAutoCompleteMultipleOptions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultipleOptions.tsx",
        "code": {
            "UserAutoCompleteMultipleOptions": "const UserAutoCompleteMultipleOptions = forwardRef(function UserAutoCompleteMultipleOptions(\nconst UserAutoCompleteMultipleOptions = forwardRef(function UserAutoCompleteMultipleOptions(\n\t{ onSelect, ...props }: ComponentProps<typeof Options>,"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAutoCompleteMultiple.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAutoCompleteMultiple/UserAutoCompleteMultiple.tsx",
        "code": {
            "usersAutoCompleteEndpoint": "const query = (\nconst query = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ term }) });\n\ntype UserAutoCompleteMultipleProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'>;\n\n// TODO: useDisplayUsername\nconst UserAutoCompleteMultiple = ({ onChange, ...props }: UserAutoCompleteMultipleProps): ReactElement => {\nconst UserAutoCompleteMultiple = ({ onChange, ...props }: UserAutoCompleteMultipleProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter], async () => usersAutoCompleteEndpoint(query(debouncedFilter)));\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter], async () => usersAutoCompleteEndpoint(query(debouncedFilter)));",
            "options": "\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name })) || [], [data]);\n\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name })) || [], [data]);"
        },
        "depth_rank": 9
    },
    {
        "file": "PositiveGrowthSymbol.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/dataView/PositiveGrowthSymbol.tsx",
        "code": {
            "PositiveGrowthSymbol": "const PositiveGrowthSymbol = (props: PositiveGrowthSymbolProps): ReactElement => (\nconst PositiveGrowthSymbol = (props: PositiveGrowthSymbolProps): ReactElement => (\n\t<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' style={style} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "Counter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/dataView/Counter.tsx",
        "code": {
            "Counter": "const Counter = ({ count, variation = 0, description }: CounterProps): ReactElement => (\nconst Counter = ({ count, variation = 0, description }: CounterProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "NegativeGrowthSymbol.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/dataView/NegativeGrowthSymbol.tsx",
        "code": {
            "NegativeGrowthSymbol": "const NegativeGrowthSymbol = (props: NegativeGrowthSymbolProps): ReactElement => (\nconst NegativeGrowthSymbol = (props: NegativeGrowthSymbolProps): ReactElement => (\n\t<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 25 24' style={style} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "CounterSet.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/dataView/CounterSet.tsx",
        "code": {
            "CounterSet": "const CounterSet = ({ counters = [] }: CounterSetProps): ReactElement => (\nconst CounterSet = ({ counters = [] }: CounterSetProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserAutoComplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserAutoComplete/UserAutoComplete.tsx",
        "code": {
            "query": "const query = (\nconst query = (\n\tterm = '',\n\tconditions = {},",
            "UserAutoComplete": "const UserAutoComplete = ({ value, onChange, ...props }: UserAutoCompleteProps): ReactElement => {\nconst UserAutoComplete = ({ value, onChange, ...props }: UserAutoCompleteProps): ReactElement => {\n\tconst { conditions = {} } = props;\n\tconst { conditions = {} } = props;",
            "usersAutoCompleteEndpoint": "\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst debouncedFilter = useDebouncedValue(filter, 1000);\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\tconst usersAutoCompleteEndpoint = useEndpoint('GET', '/v1/users.autocomplete');\n\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter, conditions], async () =>\n\tconst { data } = useQuery(['usersAutoComplete', debouncedFilter, conditions], async () =>",
            "options": "\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name || user.username })) || [], [data]);\n\tconst options = useMemo(() => data?.items.map((user) => ({ value: user.username, label: user.name || user.username })) || [], [data]);"
        },
        "depth_rank": 9
    },
    {
        "file": "BurgerBadge.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerBadge.tsx",
        "code": {
            "BurgerBadge": "const BurgerBadge = ({ children }: { children?: unknown }): ReactElement => (\nconst BurgerBadge = ({ children }: { children?: unknown }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "BurgerIcon.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerIcon.stories.tsx",
        "code": {
            "open": "\tconst open = useAutoSequence([false, true]);\n\tconst open = useAutoSequence([false, true]);\n\n\treturn <BurgerIcon open={open} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "BurgerMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerMenu.tsx",
        "code": {
            "BurgerMenu": "const BurgerMenu = (): ReactElement => {\nconst BurgerMenu = (): ReactElement => {\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();"
        },
        "depth_rank": 9
    },
    {
        "file": "BurgerMenuButton.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/BurgerMenu/BurgerMenuButton.stories.tsx",
        "code": {
            "as": "\t] as const);\n\t] as const);\n\n\treturn <BurgerMenuButton open={open} badge={badge} onClick={action('onClick')} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "Wrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/BurgerMenu/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "GenericTable.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericTable/GenericTable.stories.tsx",
        "code": {
            "filter": "const filter = (\nconst filter = (\n\t<>\n\t\t<Box mb={16} is='form' display='flex' flexDirection='column'>"
        },
        "depth_rank": 9
    },
    {
        "file": "ConnectionStatusBar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/connectionStatus/ConnectionStatusBar.tsx",
        "code": {
            "ConnectionStatusBar": "function ConnectionStatusBar() {\nfunction ConnectionStatusBar() {\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();\n\tconst { connected, retryTime, status, reconnect } = useConnectionStatus();",
            "reconnectCountdown": "\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst reconnectCountdown = useReconnectCountdown(retryTime, status);\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "ConnectionStatusBar.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/connectionStatus/ConnectionStatusBar.stories.tsx",
        "code": {
            "stateDecorator": "const stateDecorator = (value: ContextType<typeof ConnectionStatusContext>) => (fn: () => ReactElement) =>\nconst stateDecorator = (value: ContextType<typeof ConnectionStatusContext>) => (fn: () => ReactElement) =>\n\t<ConnectionStatusContext.Provider value={value}>{fn()}</ConnectionStatusContext.Provider>;"
        },
        "depth_rank": 9
    },
    {
        "file": "VoipRoomForeword.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/voip/room/VoipRoomForeword.tsx",
        "code": {
            "roomName": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst avatarUrl = getUserAvatarURL(room.name) as string;\n\tconst avatarUrl = getUserAvatarURL(room.name) as string;\n\n\tconst roomName = room.fname;\n\tconst roomName = room.fname;\n\n\treturn (\n\t\t<Box is='div' flexGrow={1} display='flex' justifyContent='center' flexDirection='column'>"
        },
        "depth_rank": 10
    },
    {
        "file": "RetentionPolicyCallout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/InfoPanel/RetentionPolicyCallout.tsx",
        "code": {
            "time": "const RetentionPolicyCallout: FC<RetentionPolicyCalloutProps> = ({ filesOnlyDefault, excludePinnedDefault, maxAgeDefault }) => {\nconst RetentionPolicyCallout: FC<RetentionPolicyCalloutProps> = ({ filesOnlyDefault, excludePinnedDefault, maxAgeDefault }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst time = useFormattedRelativeTime(maxAgeDefault);\n\tconst time = useFormattedRelativeTime(maxAgeDefault);\n\n\treturn (\n\t\t<Callout type='warning'>\n\t\t\t{filesOnlyDefault && excludePinnedDefault && <p>{t('RetentionPolicy_RoomWarning_FilesOnly', { time })}</p>}"
        },
        "depth_rank": 9
    },
    {
        "file": "InfoPanelTitle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/InfoPanel/InfoPanelTitle.tsx",
        "code": {
            "isValidIcon": "const isValidIcon = (icon: ReactNode): icon is IconName => typeof icon === 'string';\nconst isValidIcon = (icon: ReactNode): icon is IconName => typeof icon === 'string';\n\nconst InfoPanelTitle: FC<InfoPanelTitleProps> = ({ title, icon }) => (\nconst InfoPanelTitle: FC<InfoPanelTitleProps> = ({ title, icon }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "InfoPanelAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/InfoPanel/InfoPanelAction.tsx",
        "code": {
            "InfoPanelAction": "const InfoPanelAction = ({ label, icon, ...props }: InfoPanelActionProps): ReactElement => (\nconst InfoPanelAction = ({ label, icon, ...props }: InfoPanelActionProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Contextualbar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Contextualbar/Contextualbar.tsx",
        "code": {
            "position": "const Contextualbar: FC<ComponentProps<typeof ContextualbarComponent>> = ({ children, bg = 'room', ...props }) => {\nconst Contextualbar: FC<ComponentProps<typeof ContextualbarComponent>> = ({ children, bg = 'room', ...props }) => {\n\tconst sizes = useLayoutSizes();\n\tconst sizes = useLayoutSizes();\n\tconst position = useLayoutContextualBarPosition();\n\tconst position = useLayoutContextualBarPosition();\n\n\treturn (\n\t\t<ContextualbarComponent bg={bg} width={sizes.contextualBar} position={position} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualbarScrollableContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Contextualbar/ContextualbarScrollableContent.tsx",
        "code": {
            "ContextualbarScrollableContent": "const ContextualbarScrollableContent = forwardRef<HTMLElement, ComponentProps<typeof PageScrollableContent>>(\nconst ContextualbarScrollableContent = forwardRef<HTMLElement, ComponentProps<typeof PageScrollableContent>>(\n\tfunction ContextualbarScrollableContent({ children, ...props }, ref) {\n\tfunction ContextualbarScrollableContent({ children, ...props }, ref) {\n\t\treturn (\n\t\t\t<PageScrollableContent p={24} {...props} ref={ref}>"
        },
        "depth_rank": 9
    },
    {
        "file": "CreateDiscussion.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/CreateDiscussion/CreateDiscussion.tsx",
        "code": {
            "t": "const CreateDiscussion = ({ onClose, defaultParentRoom, parentMessageId, nameSuggestion }: CreateDiscussionProps): ReactElement => {\nconst CreateDiscussion = ({ onClose, defaultParentRoom, parentMessageId, nameSuggestion }: CreateDiscussionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tformState: { isDirty, isSubmitting, isValidating, errors },",
            "handleCreate": "\tconst createDiscussion = useEndpoint('POST', '/v1/rooms.createDiscussion');\n\tconst createDiscussion = useEndpoint('POST', '/v1/rooms.createDiscussion');\n\n\tconst createDiscussionMutation = useMutation({\n\tconst createDiscussionMutation = useMutation({\n\t\tmutationFn: createDiscussion,\n\t\tonSuccess: ({ discussion }) => {\n\t\t\tgoToRoomById(discussion._id);\n\t\t\tonClose();\n\t\t},\n\t});\n\n\tconst handleCreate = async ({ name, parentRoom, encrypted, usernames, firstMessage }: CreateDiscussionFormValues) => {\n\tconst handleCreate = async ({ name, parentRoom, encrypted, usernames, firstMessage }: CreateDiscussionFormValues) => {\n\t\tcreateDiscussionMutation.mutate({\n\t\t\tprid: defaultParentRoom || parentRoom,\n\t\t\tt_name: name,\n\t\t\tusers: usernames,\n\t\t\treply: encrypted ? undefined : firstMessage,\n\t\t\t...(parentMessageId && { pmid: parentMessageId }),"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericResourceUsage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericResourceUsage/GenericResourceUsage.tsx",
        "code": {
            "GenericResourceUsage": "const GenericResourceUsage = ({\nconst GenericResourceUsage = ({\n\ttitle,\n\tvalue,\n\tmax,\n\tpercentage,\n\tthreshold = 80,\n\tvariant = percentage < threshold ? 'success' : 'danger',\n\tsubTitle,\n\t...props\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "UserCardInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCardInfo.tsx",
        "code": {
            "UserCardInfo": "const UserCardInfo = (props: ComponentProps<typeof Box>): ReactElement => (\nconst UserCardInfo = (props: ComponentProps<typeof Box>): ReactElement => (\n\t<Box mbe={8} is='span' fontScale='p2' color='hint' withTruncatedText {...props} />"
        },
        "depth_rank": 9
    },
    {
        "file": "UserCardUsername.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCardUsername.tsx",
        "code": {
            "UserCardUsername": "const UserCardUsername = ({ name, status = <UserStatus.Offline />, ...props }: UserCardUsernameProps): ReactElement => (\nconst UserCardUsername = ({ name, status = <UserStatus.Offline />, ...props }: UserCardUsernameProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserCardRoles.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCardRoles.tsx",
        "code": {
            "UserCardRoles": "const UserCardRoles = ({ children }: { children: ReactNode }): ReactElement => (\nconst UserCardRoles = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserCardRole.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCardRole.tsx",
        "code": {
            "UserCardRole": "const UserCardRole = ({ children }: { children: ReactNode }): ReactElement => (\nconst UserCardRole = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserCardAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCardAction.tsx",
        "code": {
            "UserCardAction": "const UserCardAction = ({ label, icon, ...props }: UserCardActionProps): ReactElement => (\nconst UserCardAction = ({ label, icon, ...props }: UserCardActionProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "UserCard.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserCard/UserCard.tsx",
        "code": {
            "UserCard": "const UserCard = forwardRef(function UserCard(\nconst UserCard = forwardRef(function UserCard(\n\t{\n\t\tclassName,\n\t\tstyle,\n\t\topen,\n\t\tname,\n\t\tusername,\n\t\tetag,\n\t\tcustomStatus = <Skeleton width='100%' />,\n\t\troles = (\n\t\t\t<>\n\t\t\t\t<Skeleton flexGrow={1} mi={2} />"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomAutoComplete.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RoomAutoComplete/RoomAutoComplete.tsx",
        "code": {
            "options": "const generateQuery = (\nconst generateQuery = (\n\tterm = '',\n): {\n\tselector: string;\n} => ({ selector: JSON.stringify({ name: term }) });\n\ntype RoomAutoCompleteProps = Omit<ComponentProps<typeof AutoComplete>, 'filter'>;\n\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\nconst RoomAutoComplete = ({ value, onChange, ...props }: RoomAutoCompleteProps): ReactElement => {\n\tconst [filter, setFilter] = useState('');\n\tconst [filter, setFilter] = useState('');\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst filterDebounced = useDebouncedValue(filter, 300);\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\tconst autocomplete = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate');\n\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\tconst result = useQuery(['rooms.autocomplete.channelAndPrivate', filterDebounced], () => autocomplete(generateQuery(filterDebounced)), {\n\t\tkeepPreviousData: true,\n\t});\n\n\tconst options = useMemo(\n\tconst options = useMemo(\n\t\t() =>\n\t\t\tresult.isSuccess\n\t\t\t\t? result.data.items.map(({ name, _id, avatarETag, t }) => ({\n\t\t\t\t\t\tvalue: _id,\n\t\t\t\t\t\tlabel: { name, avatarETag, type: t },"
        },
        "depth_rank": 9
    },
    {
        "file": "Tags.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/Tags.tsx",
        "code": {
            "paginatedTagValue": "\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst [tagValue, handleTagValue] = useState('');\n\tconst [tagValue, handleTagValue] = useState('');\n\n\tconst paginatedTagValue = useMemo(() => tags.map((tag) => ({ label: tag, value: tag })), [tags]);\n\tconst paginatedTagValue = useMemo(() => tags.map((tag) => ({ label: tag, value: tag })), [tags]);"
        },
        "depth_rank": 9
    },
    {
        "file": "useLivechatTags.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useLivechatTags.ts",
        "code": {
            "getTags": "\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\tconst { isEnterprise } = useOmnichannel();\n\tconst { isEnterprise } = useOmnichannel();"
        },
        "depth_rank": 10
    },
    {
        "file": "useAvailableAgentsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useAvailableAgentsList.ts",
        "code": {
            "fetchData": "\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgent>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgent>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgent>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgent>()), []);\n\n\tconst getAgents = useEndpoint('GET', '/v1/omnichannel/agents/available');\n\tconst getAgents = useEndpoint('GET', '/v1/omnichannel/agents/available');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { agents, total } = await getAgents({\n\t\t\tconst { agents, total } = await getAgents({\n\t\t\t\t...(options.text && { text: options.text }),",
            "items": "\t\t\tconst items = agents.map((agent: any) => {\n\t\t\tconst items = agents.map((agent: any) => {\n\t\t\t\tagent._updatedAt = new Date(agent._updatedAt);\n\t\t\t\tagent.label = agent.username;\n\t\t\t\tagent.value = agent._id;\n\t\t\t\treturn agent;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getAgents, options.includeExtension, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);"
        },
        "depth_rank": 10
    },
    {
        "file": "useAgentsList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/hooks/useAgentsList.ts",
        "code": {
            "getAgents": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<AgentOption>());\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<AgentOption>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<AgentOption>()), []);\n\tconst reload = useCallback(() => setItemsList(new RecordList<AgentOption>()), []);\n\n\tconst getAgents = useEndpoint('GET', '/v1/livechat/users/agent');\n\tconst getAgents = useEndpoint('GET', '/v1/livechat/users/agent');\n\tconst { text, onlyAvailable = false, showIdleAgents = true, excludeId, haveAll, haveNoAgentsSelectedOption } = options;\n\tconst { text, onlyAvailable = false, showIdleAgents = true, excludeId, haveAll, haveNoAgentsSelectedOption } = options;",
            "fetchData": "\tconst fetchData = useCallback(\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { users: agents, total } = await getAgents({\n\t\t\tconst { users: agents, total } = await getAgents({\n\t\t\t\t...(text && { text }),"
        },
        "depth_rank": 10
    },
    {
        "file": "ForwardChatModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/ForwardChatModal.tsx",
        "code": {
            "ForwardChatModal": "const ForwardChatModal = ({\nconst ForwardChatModal = ({\n\tonForward,\n\tonCancel,\n\troom,\n\t...props\n}: {",
            "idleAgentsAllowedForForwarding": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst getUserData = useEndpoint('GET', '/v1/users.info');\n\tconst idleAgentsAllowedForForwarding = useSetting('Livechat_enabled_when_agent_idle') as boolean;\n\tconst idleAgentsAllowedForForwarding = useSetting('Livechat_enabled_when_agent_idle') as boolean;\n\n\tconst { getValues, handleSubmit, register, setFocus, setValue, watch } = useForm();\n\tconst { getValues, handleSubmit, register, setFocus, setValue, watch } = useForm();",
            "debouncedDepartmentsFilter": "\tconst department = watch('department');\n\tconst department = watch('department');\n\tconst username = watch('username');\n\tconst username = watch('username');\n\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string | number | undefined>('');\n\tconst [departmentsFilter, setDepartmentsFilter] = useState<string | number | undefined>('');\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\tconst debouncedDepartmentsFilter = useDebouncedValue(departmentsFilter, 500);\n\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(\n\tconst { itemsList: departmentsList, loadMoreItems: loadMoreDepartments } = useDepartmentsList(",
            "onSubmit": "\tconst onSubmit = useCallback(\n\tconst onSubmit = useCallback(\n\t\tasync ({ department: departmentId, username, comment }) => {\n\t\t\tlet uid;\n\n\t\t\tif (username) {\n\t\t\t\tconst { user } = await getUserData({ username });\n\t\t\t\tconst { user } = await getUserData({ username });"
        },
        "depth_rank": 10
    },
    {
        "file": "CloseChatModalData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/CloseChatModalData.tsx",
        "code": {
            "CloseChatModalData": "const CloseChatModalData = ({\nconst CloseChatModalData = ({\n\tdepartmentId,\n\tvisitorEmail,\n\tonCancel,\n\tonConfirm,\n}: {",
            "getDepartment": "\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: departmentId });\n\tconst getDepartment = useEndpoint('GET', '/v1/livechat/department/:_id', { _id: departmentId });"
        },
        "depth_rank": 10
    },
    {
        "file": "CloseChatModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/CloseChatModal.tsx",
        "code": {
            "CloseChatModal": "const CloseChatModal = ({\nconst CloseChatModal = ({\n\tdepartment,\n\tvisitorEmail,\n\tonCancel,\n\tonConfirm,\n}: {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tformState: { errors },",
            "requestData": "\t\t\tconst requestData = transcriptEmail && visitorEmail ? { email: visitorEmail, subject } : undefined;\n\t\t\tconst requestData = transcriptEmail && visitorEmail ? { email: visitorEmail, subject } : undefined;"
        },
        "depth_rank": 10
    },
    {
        "file": "TranscriptModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Omnichannel/modals/TranscriptModal.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetValue,\n\t\tsetFocus,\n\t\twatch,\n\t\tformState: { errors, isValid, isSubmitting },",
            "canSubmit": "\tconst canSubmit = isValid && Boolean(watch('subject'));\n\tconst canSubmit = isValid && Boolean(watch('subject'));\n\n\treturn (\n\t\t<Modal open wrapperFunction={(props) => <Box is='form' onSubmit={handleSubmit(submit)} {...props} />} {...props}>"
        },
        "depth_rank": 10
    },
    {
        "file": "GenericError.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericError/GenericError.tsx",
        "code": {
            "t": "const GenericError = ({ icon = 'magnifier', title, buttonTitle, buttonAction }: GenericErrorProps) => {\nconst GenericError = ({ icon = 'magnifier', title, buttonTitle, buttonAction }: GenericErrorProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' height='100%' flexDirection='column' justifyContent='center'>\n\t\t\t<States>\n\t\t\t\t<StatesIcon name={icon} variation='danger' />"
        },
        "depth_rank": 9
    },
    {
        "file": "GenericMenuItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericMenu/GenericMenuItem.tsx",
        "code": {
            "GenericMenuItem": "const GenericMenuItem = ({ icon, content, addon, status, gap }: GenericMenuItemProps) => (\nconst GenericMenuItem = ({ icon, content, addon, status, gap }: GenericMenuItemProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "GenericMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericMenu/GenericMenu.tsx",
        "code": {
            "itemsList": "const GenericMenu = ({ title, icon = 'menu', disabled, onAction, ...props }: GenericMenuProps) => {\nconst GenericMenu = ({ title, icon = 'menu', disabled, onAction, ...props }: GenericMenuProps) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = 'sections' in props && props.sections;\n\tconst sections = 'sections' in props && props.sections;\n\tconst items = 'items' in props && props.items;\n\tconst items = 'items' in props && props.items;\n\n\tconst itemsList = sections ? sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]) : items || [];\n\tconst itemsList = sections ? sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]) : items || [];",
            "disabledKeys": "\tconst disabledKeys = itemsList.filter(({ disabled }) => disabled).map(({ id }) => id);\n\tconst disabledKeys = itemsList.filter(({ disabled }) => disabled).map(({ id }) => id);",
            "hasIcon": "\tconst handleAction = useHandleMenuAction(itemsList || []);\n\tconst handleAction = useHandleMenuAction(itemsList || []);\n\n\tconst hasIcon = itemsList.some(({ icon }) => icon);\n\tconst hasIcon = itemsList.some(({ icon }) => icon);"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalBackdrop.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/modal/ModalBackdrop.tsx",
        "code": {
            "backdrop": "const isAtBackdropChildren = (e: MouseEvent, ref: RefObject<HTMLElement>): boolean => {\nconst isAtBackdropChildren = (e: MouseEvent, ref: RefObject<HTMLElement>): boolean => {\n\tconst backdrop = ref.current;\n\tconst backdrop = ref.current;\n\tconst { parentElement } = e.target as HTMLElement;\n\tconst { parentElement } = e.target as HTMLElement;",
            "useOutsideClick": "const useOutsideClick = (\nconst useOutsideClick = (\n\tref: RefObject<HTMLElement>,\n\tonDismiss: (() => void) | undefined,\n): {\n\tonMouseDown: (e: MouseEvent) => void;\n\tonMouseUp: (e: MouseEvent) => void;\n} => {",
            "ref": "const ModalBackdrop = ({ children, onDismiss }: ModalBackdropProps): ReactElement => {\nconst ModalBackdrop = ({ children, onDismiss }: ModalBackdropProps): ReactElement => {\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\n\tuseEscapeKey(onDismiss);\n\tconst { onMouseDown, onMouseUp } = useOutsideClick(ref, onDismiss);\n\tconst { onMouseDown, onMouseUp } = useOutsideClick(ref, onDismiss);"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAvatar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/avatar/UserAvatar.tsx",
        "code": {
            "getUserAvatarPath": "const UserAvatar: FC<UserAvatarProps> = ({ username, etag, ...rest }) => {\nconst UserAvatar: FC<UserAvatarProps> = ({ username, etag, ...rest }) => {\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst { url = getUserAvatarPath(username, etag), ...props } = rest;\n\tconst { url = getUserAvatarPath(username, etag), ...props } = rest;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomAvatar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/avatar/RoomAvatar.tsx",
        "code": {
            "getRoomPathAvatar": "const RoomAvatar = function RoomAvatar({ room, ...rest }: RoomAvatarProps): ReactElement {\nconst RoomAvatar = function RoomAvatar({ room, ...rest }: RoomAvatarProps): ReactElement {\n\tconst getRoomPathAvatar = useRoomAvatarPath();\n\tconst getRoomPathAvatar = useRoomAvatarPath();\n\tconst { url = getRoomPathAvatar(room), ...props } = rest;\n\tconst { url = getRoomPathAvatar(room), ...props } = rest;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomAvatarEditor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/avatar/RoomAvatarEditor.tsx",
        "code": {
            "reader": "const RoomAvatarEditor = ({ disabled = false, room, roomAvatar, onChangeAvatar }: RoomAvatarEditorProps): ReactElement => {\nconst RoomAvatarEditor = ({ disabled = false, room, roomAvatar, onChangeAvatar }: RoomAvatarEditorProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleChangeAvatar = useMutableCallback(async (file) => {\n\tconst handleChangeAvatar = useMutableCallback(async (file) => {\n\t\tconst reader = new FileReader();\n\t\tconst reader = new FileReader();\n\t\treader.readAsDataURL(file);\n\t\treader.onloadend = async (): Promise<void> => {\n\t\t\tconst { result } = reader;\n\t\t\tconst { result } = reader;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserAvatarEditor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/avatar/UserAvatarEditor/UserAvatarEditor.tsx",
        "code": {
            "dataURL": "function UserAvatarEditor({ currentUsername, username, setAvatarObj, disabled, etag }: UserAvatarEditorProps): ReactElement {\nfunction UserAvatarEditor({ currentUsername, username, setAvatarObj, disabled, etag }: UserAvatarEditorProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst rotateImages = useSetting('FileUpload_RotateImages');\n\tconst rotateImages = useSetting('FileUpload_RotateImages');\n\tconst [avatarFromUrl, setAvatarFromUrl] = useState('');\n\tconst [avatarFromUrl, setAvatarFromUrl] = useState('');\n\tconst [newAvatarSource, setNewAvatarSource] = useState<string>();\n\tconst [newAvatarSource, setNewAvatarSource] = useState<string>();\n\tconst imageUrlField = useUniqueId();\n\tconst imageUrlField = useUniqueId();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst setUploadedPreview = useCallback(\n\tconst setUploadedPreview = useCallback(\n\t\tasync (file, avatarObj) => {\n\t\t\tsetAvatarObj(avatarObj);\n\t\t\ttry {\n\t\t\t\tconst dataURL = await readFileAsDataURL(file);\n\t\t\t\tconst dataURL = await readFileAsDataURL(file);\n\n\t\t\t\tif (await isValidImageFormat(dataURL)) {\n\t\t\t\t\tsetNewAvatarSource(dataURL);\n\t\t\t\t}\n\t\t\t} catch (error) {",
            "handleAddUrl": "\tconst [clickUpload] = useSingleFileInput(setUploadedPreview);\n\tconst [clickUpload] = useSingleFileInput(setUploadedPreview);\n\n\tconst handleAddUrl = (): void => {\n\tconst handleAddUrl = (): void => {\n\t\tsetNewAvatarSource(avatarFromUrl);\n\t\tsetAvatarObj({ avatarUrl: avatarFromUrl });",
            "handleSelectSuggestion": "\tconst url = newAvatarSource;\n\tconst url = newAvatarSource;\n\n\tconst handleAvatarFromUrlChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleAvatarFromUrlChange = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetAvatarFromUrl(event.currentTarget.value);\n\t};\n\n\tconst handleSelectSuggestion = useCallback(\n\tconst handleSelectSuggestion = useCallback(\n\t\t(suggestion: UserAvatarSuggestion) => {\n\t\t\tsetAvatarObj(suggestion as unknown as AvatarObject);\n\t\t\tsetNewAvatarSource(suggestion.blob);\n\t\t},\n\t\t[setAvatarObj, setNewAvatarSource],\n\t);\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' fontScale='p2m' color='default'>\n\t\t\t{t('Profile_picture')}"
        },
        "depth_rank": 10
    },
    {
        "file": "UserAvatarSuggestions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/avatar/UserAvatarEditor/UserAvatarSuggestions.tsx",
        "code": {
            "UserAvatarSuggestions": "function UserAvatarSuggestions({ disabled, onSelectOne }: UserAvatarSuggestionsProps) {\nfunction UserAvatarSuggestions({ disabled, onSelectOne }: UserAvatarSuggestionsProps) {\n\tconst { data: suggestions = [] } = useUserAvatarSuggestions();\n\tconst { data: suggestions = [] } = useUserAvatarSuggestions();",
            "handleClick": "\tconst handleClick = useCallback((suggestion: UserAvatarSuggestion) => () => onSelectOne?.(suggestion), [onSelectOne]);\n\tconst handleClick = useCallback((suggestion: UserAvatarSuggestion) => () => onSelectOne?.(suggestion), [onSelectOne]);\n\n\treturn (\n\t\t<>\n\t\t\t{suggestions.map(\n\t\t\t\t(suggestion) =>\n\t\t\t\t\tsuggestion.blob && (\n\t\t\t\t\t\t<Button key={suggestion.service} square disabled={disabled} mi={4} onClick={handleClick(suggestion)}>"
        },
        "depth_rank": 10
    },
    {
        "file": "SidebarGenericItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Sidebar/SidebarGenericItem.tsx",
        "code": {
            "SidebarGenericItem": "const SidebarGenericItem = ({ href, active, externalUrl, children, ...props }: SidebarGenericItemProps): ReactElement => (\nconst SidebarGenericItem = ({ href, active, externalUrl, children, ...props }: SidebarGenericItemProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Header.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Sidebar/Header.tsx",
        "code": {
            "t": "const Header: FC<HeaderProps> = ({ title, onClose, children, ...props }) => {\nconst Header: FC<HeaderProps> = ({ title, onClose, children, ...props }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' pb={16} {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "SidebarItemsAssembler.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Sidebar/SidebarItemsAssembler.tsx",
        "code": {
            "t": "const SidebarItemsAssembler: FC<SidebarItemsAssemblerProps> = ({ items, currentPath }) => {\nconst SidebarItemsAssembler: FC<SidebarItemsAssemblerProps> = ({ items, currentPath }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t{items.map((props) => (\n\t\t\t\t<Fragment key={props.i18nLabel}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/Sidebar/ListItem.tsx",
        "code": {
            "ListItem": "const ListItem = ({ icon, text, input, children, gap, ...props }: ListItemProps): ReactElement => (\nconst ListItem = ({ icon, text, input, children, gap, ...props }: ListItemProps): ReactElement => ("
        },
        "depth_rank": 9
    },
    {
        "file": "GenericUpsellModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericUpsellModal/GenericUpsellModal.tsx",
        "code": {
            "GenericUpsellModal": "const GenericUpsellModal = ({\nconst GenericUpsellModal = ({\n\ttagline,\n\ttitle,\n\tsubtitle,\n\timg,\n\tcancelText,\n\tconfirmText,\n\ticon,\n\tdescription,\n\tonClose,\n\tonCancel,\n\tonConfirm,\n\tannotation,\n\t...props\n}: GenericUpsellModalProps) => {",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Modal {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "useUpsellActions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/GenericUpsellModal/hooks/useUpsellActions.ts",
        "code": {
            "cloudWorkspaceHadTrial": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst handleOpenLink = useExternalLink();\n\tconst handleOpenLink = useExternalLink();\n\tconst cloudWorkspaceHadTrial = useSetting<boolean>('Cloud_Workspace_Had_Trial');\n\tconst cloudWorkspaceHadTrial = useSetting<boolean>('Cloud_Workspace_Had_Trial');\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "handleTalkToSales": "\tconst handleManageSubscription = useCallback(() => {\n\tconst handleManageSubscription = useCallback(() => {\n\t\topenExternalLink(manageSubscriptionUrl);\n\t\tsetModal(null);\n\t}, [manageSubscriptionUrl, openExternalLink, setModal]);\n\n\tconst handleTalkToSales = useCallback(() => {\n\tconst handleTalkToSales = useCallback(() => {\n\t\thandleOpenLink(TALK_TO_SALES_URL);\n\t\tsetModal(null);\n\t}, [handleOpenLink, setModal]);\n\n\treturn { shouldShowUpsell, cloudWorkspaceHadTrial, handleManageSubscription, handleTalkToSales };"
        },
        "depth_rank": 10
    },
    {
        "file": "ReactiveUserStatus.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/UserStatus/ReactiveUserStatus.tsx",
        "code": {
            "status": "const ReactiveUserStatus = ({ uid, ...props }: ReactiveUserStatusProps): ReactElement => {\nconst ReactiveUserStatus = ({ uid, ...props }: ReactiveUserStatusProps): ReactElement => {\n\tconst status = usePresence(uid)?.status;\n\tconst status = usePresence(uid)?.status;\n\treturn <UserStatus.UserStatus status={status} {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RoomIcon/RoomIcon.tsx",
        "code": {
            "iconPropsOrReactNode": "\tconst iconPropsOrReactNode = useRoomIcon(room);\n\tconst iconPropsOrReactNode = useRoomIcon(room);\n\n\tif (isIncomingCall) {\n\t\treturn <Icon name='phone' size={size} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "OmnichannelAppSourceRoomIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelAppSourceRoomIcon.tsx",
        "code": {
            "icon": "\tconst color = colors[room.v.status || UserStatus.OFFLINE];\n\tconst color = colors[room.v.status || UserStatus.OFFLINE];\n\tconst icon = (placement === 'sidebar' && room.source.sidebarIcon) || room.source.defaultIcon;\n\tconst icon = (placement === 'sidebar' && room.source.sidebarIcon) || room.source.defaultIcon;\n\tconst { phase, value } = useOmnichannelRoomIcon(room.source.id, icon || '');\n\tconst { phase, value } = useOmnichannelRoomIcon(room.source.id, icon || '');",
            "fontSize": "\tconst fontSize = convertBoxSizeToNumber(size);\n\tconst fontSize = convertBoxSizeToNumber(size);\n\tif ([AsyncStatePhase.REJECTED, AsyncStatePhase.LOADING].includes(phase)) {\n\t\treturn <Icon name='headset' size={size} color={color} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "OmnichannelCoreSourceRoomIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/RoomIcon/OmnichannelRoomIcon/OmnichannelCoreSourceRoomIcon.tsx",
        "code": {
            "icon": "\tconst icon = iconMap[room.source?.type || 'other'] || 'headset';\n\tconst icon = iconMap[room.source?.type || 'other'] || 'headset';\n\treturn <Icon name={icon} size={size} color={colors[room.v?.status || 'offline']} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/MessageHeader.tsx",
        "code": {
            "showRealName": "const MessageHeader = ({ message }: MessageHeaderProps): ReactElement => {\nconst MessageHeader = ({ message }: MessageHeaderProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\n\tconst showRealName = useMessageListShowRealName();\n\tconst showRealName = useMessageListShowRealName();\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageCollapsible.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/MessageCollapsible.tsx",
        "code": {
            "MessageCollapsible": "const MessageCollapsible = ({ children, title, hasDownload, link, size, isCollapsed }: MessageCollapsibleProps): ReactElement => {\nconst MessageCollapsible = ({ children, title, hasDownload, link, size, isCollapsed }: MessageCollapsibleProps): ReactElement => {\n\tconst [collapsed, collapse] = useCollapse(isCollapsed);\n\tconst [collapsed, collapse] = useCollapse(isCollapsed);\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='row' color='hint' fontScale='c1' alignItems='center'>\n\t\t\t\t<Box withTruncatedText title={title}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ReadReceiptIndicator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/ReadReceiptIndicator.tsx",
        "code": {
            "ReadReceiptIndicator": "const ReadReceiptIndicator = ({ unread }: ReadReceiptIndicatorProps): ReactElement | null => (\nconst ReadReceiptIndicator = ({ unread }: ReadReceiptIndicatorProps): ReactElement | null => ("
        },
        "depth_rank": 9
    },
    {
        "file": "StatusIndicators.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/StatusIndicators.tsx",
        "code": {
            "starred": "const StatusIndicators = ({ message }: StatusIndicatorsProps): ReactElement => {\nconst StatusIndicators = ({ message }: StatusIndicatorsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst translated = useShowTranslated(message);\n\tconst translated = useShowTranslated(message);\n\tconst starred = useShowStarred({ message });\n\tconst starred = useShowStarred({ message });",
            "following": "\tconst following = useShowFollowing({ message });\n\tconst following = useShowFollowing({ message });",
            "formatter": "\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isOtrMessage = isOTRMessage(message) || isOTRAckMessage(message);\n\tconst isOtrMessage = isOTRMessage(message) || isOTRAckMessage(message);\n\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\tconst formatter = useMessageDateFormatter();\n\tconst formatter = useMessageDateFormatter();\n\n\treturn (\n\t\t<MessageStatusIndicator>\n\t\t\t{translated && <MessageStatusIndicatorItem name='language' title={t('Translated')} />}"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageContentBody.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/MessageContentBody.tsx",
        "code": {
            "MessageContentBody": "const MessageContentBody = ({ mentions, channels, md, searchText }: MessageContentBodyProps) => (\nconst MessageContentBody = ({ mentions, channels, md, searchText }: MessageContentBodyProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "MessageToolbarHolder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/MessageToolbarHolder.tsx",
        "code": {
            "subscription": "const MessageToolbarHolder = ({ message, context }: MessageToolbarHolderProps): ReactElement => {\nconst MessageToolbarHolder = ({ message, context }: MessageToolbarHolderProps): ReactElement => {\n\tconst ref = useRef(null);\n\tconst ref = useRef(null);\n\n\tconst [isVisible] = useIsVisible(ref);\n\tconst [isVisible] = useIsVisible(ref);\n\tconst [kebabOpen, setKebabOpen] = useState(false);\n\tconst [kebabOpen, setKebabOpen] = useState(false);\n\n\tconst showToolbox = isVisible || kebabOpen;\n\tconst showToolbox = isVisible || kebabOpen;\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst depsQueryResult = useQuery(['toolbox', message._id, context], async () => {\n\tconst depsQueryResult = useQuery(['toolbox', message._id, context], async () => {\n\t\tconst room = await chat?.data.findRoom();\n\t\tconst room = await chat?.data.findRoom();\n\t\tconst subscription = await chat?.data.findSubscription();\n\t\tconst subscription = await chat?.data.findSubscription();\n\t\treturn {\n\t\t\troom,\n\t\t\tsubscription,\n\t\t};\n\t});\n\n\treturn (\n\t\t<MessageToolbarWrapper ref={ref} visible={kebabOpen}>"
        },
        "depth_rank": 9
    },
    {
        "file": "Attachments.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/Attachments.tsx",
        "code": {
            "Attachments": "const Attachments = ({ attachments, id }: AttachmentsProps): ReactElement => {\nconst Attachments = ({ attachments, id }: AttachmentsProps): ReactElement => {\n\treturn (\n\t\t<>\n\t\t\t{attachments?.map((attachment, index) => (\n\t\t\t\t<AttachmentsItem key={index} id={id} attachment={{ ...attachment }} />"
        },
        "depth_rank": 10
    },
    {
        "file": "Action.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/Action.tsx",
        "code": {
            "Action": "const Action = (props: ActionProps): ReactElement => <IconButton mi={2} mini {...props} />;\nconst Action = (props: ActionProps): ReactElement => <IconButton mi={2} mini {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "ThreadMetrics.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/ThreadMetrics.tsx",
        "code": {
            "toggleFollowingThreadMutation": "const ThreadMetrics = ({ unread, mention, all, rid, mid, counter, participants, following, lm }: ThreadMetricsProps): ReactElement => {\nconst ThreadMetrics = ({ unread, mention, all, rid, mid, counter, participants, following, lm }: ThreadMetricsProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst format = useTimeAgo();\n\tconst format = useTimeAgo();\n\n\tconst goToThread = useGoToThread();\n\tconst goToThread = useGoToThread();\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst toggleFollowingThreadMutation = useToggleFollowingThreadMutation({\n\tconst toggleFollowingThreadMutation = useToggleFollowingThreadMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 10
    },
    {
        "file": "UrlPreviews.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/UrlPreviews.tsx",
        "code": {
            "imageWidth": "const normalizeMeta = ({ url, meta }: { url: string; meta: Record<string, string> }): OEmbedPreviewMetadata => {\nconst normalizeMeta = ({ url, meta }: { url: string; meta: Record<string, string> }): OEmbedPreviewMetadata => {\n\tconst image = meta.ogImage || meta.twitterImage || meta.msapplicationTileImage || meta.oembedThumbnailUrl || meta.oembedThumbnailUrl;\n\tconst image = meta.ogImage || meta.twitterImage || meta.msapplicationTileImage || meta.oembedThumbnailUrl || meta.oembedThumbnailUrl;\n\n\tconst imageHeight = meta.ogImageHeight || meta.oembedHeight || meta.oembedThumbnailHeight;\n\tconst imageHeight = meta.ogImageHeight || meta.oembedHeight || meta.oembedThumbnailHeight;\n\tconst imageWidth = meta.ogImageWidth || meta.oembedWidth || meta.oembedThumbnailWidth;\n\tconst imageWidth = meta.ogImageWidth || meta.oembedWidth || meta.oembedThumbnailWidth;\n\n\treturn Object.fromEntries(\n\t\tObject.entries({\n\t\t\tsiteName: meta.ogSiteName || meta.oembedProviderName,\n\t\t\tsiteUrl: meta.ogUrl || meta.oembedProviderUrl,\n\t\t\ttitle: meta.ogTitle || meta.twitterTitle || meta.title || meta.pageTitle || meta.oembedTitle,\n\t\t\tdescription: meta.ogDescription || meta.twitterDescription || meta.description,\n\t\t\tauthorName: meta.oembedAuthorName,\n\t\t\tauthorUrl: meta.oembedAuthorUrl,\n\t\t\t...(image && {\n\t\t\t\timage: {\n\t\t\t\t\turl: buildImageURL(url, image),\n\t\t\t\t\tdimensions: {\n\t\t\t\t\t\t...(imageHeight && { height: imageHeight }),",
            "hasContentType": "const hasContentType = (headers: OembedUrlLegacy['headers']): headers is { contentType: string } =>\nconst hasContentType = (headers: OembedUrlLegacy['headers']): headers is { contentType: string } =>",
            "data": "\tconst data = hasMeta(url) ? normalizeMeta(url) : undefined;\n\tconst data = hasMeta(url) ? normalizeMeta(url) : undefined;\n\tif (data && isValidPreviewMeta(data)) {\n\t\treturn { type: 'oembed', data };",
            "isMetaPreview": "const isMetaPreview = (_data: PreviewData['data'], type: PreviewTypes): _data is OEmbedPreviewMetadata => type === 'oembed';\nconst isMetaPreview = (_data: PreviewData['data'], type: PreviewTypes): _data is OEmbedPreviewMetadata => type === 'oembed';\n\ntype UrlPreviewsProps = { urls: OembedUrlLegacy[] };",
            "UrlPreviews": "const UrlPreviews = ({ urls }: UrlPreviewsProps): ReactElement | null => {\nconst UrlPreviews = ({ urls }: UrlPreviewsProps): ReactElement | null => {\n\tconst { maxWidth: oembedMaxWidth } = useOembedLayout();\n\tconst { maxWidth: oembedMaxWidth } = useOembedLayout();",
            "metaAndHeaders": "\tconst metaAndHeaders = urls.map(processMetaAndHeaders).filter(isPreviewData);\n\tconst metaAndHeaders = urls.map(processMetaAndHeaders).filter(isPreviewData);\n\n\treturn (\n\t\t<>\n\t\t\t{metaAndHeaders.map(({ type, data }, index) => {\n\t\t\t\tif (isMetaPreview(data, type)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MessageBlock width='100%' maxWidth={oembedMaxWidth} key={index}>"
        },
        "depth_rank": 10
    },
    {
        "file": "Reactions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/Reactions.tsx",
        "code": {
            "openEmojiPicker": "const Reactions = ({ message }: ReactionsProps): ReactElement => {\nconst Reactions = ({ message }: ReactionsProps): ReactElement => {\n\tconst hasReacted = useUserHasReacted(message);\n\tconst hasReacted = useUserHasReacted(message);\n\tconst openEmojiPicker = useOpenEmojiPicker(message);\n\tconst openEmojiPicker = useOpenEmojiPicker(message);\n\tconst { username } = useContext(MessageListContext);\n\tconst { username } = useContext(MessageListContext);",
            "toggleReactionMutation": "\tconst toggleReactionMutation = useToggleReactionMutation();\n\tconst toggleReactionMutation = useToggleReactionMutation();\n\n\treturn (\n\t\t<MessageReactions>\n\t\t\t{message.reactions &&\n\t\t\t\tObject.entries(message.reactions).map(([name, reactions]) => (\n\t\t\t\t\t<Reaction\n\t\t\t\t\t\tkey={name}"
        },
        "depth_rank": 10
    },
    {
        "file": "Reaction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/reactions/Reaction.tsx",
        "code": {
            "closeTooltip": "const getTranslationKey = (users: string[], mine: boolean): TranslationKey => {\nconst getTranslationKey = (users: string[], mine: boolean): TranslationKey => {\n\tif (users.length === 0) {\n\t\tif (mine) {\n\t\t\treturn 'You_reacted_with';\n\t\t}\n\t}\n\n\tif (users.length > 10) {\n\t\tif (mine) {\n\t\t\treturn 'You_users_and_more_Reacted_with';\n\t\t}\n\t\treturn 'Users_and_more_reacted_with';\n\t}\n\n\tif (mine) {\n\t\treturn 'You_and_users_Reacted_with';\n\t}\n\treturn 'Users_reacted_with';\n};\n\ntype ReactionProps = {\n\thasReacted: (name: string) => boolean;\n\tcounter: number;\n\tname: string;\n\tnames: string[];\n\tmessageId: string;\n\tonClick: () => void;\n};\n\nconst Reaction = ({ hasReacted, counter, name, names, messageId, ...props }: ReactionProps): ReactElement => {\nconst Reaction = ({ hasReacted, counter, name, names, messageId, ...props }: ReactionProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst ref = useRef<HTMLDivElement>(null);\n\tconst openTooltip = useTooltipOpen();\n\tconst openTooltip = useTooltipOpen();\n\tconst closeTooltip = useTooltipClose();\n\tconst closeTooltip = useTooltipClose();\n\tconst { showRealName, username } = useContext(MessageListContext);\n\tconst { showRealName, username } = useContext(MessageListContext);",
            "data": "\t\t\t\tconst data = await getMessage(messageId);\n\t\t\t\tconst data = await getMessage(messageId);\n\n\t\t\t\tconst { reactions } = data;\n\t\t\t\tconst { reactions } = data;"
        },
        "depth_rank": 11
    },
    {
        "file": "useToggleReactionMutation.spec.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/reactions/useToggleReactionMutation.spec.tsx",
        "code": {
            "fn": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst { result } = renderHook(() => useToggleReactionMutation(), {\n\tconst { result } = renderHook(() => useToggleReactionMutation(), {\n\t\twrapper: mockAppRoot().withEndpoint('POST', '/v1/chat.react', fn).build(),\n\t});\n\n\tawait act(async () => {\n\t\texpect(result.current.mutateAsync({ mid: 'MID', reaction: 'smile' })).rejects.toThrowError();"
        },
        "depth_rank": 11
    },
    {
        "file": "FileAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/FileAttachment.tsx",
        "code": {
            "FileAttachment": "const FileAttachment = (attachment: FileAttachmentProps) => {\nconst FileAttachment = (attachment: FileAttachmentProps) => {\n\tif (isFileImageAttachment(attachment)) {\n\t\treturn <ImageAttachment {...attachment} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "DefaultAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/DefaultAttachment.tsx",
        "code": {
            "applyMarkdownIfRequires": "const applyMarkdownIfRequires = (\nconst applyMarkdownIfRequires = (\n\tlist: MessageAttachmentDefault['mrkdwn_in'] = ['text', 'pretext'],\n\tkey: MarkdownFields,\n\ttext: string,\n\tvariant: ComponentProps<typeof MarkdownText>['variant'] = 'inline',\n): ReactNode => (list?.includes(key) ? <MarkdownText parseEmoji variant={variant} content={text} /> : text);"
        },
        "depth_rank": 11
    },
    {
        "file": "QuoteAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/QuoteAttachment.tsx",
        "code": {
            "displayAvatarPreference": "\tconst formatTime = useTimeAgo();\n\tconst formatTime = useTimeAgo();\n\tconst displayAvatarPreference = useUserPreference('displayAvatars');\n\tconst displayAvatarPreference = useUserPreference('displayAvatars');\n\n\treturn (\n\t\t<>\n\t\t\t<AttachmentContent className={quoteStyles} width='full'>"
        },
        "depth_rank": 11
    },
    {
        "file": "AttachmentsItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/AttachmentsItem.tsx",
        "code": {
            "AttachmentsItem": "const AttachmentsItem = ({ attachment, id }: AttachmentsItemProps): ReactElement => {\nconst AttachmentsItem = ({ attachment, id }: AttachmentsItemProps): ReactElement => {\n\tif (isFileAttachment(attachment)) {\n\t\treturn <FileAttachment id={id} {...attachment} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "ActionAttachmentButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/default/ActionAttachmentButton.tsx",
        "code": {
            "performActionMutation": "const ActionAttachmentButton = ({ children, processingType, msg, mid }: ActionAttachmentButtonProps): ReactElement => {\nconst ActionAttachmentButton = ({ children, processingType, msg, mid }: ActionAttachmentButtonProps): ReactElement => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst performActionMutation = usePerformActionMutation({\n\tconst performActionMutation = usePerformActionMutation({\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });"
        },
        "depth_rank": 12
    },
    {
        "file": "ActionAttachtment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/default/ActionAttachtment.tsx",
        "code": {
            "handleLinkClick": "\tconst handleLinkClick = useExternalLink();\n\tconst handleLinkClick = useExternalLink();\n\n\treturn (\n\t\t<Box mb={4}>",
            "content": "\t\t\t\t\t\tconst content = image ? <Box is='img' src={image} maxHeight={200} /> : text;\n\t\t\t\t\t\tconst content = image ? <Box is='img' src={image} maxHeight={200} /> : text;"
        },
        "depth_rank": 12
    },
    {
        "file": "VideoAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/VideoAttachment.tsx",
        "code": {
            "VideoAttachment": "const VideoAttachment = ({\nconst VideoAttachment = ({\n\ttitle,\n\tvideo_url: url,\n\tvideo_type: type,\n\tvideo_size: size,\n\tdescription,\n\tdescriptionMd,\n\ttitle_link: link,\n\ttitle_link_download: hasDownload,\n\tcollapsed,\n}: VideoAttachmentProps) => {",
            "getURL": "\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "GenericFileAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/GenericFileAttachment.tsx",
        "code": {
            "GenericFileAttachment": "const openDocumentViewer = window.RocketChatDesktop?.openDocumentViewer;\nconst openDocumentViewer = window.RocketChatDesktop?.openDocumentViewer;\n\ntype GenericFileAttachmentProps = MessageAttachmentBase;\n\nconst GenericFileAttachment = ({\nconst GenericFileAttachment = ({\n\ttitle,\n\tdescription,\n\tdescriptionMd,\n\ttitle_link: link,\n\ttitle_link_download: hasDownload,\n\tsize,\n\tformat,\n\tcollapsed,\n}: GenericFileAttachmentProps) => {"
        },
        "depth_rank": 12
    },
    {
        "file": "AudioAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/AudioAttachment.tsx",
        "code": {
            "AudioAttachment": "const AudioAttachment = ({\nconst AudioAttachment = ({\n\ttitle,\n\taudio_url: url,\n\taudio_type: type,\n\taudio_size: size,\n\tdescription,\n\tdescriptionMd,\n\ttitle_link: link,\n\ttitle_link_download: hasDownload,\n\tcollapsed,\n}: AudioAttachmentProps) => {",
            "getURL": "\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "ImageAttachment.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/file/ImageAttachment.tsx",
        "code": {
            "ImageAttachment": "const ImageAttachment = ({\nconst ImageAttachment = ({\n\tid,\n\ttitle,\n\timage_url: url,\n\timage_preview: imagePreview,\n\timage_size: size,\n\timage_dimensions: imageDimensions = {\n\t\twidth: 368,\n\t\theight: 368,\n\t},\n\tdescription,\n\tdescriptionMd,\n\ttitle_link: link,\n\ttitle_link_download: hasDownload,\n\tcollapsed,\n}: ImageAttachmentProps) => {",
            "getURL": "\tconst [loadImage, setLoadImage] = useLoadImage();\n\tconst [loadImage, setLoadImage] = useLoadImage();\n\tconst getURL = useMediaUrl();\n\tconst getURL = useMediaUrl();\n\n\treturn (\n\t\t<>\n\t\t\t{descriptionMd ? <MessageContentBody md={descriptionMd} /> : <MarkdownText parseEmoji content={description} />}"
        },
        "depth_rank": 12
    },
    {
        "file": "AttachmentAuthorAvatar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/structure/AttachmentAuthorAvatar.tsx",
        "code": {
            "AttachmentAuthorAvatar": "const AttachmentAuthorAvatar = ({ url }: { url: string }): ReactElement => <BaseAvatar url={url} size='x24' />;\nconst AttachmentAuthorAvatar = ({ url }: { url: string }): ReactElement => <BaseAvatar url={url} size='x24' />;"
        },
        "depth_rank": 12
    },
    {
        "file": "AttachmentImage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/attachments/structure/AttachmentImage.tsx",
        "code": {
            "getDimensions": "const getDimensions = (\nconst getDimensions = (\n\toriginalWidth: Dimensions['width'],\n\toriginalHeight: Dimensions['height'],\n\tlimits: { width: number; height: number },",
            "limits": "const AttachmentImage: FC<AttachmentImageProps> = ({ id, previewUrl, dataSrc, loadImage = true, setLoadImage, src, ...size }) => {\nconst AttachmentImage: FC<AttachmentImageProps> = ({ id, previewUrl, dataSrc, loadImage = true, setLoadImage, src, ...size }) => {\n\tconst limits = useAttachmentDimensions();\n\tconst limits = useAttachmentDimensions();\n\n\tconst [error, setError] = useState(false);\n\tconst [error, setError] = useState(false);\n\n\tconst { width = limits.width, height = limits.height } = size;\n\tconst { width = limits.width, height = limits.height } = size;"
        },
        "depth_rank": 12
    },
    {
        "file": "OEmbedCollapsible.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedCollapsible.tsx",
        "code": {
            "t": "const OEmbedCollapsible = ({ children, ...props }: OEmbedCollapsibleProps): ReactElement => {\nconst OEmbedCollapsible = ({ children, ...props }: OEmbedCollapsibleProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageCollapsible title={t('Link_Preview')}>"
        },
        "depth_rank": 11
    },
    {
        "file": "OEmbedResolver.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedResolver.tsx",
        "code": {
            "OEmbedResolver": "const OEmbedResolver = ({ meta }: OEmbedResolverProps): ReactElement | null => {\nconst OEmbedResolver = ({ meta }: OEmbedResolverProps): ReactElement | null => {\n\tswitch (meta.type) {\n\t\tcase 'rich':\n\t\tcase 'video':\n\t\t\treturn <OEmbedHtmlPreview {...meta} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "UrlAudioPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlAudioPreview.tsx",
        "code": {
            "UrlAudioPreview": "const UrlAudioPreview = ({ url }: UrlAudioPreviewProps): ReactElement => <AudioPlayer src={url} />;\nconst UrlAudioPreview = ({ url }: UrlAudioPreviewProps): ReactElement => <AudioPlayer src={url} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "UrlPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlPreview.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<>\n\t\t\t<Box display='flex' flexDirection='row' color='hint' fontScale='c1' alignItems='center'>\n\t\t\t\t{t('Link_Preview')} {collapse}"
        },
        "depth_rank": 11
    },
    {
        "file": "OEmbedPreviewContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedPreviewContent.tsx",
        "code": {
            "OEmbedPreviewContent": "const OEmbedPreviewContent = ({\nconst OEmbedPreviewContent = ({\n\ttitle,\n\tdescription,\n\turl,\n\tthumb,\n\tauthorName,\n\tauthorUrl,\n\tsiteName,\n\tsiteUrl,\n}: OEmbedPreviewContentProps): ReactElement => {",
            "showFooterSeparator": "\tconst showSiteName = siteName && siteUrl;\n\tconst showSiteName = siteName && siteUrl;\n\tconst showAuthorName = authorName && authorUrl;\n\tconst showAuthorName = authorName && authorUrl;\n\tconst showFooterSeparator = showSiteName && showAuthorName;\n\tconst showFooterSeparator = showSiteName && showAuthorName;\n\n\treturn (\n\t\t<MessageGenericPreviewContent thumb={thumb}>"
        },
        "depth_rank": 11
    },
    {
        "file": "UrlPreviewResolver.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlPreviewResolver.tsx",
        "code": {
            "UrlPreviewResolver": "const UrlPreviewResolver = ({ url, type, originalType }: UrlPreviewMetadata): ReactElement | null => {\nconst UrlPreviewResolver = ({ url, type, originalType }: UrlPreviewMetadata): ReactElement | null => {\n\tswitch (type) {\n\t\tcase 'audio':\n\t\t\treturn <UrlAudioPreview url={url} />;"
        },
        "depth_rank": 11
    },
    {
        "file": "OEmbedHtmlPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedHtmlPreview.tsx",
        "code": {
            "OEmbedHtmlPreview": "const OEmbedHtmlPreview = ({ html, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedHtmlPreview = ({ html, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "OEmbedImagePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedImagePreview.tsx",
        "code": {
            "OEmbedImagePreview": "const OEmbedImagePreview = ({ image, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedImagePreview = ({ image, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "OEmbedLinkPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/OEmbedLinkPreview.tsx",
        "code": {
            "OEmbedLinkPreview": "const OEmbedLinkPreview = ({ image, url, ...props }: OEmbedPreviewMetadata): ReactElement => (\nconst OEmbedLinkPreview = ({ image, url, ...props }: OEmbedPreviewMetadata): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "UrlImagePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlImagePreview.tsx",
        "code": {
            "UrlImagePreview": "const UrlImagePreview = ({ url }: Pick<UrlPreviewMetadata, 'url'>): ReactElement => {\nconst UrlImagePreview = ({ url }: Pick<UrlPreviewMetadata, 'url'>): ReactElement => {\n\tconst { maxHeight: oembedMaxHeight } = useOembedLayout();\n\tconst { maxHeight: oembedMaxHeight } = useOembedLayout();"
        },
        "depth_rank": 11
    },
    {
        "file": "UrlVideoPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/urlPreviews/UrlVideoPreview.tsx",
        "code": {
            "style": "const style = { maxWidth: '100%' };\nconst style = { maxWidth: '100%' };",
            "UrlVideoPreview": "const UrlVideoPreview = ({ url, originalType }: Omit<UrlPreviewMetadata, 'type'>): ReactElement => (\nconst UrlVideoPreview = ({ url, originalType }: Omit<UrlPreviewMetadata, 'type'>): ReactElement => ("
        },
        "depth_rank": 11
    },
    {
        "file": "MapViewImage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/content/location/MapViewImage.tsx",
        "code": {
            "t": "const MapViewImage: FC<MapViewImageProps> = ({ linkUrl, imageUrl }) => {\nconst MapViewImage: FC<MapViewImageProps> = ({ linkUrl, imageUrl }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<ExternalLink to={linkUrl}>"
        },
        "depth_rank": 11
    },
    {
        "file": "useOembedLayout.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/hooks/useOembedLayout.ts",
        "code": {
            "enabled": "\tconst enabled = useSetting<boolean>('API_Embed', false);\n\tconst enabled = useSetting<boolean>('API_Embed', false);\n\tconst { isMobile } = useLayout();\n\tconst { isMobile } = useLayout();",
            "maxHeight": "\tconst maxWidth = isMobile ? ('100%' as const) : 368;\n\tconst maxWidth = isMobile ? ('100%' as const) : 368;\n\tconst maxHeight = 368;\n\tconst maxHeight = 368;\n\n\treturn { enabled, maxWidth, maxHeight };"
        },
        "depth_rank": 10
    },
    {
        "file": "UiKitMessageBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/uikit/UiKitMessageBlock.tsx",
        "code": {
            "contextValue": "const UiKitMessageBlock = ({ rid, mid, blocks }: UiKitMessageBlockProps) => {\nconst UiKitMessageBlock = ({ rid, mid, blocks }: UiKitMessageBlockProps) => {\n\tconst contextValue = useMessageBlockContextValue(rid, mid);\n\tconst contextValue = useMessageBlockContextValue(rid, mid);\n\n\treturn (\n\t\t<MessageBlock fixedWidth>\n\t\t\t<UiKitContext.Provider value={contextValue}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageRoles.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/header/MessageRoles.tsx",
        "code": {
            "t": "const MessageRoles = ({ roles, isBot }: MessageRolesProps): ReactElement | null => {\nconst MessageRoles = ({ roles, isBot }: MessageRolesProps): ReactElement | null => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<FuselageMessageRoles>\n\t\t\t{roles.map((role, index) => (\n\t\t\t\t<MessageRole key={index}>{role}</MessageRole>"
        },
        "depth_rank": 10
    },
    {
        "file": "ThreadMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/ThreadMessage.tsx",
        "code": {
            "editing": "const ThreadMessage = ({ message, sequential, unread, showUserAvatar }: ThreadMessageProps): ReactElement => {\nconst ThreadMessage = ({ message, sequential, unread, showUserAvatar }: ThreadMessageProps): ReactElement => {\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst editing = useIsMessageHighlight(message._id);\n\tconst editing = useIsMessageHighlight(message._id);\n\tconst [ignored, toggleIgnoring] = useToggle((message as { ignored?: boolean }).ignored);\n\tconst [ignored, toggleIgnoring] = useToggle((message as { ignored?: boolean }).ignored);"
        },
        "depth_rank": 10
    },
    {
        "file": "SystemMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/SystemMessage.tsx",
        "code": {
            "showRealName": "const SystemMessage = ({ message, showUserAvatar }: SystemMessageProps): ReactElement => {\nconst SystemMessage = ({ message, showUserAvatar }: SystemMessageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst formatTime = useFormatTime();\n\tconst formatTime = useFormatTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst formatDateAndTime = useFormatDateAndTime();\n\tconst chat = useChat();\n\tconst chat = useChat();\n\n\tconst showRealName = useMessageListShowRealName();\n\tconst showRealName = useMessageListShowRealName();\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };",
            "isSelected": "\tconst messageType = MessageTypes.getType(message);\n\tconst messageType = MessageTypes.getType(message);\n\n\tconst isSelecting = useIsSelecting();\n\tconst isSelecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tuseCountSelected();\n\n\treturn (\n\t\t<MessageSystem\n\t\t\tonClick={isSelecting ? toggleSelected : undefined}"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/RoomMessage.tsx",
        "code": {
            "RoomMessage": "const RoomMessage = ({\nconst RoomMessage = ({\n\tmessage,\n\tshowUserAvatar,\n\tsequential,\n\tall,\n\tmention,\n\tunread,\n\tcontext,\n\tignoredUser,\n\tsearchText,\n}: RoomMessageProps): ReactElement => {",
            "selected": "\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst messageRef = useRef(null);\n\tconst messageRef = useRef(null);\n\n\tconst selecting = useIsSelecting();\n\tconst selecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst selected = useIsSelectedMessage(message._id);\n\tconst selected = useIsSelectedMessage(message._id);\n\n\tuseCountSelected();\n\n\tuseJumpToMessage(message._id, messageRef);\n\treturn (\n\t\t<Message\n\t\t\tref={messageRef}"
        },
        "depth_rank": 10
    },
    {
        "file": "ThreadMessagePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/ThreadMessagePreview.tsx",
        "code": {
            "previewMessage": "const ThreadMessagePreview = ({ message, showUserAvatar, sequential, ...props }: ThreadMessagePreviewProps): ReactElement => {\nconst ThreadMessagePreview = ({ message, showUserAvatar, sequential, ...props }: ThreadMessagePreviewProps): ReactElement => {\n\tconst parentMessage = useParentMessage(message.tmid);\n\tconst parentMessage = useParentMessage(message.tmid);\n\n\tconst translated = useShowTranslated(message);\n\tconst translated = useShowTranslated(message);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst isSelecting = useIsSelecting();\n\tconst isSelecting = useIsSelecting();\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst toggleSelected = useToggleSelect(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tconst isSelected = useIsSelectedMessage(message._id);\n\tuseCountSelected();\n\n\tconst messageType = parentMessage.isSuccess ? MessageTypes.getType(parentMessage.data) : null;\n\tconst messageType = parentMessage.isSuccess ? MessageTypes.getType(parentMessage.data) : null;\n\tconst messageBody = useMessageBody(parentMessage.data, message.rid);\n\tconst messageBody = useMessageBody(parentMessage.data, message.rid);\n\n\tconst previewMessage = isParsedMessage(messageBody) ? { md: messageBody } : { msg: messageBody };\n\tconst previewMessage = isParsedMessage(messageBody) ? { md: messageBody } : { msg: messageBody };",
            "goToThread": "\tconst goToThread = useGoToThread();\n\tconst goToThread = useGoToThread();\n\n\treturn (\n\t\t<ThreadMessage\n\t\t\t{...props}"
        },
        "depth_rank": 10
    },
    {
        "file": "ThreadMessageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/thread/ThreadMessageContent.tsx",
        "code": {
            "encrypted": "const ThreadMessageContent = ({ message }: ThreadMessageContentProps): ReactElement => {\nconst ThreadMessageContent = ({ message }: ThreadMessageContentProps): ReactElement => {\n\tconst encrypted = isE2EEMessage(message);\n\tconst encrypted = isE2EEMessage(message);\n\tconst { enabled: oembedEnabled } = useOembedLayout();\n\tconst { enabled: oembedEnabled } = useOembedLayout();",
            "uid": "\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 11
    },
    {
        "file": "RoomMessageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/room/RoomMessageContent.tsx",
        "code": {
            "encrypted": "const RoomMessageContent = ({ message, unread, all, mention, searchText }: RoomMessageContentProps): ReactElement => {\nconst RoomMessageContent = ({ message, unread, all, mention, searchText }: RoomMessageContentProps): ReactElement => {\n\tconst encrypted = isE2EEMessage(message);\n\tconst encrypted = isE2EEMessage(message);\n\tconst { enabled: oembedEnabled } = useOembedLayout();\n\tconst { enabled: oembedEnabled } = useOembedLayout();",
            "uid": "\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst subscription = useSubscriptionFromMessageQuery(message).data ?? undefined;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst broadcast = subscription?.broadcast ?? false;\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\n\tconst messageUser: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };"
        },
        "depth_rank": 11
    },
    {
        "file": "ThreadMessagePreviewBody.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/variants/threadPreview/ThreadMessagePreviewBody.tsx",
        "code": {
            "getMessage": "const ThreadMessagePreviewBody = ({ message }: ThreadMessagePreviewBodyProps): ReactElement => {\nconst ThreadMessagePreviewBody = ({ message }: ThreadMessagePreviewBodyProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\tconst isEncryptedMessage = isE2EEMessage(message);\n\n\tconst getMessage = () => {\n\tconst getMessage = () => {\n\t\tconst mdTokens: Root | undefined = message.md && [...message.md];\n\t\tconst mdTokens: Root | undefined = message.md && [...message.md];\n\t\tif (\n\t\t\tmessage.attachments &&\n\t\t\tArray.isArray(message.attachments) &&\n\t\t\tmessage.attachments.length > 0 &&\n\t\t\tisQuoteAttachment(message.attachments[0])\n\t\t) {\n\t\t\tmdTokens?.shift();\n\t\t}\n\t\tif (message.attachments && message.msg === '') {\n\t\t\treturn <>{t('Message_with_attachment')}</>;"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageActionMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/toolbar/MessageActionMenu.tsx",
        "code": {
            "groupOptions": "const getSectionOrder = (section: string): number => {\nconst getSectionOrder = (section: string): number => {\n\tswitch (section) {\n\t\tcase 'communication':\n\t\t\treturn 0;\n\t\tcase 'interaction':\n\t\t\treturn 1;\n\t\tcase 'duplication':\n\t\t\treturn 2;\n\t\tcase 'apps':\n\t\t\treturn 3;\n\t\tcase 'management':\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 5;\n\t}\n};\n\nconst MessageActionMenu = ({ options, onChangeMenuVisibility, ...props }: MessageActionMenuProps): ReactElement => {\nconst MessageActionMenu = ({ options, onChangeMenuVisibility, ...props }: MessageActionMenuProps): ReactElement => {\n\tconst buttonRef = useRef<HTMLButtonElement | null>(null);\n\tconst buttonRef = useRef<HTMLButtonElement | null>(null);\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [visible, setVisible] = useState(false);\n\tconst [visible, setVisible] = useState(false);\n\tconst isLayoutEmbedded = useEmbeddedLayout();\n\tconst isLayoutEmbedded = useEmbeddedLayout();\n\n\tconst handleChangeMenuVisibility = useCallback(\n\tconst handleChangeMenuVisibility = useCallback(\n\t\t(visible: boolean): void => {\n\t\t\tsetVisible(visible);\n\t\t\tonChangeMenuVisibility(visible);\n\t\t},\n\t\t[onChangeMenuVisibility],\n\t);\n\n\tconst groupOptions = options.reduce((acc, option) => {\n\tconst groupOptions = options.reduce((acc, option) => {\n\t\tconst { type = '' } = option;\n\t\tconst { type = '' } = option;",
            "handleClose": "\tconst handleClose = useCallback(() => {\n\tconst handleClose = useCallback(() => {\n\t\thandleChangeMenuVisibility(false);\n\t}, [handleChangeMenuVisibility]);\n\treturn (\n\t\t<>\n\t\t\t<MessageToolbarItem\n\t\t\t\tref={buttonRef}"
        },
        "depth_rank": 10
    },
    {
        "file": "ToolbarDropdown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/toolbar/ToolbarDropdown.tsx",
        "code": {
            "ToolbarDropdown": "const ToolbarDropdown = <TReferenceElement extends HTMLElement>({\nconst ToolbarDropdown = <TReferenceElement extends HTMLElement>({\n\tchildren,\n\thandleClose,\n\treference,\n}: ToolbarDropdownProps<TReferenceElement>): ReactElement => {",
            "Dropdown": "\tconst target = useRef<HTMLButtonElement>(null);\n\tconst target = useRef<HTMLButtonElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\n\tconst Dropdown = isMobile ? MobileToolbarDropdown : DesktopToolbarDropdown;\n\tconst Dropdown = isMobile ? MobileToolbarDropdown : DesktopToolbarDropdown;\n\n\tuseOutsideClick([boxRef], handleClose);\n\n\treturn (\n\t\t<Dropdown ref={target} reference={reference}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageToolbar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/toolbar/MessageToolbar.tsx",
        "code": {
            "MessageToolbar": "const getMessageContext = (message: IMessage, room: IRoom, context?: MessageActionContext): MessageActionContext => {\nconst getMessageContext = (message: IMessage, room: IRoom, context?: MessageActionContext): MessageActionContext => {\n\tif (context) {\n\t\treturn context;\n\t}\n\n\tif (isVideoConfMessage(message)) {\n\t\treturn 'videoconf';\n\t}\n\n\tif (isRoomFederated(room)) {\n\t\treturn 'federated';\n\t}\n\n\tif (isThreadMessage(message)) {\n\t\treturn 'threads';\n\t}\n\n\treturn 'message';\n};\n\ntype MessageToolbarProps = {\n\tmessage: IMessage & Partial<ITranslatedMessage>;\n\tmessageContext?: MessageActionContext;\n\troom: IRoom;\n\tsubscription?: ISubscription;\n\tonChangeMenuVisibility: (visible: boolean) => void;\n};\n\nconst MessageToolbar = ({\nconst MessageToolbar = ({\n\tmessage,\n\tmessageContext,\n\troom,\n\tsubscription,\n\tonChangeMenuVisibility,\n}: MessageToolbarProps): ReactElement | null => {",
            "chat": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser() ?? undefined;\n\tconst user = useUser() ?? undefined;\n\tconst settings = useSettings();\n\tconst settings = useSettings();\n\n\tconst quickReactionsEnabled = useFeaturePreview('quickReactions');\n\tconst quickReactionsEnabled = useFeaturePreview('quickReactions');\n\n\tconst setReaction = useMethod('setReaction');\n\tconst setReaction = useMethod('setReaction');\n\n\tconst context = getMessageContext(message, room, messageContext);\n\tconst context = getMessageContext(message, room, messageContext);\n\n\tconst mapSettings = useMemo(() => Object.fromEntries(settings.map((setting) => [setting._id, setting.value])), [settings]);\n\tconst mapSettings = useMemo(() => Object.fromEntries(settings.map((setting) => [setting._id, setting.value])), [settings]);\n\n\tconst chat = useChat();\n\tconst chat = useChat();\n\tconst { quickReactions, addRecentEmoji } = useEmojiPickerData();\n\tconst { quickReactions, addRecentEmoji } = useEmojiPickerData();",
            "actionButtonApps": "\tconst actionButtonApps = useMessageActionAppsActionButtons(context);\n\tconst actionButtonApps = useMessageActionAppsActionButtons(context);\n\n\tconst { messageToolbox: hiddenActions } = useLayoutHiddenActions();\n\tconst { messageToolbox: hiddenActions } = useLayoutHiddenActions();",
            "props": "\tconst actionsQueryResult = useQuery(['rooms', room._id, 'messages', message._id, 'actions'] as const, async () => {\n\tconst actionsQueryResult = useQuery(['rooms', room._id, 'messages', message._id, 'actions'] as const, async () => {\n\t\tconst props = { message, room, user, subscription, settings: mapSettings, chat };\n\t\tconst props = { message, room, user, subscription, settings: mapSettings, chat };"
        },
        "depth_rank": 10
    },
    {
        "file": "DesktopToolbarDropdown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/toolbar/DesktopToolbarDropdown.tsx",
        "code": {
            "DesktopToolbarDropdown": "const DesktopToolbarDropdown = forwardRef(function DesktopToolbarDropdown(\nconst DesktopToolbarDropdown = forwardRef(function DesktopToolbarDropdown(\n\t{ reference, children }: DesktopToolbarDropdownProps,"
        },
        "depth_rank": 10
    },
    {
        "file": "MobileToolbarDropdown.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/components/message/toolbar/MobileToolbarDropdown.tsx",
        "code": {
            "MobileToolbarDropdown": "const MobileToolbarDropdown = forwardRef(function MobileToolbarDropdown(\nconst MobileToolbarDropdown = forwardRef(function MobileToolbarDropdown(\n\t{ children, ...props }: MobileToolbarDropdownProps,"
        },
        "depth_rank": 10
    },
    {
        "file": "pinMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/methods/pinMessage.ts",
        "code": {
            "msg": "\t\tconst msg = ChatMessage.findOne({ _id: message._id });\n\t\tconst msg = ChatMessage.findOne({ _id: message._id });"
        },
        "depth_rank": 8
    },
    {
        "file": "NavbarHomeAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/navbar/actions/NavbarHomeAction.tsx",
        "code": {
            "router": "const NavbarHomeAction: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst NavbarHomeAction: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleHome": "\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst showHome = useSetting('Layout_Show_Home_Button');\n\n\tconst routeName = router.getLocationPathname();\n\tconst routeName = router.getLocationPathname();\n\n\tconst handleHome = useMutableCallback(() => {\n\tconst handleHome = useMutableCallback(() => {\n\t\tsidebar.toggle();\n\t\trouter.navigate('/home');\n\t});\n\n\treturn showHome ? (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "NavbarAdministrationAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/navbar/actions/NavbarAdministrationAction.tsx",
        "code": {
            "router": "const NavbarAdministrationAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarAdministrationAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst administrationItems = useAdministrationItems();\n\tconst administrationItems = useAdministrationItems();\n\n\tconst handleAction = useHandleMenuAction(administrationItems);\n\tconst handleAction = useHandleMenuAction(administrationItems);\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "NavbarAuditAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/navbar/actions/NavbarAuditAction.tsx",
        "code": {
            "handleAction": "const NavbarAuditAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarAuditAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst routerName = router.getRouteName();\n\tconst routerName = router.getRouteName();\n\n\tconst auditItems = useAuditItems();\n\tconst auditItems = useAuditItems();\n\n\tconst handleAction = useHandleMenuAction(auditItems);\n\tconst handleAction = useHandleMenuAction(auditItems);\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "NavbarUserAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/navbar/actions/NavbarUserAction.tsx",
        "code": {
            "user": "const NavbarUserAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\nconst NavbarUserAction = (props: AllHTMLAttributes<HTMLLIElement>) => {\n\tconst user = useUser();\n\tconst user = useUser();\n\n\treturn (\n\t\t<NavbarAction {...props}>"
        },
        "depth_rank": 9
    },
    {
        "file": "oauthRedirectUri.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/oauthRedirectUri.ts",
        "code": {
            "_redirectUri": "\t\tfunction _redirectUri(serviceName: string, config: any, params: any, absoluteUrlOptions: any): string;\n\t\tfunction _redirectUri(serviceName: string, config: any, params: any, absoluteUrlOptions: any): string;\n\t}\n}\n\nconst { _redirectUri } = OAuth;\nconst { _redirectUri } = OAuth;"
        },
        "depth_rank": 8
    },
    {
        "file": "ddpOverREST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/ddpOverREST.ts",
        "code": {
            "restParams": "\t\tconst restParams = {\n\t\tconst restParams = {\n\t\t\tmessage: DDPCommon.stringifyDDP({ ...message }),",
            "parsedMessage": "\t\t\t\t\tconst parsedMessage = DDPCommon.parseDDP(_message) as { result?: { token?: string } };\n\t\t\t\t\tconst parsedMessage = DDPCommon.parseDDP(_message) as { result?: { token?: string } };"
        },
        "depth_rank": 8
    },
    {
        "file": "totpOnCall.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/totpOnCall.ts",
        "code": {
            "callWithTotp": "const withSyncTOTP = (call: (name: string, ...args: any[]) => any) => {\nconst withSyncTOTP = (call: (name: string, ...args: any[]) => any) => {\n\tconst callWithTotp =\n\tconst callWithTotp =\n\t\t(methodName: string, args: unknown[], callback: LoginCallback) =>\n\t\t(twoFactorCode: string, twoFactorMethod: string): unknown =>\n\t\t\tcall(\n\t\t\t\tmethodName,\n\t\t\t\t...args,\n\t\t\t\t{ twoFactorCode, twoFactorMethod },",
            "async": "const withAsyncTOTP = (callAsync: (name: string, ...args: any[]) => Promise<any>) => {\nconst withAsyncTOTP = (callAsync: (name: string, ...args: any[]) => Promise<any>) => {\n\treturn async function callAsyncWithTOTP(methodName: string, ...args: unknown[]): Promise<unknown> {\n\treturn async function callAsyncWithTOTP(methodName: string, ...args: unknown[]): Promise<unknown> {\n\t\ttry {\n\t\t\treturn await callAsync(methodName, ...args);\n\t\t} catch (error: unknown) {"
        },
        "depth_rank": 8
    },
    {
        "file": "crowd.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/crowd.ts",
        "code": {
            "loginWithCrowd": "\t\tfunction loginWithCrowd(\n\t\tfunction loginWithCrowd(\n\t\t\tuserDescriptor: { username: string } | { email: string } | { id: string } | string,",
            "loginRequest": "const loginWithCrowd = (userDescriptor: { username: string } | { email: string } | { id: string } | string, password: string) => {\nconst loginWithCrowd = (userDescriptor: { username: string } | { email: string } | { id: string } | string, password: string) => {\n\tconst loginRequest = {\n\tconst loginRequest = {\n\t\tcrowd: true,\n\t\tusername: userDescriptor,\n\t\tcrowdPassword: password,\n\t};\n\n\treturn callLoginMethod({ methodArguments: [loginRequest] });",
            "loginWithCrowdAndTOTP": "const loginWithCrowdAndTOTP = (\nconst loginWithCrowdAndTOTP = (\n\tuserDescriptor: { username: string } | { email: string } | { id: string } | string,"
        },
        "depth_rank": 9
    },
    {
        "file": "saml.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/saml.ts",
        "code": {
            "loginWithSaml": "\t\tfunction loginWithSamlToken(credentialToken: string, callback?: LoginCallback): void;\n\t\tfunction loginWithSamlToken(credentialToken: string, callback?: LoginCallback): void;\n\n\t\tfunction loginWithSaml(options: { provider: string; credentialToken?: string }): void;\n\t\tfunction loginWithSaml(options: { provider: string; credentialToken?: string }): void;",
            "provider": "\tconst samlService = await loginServices.loadLoginService<SAMLConfiguration>('saml');\n\tconst samlService = await loginServices.loadLoginService<SAMLConfiguration>('saml');\n\tif (samlService) {\n\t\tconst provider = (samlService.clientConfig as { provider?: string } | undefined)?.provider;\n\t\tconst provider = (samlService.clientConfig as { provider?: string } | undefined)?.provider;"
        },
        "depth_rank": 9
    },
    {
        "file": "oauth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/oauth.ts",
        "code": {
            "oAuthArgs": "\tconst oAuthArgs = methodArguments.find((arg: any) => arg.oauth);\n\tconst oAuthArgs = methodArguments.find((arg: any) => arg.oauth);\n\tconst { credentialToken, credentialSecret } = oAuthArgs.oauth;\n\tconst { credentialToken, credentialSecret } = oAuthArgs.oauth;"
        },
        "depth_rank": 9
    },
    {
        "file": "password.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/password.ts",
        "code": {
            "loginWithPassword": "\t\tfunction loginWithPassword(\n\t\tfunction loginWithPassword(\n\t\t\tuserDescriptor: { username: string } | { email: string } | { id: string } | string,",
            "loginWithPasswordAndTOTP": "const loginWithPasswordAndTOTP = (\nconst loginWithPasswordAndTOTP = (\n\tuserDescriptor: { username: string } | { email: string } | { id: string } | string,"
        },
        "depth_rank": 9
    },
    {
        "file": "ldap.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/ldap.ts",
        "code": {
            "loginWithLDAP": "const loginWithLDAP = (username: string | { username: string } | { email: string } | { id: string }, ldapPass: string) =>\nconst loginWithLDAP = (username: string | { username: string } | { email: string } | { id: string }, ldapPass: string) =>",
            "loginWithLDAPAndTOTP": "const loginWithLDAPAndTOTP = (\nconst loginWithLDAPAndTOTP = (\n\tusername: string | { username: string } | { email: string } | { id: string },",
            "loginRequest": "\tconst loginRequest = {\n\tconst loginRequest = {\n\t\tldap: true,\n\t\tusername,\n\t\tldapPass,\n\t\tldapOptions: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "google.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/google.ts",
        "code": {
            "loginWithGoogle": "\t\tfunction loginWithGoogle(\n\t\tfunction loginWithGoogle(\n\t\t\toptions?:\n\t\t\t\t| Meteor.LoginWithExternalServiceOptions & {\n\t\t\t\t\t\tloginUrlParameters?: {\n\t\t\t\t\t\t\tinclude_granted_scopes?: boolean;\n\t\t\t\t\t\t\thd?: string;\n\t\t\t\t\t\t};\n\t\t\t\t  },\n\t\t\tcallback?: LoginCallback,\n\t\t): void;\n\t}\n}\n\nconst { loginWithGoogle } = Meteor;\nconst { loginWithGoogle } = Meteor;"
        },
        "depth_rank": 9
    },
    {
        "file": "linkedin.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/meteorOverrides/login/linkedin.ts",
        "code": {
            "loginWithLinkedin": "\t\tfunction loginWithLinkedin(options?: Meteor.LoginWithExternalServiceOptions, callback?: LoginCallback): void;\n\t\tfunction loginWithLinkedin(options?: Meteor.LoginWithExternalServiceOptions, callback?: LoginCallback): void;\n\t}\n}\nconst { loginWithLinkedin } = Meteor;\nconst { loginWithLinkedin } = Meteor;",
            "credentialToken": "const loginWithLinkedinAndTOTP = createOAuthTotpLoginMethod(Linkedin);\nconst loginWithLinkedinAndTOTP = createOAuthTotpLoginMethod(Linkedin);\nMeteor.loginWithLinkedin = (options, callback) => {\n\toverrideLoginMethod(loginWithLinkedin, [options], callback, loginWithLinkedinAndTOTP);\n};\n\nLinkedin.requestCredential = wrapRequestCredentialFn<LinkedinOAuthConfiguration>(\n\t'linkedin',\n\t({ options, credentialRequestCompleteCallback, config, loginStyle }) => {\n\t\tconst credentialToken = Random.secret();\n\t\tconst credentialToken = Random.secret();\n\n\t\tconst { requestPermissions } = options;\n\t\tconst { requestPermissions } = options;"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalContextMock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/stories/contexts/ModalContextMock.tsx",
        "code": {
            "value": "const logAction = action('ModalContext');\nconst logAction = action('ModalContext');\n\ntype ModalContextMockProps = {\n\tchildren: ReactNode;\n};\n\nconst ModalContextMock = ({ children }: ModalContextMockProps): ReactElement => {\nconst ModalContextMock = ({ children }: ModalContextMockProps): ReactElement => {\n\tconst context = useContext(ModalContext);\n\tconst context = useContext(ModalContext);\n\n\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t(): ContextType<typeof ModalContext> =>\n\t\t\tcontext?.modal\n\t\t\t\t? {\n\t\t\t\t\t\tmodal: {\n\t\t\t\t\t\t\t...context.modal,\n\t\t\t\t\t\t\tsetModal: (modal): void => {\n\t\t\t\t\t\t\t\tlogAction('setModal', modal);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentModal: context.currentModal,\n\t\t\t\t  }\n\t\t\t\t: undefined,\n\t\t[context],\n\t);\n\n\treturn <ModalContext.Provider children={children} value={value} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "RouterContextMock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/stories/contexts/RouterContextMock.tsx",
        "code": {
            "value": "const logAction = action('RouterContext');\nconst logAction = action('RouterContext');\n\ntype RouterContextMockProps = {\n\tchildren: ReactNode;\n};\n\nconst RouterContextMock = ({ children }: RouterContextMockProps): ReactElement => {\nconst RouterContextMock = ({ children }: RouterContextMockProps): ReactElement => {\n\tconst parent = useContext(RouterContext);\n\tconst parent = useContext(RouterContext);\n\n\tconst value = useMemo(\n\tconst value = useMemo(\n\t\t(): ContextType<typeof RouterContext> => ({\n\t\t\t...parent,\n\t\t\tnavigate: (...args): void => {\n\t\t\t\tlogAction('navigate', ...args);\n\t\t\t},\n\t\t}),\n\t\t[parent],\n\t);\n\n\treturn <RouterContext.Provider children={children} value={value} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "QueryClientProviderMock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/stories/contexts/QueryClientProviderMock.tsx",
        "code": {
            "queryClient": "const queryCache = new QueryCache();\nconst queryCache = new QueryCache();\n\nconst queryClient = new QueryClient({\nconst queryClient = new QueryClient({\n\tdefaultOptions: {\n\t\tqueries: {\n\t\t\tretry: false,\n\t\t\tcacheTime: Infinity,\n\t\t\trefetchOnWindowFocus: false,\n\t\t},\n\t},\n\tqueryCache,\n});\n\nconst QueryClientProviderMock: FC = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\nconst QueryClientProviderMock: FC = ({ children }) => <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;"
        },
        "depth_rank": 9
    },
    {
        "file": "ServerContextMock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/stories/contexts/ServerContextMock.tsx",
        "code": {
            "ServerContextMock": "const ServerContextMock = ({\nconst ServerContextMock = ({\n\tchildren,\n\tbaseURL,\n\tcallEndpoint = {},",
            "mockedEndpoints": "\tconst parent = useContext(ServerContext);\n\tconst parent = useContext(ServerContext);\n\n\tconst value = useMemo((): ContextType<typeof ServerContext> => {\n\tconst value = useMemo((): ContextType<typeof ServerContext> => {\n\t\ttype ServerContextValue = ContextType<typeof ServerContext>;\n\n\t\tconst absoluteURL: ServerContextValue['absoluteUrl'] = (path): string => {\n\t\tconst absoluteURL: ServerContextValue['absoluteUrl'] = (path): string => {\n\t\t\tlogAction('absoluteUrl', path);\n\t\t\treturn new URL(path, baseURL).toString();\n\t\t};\n\n\t\tconst mockedEndpoints = Object.entries(callEndpoint).map(\n\t\tconst mockedEndpoints = Object.entries(callEndpoint).map(\n\t\t\t([operationID, handler]): {\n\t\t\t\tmatch: (method: string, path: string) => boolean;\n\t\t\t\thandler: ((params: any) => Promise<unknown>) | 'infinite' | 'errored' | undefined;\n\t\t\t} => {"
        },
        "depth_rank": 9
    },
    {
        "file": "SidebarRegion.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/SidebarRegion.tsx",
        "code": {
            "SidebarRegion": "const SidebarRegion = () => {\nconst SidebarRegion = () => {\n\tconst { isMobile, sidebar } = useLayout();\n\tconst { isMobile, sidebar } = useLayout();"
        },
        "depth_rank": 8
    },
    {
        "file": "RoomMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/RoomMenu.tsx",
        "code": {
            "RoomMenu": "const fields: Fields = {\nconst fields: Fields = {\n\tf: true,\n\tt: true,\n\tname: true,\n};\n\ntype RoomMenuProps = {\n\trid: string;\n\tunread?: boolean;\n\tthreadUnread?: boolean;\n\talert?: boolean;\n\troomOpen?: boolean;\n\ttype: RoomType;\n\tcl?: boolean;\n\tname?: string;\n\thideDefaultOptions: boolean;\n};\n\nconst closeEndpoints = {\nconst closeEndpoints = {\n\tp: '/v1/groups.close',\n\tc: '/v1/channels.close',\n\td: '/v1/im.close',\n\n\tv: '/v1/channels.close',\n\tl: '/v1/groups.close',\n} as const;\n} as const;\n\nconst leaveEndpoints = {\nconst leaveEndpoints = {\n\tp: '/v1/groups.leave',\n\tc: '/v1/channels.leave',\n\td: '/v1/im.leave',\n\n\tv: '/v1/channels.leave',\n\tl: '/v1/groups.leave',\n} as const;\n} as const;\n\nconst RoomMenu = ({\nconst RoomMenu = ({\n\trid,\n\tunread,\n\tthreadUnread,\n\talert,\n\troomOpen,\n\ttype,\n\tcl,\n\tname = '',\n\thideDefaultOptions = false,\n}: RoomMenuProps): ReactElement | null => {",
            "leave": "\tconst handleLeave = useMutableCallback(() => {\n\tconst handleLeave = useMutableCallback(() => {\n\t\tconst leave = async (): Promise<void> => {\n\t\tconst leave = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait leaveRoom({ roomId: rid });",
            "warnText": "\t\tconst warnText = roomCoordinator.getRoomDirectives(type).getUiText(UiTextContext.HIDE_WARNING);\n\t\tconst warnText = roomCoordinator.getRoomDirectives(type).getUiText(UiTextContext.HIDE_WARNING);\n\n\t\tif (dontAskHideRoom) {\n\t\t\treturn hide();\n\t\t}\n\n\t\tsetModal(\n\t\t\t<GenericModalDoNotAskAgain\n\t\t\t\tvariant='danger'\n\t\t\t\tconfirmText={t('Yes_hide_it')}",
            "hide": "\tconst handleHide = useMutableCallback(async () => {\n\tconst handleHide = useMutableCallback(async () => {\n\t\tconst hide = async (): Promise<void> => {\n\t\tconst hide = async (): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait hideRoom({ roomId: rid });",
            "handleToggleRead": "\tconst handleToggleRead = useMutableCallback(async () => {\n\tconst handleToggleRead = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tif (isUnread) {\n\t\t\t\tawait readMessages({ rid, readThreads: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "useAvatarTemplate.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/hooks/useAvatarTemplate.tsx",
        "code": {
            "size": "\t\tconst size = ((): 'x36' | 'x28' | 'x16' => {\n\t\tconst size = ((): 'x36' | 'x28' | 'x16' => {\n\t\t\tswitch (viewMode) {\n\t\t\t\tcase 'extended':\n\t\t\t\t\treturn 'x36';\n\t\t\t\tcase 'medium':\n\t\t\t\t\treturn 'x28';\n\t\t\t\tcase 'condensed':\n\t\t\t\tdefault:\n\t\t\t\t\treturn 'x16';\n\t\t\t}\n\t\t})();\n\n\t\tconst renderRoomAvatar: ComponentType<IRoom & { rid: string }> = (room) => (\n\t\tconst renderRoomAvatar: ComponentType<IRoom & { rid: string }> = (room) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "OverMacLimitSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/OverMacLimitSection.tsx",
        "code": {
            "handleClick": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst handleClick = () => {\n\tconst handleClick = () => {\n\t\twindow.open('https://rocket.chat/pricing', '_blank');\n\t};\n\n\treturn (\n\t\t<SidebarBanner\n\t\t\ttext={t('You_have_reached_the_limit_active_costumers_this_month')}"
        },
        "depth_rank": 9
    },
    {
        "file": "StatusDisabledSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/StatusDisabledSection.tsx",
        "code": {
            "handleStatusDisabledModal": "const StatusDisabledSection = ({ onDismiss }: { onDismiss: () => void }) => {\nconst StatusDisabledSection = ({ onDismiss }: { onDismiss: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handleStatusDisabledModal = useStatusDisabledModal();\n\tconst handleStatusDisabledModal = useStatusDisabledModal();\n\n\treturn (\n\t\t<SidebarBanner\n\t\t\ttext={t('User_status_temporarily_disabled')}"
        },
        "depth_rank": 9
    },
    {
        "file": "OmnichannelSection.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/OmnichannelSection.tsx",
        "code": {
            "showOmnichannelQueueLink": "\tconst showOmnichannelQueueLink = useOmnichannelShowQueueLink();\n\tconst showOmnichannelQueueLink = useOmnichannelShowQueueLink();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "handleRoute": "\tconst isWorkspaceOverMacLimit = useIsOverMacLimit();\n\tconst isWorkspaceOverMacLimit = useIsOverMacLimit();\n\n\tconst handleRoute = useMutableCallback((route) => {\n\tconst handleRoute = useMutableCallback((route) => {\n\t\tsidebar.toggle();\n\n\t\tswitch (route) {\n\t\t\tcase 'directory':\n\t\t\t\tdirectoryRoute.push({});"
        },
        "depth_rank": 9
    },
    {
        "file": "OmnichannelCallToggle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelCallToggle.tsx",
        "code": {
            "isCallError": "\tconst isCallReady = useIsCallReady();\n\tconst isCallReady = useIsCallReady();\n\tconst isCallError = useIsCallError();\n\tconst isCallError = useIsCallError();\n\tif (isCallError) {\n\t\treturn <OmnichannelCallToggleError {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "OmnichannelCallDialPad.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelCallDialPad.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst { openDialModal } = useDialModal();\n\tconst { openDialModal } = useDialModal();"
        },
        "depth_rank": 10
    },
    {
        "file": "OmnichannelLivechatToggle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/sections/actions/OmnichannelLivechatToggle.tsx",
        "code": {
            "handleAvailableStatusChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst agentAvailable = useOmnichannelAgentAvailable();\n\tconst agentAvailable = useOmnichannelAgentAvailable();\n\tconst changeAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst changeAgentStatus = useEndpoint('POST', '/v1/livechat/agent.status');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst handleAvailableStatusChange = useMutableCallback(async () => {\n\tconst handleAvailableStatusChange = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait changeAgentStatus({});"
        },
        "depth_rank": 10
    },
    {
        "file": "Header.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/Header.tsx",
        "code": {
            "user": "const Header = (): ReactElement => {\nconst Header = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst user = useUser();\n\tconst user = useUser();\n\n\treturn (\n\t\t<Sidebar.TopBar.Section>\n\t\t\t{user ? <UserMenu user={user} /> : <UserAvatarWithStatus />}"
        },
        "depth_rank": 9
    },
    {
        "file": "CreateDirectMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/CreateDirectMessage.tsx",
        "code": {
            "createDirectAction": "const CreateDirectMessage = ({ onClose }: { onClose: () => void }) => {\nconst CreateDirectMessage = ({ onClose }: { onClose: () => void }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst directMaxUsers = useSetting<number>('DirectMesssage_maxUsers') || 1;\n\tconst directMaxUsers = useSetting<number>('DirectMesssage_maxUsers') || 1;\n\tconst membersFieldId = useUniqueId();\n\tconst membersFieldId = useUniqueId();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst createDirectAction = useEndpoint('POST', '/v1/dm.create');\n\tconst createDirectAction = useEndpoint('POST', '/v1/dm.create');\n\n\tconst {\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { isDirty, isSubmitting, isValidating, errors },",
            "mutateDirectMessage": "\tconst mutateDirectMessage = useMutation({\n\tconst mutateDirectMessage = useMutation({\n\t\tmutationFn: createDirectAction,\n\t\tonSuccess: ({ room: { rid } }) => {\n\t\t\tgoToRoomById(rid);\n\t\t},\n\t\tonError: (error) => {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });",
            "handleCreate": "\tconst handleCreate = async ({ users }: { users: IUser['username'][] }) => {\n\tconst handleCreate = async ({ users }: { users: IUser['username'][] }) => {\n\t\treturn mutateDirectMessage.mutateAsync({ usernames: users.join(',') });"
        },
        "depth_rank": 9
    },
    {
        "file": "UserMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/UserMenu.tsx",
        "code": {
            "items": "const UserMenu = ({ user }: { user: IUser }) => {\nconst UserMenu = ({ user }: { user: IUser }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst sections = useUserMenu(user);\n\tconst sections = useUserMenu(user);\n\tconst items = sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]);\n\tconst items = sections.reduce((acc, { items }) => [...acc, ...items], [] as GenericMenuItemProps[]);",
            "handleAction": "\tconst handleAction = useHandleMenuAction(items, () => setIsOpen(false));\n\tconst handleAction = useHandleMenuAction(items, () => setIsOpen(false));\n\n\treturn (\n\t\t<FeaturePreview feature='navigationBar'>\n\t\t\t<FeaturePreviewOff>\n\t\t\t\t<GenericMenu\n\t\t\t\t\ticon={<UserAvatarWithStatus />}"
        },
        "depth_rank": 9
    },
    {
        "file": "EditStatusModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/EditStatusModal.tsx",
        "code": {
            "handleSaveStatus": "const EditStatusModal = ({ onClose, userStatus, userStatusText }: EditStatusModalProps): ReactElement => {\nconst EditStatusModal = ({ onClose, userStatus, userStatusText }: EditStatusModalProps): ReactElement => {\n\tconst allowUserStatusMessageChange = useSetting('Accounts_AllowUserStatusMessageChange');\n\tconst allowUserStatusMessageChange = useSetting('Accounts_AllowUserStatusMessageChange');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [customStatus, setCustomStatus] = useLocalStorage<string | undefined>('Local_Custom_Status', '');\n\tconst [customStatus, setCustomStatus] = useLocalStorage<string | undefined>('Local_Custom_Status', '');\n\tconst initialStatusText = customStatus || userStatusText;\n\tconst initialStatusText = customStatus || userStatusText;\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst [statusText, setStatusText] = useState(initialStatusText);\n\tconst [statusText, setStatusText] = useState(initialStatusText);\n\tconst [statusType, setStatusType] = useState(userStatus);\n\tconst [statusType, setStatusType] = useState(userStatus);\n\tconst [statusTextError, setStatusTextError] = useState<string | undefined>();\n\tconst [statusTextError, setStatusTextError] = useState<string | undefined>();\n\n\tconst setUserStatus = useEndpoint('POST', '/v1/users.setStatus');\n\tconst setUserStatus = useEndpoint('POST', '/v1/users.setStatus');\n\n\tconst handleStatusText = useMutableCallback((e: ChangeEvent<HTMLInputElement>): void => {\n\tconst handleStatusText = useMutableCallback((e: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetStatusText(e.currentTarget.value);\n\n\t\tif (statusText && statusText.length > USER_STATUS_TEXT_MAX_LENGTH) {\n\t\t\treturn setStatusTextError(t('Max_length_is', USER_STATUS_TEXT_MAX_LENGTH));\n\t\t}\n\n\t\treturn setStatusTextError(undefined);\n\t});\n\n\tconst handleStatusType = (type: IUser['status']): void => setStatusType(type);\n\tconst handleStatusType = (type: IUser['status']): void => setStatusType(type);\n\n\tconst handleSaveStatus = useCallback(async () => {\n\tconst handleSaveStatus = useCallback(async () => {\n\t\ttry {\n\t\t\tawait setUserStatus({ message: statusText, status: statusType });"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderUnstable.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/HeaderUnstable.tsx",
        "code": {
            "uid": "const HeaderUnstable = (): ReactElement => {\nconst HeaderUnstable = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst uid = useUserId();\n\tconst uid = useUserId();\n\n\treturn (\n\t\t<Sidebar.TopBar.Section>\n\t\t\t<Sidebar.TopBar.Actions align='end'>\n\t\t\t\t<Search title={t('Search')} />"
        },
        "depth_rank": 9
    },
    {
        "file": "useCreateRoomModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useCreateRoomModal.tsx",
        "code": {
            "handleClose": "\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn useMutableCallback(() => {\n\t\tconst handleClose = (): void => {\n\t\tconst handleClose = (): void => {\n\t\t\tsetModal(null);\n\t\t};\n\n\t\tsetModal(() => <Component onClose={handleClose} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "useCustomStatusModalHandler.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useCustomStatusModalHandler.tsx",
        "code": {
            "handleModalClose": "\tconst user = useUser();\n\tconst user = useUser();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\treturn () => {\n\t\tconst handleModalClose = () => setModal(null);\n\t\tconst handleModalClose = () => setModal(null);\n\t\tsetModal(<EditStatusModal userStatus={user?.status} userStatusText={user?.statusText} onClose={handleModalClose} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "useStatusItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useStatusItems.tsx",
        "code": {
            "setStatusMutation": "\tconst setStatus = useEndpoint('POST', '/v1/users.setStatus');\n\tconst setStatus = useEndpoint('POST', '/v1/users.setStatus');\n\tconst setStatusMutation = useMutation({\n\tconst setStatusMutation = useMutation({\n\t\tmutationFn: async (status: UserStatusDescriptor) => {\n\t\t\tvoid setStatus({ status: status.statusType, message: userStatuses.isValidType(status.id) ? '' : status.name });",
            "content": "\t\t\t\tconst content = status.localizeName ? t(status.name) : status.name;\n\t\t\t\tconst content = status.localizeName ? t(status.name) : status.name;\n\t\t\t\treturn {\n\t\t\t\t\tid: status.id,\n\t\t\t\t\tstatus: <UserStatus status={status.statusType} />,"
        },
        "depth_rank": 10
    },
    {
        "file": "useAccountItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/hooks/useAccountItems.tsx",
        "code": {
            "router": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst { unseenFeatures, featurePreviewEnabled } = useFeaturePreviewList();\n\tconst { unseenFeatures, featurePreviewEnabled } = useFeaturePreviewList();"
        },
        "depth_rank": 10
    },
    {
        "file": "FederatedRoomListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListItem.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box mb={16} pi={24} is='li' display='flex' flexDirection='column' w='full' name={canonicalAlias}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MatrixFederationManageServerModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationManageServerModal.tsx",
        "code": {
            "dispatchToastMessage": "const MatrixFederationAddServerModal: VFC<MatrixFederationAddServerModalProps> = ({ onClickClose }) => {\nconst MatrixFederationAddServerModal: VFC<MatrixFederationAddServerModalProps> = ({ onClickClose }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst addMatrixServer = useEndpoint('POST', '/v1/federation/addServerByUser');\n\tconst addMatrixServer = useEndpoint('POST', '/v1/federation/addServerByUser');\n\tconst [serverName, setServerName] = useState('');\n\tconst [serverName, setServerName] = useState('');\n\tconst [errorKey, setErrorKey] = useState<TranslationKey | undefined>();\n\tconst [errorKey, setErrorKey] = useState<TranslationKey | undefined>();\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tmutate: addServer,\n\t\tisLoading,\n\t\tisError,\n\t} = useMutation(['v1/federation/addServerByUser', serverName], () => addMatrixServer({ serverName }), {"
        },
        "depth_rank": 10
    },
    {
        "file": "FederatedRoomList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomList.tsx",
        "code": {
            "dispatchToastMessage": "const FederatedRoomList: VFC<FederatedRoomListProps> = ({ serverName, roomName, count }) => {\nconst FederatedRoomList: VFC<FederatedRoomListProps> = ({ serverName, roomName, count }) => {\n\tconst joinExternalPublicRoom = useEndpoint('POST', '/v1/federation/joinExternalPublicRoom');\n\tconst joinExternalPublicRoom = useEndpoint('POST', '/v1/federation/joinExternalPublicRoom');\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst { data, isLoading, isFetchingNextPage, fetchNextPage } = useInfiniteFederationSearchPublicRooms(serverName, roomName, count);\n\tconst { data, isLoading, isFetchingNextPage, fetchNextPage } = useInfiniteFederationSearchPublicRooms(serverName, roomName, count);"
        },
        "depth_rank": 10
    },
    {
        "file": "MatrixFederationRemoveServerList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationRemoveServerList.tsx",
        "code": {
            "queryClient": "const style = css`\nconst style = css`\n\ti {\n\t\tvisibility: hidden;\n\t}\n\tli {\n\t\tcursor: default;\n\t}\n\tli:hover {\n\t\ti {\n\t\t\tcursor: pointer;\n\t\t\tvisibility: visible;\n\t\t}\n\t}\n`;\n\nconst MatrixFederationRemoveServerList: VFC<MatrixFederationRemoveServerListProps> = ({ servers }) => {\nconst MatrixFederationRemoveServerList: VFC<MatrixFederationRemoveServerListProps> = ({ servers }) => {\n\tconst removeMatrixServer = useEndpoint('POST', '/v1/federation/removeServerByUser');\n\tconst removeMatrixServer = useEndpoint('POST', '/v1/federation/removeServerByUser');\n\n\tconst queryClient = useQueryClient();\n\tconst queryClient = useQueryClient();\n\n\tconst { mutate: removeServer, isLoading: isRemovingServer } = useMutation(\n\tconst { mutate: removeServer, isLoading: isRemovingServer } = useMutation(",
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' flexDirection='column' className={[style]}>"
        },
        "depth_rank": 10
    },
    {
        "file": "MatrixFederationSearchModalContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationSearchModalContent.tsx",
        "code": {
            "manageServers": "const MatrixFederationSearchModalContent: VFC<MatrixFederationSearchModalContentProps> = ({ defaultSelectedServer, servers }) => {\nconst MatrixFederationSearchModalContent: VFC<MatrixFederationSearchModalContentProps> = ({ defaultSelectedServer, servers }) => {\n\tconst [serverName, setServerName] = useState(() => {\n\tconst [serverName, setServerName] = useState(() => {\n\t\tconst defaultServer = servers.find((server) => server.name === defaultSelectedServer);\n\t\tconst defaultServer = servers.find((server) => server.name === defaultSelectedServer);\n\t\treturn defaultServer?.name ?? servers[0].name;\n\t});\n\n\tconst [roomName, setRoomName] = useState('');\n\tconst [roomName, setRoomName] = useState('');\n\n\tconst setModal = useSetModal();\n\tconst setModal = useSetModal();\n\n\tconst debouncedRoomName = useDebouncedValue(roomName, 400);\n\tconst debouncedRoomName = useDebouncedValue(roomName, 400);\n\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst serverOptions = useMemo<Array<SelectOption>>(() => servers.map((server): SelectOption => [server.name, server.name]), [servers]);\n\tconst serverOptions = useMemo<Array<SelectOption>>(() => servers.map((server): SelectOption => [server.name, server.name]), [servers]);\n\n\tconst manageServers = useCallback(() => {\n\tconst manageServers = useCallback(() => {\n\t\tsetModal(\n\t\t\t<MatrixFederationManageServersModal onClickClose={() => setModal(<MatrixFederationSearch onClose={() => setModal(null)} />)} />,"
        },
        "depth_rank": 10
    },
    {
        "file": "MatrixFederationSearch.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/MatrixFederationSearch.tsx",
        "code": {
            "t": "const MatrixFederationSearch: VFC<MatrixFederationSearchProps> = ({ onClose, defaultSelectedServer }) => {\nconst MatrixFederationSearch: VFC<MatrixFederationSearchProps> = ({ onClose, defaultSelectedServer }) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { data, isLoading } = useMatrixServerList();\n\tconst { data, isLoading } = useMatrixServerList();"
        },
        "depth_rank": 10
    },
    {
        "file": "FederatedRoomListEmptyPlaceholder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListEmptyPlaceholder.tsx",
        "code": {
            "t": "const FederatedRoomListEmptyPlaceholder: VFC = () => {\nconst FederatedRoomListEmptyPlaceholder: VFC = () => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Box display='flex' justifyContent='center' height='full' backgroundColor='surface'>\n\t\t\t<GenericNoResults description={t('There_are_no_rooms_for_the_given_search_criteria')} />"
        },
        "depth_rank": 10
    },
    {
        "file": "useInfiniteFederationSearchPublicRooms.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/useInfiniteFederationSearchPublicRooms.tsx",
        "code": {
            "fetchRoomList": "\tconst fetchRoomList = useEndpoint('GET', '/v1/federation/searchPublicRooms');\n\tconst fetchRoomList = useEndpoint('GET', '/v1/federation/searchPublicRooms');\n\treturn useInfiniteQuery(\n\t\t['federation/searchPublicRooms', serverName, roomName, count],\n\t\tasync ({ pageParam }) => fetchRoomList({ serverName, roomName, count, pageToken: pageParam }),"
        },
        "depth_rank": 10
    },
    {
        "file": "FederatedRoomListErrorBoundary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/MatrixFederationSearch/FederatedRoomListErrorBoundary.tsx",
        "code": {
            "t": "const FederatedRoomListErrorBoundary = ({ children, resetKeys }: FederatedRoomListErrorBoundaryProps): ReactElement => {\nconst FederatedRoomListErrorBoundary = ({ children, resetKeys }: FederatedRoomListErrorBoundaryProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\treturn (\n\t\t<QueryErrorResetBoundary>\n\t\t\t{({ reset }): ReactElement => (\n\t\t\t\t<ErrorBoundary\n\t\t\t\t\tchildren={children}"
        },
        "depth_rank": 10
    },
    {
        "file": "CreateChannelModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/CreateChannel/CreateChannelModal.tsx",
        "code": {
            "params": "\tconst handleCreateChannel = async ({ name, members, readOnly, topic, broadcast, encrypted, federated }: CreateChannelModalPayload) => {\n\tconst handleCreateChannel = async ({ name, members, readOnly, topic, broadcast, encrypted, federated }: CreateChannelModalPayload) => {\n\t\tlet roomData;\n\t\tconst params = {\n\t\tconst params = {\n\t\t\tname,\n\t\t\tmembers,\n\t\t\treadOnly,\n\t\t\textraData: {\n\t\t\t\ttopic,\n\t\t\t\tbroadcast,\n\t\t\t\tencrypted,\n\t\t\t\t...(federated && { federated }),"
        },
        "depth_rank": 10
    },
    {
        "file": "Home.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/Home.tsx",
        "code": {
            "router": "const SidebarHeaderActionHome: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst SidebarHeaderActionHome: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();",
            "currentRoute": "\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst showHome = useSetting('Layout_Show_Home_Button');\n\tconst handleHome = useMutableCallback(() => {\n\tconst handleHome = useMutableCallback(() => {\n\t\tsidebar.toggle();\n\t\trouter.navigate('/home');\n\t});\n\tconst currentRoute = useCurrentRoutePath();\n\tconst currentRoute = useCurrentRoutePath();\n\n\treturn showHome ? <Sidebar.TopBar.Action {...props} icon='home' onClick={handleHome} pressed={currentRoute?.includes('/home')} /> : null;"
        },
        "depth_rank": 10
    },
    {
        "file": "Login.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/Login.tsx",
        "code": {
            "t": "const Login: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Login: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst setForceLogin = useSessionDispatch('forceLogin');\n\tconst setForceLogin = useSessionDispatch('forceLogin');\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<Sidebar.TopBar.Action\n\t\t\t{...props}"
        },
        "depth_rank": 10
    },
    {
        "file": "Directory.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/Directory.tsx",
        "code": {
            "router": "const Directory = (props: DirectoryProps) => {\nconst Directory = (props: DirectoryProps) => {\n\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { sidebar } = useLayout();\n\tconst { sidebar } = useLayout();"
        },
        "depth_rank": 10
    },
    {
        "file": "Administration.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/Administration.tsx",
        "code": {
            "sections": "const Administration: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Administration: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = useAdministrationMenu();\n\tconst sections = useAdministrationMenu();\n\n\treturn <GenericMenu sections={sections} title={t('Administration')} is={Sidebar.TopBar.Action} {...props} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "Sort.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/Sort.tsx",
        "code": {
            "sections": "const Sort: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\nconst Sort: VFC<Omit<HTMLAttributes<HTMLElement>, 'is'>> = (props) => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sections = useSortMenu();\n\tconst sections = useSortMenu();\n\n\treturn (\n\t\t<GenericMenu icon='sort' sections={sections} title={t('Display')} selectionMode='multiple' is={Sidebar.TopBar.Action} {...props} />"
        },
        "depth_rank": 10
    },
    {
        "file": "useAppsItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAppsItems.tsx",
        "code": {
            "appRequestStats": "\tconst showMarketplace = hasAccessMarketplacePermission || hasManageAppsPermission;\n\tconst showMarketplace = hasAccessMarketplacePermission || hasManageAppsPermission;\n\n\tconst marketplaceRoute = useRoute('marketplace');\n\tconst marketplaceRoute = useRoute('marketplace');\n\tconst page = 'list';\n\tconst page = 'list';\n\n\tconst appRequestStats = useAppRequestStats();\n\tconst appRequestStats = useAppRequestStats();\n\n\tconst marketPlaceItems: GenericMenuItemProps[] = [\n\tconst marketPlaceItems: GenericMenuItemProps[] = [\n\t\t{\n\t\t\tid: 'marketplace',\n\t\t\ticon: 'store',\n\t\t\tcontent: t('Marketplace'),\n\t\t\tonClick: () => marketplaceRoute.push({ context: 'explore', page }),"
        },
        "depth_rank": 11
    },
    {
        "file": "useViewModeItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useViewModeItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst useHandleChange = (value: 'medium' | 'extended' | 'condensed'): (() => void) =>\n\tconst useHandleChange = (value: 'medium' | 'extended' | 'condensed'): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { sidebarViewMode: value } }), [value]);"
        },
        "depth_rank": 11
    },
    {
        "file": "useCreateRoomMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useCreateRoomMenu.tsx",
        "code": {
            "showCreate": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst showCreate = useAtLeastOnePermission(CREATE_ROOM_PERMISSIONS);\n\tconst showCreate = useAtLeastOnePermission(CREATE_ROOM_PERMISSIONS);\n\n\tconst { data } = useIsEnterprise();\n\tconst { data } = useIsEnterprise();",
            "matrixFederationSearchItems": "\tconst isMatrixEnabled = useSetting('Federation_Matrix_enabled') && data?.isEnterprise;\n\tconst isMatrixEnabled = useSetting('Federation_Matrix_enabled') && data?.isEnterprise;\n\n\tconst createRoomItems = useCreateRoomItems();\n\tconst createRoomItems = useCreateRoomItems();\n\tconst matrixFederationSearchItems = useMatrixFederationItems({ isMatrixEnabled });\n\tconst matrixFederationSearchItems = useMatrixFederationItems({ isMatrixEnabled });",
            "sections": "\tconst sections = [\n\tconst sections = [\n\t\t{ title: t('Create_new'), items: createRoomItems, permission: showCreate },"
        },
        "depth_rank": 11
    },
    {
        "file": "useGroupingListItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useGroupingListItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst sidebarGroupByType = useUserPreference<boolean>('sidebarGroupByType');\n\tconst sidebarGroupByType = useUserPreference<boolean>('sidebarGroupByType');\n\tconst sidebarShowFavorites = useUserPreference<boolean>('sidebarShowFavorites');\n\tconst sidebarShowFavorites = useUserPreference<boolean>('sidebarShowFavorites');\n\tconst sidebarShowUnread = useUserPreference<boolean>('sidebarShowUnread');\n\tconst sidebarShowUnread = useUserPreference<boolean>('sidebarShowUnread');\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst useHandleChange = (key: 'sidebarGroupByType' | 'sidebarShowFavorites' | 'sidebarShowUnread', value: boolean): (() => void) =>\n\tconst useHandleChange = (key: 'sidebarGroupByType' | 'sidebarShowFavorites' | 'sidebarShowUnread', value: boolean): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { [key]: value } }), [key, value]);"
        },
        "depth_rank": 11
    },
    {
        "file": "useSortModeItems.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useSortModeItems.tsx",
        "code": {
            "useHandleChange": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst sidebarSortBy = useUserPreference<'activity' | 'alphabetical'>('sidebarSortby', 'activity');\n\tconst sidebarSortBy = useUserPreference<'activity' | 'alphabetical'>('sidebarSortby', 'activity');\n\tconst isOmnichannelEnabled = useOmnichannelSortingDisclaimer();\n\tconst isOmnichannelEnabled = useOmnichannelSortingDisclaimer();\n\n\tconst useHandleChange = (value: 'alphabetical' | 'activity'): (() => void) =>\n\tconst useHandleChange = (value: 'alphabetical' | 'activity'): (() => void) =>\n\t\tuseCallback(() => saveUserPreferences({ data: { sidebarSortby: value } }), [value]);",
            "setToActivity": "\tconst setToAlphabetical = useHandleChange('alphabetical');\n\tconst setToAlphabetical = useHandleChange('alphabetical');\n\tconst setToActivity = useHandleChange('activity');\n\tconst setToActivity = useHandleChange('activity');\n\n\treturn [\n\t\t{\n\t\t\tid: 'activity',\n\t\t\tcontent: t('Activity'),\n\t\t\ticon: 'clock',\n\t\t\taddon: <RadioButton onChange={setToActivity} checked={sidebarSortBy === 'activity'} />,"
        },
        "depth_rank": 11
    },
    {
        "file": "useAdministrationMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useAdministrationMenu.tsx",
        "code": {
            "auditItems": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst administrationItems = useAdministrationItems();\n\tconst administrationItems = useAdministrationItems();\n\tconst appItems = useAppsItems();\n\tconst appItems = useAppsItems();\n\tconst auditItems = useAuditItems();\n\tconst auditItems = useAuditItems();\n\n\treturn [\n\t\tadministrationItems.length && { title: t('Administration'), items: administrationItems },"
        },
        "depth_rank": 11
    },
    {
        "file": "useSortMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/actions/hooks/useSortMenu.tsx",
        "code": {
            "sections": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst viewModeItems = useViewModeItems();\n\tconst viewModeItems = useViewModeItems();\n\tconst sortModeItems = useSortModeItems();\n\tconst sortModeItems = useSortModeItems();\n\tconst groupingListItems = useGroupingListItems();\n\tconst groupingListItems = useGroupingListItems();\n\n\tconst sections = [\n\tconst sections = [\n\t\t{ title: t('Display'), items: viewModeItems },"
        },
        "depth_rank": 11
    },
    {
        "file": "CreateTeamModal.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/header/CreateTeam/CreateTeamModal.tsx",
        "code": {
            "handleCreateTeam": "\tconst isButtonEnabled = isDirty && canCreateTeam;\n\tconst isButtonEnabled = isDirty && canCreateTeam;\n\n\tconst handleCreateTeam = async ({\n\tconst handleCreateTeam = async ({\n\t\tname,\n\t\tmembers,\n\t\tisPrivate,\n\t\treadOnly,\n\t\ttopic,\n\t\tbroadcast,\n\t\tencrypted,\n\t}: CreateTeamModalInputs): Promise<void> => {",
            "params": "\t\tconst params = {\n\t\tconst params = {\n\t\t\tname,\n\t\t\tmembers,\n\t\t\ttype: isPrivate ? 1 : 0,\n\t\t\troom: {\n\t\t\t\treadOnly,\n\t\t\t\textraData: {\n\t\t\t\t\ttopic,\n\t\t\t\t\tbroadcast,\n\t\t\t\t\tencrypted,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tconst { team } = await createTeamAction(params);\n\t\t\tconst { team } = await createTeamAction(params);"
        },
        "depth_rank": 10
    },
    {
        "file": "RoomListRow.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/RoomList/RoomListRow.tsx",
        "code": {
            "RoomListRow": "const RoomListRow = ({ data, item }: { data: RoomListRowProps; item: ISubscription & IRoom }): ReactElement => {\nconst RoomListRow = ({ data, item }: { data: RoomListRowProps; item: ISubscription & IRoom }): ReactElement => {\n\tconst { extended, t, SideBarItemTemplate, AvatarTemplate, openedRoom, sidebarViewMode } = data;\n\tconst { extended, t, SideBarItemTemplate, AvatarTemplate, openedRoom, sidebarViewMode } = data;",
            "videoConfActions": "\tconst acceptCall = useVideoConfAcceptCall();\n\tconst acceptCall = useVideoConfAcceptCall();\n\tconst rejectCall = useVideoConfRejectIncomingCall();\n\tconst rejectCall = useVideoConfRejectIncomingCall();\n\tconst incomingCalls = useVideoConfIncomingCalls();\n\tconst incomingCalls = useVideoConfIncomingCalls();\n\tconst currentCall = incomingCalls.find((call) => call.rid === item.rid);\n\tconst currentCall = incomingCalls.find((call) => call.rid === item.rid);\n\n\tconst videoConfActions = useMemo(\n\tconst videoConfActions = useMemo(\n\t\t() =>\n\t\t\tcurrentCall && {\n\t\t\t\tacceptCall: (): void => acceptCall(currentCall.callId),\n\t\t\t\trejectCall: (): void => rejectCall(currentCall.callId),\n\t\t\t},\n\t\t[acceptCall, rejectCall, currentCall],\n\t);\n\n\tif (typeof item === 'string') {\n\t\treturn (\n\t\t\t<SidebarSection>\n\t\t\t\t<SidebarSection.Title>{t(item)}</SidebarSection.Title>"
        },
        "depth_rank": 9
    },
    {
        "file": "RoomList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/RoomList/RoomList.tsx",
        "code": {
            "sideBarItemTemplate": "\tconst roomsList = useRoomList();\n\tconst roomsList = useRoomList();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst { ref } = useResizeObserver({ debounceDelay: 100 });\n\tconst { ref } = useResizeObserver({ debounceDelay: 100 });"
        },
        "depth_rank": 9
    },
    {
        "file": "SideBarItemTemplateWithData.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/RoomList/SideBarItemTemplateWithData.tsx",
        "code": {
            "title": "const getBadgeTitle = (\nconst getBadgeTitle = (\n\tuserMentions: number,\n\tthreadUnread: number,\n\tgroupMentions: number,\n\tunread: number,\n\tt: ReturnType<typeof useTranslation>,\n) => {\n\tconst title = [] as string[];\n\tconst title = [] as string[];\n\tif (userMentions) {\n\t\ttitle.push(t('mentions_counter', { count: userMentions }));",
            "SideBarItemTemplateWithData": "function SideBarItemTemplateWithData({\nfunction SideBarItemTemplateWithData({\n\troom,\n\tid,\n\tselected,\n\tstyle,\n\textended,\n\tSideBarItemTemplate,\n\tAvatarTemplate,\n\tt,\n\tisAnonymous,\n\tvideoConfActions,\n}: RoomListRowProps): ReactElement {",
            "icon": "\tconst icon = (\n\tconst icon = (\n\t\t// TODO: Remove icon='at'\n\t\t<Sidebar.Item.Icon highlighted={highlighted} icon='at'>",
            "actions": "\tconst actions = useMemo(\n\tconst actions = useMemo(\n\t\t() =>\n\t\t\tvideoConfActions && (\n\t\t\t\t<SidebarItemActions>\n\t\t\t\t\t<SidebarItemAction onClick={videoConfActions.acceptCall} secondary success icon='phone' />",
            "isQueued": "\tconst isQueued = isOmnichannelRoom(room) && room.status === 'queued';\n\tconst isQueued = isOmnichannelRoom(room) && room.status === 'queued';\n\tconst { enabled: isPriorityEnabled } = useOmnichannelPriorities();\n\tconst { enabled: isPriorityEnabled } = useOmnichannelPriorities();",
            "badges": "\tconst badgeTitle = getBadgeTitle(userMentions, tunread.length, groupMentions, unread, t);\n\tconst badgeTitle = getBadgeTitle(userMentions, tunread.length, groupMentions, unread, t);\n\n\tconst badges = (\n\tconst badges = (\n\t\t<Margins inlineStart={8}>"
        },
        "depth_rank": 9
    },
    {
        "file": "ScrollerWithCustomProps.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/search/ScrollerWithCustomProps.tsx",
        "code": {
            "ScrollerWithCustomProps": "const ScrollerWithCustomProps = forwardRef(function ScrollerWithCustomProps(props, ref: React.Ref<HTMLDivElement>) {\nconst ScrollerWithCustomProps = forwardRef(function ScrollerWithCustomProps(props, ref: React.Ref<HTMLDivElement>) {\n\treturn (\n\t\t<ScrollableContentWrapper\n\t\t\t{...props}"
        },
        "depth_rank": 9
    },
    {
        "file": "Row.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/search/Row.tsx",
        "code": {
            "Row": "const Row = ({ item, data }: RowProps): ReactElement => {\nconst Row = ({ item, data }: RowProps): ReactElement => {\n\tconst { t, SideBarItemTemplate, avatarTemplate: AvatarTemplate, useRealName, extended } = data;\n\tconst { t, SideBarItemTemplate, avatarTemplate: AvatarTemplate, useRealName, extended } = data;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/search/UserItem.tsx",
        "code": {
            "icon": "const UserItem = ({ item, id, style, t, SideBarItemTemplate, AvatarTemplate, useRealName }: UserItemProps): ReactElement => {\nconst UserItem = ({ item, id, style, t, SideBarItemTemplate, AvatarTemplate, useRealName }: UserItemProps): ReactElement => {\n\tconst title = useRealName ? item.fname || item.name : item.name || item.fname;\n\tconst title = useRealName ? item.fname || item.name : item.name || item.fname;\n\tconst icon = (\n\tconst icon = (\n\t\t<Sidebar.Item.Icon icon={'' as any}>",
            "href": "\tconst href = roomCoordinator.getRouteLink(item.t, { name: item.name });\n\tconst href = roomCoordinator.getRouteLink(item.t, { name: item.name });"
        },
        "depth_rank": 9
    },
    {
        "file": "SearchList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/search/SearchList.tsx",
        "code": {
            "usernamesFromClient": "\tconst localRooms = useUserSubscriptions(query, options);\n\tconst localRooms = useUserSubscriptions(query, options);\n\n\tconst usernamesFromClient = [...localRooms?.map(({ t, name }) => (t === 'd' ? name : null))].filter(Boolean) as string[];\n\tconst usernamesFromClient = [...localRooms?.map(({ t, name }) => (t === 'd' ? name : null))].filter(Boolean) as string[];",
            "type": "\tconst searchForDMs = mention === '@';\n\tconst searchForDMs = mention === '@';\n\n\tconst type = useMemo(() => {\n\tconst type = useMemo(() => {\n\t\tif (searchForChannels) {\n\t\t\treturn { users: false, rooms: true, includeFederatedRooms: true };",
            "getSpotlight": "\tconst getSpotlight = useMethod('spotlight');\n\tconst getSpotlight = useMethod('spotlight');\n\n\treturn useQuery(\n\t\t['sidebar/search/spotlight', name, usernamesFromClient, type, localRooms.map(({ _id }) => _id)],",
            "filterUsersUnique": "\t\t\tconst spotlight = await getSpotlight(name, usernamesFromClient, type);\n\t\t\tconst spotlight = await getSpotlight(name, usernamesFromClient, type);\n\n\t\t\tconst filterUsersUnique = ({ _id }: { _id: string }, index: number, arr: { _id: string }[]): boolean =>\n\t\t\tconst filterUsersUnique = ({ _id }: { _id: string }, index: number, arr: { _id: string }[]): boolean =>",
            "roomFilter": "\t\t\tconst roomFilter = (room: { t: string; uids?: string[]; _id: string; name?: string }): boolean =>\n\t\t\tconst roomFilter = (room: { t: string; uids?: string[]; _id: string; name?: string }): boolean =>",
            "usersFilter": "\t\t\tconst usersFilter = (user: { _id: string }): boolean =>\n\t\t\tconst usersFilter = (user: { _id: string }): boolean =>",
            "userMap": "\t\t\tconst userMap = (user: {\n\t\t\tconst userMap = (user: {\n\t\t\t\t_id: string;\n\t\t\t\tname: string;\n\t\t\t\tusername: string;\n\t\t\t\tavatarETag?: string;\n\t\t\t}): {",
            "onChange": "\t\t\tconst resultsFromServer: resultsFromServerType = [];\n\t\t\tconst resultsFromServer: resultsFromServerType = [];\n\t\t\tresultsFromServer.push(...spotlight.users.filter(filterUsersUnique).filter(usersFilter).map(userMap));\n\t\t\tresultsFromServer.push(...spotlight.rooms.filter(roomFilter));\n\n\t\t\tconst exact = resultsFromServer?.filter((item) => [item.name, item.fname].includes(name));\n\t\t\tconst exact = resultsFromServer?.filter((item) => [item.name, item.fname].includes(name));\n\t\t\treturn Array.from(new Set([...exact, ...localRooms, ...resultsFromServer]));\n\t\t},\n\t\t{\n\t\t\tstaleTime: 60_000,\n\t\t\tkeepPreviousData: true,\n\t\t\tplaceholderData: localRooms,\n\t\t},\n\t);\n};\n\nconst useInput = (initial: string): { value: string; onChange: FormEventHandler; setValue: Dispatch<SetStateAction<string>> } => {\nconst useInput = (initial: string): { value: string; onChange: FormEventHandler; setValue: Dispatch<SetStateAction<string>> } => {\n\tconst [value, setValue] = useState(initial);\n\tconst [value, setValue] = useState(initial);\n\tconst onChange = useMutableCallback((e) => {\n\tconst onChange = useMutableCallback((e) => {\n\t\tsetValue(e.currentTarget.value);\n\t});\n\treturn { value, onChange, setValue };",
            "t": "const SearchList = forwardRef(function SearchList({ onClose }: SearchListProps, ref): ReactElement {\nconst SearchList = forwardRef(function SearchList({ onClose }: SearchListProps, ref): ReactElement {\n\tconst listId = useUniqueId();\n\tconst listId = useUniqueId();\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { setValue: setFilterValue, ...filter } = useInput('');\n\tconst { setValue: setFilterValue, ...filter } = useInput('');",
            "placeholder": "\tconst cursorRef = useRef<HTMLInputElement>(null);\n\tconst cursorRef = useRef<HTMLInputElement>(null);\n\tconst autofocus: Ref<HTMLInputElement> = useMergedRefs(useAutoFocus<HTMLInputElement>(), cursorRef);\n\tconst autofocus: Ref<HTMLInputElement> = useMergedRefs(useAutoFocus<HTMLInputElement>(), cursorRef);\n\n\tconst listRef = useRef<VirtuosoHandle>(null);\n\tconst listRef = useRef<VirtuosoHandle>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\n\tconst selectedElement: MutableRefObject<HTMLElement | null | undefined> = useRef(null);\n\tconst selectedElement: MutableRefObject<HTMLElement | null | undefined> = useRef(null);\n\tconst itemIndexRef = useRef(0);\n\tconst itemIndexRef = useRef(0);\n\n\tconst sidebarViewMode = useUserPreference('sidebarViewMode');\n\tconst sidebarViewMode = useUserPreference('sidebarViewMode');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\tconst useRealName = useSetting('UI_Use_Real_Name');\n\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst sideBarItemTemplate = useTemplateByViewMode();\n\tconst avatarTemplate = useAvatarTemplate();\n\tconst avatarTemplate = useAvatarTemplate();\n\n\tconst extended = sidebarViewMode === 'extended';\n\tconst extended = sidebarViewMode === 'extended';\n\n\tconst filterText = useDebouncedValue(filter.value, 100);\n\tconst filterText = useDebouncedValue(filter.value, 100);\n\n\tconst placeholder = [t('Search'), shortcut].filter(Boolean).join(' ');\n\tconst placeholder = [t('Search'), shortcut].filter(Boolean).join(' ');\n\n\tconst { data: items = [], isLoading } = useSearchItems(filterText);\n\tconst { data: items = [], isLoading } = useSearchItems(filterText);",
            "potentialElement": "\tconst itemData = useMemo(\n\tconst itemData = useMemo(\n\t\t() => ({\n\t\t\titems,\n\t\t\tt,\n\t\t\tSideBarItemTemplate: sideBarItemTemplate,\n\t\t\tavatarTemplate,\n\t\t\tuseRealName,\n\t\t\textended,\n\t\t\tsidebarViewMode,\n\t\t}),\n\t\t[avatarTemplate, extended, items, useRealName, sideBarItemTemplate, sidebarViewMode, t],\n\t);\n\n\tconst changeSelection = useMutableCallback((dir) => {\n\tconst changeSelection = useMutableCallback((dir) => {\n\t\tlet nextSelectedElement = null;\n\n\t\tif (dir === 'up') {\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.previousSibling as HTMLElement;\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.previousSibling as HTMLElement;\n\t\t\tif (potentialElement) {\n\t\t\t\tnextSelectedElement = potentialElement.querySelector('a');\n\t\t\t}\n\t\t} else {",
            "resetCursor": "\t\t\tconst potentialElement = selectedElement.current?.parentElement?.nextSibling as HTMLElement;\n\t\t\tconst potentialElement = selectedElement.current?.parentElement?.nextSibling as HTMLElement;\n\t\t\tif (potentialElement) {\n\t\t\t\tnextSelectedElement = potentialElement.querySelector('a');\n\t\t\t}\n\t\t}\n\n\t\tif (nextSelectedElement) {\n\t\t\ttoggleSelectionState(nextSelectedElement, selectedElement.current || undefined, cursorRef?.current || undefined);\n\t\t\treturn nextSelectedElement;\n\t\t}\n\t\treturn selectedElement.current;\n\t});\n\n\tconst resetCursor = useMutableCallback(() => {\n\tconst resetCursor = useMutableCallback(() => {\n\t\tsetTimeout(() => {\n\t\t\titemIndexRef.current = 0;\n\t\t\tlistRef.current?.scrollToIndex({ index: itemIndexRef.current });"
        },
        "depth_rank": 9
    },
    {
        "file": "VoipFooter.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/apps/meteor/client/sidebar/footer/voip/VoipFooter.stories.tsx",
        "code": {
            "callActions": "const callActions = {\nconst callActions = {\n\tmute: () => ({}),",
            "getSubtitle": "const VoipFooterTemplate: ComponentStory<typeof VoipFooter> = (args) => {\nconst VoipFooterTemplate: ComponentStory<typeof VoipFooter> = (args) => {\n\tconst [muted, toggleMic] = useState(false);\n\tconst [muted, toggleMic] = useState(false);\n\tconst [paused, togglePause] = useState(false);\n\tconst [paused, togglePause] = useState(false);\n\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\tconst getSubtitle = (state: VoIpCallerInfo['state']): string => {\n\t\tconst subtitles: Record<string, string> = {\n\t\tconst subtitles: Record<string, string> = {\n\t\t\tIN_CALL: 'In Progress',\n\t\t\tOFFER_RECEIVED: 'Ringing',\n\t\t\tOFFER_SENT: 'Calling',\n\t\t\tON_HOLD: 'On Hold',\n\t\t};\n\n\t\treturn subtitles[state] || '';\n\t};\n\n\treturn (\n\t\t<Box maxWidth='x300' bg='dark' borderRadius='x4'>\n\t\t\t<VoipFooter\n\t\t\t\t{...args}"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/node-poplib/src/index.js",
        "code": {
            "POP3Client": "function POP3Client(port, host, options) {\nfunction POP3Client(port, host, options) {\n\tif (options === undefined) options = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/core-typings/dist/index.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 7
    },
    {
        "file": "renderLayoutBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/esm/rendering/renderLayoutBlock.js",
        "code": {
            "getLayoutBlockRenderer": "var getLayoutBlockRenderer = function (renderers, type) { return renderers[type]; };\nvar getLayoutBlockRenderer = function (renderers, type) { return renderers[type]; };"
        },
        "depth_rank": 9
    },
    {
        "file": "resolveConditionalBlocks.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/esm/rendering/resolveConditionalBlocks.js",
        "code": {
            "conditionsMatch": "var conditionsMatch = function (conditions, filters) {\nvar conditionsMatch = function (conditions, filters) {\n    if (conditions === void 0) { conditions = undefined; }"
        },
        "depth_rank": 9
    },
    {
        "file": "renderLayoutBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/cjs/rendering/renderLayoutBlock.js",
        "code": {
            "getLayoutBlockRenderer": "var getLayoutBlockRenderer = function (renderers, type) { return renderers[type]; };\nvar getLayoutBlockRenderer = function (renderers, type) { return renderers[type]; };"
        },
        "depth_rank": 9
    },
    {
        "file": "resolveConditionalBlocks.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/cjs/rendering/resolveConditionalBlocks.js",
        "code": {
            "conditionsMatch": "var conditionsMatch = function (conditions, filters) {\nvar conditionsMatch = function (conditions, filters) {\n    if (conditions === void 0) { conditions = undefined; }"
        },
        "depth_rank": 9
    },
    {
        "file": "isTextObject.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/cjs/blocks/isTextObject.js",
        "code": {
            "isTextObject": "var isTextObject = function (block) { return Object.values(TextObjectType_1.TextObjectType).includes(block.type); };\nvar isTextObject = function (block) { return Object.values(TextObjectType_1.TextObjectType).includes(block.type); };"
        },
        "depth_rank": 9
    },
    {
        "file": "PreviewBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-kit/dist/cjs/blocks/layout/PreviewBlock.js",
        "code": {
            "isPreviewBlockWithThumb": "var isPreviewBlockWithThumb = function (previewBlock) { return 'thumb' in previewBlock; };\nvar isPreviewBlockWithThumb = function (previewBlock) { return 'thumb' in previewBlock; };"
        },
        "depth_rank": 10
    },
    {
        "file": "base64.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/base64/src/base64.spec.ts",
        "code": {
            "expectedAsBinary": "\t\tconst encoded = Base64.encode(array);\n\t\tconst encoded = Base64.encode(array);\n\t\texpect(encoded).toBe(b64);\n\n\t\tconst decoded = Base64.decode(b64);\n\t\tconst decoded = Base64.decode(b64);\n\t\tconst expectedAsBinary = Uint8Array.from({ length: array.length }, (_, i) => array[i]);\n\t\tconst expectedAsBinary = Uint8Array.from({ length: array.length }, (_, i) => array[i]);"
        },
        "depth_rank": 7
    },
    {
        "file": "base64.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/base64/src/base64.ts",
        "code": {
            "ret": "const newBinary = (len: number) => {\nconst newBinary = (len: number) => {\n\tif (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {\n\t\tconst ret = Object.assign(\n\t\tconst ret = Object.assign(\n\t\t\tArray.from({ length: len }, () => 0),"
        },
        "depth_rank": 7
    },
    {
        "file": "proxify.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/models/dist/proxify.js",
        "code": {
            "proxify": "function proxify(namespace) {\nfunction proxify(namespace) {\n    return new Proxy({}, handler(namespace));"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/instance-status/src/index.ts",
        "code": {
            "currentInstance": "const ID = uuidv4();\nconst ID = uuidv4();\n\nfunction id() {\nfunction id() {\n\treturn ID;\n}\n\nconst currentInstance = {\nconst currentInstance = {\n\tname: '',\n\textraInformation: {},",
            "result": "async function unregisterInstance() {\nasync function unregisterInstance() {\n\ttry {\n\t\tconst result = await InstanceStatusModel.deleteOne({ _id: ID });\n\t\tconst result = await InstanceStatusModel.deleteOne({ _id: ID });"
        },
        "depth_rank": 7
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/instance-status/dist/index.js",
        "code": {
            "currentInstance": "const ID = (0, uuid_1.v4)();\nconst ID = (0, uuid_1.v4)();\nfunction id() {\nfunction id() {\n    return ID;\n}\nconst currentInstance = {\nconst currentInstance = {\n    name: '',\n    extraInformation: {},",
            "function": "async function onExit() {\nasync function onExit() {\n    await unregisterInstance();\n}\nasync function updateConnections(conns) {\nasync function updateConnections(conns) {\n    await models_1.InstanceStatus.updateOne({\n        _id: ID,\n    }, {"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfButton.tsx",
        "code": {
            "VideoConfButton": "const VideoConfButton = ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps): ReactElement => (\nconst VideoConfButton = ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfController.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfController.tsx",
        "code": {
            "id": "const VideoConfController = ({ icon, active, secondary, disabled, small = true, ...props }: VideoConfControllerProps): ReactElement => {\nconst VideoConfController = ({ icon, active, secondary, disabled, small = true, ...props }: VideoConfControllerProps): ReactElement => {\n\tconst id = useUniqueId();\n\tconst id = useUniqueId();\n\n\treturn (\n\t\t<IconButton\n\t\t\tsmall={small}"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfMessageUserStack.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageUserStack.tsx",
        "code": {
            "getUserAvatarPath": "const MAX_USERS = 3;\nconst MAX_USERS = 3;\n\nconst VideoConfMessageUserStack = ({ users }: { users: Serialized<IVideoConferenceUser>[] }): ReactElement => {\nconst VideoConfMessageUserStack = ({ users }: { users: Serialized<IVideoConferenceUser>[] }): ReactElement => {\n\tconst getUserAvatarPath = useUserAvatarPath();\n\tconst getUserAvatarPath = useUserAvatarPath();\n\n\treturn (\n\t\t<Box mi={4}>"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageText.tsx",
        "code": {
            "VideoConfMessageText": "const VideoConfMessageText = ({ ...props }: ComponentProps<typeof Box>): ReactElement => <Box fontScale='c2' mis={8} {...props} />;\nconst VideoConfMessageText = ({ ...props }: ComponentProps<typeof Box>): ReactElement => <Box fontScale='c2' mis={8} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageContent.tsx",
        "code": {
            "VideoConfMessageContent": "const VideoConfMessageContent = ({ ...props }): ReactElement => <Box display='flex' alignItems='center' {...props} />;\nconst VideoConfMessageContent = ({ ...props }): ReactElement => <Box display='flex' alignItems='center' {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageAction.tsx",
        "code": {
            "VideoConfMessageAction": "const VideoConfMessageAction = ({ icon = 'info', ...props }: ComponentProps<typeof IconButton>): ReactElement => (\nconst VideoConfMessageAction = ({ icon = 'info', ...props }: ComponentProps<typeof IconButton>): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageActions.tsx",
        "code": {
            "VideoConfMessageActions": "const VideoConfMessageActions = ({ children, ...props }: ComponentProps<typeof ButtonGroup>): ReactElement => (\nconst VideoConfMessageActions = ({ children, ...props }: ComponentProps<typeof ButtonGroup>): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessage.tsx",
        "code": {
            "VideoConfMessage": "const VideoConfMessage = ({ ...props }): ReactElement => (\nconst VideoConfMessage = ({ ...props }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageSkeleton.tsx",
        "code": {
            "VideoConfMessageSkeleton": "const VideoConfMessageSkeleton = (): ReactElement => (\nconst VideoConfMessageSkeleton = (): ReactElement => (\n\t<VideoConfMessage>\n\t\t<VideoConfMessageRow>\n\t\t\t<Skeleton width='full' pb={4} />"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageFooter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageFooter.tsx",
        "code": {
            "VideoConfMessageFooter": "const VideoConfMessageFooter = ({ children, ...props }: { children: ReactNode }): ReactElement => (\nconst VideoConfMessageFooter = ({ children, ...props }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageIcon.tsx",
        "code": {
            "VideoConfMessageIcon": "} as const;\n} as const;\n\nconst VideoConfMessageIcon = ({ variant = 'ended' }: VideoConfMessageIconProps): ReactElement => (\nconst VideoConfMessageIcon = ({ variant = 'ended' }: VideoConfMessageIconProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageButton.tsx",
        "code": {
            "VideoConfMessageButton": "const VideoConfMessageButton = ({\nconst VideoConfMessageButton = ({\n\tchildren,\n\tprimary,\n\t...props\n}: { children: ReactNode; primary?: boolean } & Omit<AllHTMLAttributes<HTMLButtonElement>, 'is'>): ReactElement => (\n\t<Box mi={4}>"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageFooterText.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfMessage/VideoConfMessageFooterText.tsx",
        "code": {
            "VideoConfMessageFooterText": "const VideoConfMessageFooterText = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfMessageFooterText = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupControllers.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupControllers.tsx",
        "code": {
            "VideoConfPopupControllers": "const VideoConfPopupControllers = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup {...props} />;\nconst VideoConfPopupControllers = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopup.tsx",
        "code": {
            "VideoConfPopup": "const VideoConfPopup = forwardRef(function VideoConfPopup(\nconst VideoConfPopup = forwardRef(function VideoConfPopup(\n\t{ children, position }: VideoConfPopupProps,"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupInfo.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupInfo.tsx",
        "code": {
            "VideoConfPopupInfo": "const VideoConfPopupInfo = ({ avatar, icon, children }: VideoConfPopupInfoProps): ReactElement => (\nconst VideoConfPopupInfo = ({ avatar, icon, children }: VideoConfPopupInfoProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupFooterButtons.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupFooterButtons.tsx",
        "code": {
            "VideoConfPopupFooterButtons": "const VideoConfPopupFooterButtons = (props: ComponentProps<typeof ButtonGroup>): ReactElement => (\nconst VideoConfPopupFooterButtons = (props: ComponentProps<typeof ButtonGroup>): ReactElement => (\n\t<Box mbs={28}>"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupFooter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupFooter.tsx",
        "code": {
            "VideoConfPopupFooter": "const VideoConfPopupFooter = (props: HTMLProps<HTMLDivElement>): ReactElement => <div {...props} />;\nconst VideoConfPopupFooter = (props: HTMLProps<HTMLDivElement>): ReactElement => <div {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupBackdrop.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupBackdrop.tsx",
        "code": {
            "VideoConfPopupBackdrop": "const VideoConfPopupBackdrop = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupBackdrop = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupIcon.tsx",
        "code": {
            "VideoConfPopupIcon": "const VideoConfPopupIcon = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupIcon = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupContent.tsx",
        "code": {
            "VideoConfPopupContent": "const VideoConfPopupContent = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupContent = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupHeader.tsx",
        "code": {
            "VideoConfPopupHeader": "const VideoConfPopupHeader = ({ children }: { children: ReactNode }): ReactElement => (\nconst VideoConfPopupHeader = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupTitle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/src/VideoConfPopup/VideoConfPopupTitle.tsx",
        "code": {
            "VideoConfPopupTitle": "const VideoConfPopupTitle = ({ text, counter = false }: VideoConfPopupTitleProps): ReactElement => (\nconst VideoConfPopupTitle = ({ text, counter = false }: VideoConfPopupTitleProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfController.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfController.d.ts",
        "code": {
            "const": "declare const VideoConfController: ({ icon, active, secondary, disabled, small, ...props }: VideoConfControllerProps) => ReactElement;\ndeclare const VideoConfController: ({ icon, active, secondary, disabled, small, ...props }: VideoConfControllerProps) => ReactElement;"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfController.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfController.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfController": "const VideoConfController = (_a) => {\nconst VideoConfController = (_a) => {\n    var { icon, active, secondary, disabled, small = true } = _a, props = __rest(_a, [\"icon\", \"active\", \"secondary\", \"disabled\", \"small\"]);"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfButton.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfButton.d.ts",
        "code": {
            "const": "declare const VideoConfButton: ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps) => ReactElement;\ndeclare const VideoConfButton: ({ primary, secondary, danger, disabled, icon, children, ...props }: VideoConfButtonProps) => ReactElement;"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfButton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfButton": "const VideoConfButton = (_a) => {\nconst VideoConfButton = (_a) => {\n    var { primary, secondary, danger, disabled, icon, children } = _a, props = __rest(_a, [\"primary\", \"secondary\", \"danger\", \"disabled\", \"icon\", \"children\"]);"
        },
        "depth_rank": 7
    },
    {
        "file": "VideoConfMessageFooter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageFooter.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageFooter": "const VideoConfMessageFooter = (_a) => {\nconst VideoConfMessageFooter = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageFooterText.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageFooterText.js",
        "code": {
            "VideoConfMessageFooterText": "const VideoConfMessageFooterText = ({ children }) => (_jsx(Box, { fontScale: 'c1', mi: 4, children: children }));\nconst VideoConfMessageFooterText = ({ children }) => (_jsx(Box, { fontScale: 'c1', mi: 4, children: children }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageIcon.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageIcon.d.ts",
        "code": {
            "const": "declare const VideoConfMessageIcon: ({ variant }: VideoConfMessageIconProps) => ReactElement;\ndeclare const VideoConfMessageIcon: ({ variant }: VideoConfMessageIconProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageActions.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageActions.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageActions": "const VideoConfMessageActions = (_a) => {\nconst VideoConfMessageActions = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageAction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageAction.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageAction": "const VideoConfMessageAction = (_a) => {\nconst VideoConfMessageAction = (_a) => {\n    var { icon = 'info' } = _a, props = __rest(_a, [\"icon\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageActions.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageActions.d.ts",
        "code": {
            "const": "declare const VideoConfMessageActions: ({ children, ...props }: ComponentProps<typeof ButtonGroup>) => ReactElement;\ndeclare const VideoConfMessageActions: ({ children, ...props }: ComponentProps<typeof ButtonGroup>) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageText.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageText.d.ts",
        "code": {
            "const": "declare const VideoConfMessageText: ({ ...props }: ComponentProps<typeof Box>) => ReactElement;\ndeclare const VideoConfMessageText: ({ ...props }: ComponentProps<typeof Box>) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageSkeleton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageSkeleton.js",
        "code": {
            "VideoConfMessageSkeleton": "const VideoConfMessageSkeleton = () => (_jsxs(VideoConfMessage, { children: [_jsx(VideoConfMessageRow, { children: _jsx(Skeleton, { width: 'full', pb: 4 }) }), _jsx(VideoConfMessageRow, { backgroundColor: 'tint', children: _jsx(Skeleton, { width: 'full', pb: 4 }) })] }));\nconst VideoConfMessageSkeleton = () => (_jsxs(VideoConfMessage, { children: [_jsx(VideoConfMessageRow, { children: _jsx(Skeleton, { width: 'full', pb: 4 }) }), _jsx(VideoConfMessageRow, { backgroundColor: 'tint', children: _jsx(Skeleton, { width: 'full', pb: 4 }) })] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageIcon.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageIcon.js",
        "code": {
            "VideoConfMessageIcon": "const VideoConfMessageIcon = ({ variant = 'ended' }) => (_jsx(Box, { size: 'x28', alignItems: 'center', justifyContent: 'center', display: 'flex', borderRadius: 'x4', backgroundColor: styles[variant].backgroundColor, children: _jsx(Icon, { size: 'x20', name: styles[variant].icon, color: styles[variant].color }) }));\nconst VideoConfMessageIcon = ({ variant = 'ended' }) => (_jsx(Box, { size: 'x28', alignItems: 'center', justifyContent: 'center', display: 'flex', borderRadius: 'x4', backgroundColor: styles[variant].backgroundColor, children: _jsx(Icon, { size: 'x20', name: styles[variant].icon, color: styles[variant].color }) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageRow.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageRow.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageContent.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageContent.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageContent": "const VideoConfMessageContent = (_a) => {\nconst VideoConfMessageContent = (_a) => {\n    var props = __rest(_a, []);\n    return _jsx(Box, Object.assign({ display: 'flex', alignItems: 'center' }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageButton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageButton": "const VideoConfMessageButton = (_a) => {\nconst VideoConfMessageButton = (_a) => {\n    var { children, primary } = _a, props = __rest(_a, [\"children\", \"primary\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageText.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageText.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfMessageText": "const VideoConfMessageText = (_a) => {\nconst VideoConfMessageText = (_a) => {\n    var props = __rest(_a, []);\n    return _jsx(Box, Object.assign({ fontScale: 'c2', mis: 8 }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessage.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessage.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfMessageAction.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfMessage/VideoConfMessageAction.d.ts",
        "code": {
            "const": "declare const VideoConfMessageAction: ({ icon, ...props }: ComponentProps<typeof IconButton>) => ReactElement;\ndeclare const VideoConfMessageAction: ({ icon, ...props }: ComponentProps<typeof IconButton>) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupInfo.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupInfo.js",
        "code": {
            "VideoConfPopupInfo": "const VideoConfPopupInfo = ({ avatar, icon, children }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [avatar, (icon || children) && (_jsxs(Box, { display: 'flex', flexGrow: 1, flexShrink: 1, flexBasis: '0%', alignItems: 'center', mis: 8, withTruncatedText: true, children: [icon, _jsx(Box, { mis: 8, fontScale: 'h4', withTruncatedText: true, children: children })] }))] }));\nconst VideoConfPopupInfo = ({ avatar, icon, children }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [avatar, (icon || children) && (_jsxs(Box, { display: 'flex', flexGrow: 1, flexShrink: 1, flexBasis: '0%', alignItems: 'center', mis: 8, withTruncatedText: true, children: [icon, _jsx(Box, { mis: 8, fontScale: 'h4', withTruncatedText: true, children: children })] }))] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopup.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopup.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "VideoConfPopup": "const VideoConfPopup = forwardRef(function VideoConfPopup({ children, position }, ref) {\nconst VideoConfPopup = forwardRef(function VideoConfPopup({ children, position }, ref) {\n    return (_jsx(VideoConfPopupContainer, { ref: ref, position: position, children: _jsx(Box, { p: 24, maxWidth: 'x276', color: 'default', children: children }) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupControllers.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupControllers.js",
        "code": {
            "VideoConfPopupControllers": "const VideoConfPopupControllers = (props) => _jsx(ButtonGroup, Object.assign({}, props));\nconst VideoConfPopupControllers = (props) => _jsx(ButtonGroup, Object.assign({}, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupInfo.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupInfo.d.ts",
        "code": {
            "const": "declare const VideoConfPopupInfo: ({ avatar, icon, children }: VideoConfPopupInfoProps) => ReactElement;\ndeclare const VideoConfPopupInfo: ({ avatar, icon, children }: VideoConfPopupInfoProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupTitle.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupTitle.js",
        "code": {
            "VideoConfPopupTitle": "const VideoConfPopupTitle = ({ text, counter = false }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [_jsx(Box, { fontScale: 'p2b', children: text }), counter && _jsx(Throbber, { size: 'x8', mis: 4 })] }));\nconst VideoConfPopupTitle = ({ text, counter = false }) => (_jsxs(Box, { display: 'flex', alignItems: 'center', children: [_jsx(Box, { fontScale: 'p2b', children: text }), counter && _jsx(Throbber, { size: 'x8', mis: 4 })] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupContent.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupContent.js",
        "code": {
            "VideoConfPopupContent": "const VideoConfPopupContent = ({ children }) => (_jsx(Box, { display: 'flex', flexDirection: 'column', mbs: 8, children: children }));\nconst VideoConfPopupContent = ({ children }) => (_jsx(Box, { display: 'flex', flexDirection: 'column', mbs: 8, children: children }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupFooter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupFooter.js",
        "code": {
            "VideoConfPopupFooter": "const VideoConfPopupFooter = (props) => _jsx(\"div\", Object.assign({}, props));\nconst VideoConfPopupFooter = (props) => _jsx(\"div\", Object.assign({}, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupFooterButtons.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupFooterButtons.js",
        "code": {
            "VideoConfPopupFooterButtons": "const VideoConfPopupFooterButtons = (props) => (_jsx(Box, { mbs: 28, children: _jsx(ButtonGroup, Object.assign({ stretch: true }, props)) }));\nconst VideoConfPopupFooterButtons = (props) => (_jsx(Box, { mbs: 28, children: _jsx(ButtonGroup, Object.assign({ stretch: true }, props)) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupBackdrop.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupBackdrop.js",
        "code": {
            "VideoConfPopupBackdrop": "const VideoConfPopupBackdrop = ({ children }) => (_jsx(Box, { m: 40, className: backdropStyle, children: children }));\nconst VideoConfPopupBackdrop = ({ children }) => (_jsx(Box, { m: 40, className: backdropStyle, children: children }));"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupTitle.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupTitle.d.ts",
        "code": {
            "const": "declare const VideoConfPopupTitle: ({ text, counter }: VideoConfPopupTitleProps) => ReactElement;\ndeclare const VideoConfPopupTitle: ({ text, counter }: VideoConfPopupTitleProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConfPopupIcon.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-video-conf/dist/VideoConfPopup/VideoConfPopupIcon.js",
        "code": {
            "VideoConfPopupIcon": "const VideoConfPopupIcon = ({ children }) => (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 'x18', overflow: 'hidden', justifyContent: 'center', children: children }));\nconst VideoConfPopupIcon = ({ children }) => (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 'x18', overflow: 'hidden', justifyContent: 'center', children: children }));"
        },
        "depth_rank": 8
    },
    {
        "file": "Markup.spec.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/Markup.spec.tsx",
        "code": {
            "items": "\tconst items = screen.getAllByRole('listitem');\n\tconst items = screen.getAllByRole('listitem');\n\texpect(items).toHaveLength(3);\n\n\texpect(items[0]).toHaveTextContent('Hello');\n\texpect(items[1]).toHaveTextContent('Hola');\n\texpect(items[2]).toHaveTextContent('\u4f60\u597d');\n});\n\nit('renders a task list', () => {\n\trender(\n\t\t<Markup\n\t\t\ttokens={[\n\t\t\t\t{\n\t\t\t\t\ttype: 'TASKS',\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\t{ type: 'TASK', status: true, value: [{ type: 'PLAIN_TEXT', value: 'Chores' }] },",
            "checkboxes": "\tconst items = screen.getAllByRole('listitem');\n\tconst items = screen.getAllByRole('listitem');\n\texpect(items).toHaveLength(3);\n\n\texpect(items[0]).toHaveTextContent('Chores');\n\texpect(items[1]).toHaveTextContent('Dishes');\n\texpect(items[2]).toHaveTextContent('Laundry');\n\n\tconst checkboxes = screen.getAllByRole('checkbox');\n\tconst checkboxes = screen.getAllByRole('checkbox');\n\texpect(checkboxes).toHaveLength(3);\n\n\texpect(checkboxes[0]).toBeChecked();\n\texpect(checkboxes[1]).not.toBeChecked();\n\texpect(checkboxes[2]).toBeChecked();\n});\n\nit('renders a blockquote', () => {\n\trender(\n\t\t<Markup\n\t\t\ttokens={[\n\t\t\t\t{\n\t\t\t\t\ttype: 'QUOTE',\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'PARAGRAPH',\n\t\t\t\t\t\t\tvalue: [{ type: 'PLAIN_TEXT', value: 'Cogito ergo sum.' }],",
            "foo": "\texpect(screen.getByRole('region')).toHaveTextContent('```const foo = bar;```');\n\texpect(screen.getByRole('region')).toHaveTextContent('```const foo = bar;```');\n});\n\nit('renders a code block with language', async () => {\n\trender(\n\t\t<Suspense fallback={null}>"
        },
        "depth_rank": 7
    },
    {
        "file": "Markup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/Markup.tsx",
        "code": {
            "Markup": "const Markup = ({ tokens }: MarkupProps): ReactElement => (\nconst Markup = ({ tokens }: MarkupProps): ReactElement => ("
        },
        "depth_rank": 7
    },
    {
        "file": "PreviewMarkup.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/PreviewMarkup.tsx",
        "code": {
            "PreviewMarkup": "const isOnlyBigEmojiBlock = (tokens: MessageParser.Root): tokens is [MessageParser.BigEmoji] =>\nconst isOnlyBigEmojiBlock = (tokens: MessageParser.Root): tokens is [MessageParser.BigEmoji] =>\n\ttokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\n\ntype PreviewMarkupProps = {\n\ttokens: MessageParser.Root;\n};\n\nconst PreviewMarkup = ({ tokens }: PreviewMarkupProps): ReactElement | null => {\nconst PreviewMarkup = ({ tokens }: PreviewMarkupProps): ReactElement | null => {\n\tif (isOnlyBigEmojiBlock(tokens)) {\n\t\treturn <PreviewBigEmojiBlock emoji={tokens[0].value} />;",
            "firstTask": "\t\t\tconst firstTask = firstBlock.value[0];\n\t\t\tconst firstTask = firstBlock.value[0];\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{firstTask.status ? '\\u2611' : '\\u2610'} <PreviewInlineElements children={firstTask.value} />",
            "firstParagraph": "\t\t\tconst firstParagraph = firstBlock.value[0];\n\t\t\tconst firstParagraph = firstBlock.value[0];\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t&gt; <PreviewInlineElements children={firstParagraph.value} />"
        },
        "depth_rank": 7
    },
    {
        "file": "PreviewUserMentionElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/mentions/PreviewUserMentionElement.tsx",
        "code": {
            "PreviewUserMentionElement": "const PreviewUserMentionElement = ({ mention }: PreviewUserMentionElementProps): ReactElement => <>@{mention}</>;\nconst PreviewUserMentionElement = ({ mention }: PreviewUserMentionElementProps): ReactElement => <>@{mention}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "UserMentionElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/mentions/UserMentionElement.tsx",
        "code": {
            "t": "const UserMentionElement = ({ mention }: UserMentionElementProps): ReactElement => {\nconst UserMentionElement = ({ mention }: UserMentionElementProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { resolveUserMention, onUserMentionClick, ownUserId, useRealName, showMentionSymbol } = useContext(MarkupInteractionContext);\n\tconst { resolveUserMention, onUserMentionClick, ownUserId, useRealName, showMentionSymbol } = useContext(MarkupInteractionContext);",
            "handleClick": "\tconst resolved = useMemo(() => resolveUserMention?.(mention), [mention, resolveUserMention]);\n\tconst resolved = useMemo(() => resolveUserMention?.(mention), [mention, resolveUserMention]);\n\tconst handleClick = useMemo(() => (resolved ? onUserMentionClick?.(resolved) : undefined), [resolved, onUserMentionClick]);\n\tconst handleClick = useMemo(() => (resolved ? onUserMentionClick?.(resolved) : undefined), [resolved, onUserMentionClick]);\n\n\tif (mention === 'all') {\n\t\treturn (\n\t\t\t<Message.Highlight title={t('Mentions_all_room_members')} variant='relevant'>"
        },
        "depth_rank": 8
    },
    {
        "file": "ChannelMentionElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/mentions/ChannelMentionElement.tsx",
        "code": {
            "t": "const ChannelMentionElement = ({ mention }: ChannelMentionElementProps): ReactElement => {\nconst ChannelMentionElement = ({ mention }: ChannelMentionElementProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { resolveChannelMention, onChannelMentionClick, showMentionSymbol } = useContext(MarkupInteractionContext);\n\tconst { resolveChannelMention, onChannelMentionClick, showMentionSymbol } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/code/CodeBlock.tsx",
        "code": {
            "ref": "const CodeBlock = ({ lines = [], language }: CodeBlockProps): ReactElement => {\nconst CodeBlock = ({ lines = [], language }: CodeBlockProps): ReactElement => {\n\tconst ref = useRef<HTMLElement>(null);\n\tconst ref = useRef<HTMLElement>(null);\n\n\tconst { highlightRegex } = useContext(MarkupInteractionContext);\n\tconst { highlightRegex } = useContext(MarkupInteractionContext);",
            "head": "\tconst code = useMemo(() => lines.map((line) => line.value.value).join('\\n'), [lines]);\n\tconst code = useMemo(() => lines.map((line) => line.value.value).join('\\n'), [lines]);\n\n\tconst content = useMemo(() => {\n\tconst content = useMemo(() => {\n\t\tconst regex = highlightRegex?.();\n\t\tconst regex = highlightRegex?.();\n\n\t\tif (regex) {\n\t\t\tconst chunks = code.split(regex);\n\t\t\tconst chunks = code.split(regex);\n\t\t\tconst head = chunks.shift() ?? '';\n\t\t\tconst head = chunks.shift() ?? '';\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<>{head}</>"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewCodeElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/code/PreviewCodeElement.tsx",
        "code": {
            "PreviewCodeElement": "const PreviewCodeElement = ({ code }: PreviewCodeElementProps): ReactElement => <>{code}</>;\nconst PreviewCodeElement = ({ code }: PreviewCodeElementProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/code/CodeElement.tsx",
        "code": {
            "CodeElement": "const CodeElement = ({ code }: CodeElementProps): ReactElement => (\nconst CodeElement = ({ code }: CodeElementProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "BoldSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/BoldSpan.tsx",
        "code": {
            "BoldSpan": "const BoldSpan = ({ children }: BoldSpanProps): ReactElement => (\nconst BoldSpan = ({ children }: BoldSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "StrikeSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/StrikeSpan.tsx",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }: StrikeSpanProps): ReactElement => (\nconst StrikeSpan = ({ children }: StrikeSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "PlainSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/PlainSpan.tsx",
        "code": {
            "t": "const PlainSpan = ({ text }: PlainSpanProps): ReactElement => {\nconst PlainSpan = ({ text }: PlainSpanProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { highlightRegex, markRegex } = useContext(MarkupInteractionContext);\n\tconst { highlightRegex, markRegex } = useContext(MarkupInteractionContext);",
            "head": "\t\t\tconst chunks = text.split(markRegex());\n\t\t\tconst chunks = text.split(markRegex());\n\t\t\tconst head = chunks.shift() ?? '';\n\t\t\tconst head = chunks.shift() ?? '';\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<>{head}</>"
        },
        "depth_rank": 8
    },
    {
        "file": "LinkSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/LinkSpan.tsx",
        "code": {
            "labelElements": "const LinkSpan = ({ href, label }: LinkSpanProps): ReactElement => {\nconst LinkSpan = ({ href, label }: LinkSpanProps): ReactElement => {\n\tconst children = useMemo(() => {\n\tconst children = useMemo(() => {\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\t\tswitch (child.type) {\n\t\t\t\tcase 'PLAIN_TEXT':\n\t\t\t\t\treturn <PlainSpan key={index} text={child.value} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewInlineElements.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/PreviewInlineElements.tsx",
        "code": {
            "PreviewInlineElements": "const PreviewInlineElements = ({ children }: PreviewInlineElementsProps): ReactElement => (\nconst PreviewInlineElements = ({ children }: PreviewInlineElementsProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ImageElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/ImageElement.tsx",
        "code": {
            "plainAlt": "const style = {\nconst style = {\n\tmaxWidth: '100%',\n};\n\ntype ImageElementProps = {\n\tsrc: string;\n\talt: MessageParser.Markup;\n};\n\nconst ImageElement = ({ src, alt }: ImageElementProps): ReactElement => {\nconst ImageElement = ({ src, alt }: ImageElementProps): ReactElement => {\n\tconst plainAlt = useMemo(() => flattenMarkup(alt), [alt]);\n\tconst plainAlt = useMemo(() => flattenMarkup(alt), [alt]);\n\n\treturn (\n\t\t<a href={src} target='_blank' rel='noopener noreferrer' title={plainAlt}>"
        },
        "depth_rank": 8
    },
    {
        "file": "InlineElements.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/InlineElements.tsx",
        "code": {
            "InlineElements": "const InlineElements = ({ children }: InlineElementsProps): ReactElement => (\nconst InlineElements = ({ children }: InlineElementsProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ItalicSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/elements/ItalicSpan.tsx",
        "code": {
            "ItalicSpan": "const ItalicSpan = ({ children }: ItalicSpanProps): ReactElement => (\nconst ItalicSpan = ({ children }: ItalicSpanProps): ReactElement => (",
            "renderBlockComponent": "const renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\nconst renderBlockComponent = (block: MessageBlock, index: number): ReactElement | null => {\n\tswitch (block.type) {\n\t\tcase 'EMOJI':\n\t\t\treturn <EmojiElement key={index} {...block} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "BigEmojiElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/BigEmojiElement.tsx",
        "code": {
            "BigEmojiElement": "const BigEmojiElement = (emoji: BigEmojiElementProps): ReactElement => <Emoji big {...emoji} />;\nconst BigEmojiElement = (emoji: BigEmojiElementProps): ReactElement => <Emoji big {...emoji} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewBigEmojiBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/PreviewBigEmojiBlock.tsx",
        "code": {
            "PreviewBigEmojiBlock": "const PreviewBigEmojiBlock = ({ emoji }: PreviewBigEmojiBlockProps): ReactElement => (\nconst PreviewBigEmojiBlock = ({ emoji }: PreviewBigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "Emoji.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/Emoji.tsx",
        "code": {
            "Emoji": "const Emoji = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\nconst Emoji = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\n\tconst { convertAsciiToEmoji, useEmoji } = useContext(MarkupInteractionContext);\n\tconst { convertAsciiToEmoji, useEmoji } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "EmojiRenderer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/EmojiRenderer.tsx",
        "code": {
            "EmojiRenderer": "const EmojiRenderer = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\nconst EmojiRenderer = ({ big = false, preview = false, ...emoji }: EmojiProps): ReactElement => {\n\tconst { detectEmoji } = useContext(MarkupInteractionContext);\n\tconst { detectEmoji } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "EmojiElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/EmojiElement.tsx",
        "code": {
            "EmojiElement": "const EmojiElement = (emoji: EmojiElementProps): ReactElement => <Emoji {...emoji} />;\nconst EmojiElement = (emoji: EmojiElementProps): ReactElement => <Emoji {...emoji} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewEmojiElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/PreviewEmojiElement.tsx",
        "code": {
            "PreviewEmojiElement": "const PreviewEmojiElement = (emoji: PreviewEmojiElementProps): ReactElement => <Emoji preview {...emoji} />;\nconst PreviewEmojiElement = (emoji: PreviewEmojiElementProps): ReactElement => <Emoji preview {...emoji} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "BigEmojiBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/emoji/BigEmojiBlock.tsx",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => (\nconst BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "OrderedListBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/blocks/OrderedListBlock.tsx",
        "code": {
            "OrderedListBlock": "const OrderedListBlock = ({ items }: OrderedListBlockProps): ReactElement => (\nconst OrderedListBlock = ({ items }: OrderedListBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "TaskListBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/blocks/TaskListBlock.tsx",
        "code": {
            "TaksListBlock": "const TaksListBlock = ({ tasks }: TaskListBlockProps): ReactElement => {\nconst TaksListBlock = ({ tasks }: TaskListBlockProps): ReactElement => {\n\tconst { onTaskChecked } = useContext(MarkupInteractionContext);\n\tconst { onTaskChecked } = useContext(MarkupInteractionContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "QuoteBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/blocks/QuoteBlock.tsx",
        "code": {
            "QuoteBlock": "const QuoteBlock = ({ children }: QuoteBlockProps): ReactElement => (\nconst QuoteBlock = ({ children }: QuoteBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "UnorderedListBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/blocks/UnorderedListBlock.tsx",
        "code": {
            "UnorderedListBlock": "const UnorderedListBlock = ({ items }: UnorderedListBlockProps): ReactElement => (\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ParagraphBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/blocks/ParagraphBlock.tsx",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ children }: ParagraphBlockProps): ReactElement => (\nconst ParagraphBlock = ({ children }: ParagraphBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ColorElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/colors/ColorElement.tsx",
        "code": {
            "ColorElement": "const ColorElement = ({ r, g, b, a }: ColorElementProps): ReactElement => (\nconst ColorElement = ({ r, g, b, a }: ColorElementProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/katex/PreviewKatexElement.tsx",
        "code": {
            "PreviewKatexElement": "const PreviewKatexElement = ({ code }: PreviewKatexElementProps): ReactElement => <>{code}</>;\nconst PreviewKatexElement = ({ code }: PreviewKatexElementProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "KatexElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/katex/KatexElement.tsx",
        "code": {
            "html": "const KatexElement = ({ code }: KatexElementProps): ReactElement => {\nconst KatexElement = ({ code }: KatexElementProps): ReactElement => {\n\tconst html = useMemo(\n\tconst html = useMemo(\n\t\t() =>\n\t\t\tkatex.renderToString(code, {\n\t\t\t\tdisplayMode: false,\n\t\t\t\tmacros: {\n\t\t\t\t\t'\\\\href': '\\\\@secondoftwo',\n\t\t\t\t},\n\t\t\t}),\n\t\t[code],\n\t);\n\n\treturn <span dangerouslySetInnerHTML={{ __html: html }} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/katex/PreviewKatexBlock.tsx",
        "code": {
            "PreviewKatexBlock": "const PreviewKatexBlock = ({ code }: PreviewKatexBlockProps): ReactElement => <>{code}</>;\nconst PreviewKatexBlock = ({ code }: PreviewKatexBlockProps): ReactElement => <>{code}</>;"
        },
        "depth_rank": 8
    },
    {
        "file": "KatexErrorBoundary.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/src/katex/KatexErrorBoundary.tsx",
        "code": {
            "KatexErrorBoundary": "const KatexErrorBoundary = ({ children, code }: KatexErrorBoundaryProps): ReactElement => {\nconst KatexErrorBoundary = ({ children, code }: KatexErrorBoundaryProps): ReactElement => {\n\tconst [error, setError] = useState<Error | null>(null);\n\tconst [error, setError] = useState<Error | null>(null);\n\treturn <ErrorBoundary children={children} onError={setError} fallback={<Fallback title={error?.message}>{code}</Fallback>} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "Markup.stories.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/Markup.stories.js",
        "code": {
            "Template": "const Template = (args) => _jsx(Markup, Object.assign({}, args));\nconst Template = (args) => _jsx(Markup, Object.assign({}, args));"
        },
        "depth_rank": 7
    },
    {
        "file": "Markup.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/Markup.js",
        "code": {
            "Markup": "const Markup = ({ tokens }) => (_jsx(_Fragment, { children: tokens.map((block, index) => {\nconst Markup = ({ tokens }) => (_jsx(_Fragment, { children: tokens.map((block, index) => {\n        switch (block.type) {\n            case 'BIG_EMOJI':\n                return _jsx(BigEmojiBlock, { emoji: block.value }, index);"
        },
        "depth_rank": 7
    },
    {
        "file": "PreviewMarkup.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/PreviewMarkup.js",
        "code": {
            "PreviewMarkup": "const isOnlyBigEmojiBlock = (tokens) => tokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\nconst isOnlyBigEmojiBlock = (tokens) => tokens.length === 1 && tokens[0].type === 'BIG_EMOJI';\nconst PreviewMarkup = ({ tokens }) => {\nconst PreviewMarkup = ({ tokens }) => {\n    if (isOnlyBigEmojiBlock(tokens)) {\n        return _jsx(PreviewBigEmojiBlock, { emoji: tokens[0].value });"
        },
        "depth_rank": 7
    },
    {
        "file": "PreviewUserMentionElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/mentions/PreviewUserMentionElement.js",
        "code": {
            "PreviewUserMentionElement": "const PreviewUserMentionElement = ({ mention }) => _jsxs(_Fragment, { children: [\"@\", mention] });\nconst PreviewUserMentionElement = ({ mention }) => _jsxs(_Fragment, { children: [\"@\", mention] });"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewCodeElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/code/PreviewCodeElement.js",
        "code": {
            "PreviewCodeElement": "const PreviewCodeElement = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewCodeElement = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewCodeElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/code/PreviewCodeElement.d.ts",
        "code": {
            "const": "declare const PreviewCodeElement: ({ code }: PreviewCodeElementProps) => ReactElement;\ndeclare const PreviewCodeElement: ({ code }: PreviewCodeElementProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/code/CodeElement.d.ts",
        "code": {
            "const": "declare const CodeElement: ({ code }: CodeElementProps) => ReactElement;\ndeclare const CodeElement: ({ code }: CodeElementProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "CodeBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/code/CodeBlock.d.ts",
        "code": {
            "const": "declare const CodeBlock: ({ lines, language }: CodeBlockProps) => ReactElement;\ndeclare const CodeBlock: ({ lines, language }: CodeBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "LinkSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/LinkSpan.d.ts",
        "code": {
            "const": "declare const LinkSpan: ({ href, label }: LinkSpanProps) => ReactElement;\ndeclare const LinkSpan: ({ href, label }: LinkSpanProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewInlineElements.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/PreviewInlineElements.js",
        "code": {
            "PreviewInlineElements": "const PreviewInlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\nconst PreviewInlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return _jsx(BoldSpan, { children: child.value }, index);"
        },
        "depth_rank": 8
    },
    {
        "file": "ImageElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ src, alt }: ImageElementProps) => ReactElement;\ndeclare const ImageElement: ({ src, alt }: ImageElementProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "InlineElements.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/InlineElements.d.ts",
        "code": {
            "const": "declare const InlineElements: ({ children }: InlineElementsProps) => ReactElement;\ndeclare const InlineElements: ({ children }: InlineElementsProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewInlineElements.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/PreviewInlineElements.d.ts",
        "code": {
            "const": "declare const PreviewInlineElements: ({ children }: PreviewInlineElementsProps) => ReactElement;\ndeclare const PreviewInlineElements: ({ children }: PreviewInlineElementsProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "StrikeSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/StrikeSpan.js",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst StrikeSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' ||\n            block.type === 'PLAIN_TEXT' ||\n            block.type === 'ITALIC' ||\n            block.type === 'BOLD' ||\n            block.type === 'INLINE_CODE') {\n            return _jsx(\"del\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 8
    },
    {
        "file": "ItalicSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/ItalicSpan.js",
        "code": {
            "ItalicSpan": "const ItalicSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst ItalicSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' ||\n            block.type === 'PLAIN_TEXT' ||\n            block.type === 'STRIKE' ||\n            block.type === 'BOLD' ||\n            block.type === 'INLINE_CODE') {\n            return _jsx(\"em\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 8
    },
    {
        "file": "StrikeSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/StrikeSpan.d.ts",
        "code": {
            "const": "declare const StrikeSpan: ({ children }: StrikeSpanProps) => ReactElement;\ndeclare const StrikeSpan: ({ children }: StrikeSpanProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "InlineElements.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/InlineElements.js",
        "code": {
            "InlineElements": "const InlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\nconst InlineElements = ({ children }) => (_jsx(_Fragment, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return _jsx(BoldSpan, { children: child.value }, index);"
        },
        "depth_rank": 8
    },
    {
        "file": "ItalicSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/ItalicSpan.d.ts",
        "code": {
            "const": "declare const ItalicSpan: ({ children }: ItalicSpanProps) => ReactElement;\ndeclare const ItalicSpan: ({ children }: ItalicSpanProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "BoldSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/BoldSpan.d.ts",
        "code": {
            "const": "declare const BoldSpan: ({ children }: BoldSpanProps) => ReactElement;\ndeclare const BoldSpan: ({ children }: BoldSpanProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "BoldSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/elements/BoldSpan.js",
        "code": {
            "BoldSpan": "const BoldSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\nconst BoldSpan = ({ children }) => (_jsx(_Fragment, { children: children.map((block, index) => {\n        if (block.type === 'LINK' ||\n            block.type === 'PLAIN_TEXT' ||\n            block.type === 'STRIKE' ||\n            block.type === 'ITALIC' ||\n            block.type === 'INLINE_CODE') {\n            return _jsx(\"strong\", { children: renderBlockComponent(block, index) }, index);",
            "renderBlockComponent": "const renderBlockComponent = (block, index) => {\nconst renderBlockComponent = (block, index) => {\n    switch (block.type) {\n        case 'EMOJI':\n            return _jsx(EmojiElement, Object.assign({}, block), index);"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewBigEmojiBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/PreviewBigEmojiBlock.js",
        "code": {
            "PreviewBigEmojiBlock": "const PreviewBigEmojiBlock = ({ emoji }) => (_jsx(_Fragment, { children: emoji.map((emoji, index) => (_jsx(PreviewEmojiElement, Object.assign({}, emoji), index))) }));\nconst PreviewBigEmojiBlock = ({ emoji }) => (_jsx(_Fragment, { children: emoji.map((emoji, index) => (_jsx(PreviewEmojiElement, Object.assign({}, emoji), index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "BigEmojiBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiBlock.js",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }) => (_jsx(\"div\", { role: 'presentation', children: emoji.map((emoji, index) => (_jsx(BigEmojiElement, Object.assign({}, emoji), index))) }));\nconst BigEmojiBlock = ({ emoji }) => (_jsx(\"div\", { role: 'presentation', children: emoji.map((emoji, index) => (_jsx(BigEmojiElement, Object.assign({}, emoji), index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "EmojiElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/EmojiElement.js",
        "code": {
            "EmojiElement": "const EmojiElement = (emoji) => _jsx(Emoji, Object.assign({}, emoji));\nconst EmojiElement = (emoji) => _jsx(Emoji, Object.assign({}, emoji));"
        },
        "depth_rank": 8
    },
    {
        "file": "BigEmojiElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiElement.js",
        "code": {
            "BigEmojiElement": "const BigEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ big: true }, emoji));\nconst BigEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ big: true }, emoji));"
        },
        "depth_rank": 8
    },
    {
        "file": "EmojiRenderer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/EmojiRenderer.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "EmojiRenderer": "const EmojiRenderer = (_a) => {\nconst EmojiRenderer = (_a) => {\n    var _b;\n    var { big = false, preview = false } = _a, emoji = __rest(_a, [\"big\", \"preview\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewEmojiElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/PreviewEmojiElement.js",
        "code": {
            "PreviewEmojiElement": "const PreviewEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ preview: true }, emoji));\nconst PreviewEmojiElement = (emoji) => _jsx(Emoji, Object.assign({ preview: true }, emoji));"
        },
        "depth_rank": 8
    },
    {
        "file": "Emoji.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/Emoji.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "Emoji": "const Emoji = (_a) => {\nconst Emoji = (_a) => {\n    var { big = false, preview = false } = _a, emoji = __rest(_a, [\"big\", \"preview\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "BigEmojiBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/BigEmojiBlock.d.ts",
        "code": {
            "const": "declare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;\ndeclare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewBigEmojiBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/emoji/PreviewBigEmojiBlock.d.ts",
        "code": {
            "const": "declare const PreviewBigEmojiBlock: ({ emoji }: PreviewBigEmojiBlockProps) => ReactElement;\ndeclare const PreviewBigEmojiBlock: ({ emoji }: PreviewBigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "HeadingBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/HeadingBlock.d.ts",
        "code": {
            "const": "declare const HeadingBlock: ({ children, level }: HeadingBlockProps) => ReactElement;\ndeclare const HeadingBlock: ({ children, level }: HeadingBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "QuoteBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/QuoteBlock.js",
        "code": {
            "QuoteBlock": "const QuoteBlock = ({ children }) => (_jsx(\"blockquote\", { children: children.map((paragraph, index) => (_jsx(ParagraphBlock, { children: paragraph.value }, index))) }));\nconst QuoteBlock = ({ children }) => (_jsx(\"blockquote\", { children: children.map((paragraph, index) => (_jsx(ParagraphBlock, { children: paragraph.value }, index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "ParagraphBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/ParagraphBlock.js",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ children }) => (_jsx(\"div\", { children: _jsx(InlineElements, { children: children }) }));\nconst ParagraphBlock = ({ children }) => (_jsx(\"div\", { children: _jsx(InlineElements, { children: children }) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "QuoteBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/QuoteBlock.d.ts",
        "code": {
            "const": "declare const QuoteBlock: ({ children }: QuoteBlockProps) => ReactElement;\ndeclare const QuoteBlock: ({ children }: QuoteBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "OrderedListBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/OrderedListBlock.d.ts",
        "code": {
            "const": "declare const OrderedListBlock: ({ items }: OrderedListBlockProps) => ReactElement;\ndeclare const OrderedListBlock: ({ items }: OrderedListBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "UnorderedListBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/UnorderedListBlock.js",
        "code": {
            "UnorderedListBlock": "const UnorderedListBlock = ({ items }) => (_jsx(\"ul\", { children: items.map((item, index) => (_jsx(\"li\", { children: _jsx(InlineElements, { children: item.value }) }, index))) }));\nconst UnorderedListBlock = ({ items }) => (_jsx(\"ul\", { children: items.map((item, index) => (_jsx(\"li\", { children: _jsx(InlineElements, { children: item.value }) }, index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "TaskListBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/TaskListBlock.d.ts",
        "code": {
            "const": "declare const TaksListBlock: ({ tasks }: TaskListBlockProps) => ReactElement;\ndeclare const TaksListBlock: ({ tasks }: TaskListBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "UnorderedListBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/UnorderedListBlock.d.ts",
        "code": {
            "const": "declare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => ReactElement;\ndeclare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "ParagraphBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/ParagraphBlock.d.ts",
        "code": {
            "const": "declare const ParagraphBlock: ({ children }: ParagraphBlockProps) => ReactElement;\ndeclare const ParagraphBlock: ({ children }: ParagraphBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "OrderedListBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/blocks/OrderedListBlock.js",
        "code": {
            "OrderedListBlock": "const OrderedListBlock = ({ items }) => (_jsx(\"ol\", { children: items.map(({ value, number }, index) => (_jsx(\"li\", { value: number, children: _jsx(InlineElements, { children: value }) }, index))) }));\nconst OrderedListBlock = ({ items }) => (_jsx(\"ol\", { children: items.map(({ value, number }, index) => (_jsx(\"li\", { value: number, children: _jsx(InlineElements, { children: value }) }, index))) }));"
        },
        "depth_rank": 8
    },
    {
        "file": "KatexElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/KatexElement.d.ts",
        "code": {
            "const": "declare const KatexElement: ({ code }: KatexElementProps) => ReactElement;\ndeclare const KatexElement: ({ code }: KatexElementProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexElement.d.ts",
        "code": {
            "const": "declare const PreviewKatexElement: ({ code }: PreviewKatexElementProps) => ReactElement;\ndeclare const PreviewKatexElement: ({ code }: PreviewKatexElementProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexBlock.js",
        "code": {
            "PreviewKatexBlock": "const PreviewKatexBlock = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewKatexBlock = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexElement.js",
        "code": {
            "PreviewKatexElement": "const PreviewKatexElement = ({ code }) => _jsx(_Fragment, { children: code });\nconst PreviewKatexElement = ({ code }) => _jsx(_Fragment, { children: code });"
        },
        "depth_rank": 8
    },
    {
        "file": "KatexErrorBoundary.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/KatexErrorBoundary.d.ts",
        "code": {
            "const": "declare const KatexErrorBoundary: ({ children, code }: KatexErrorBoundaryProps) => ReactElement;\ndeclare const KatexErrorBoundary: ({ children, code }: KatexErrorBoundaryProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewKatexBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/PreviewKatexBlock.d.ts",
        "code": {
            "const": "declare const PreviewKatexBlock: ({ code }: PreviewKatexBlockProps) => ReactElement;\ndeclare const PreviewKatexBlock: ({ code }: PreviewKatexBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "KatexBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/gazzodown/dist/katex/KatexBlock.d.ts",
        "code": {
            "const": "declare const KatexBlock: ({ code }: KatexBlockProps) => ReactElement;\ndeclare const KatexBlock: ({ code }: KatexBlockProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "validate.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/cas-validate/src/validate.ts",
        "code": {
            "query": "\tconst validatePath = version < 2.0 ? 'validate' : 'proxyValidate';\n\tconst validatePath = version < 2.0 ? 'validate' : 'proxyValidate';\n\n\tconst query = {\n\tconst query = {\n\t\tticket,\n\t\tservice,\n\t\t...(renew ? { renew: 1 } : {}),"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/jwt/src/index.ts",
        "code": {
            "token": "\tconst token = await new SignJWT(keyObject as JWTPayload).setProtectedHeader({ alg, typ: 'JWT' }).sign(privateKey);\n\tconst token = await new SignJWT(keyObject as JWTPayload).setProtectedHeader({ alg, typ: 'JWT' }).sign(privateKey);",
            "new": "\t\tthrow new Error('This function should only be used in tests');\n\t\tthrow new Error('This function should only be used in tests');\n\t}\n\tconst { publicKey, privateKey } = await generateKeyPair('RS256');\n\tconst { publicKey, privateKey } = await generateKeyPair('RS256');"
        },
        "depth_rank": 7
    },
    {
        "file": "jwt.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/jwt/__tests__/jwt.spec.ts",
        "code": {
            "token": "\tconst token = await sign(licenseV3, pkcs8);\n\tconst token = await sign(licenseV3, pkcs8);\n\tconst [payload, protectedHeader] = await verify(token, spki);\n\tconst [payload, protectedHeader] = await verify(token, spki);\n\n\texpect(protectedHeader).toEqual({ alg: 'RS256', typ: 'JWT' });"
        },
        "depth_rank": 7
    },
    {
        "file": "Agenda.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/agenda/src/Agenda.ts",
        "code": {
            "AgendaConfig": "\tconstructor(config: AgendaConfig = {}) {\n\tconstructor(config: AgendaConfig = {}) {\n\t\tsuper();\n\n\t\tthis._name = config.name;\n\t\tthis._processEvery = humanInterval(config.processEvery) || defaultInterval;\n\t\tthis._defaultConcurrency = config.defaultConcurrency || 5;\n\t\tthis._maxConcurrency = config.maxConcurrency || 20;\n\t\tthis._defaultLockLimit = config.defaultLockLimit || 0;\n\t\tthis._lockLimit = config.lockLimit || 0;\n\n\t\tthis._definitions = {};",
            "client": "\t\t\tconst client = await MongoClient.connect(url, options);\n\t\t\tconst client = await MongoClient.connect(url, options);\n\t\t\tdebug('successful connection to MongoDB using collection: [%s]', collection);\n\t\t\tthis._db = client;\n\t\t\tthis._mdb = client.db();\n\t\t\tthis.dbInit(collection);\n\t\t} catch (error) {",
            "job": "\t\t\tconst job = this.create(name, data);\n\t\t\tconst job = this.create(name, data);\n\n\t\t\tjob.schedule(new Date());\n\t\t\tawait job.save();\n\n\t\t\treturn job;\n\t\t} catch (error) {",
            "record": "\t\tconst record = await this.getCollection().findOne(query, { projection: { _id: 1 } });\n\t\tconst record = await this.getCollection().findOne(query, { projection: { _id: 1 } });",
            "res": "\t\tconst res = await (async (): Promise<Document | null> => {\n\t\tconst res = await (async (): Promise<Document | null> => {\n\t\t\tif ('value' in result) {\n\t\t\t\treturn result.value;\n\t\t\t}\n\n\t\t\tif ('insertedId' in result) {\n\t\t\t\treturn this.getCollection().findOne({ _id: result.insertedId });",
            "result": "\t\tconst result = await this.getCollection().findOneAndUpdate(query, update, { upsert: true, returnDocument: 'after' });\n\t\tconst result = await this.getCollection().findOneAndUpdate(query, update, { upsert: true, returnDocument: 'after' });",
            "now": "\t\tconst result = await this.getCollection().insertOne(props);\n\t\tconst result = await this.getCollection().insertOne(props);\n\t\treturn this._processDbResult(job, result);\n\t}\n\n\tpublic async saveJob(job: Job): Promise<void> {\n\t\ttry {\n\t\t\tdebug('attempting to save a job into Agenda instance');\n\n\t\t\t// Grab information needed to save job but that we don't want to persist in MongoDB\n\t\t\tconst id = job.attrs._id;\n\t\t\tconst id = job.attrs._id;\n\n\t\t\tconst props = job.toJSON();\n\t\t\tconst props = job.toJSON();\n\t\t\t// delete props._id;\n\t\t\t// delete props.unique;\n\t\t\t// delete props.uniqueOpts;\n\n\t\t\t// Store name of agenda queue as last modifier in job data\n\t\t\tprops.lastModifiedBy = this._name;\n\t\t\tdebug('[job %s] set job props: \\n%O', id, props);\n\n\t\t\t// Grab current time and set default query options for MongoDB\n\t\t\tconst now = new Date();\n\t\t\tconst now = new Date();\n\t\t\tdebug('current time stored as %s', now.toISOString());\n\n\t\t\t// If the job already had an ID, then update the properties of the job\n\t\t\t// i.e, who last modified it, etc\n\t\t\tif (id) {\n\t\t\t\treturn this._updateJob(job, props);\n\t\t\t}\n\n\t\t\tif (props.type === 'single') {\n\t\t\t\treturn this._saveSingleJob(job, props, now);\n\t\t\t}\n\n\t\t\tif (job.attrs.unique) {\n\t\t\t\treturn this._saveUniqueJob(job, props);\n\t\t\t}\n\n\t\t\treturn this._saveNewJob(job, props);\n\t\t} catch (error) {",
            "resp": "\t\tconst resp = await this.getCollection().findOneAndUpdate(criteria, update, { returnDocument: 'after' });\n\t\tconst resp = await this.getCollection().findOneAndUpdate(criteria, update, { returnDocument: 'after' });"
        },
        "depth_rank": 7
    },
    {
        "file": "Job.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/agenda/src/Job.ts",
        "code": {
            "previousNextRunAt": "\t\tconst previousNextRunAt = this.attrs.nextRunAt || new Date();\n\t\tconst previousNextRunAt = this.attrs.nextRunAt || new Date();\n\t\tthis.attrs.nextRunAt = null;\n\n\t\tif (interval) {\n\t\t\tthis._computeFromInterval(interval, previousNextRunAt);\n\t\t} else if (repeatAt) {",
            "newDate": "\t\tconst newDate = moment(date);\n\t\tconst newDate = moment(date);\n\t\tif (timezone) {\n\t\t\tnewDate.tz(timezone);\n\t\t}\n\n\t\treturn newDate;\n\t}\n\n\tprivate _computeFromInterval(interval: string | number, previousNextRunAt: Date): void {\n\t\tconst { repeatTimezone: timezone, name, _id } = this.attrs;\n\t\tconst { repeatTimezone: timezone, name, _id } = this.attrs;",
            "offset": "\t\tconst lastRun = this.attrs.lastRunAt || new Date();\n\t\tconst lastRun = this.attrs.lastRunAt || new Date();\n\t\tconst nextDate = date(repeatAt).valueOf();\n\t\tconst nextDate = date(repeatAt).valueOf();\n\n\t\t// If you do not specify offset date for below test it will fail for ms\n\t\tconst offset = Date.now();\n\t\tconst offset = Date.now();\n\t\tif (offset === date(repeatAt, offset).valueOf()) {\n\t\t\tthis.attrs.nextRunAt = null;\n\t\t\tdebug('[%s:%s] failed to calculate repeatAt due to invalid format', this.attrs.name, this.attrs._id);\n\t\t\tthis.fail('failed to calculate repeatAt time due to invalid format');\n\t\t} else if (nextDate.valueOf() === lastRun.valueOf()) {",
            "jobCallback": "\t\tconst now = new Date();\n\t\tconst now = new Date();\n\t\tthis.attrs.failedAt = now;\n\t\tthis.attrs.lastFinishedAt = now;\n\t\tdebug('[%s:%s] fail() called [%d] times so far', this.attrs.name, this.attrs._id, this.attrs.failCount);\n\t\treturn this;\n\t}\n\n\tpublic run(): Promise<Job> {\n\t\tconst definition = this.agenda.getDefinition(this.attrs.name);\n\t\tconst definition = this.agenda.getDefinition(this.attrs.name);\n\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.attrs.lastRunAt = new Date();\n\t\t\tdebug('[%s:%s] setting lastRunAt to: %s', this.attrs.name, this.attrs._id, this.attrs.lastRunAt.toISOString());\n\t\t\tthis.computeNextRunAt();\n\t\t\tawait this.save();\n\n\t\t\tlet finished = false;\n\t\t\tconst jobCallback = async (err?: Error): Promise<void> => {\n\t\t\tconst jobCallback = async (err?: Error): Promise<void> => {\n\t\t\t\t// We don't want to complete the job multiple times\n\t\t\t\tif (finished) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfinished = true;\n\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.fail(err);\n\t\t\t\t} else {",
            "process": "\t\t\t\t\tdebug('[%s:%s] process function being called', this.attrs.name, this.attrs._id);\n\t\t\t\t\tdebug('[%s:%s] process function being called', this.attrs.name, this.attrs._id);\n\t\t\t\t\tawait definition.fn(this);\n\t\t\t\t\tawait jobCallback();\n\t\t\t\t}\n\t\t\t} catch (error: any) {"
        },
        "depth_rank": 7
    },
    {
        "file": "createJob.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/agenda/dist/createJob.js",
        "code": {
            "createJob": "const createJob = (agenda, jobData) => {\nconst createJob = (agenda, jobData) => {\n    return new Job_1.Job({ agenda, ...jobData });"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/logger/src/index.ts",
        "code": {
            "child": "\tconstructor(loggerLabel: string) {\n\tconstructor(loggerLabel: string) {\n\t\tthis.logger = getPino(loggerLabel, defaultLevel);\n\n\t\tlogLevel.on('changed', (level: LogLevelSetting) => {\n\t\t\tthis.logger.level = getLevel(level);\n\t\t});\n\t}\n\n\tsection(name: string): MainLogger {\n\t\tconst child = this.logger.child({ section: name }) as MainLogger;\n\t\tconst child = this.logger.child({ section: name }) as MainLogger;"
        },
        "depth_rank": 7
    },
    {
        "file": "getPino.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/logger/src/getPino.ts",
        "code": {
            "mainPino": "const infoLevel = process.env.LESS_INFO_LOGS ? 20 : 35;\nconst infoLevel = process.env.LESS_INFO_LOGS ? 20 : 35;\n\nconst mainPino = pino({\nconst mainPino = pino({\n\thooks: { logMethod },"
        },
        "depth_rank": 7
    },
    {
        "file": "getPino.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/logger/dist/getPino.js",
        "code": {
            "mainPino": "const infoLevel = process.env.LESS_INFO_LOGS ? 20 : 35;\nconst infoLevel = process.env.LESS_INFO_LOGS ? 20 : 35;\nconst mainPino = (0, pino_1.pino)({\nconst mainPino = (0, pino_1.pino)({\n    hooks: { logMethod },",
            "getPino": "function getPino(name, level = 'warn') {\nfunction getPino(name, level = 'warn') {\n    return mainPino.child({ name }, { level });"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/cron/src/index.ts",
        "code": {
            "result": "const runCronJobFunctionAndPersistResult = async (fn: () => Promise<any>, jobName: string): Promise<void> => {\nconst runCronJobFunctionAndPersistResult = async (fn: () => Promise<any>, jobName: string): Promise<void> => {\n\tconst { insertedId } = await CronHistory.insertOne({\n\tconst { insertedId } = await CronHistory.insertOne({\n\t\t_id: Random.id(),\n\t\tintendedAt: new Date(),\n\t\tname: jobName,\n\t\tstartedAt: new Date(),\n\t});\n\ttry {\n\t\tconst result = await fn();\n\t\tconst result = await fn();\n\t\tawait CronHistory.updateOne(\n\t\t\t{ _id: insertedId },",
            "await": "\t\tfor await (const job of this.reservedJobs) {\n\t\tfor await (const job of this.reservedJobs) {\n\t\t\tif (job.timestamped) {\n\t\t\t\tawait this.addAtTimestamp(job.name, job.when, job.callback);\n\t\t\t} else {"
        },
        "depth_rank": 7
    },
    {
        "file": "passwordPolicyClass.test.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/password-policies/tests/passwordPolicyClass.test.ts",
        "code": {
            "passwordPolicy": "\t\t\tconst passwordPolicy = new PasswordPolicy({ throwError: false });\n\t\t\tconst passwordPolicy = new PasswordPolicy({ throwError: false });"
        },
        "depth_rank": 7
    },
    {
        "file": "MessageSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/MessageSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }: MessageSurfaceProps): ReactElement => (\nconst MessageSurface = ({ children }: MessageSurfaceProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "BannerSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/BannerSurface.tsx",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }: BannerSurfaceProps): ReactElement => (\nconst BannerSurface = ({ children }: BannerSurfaceProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ContextualBarSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/ContextualBarSurface.tsx",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({\nconst ContextualBarSurface = ({\n  children,\n}: ContextualBarSurfaceProps): ReactElement => (\n  <Surface type='contextualBar'>\n    <Margins blockEnd={16}>{children}</Margins>"
        },
        "depth_rank": 8
    },
    {
        "file": "ModalSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/surfaces/ModalSurface.tsx",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }: ModalSurfaceProps): ReactElement => (\nconst ModalSurface = ({ children }: ModalSurfaceProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "TimePickerElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/TimePickerElement.tsx",
        "code": {
            "TimePickerElement": "const TimePickerElement = ({\nconst TimePickerElement = ({\n  block,\n  context,\n}: TimePickerElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "CheckboxElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/CheckboxElement.tsx",
        "code": {
            "CheckboxElement": "const CheckboxElement = ({\nconst CheckboxElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: CheckboxElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ImageElement.styles.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/ImageElement.styles.tsx",
        "code": {
            "filterElementProps": "const filterElementProps = ({\nconst filterElementProps = ({\n  imageUrl: _imageUrl,\n  size: _size,\n  ...props\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "LinearScaleElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/LinearScaleElement.tsx",
        "code": {
            "LinearScaleElement": "const LinearScaleElement = ({\nconst LinearScaleElement = ({\n  className,\n  block,\n  context,\n  surfaceRenderer,\n}: LinearScaleElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "PlainTextInputElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/PlainTextInputElement.tsx",
        "code": {
            "PlainTextInputElement": "const PlainTextInputElement = ({\nconst PlainTextInputElement = ({\n  block,\n  context,\n}: PlainTextInputElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "StaticSelectElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/StaticSelectElement.tsx",
        "code": {
            "StaticSelectElement": "const StaticSelectElement = ({\nconst StaticSelectElement = ({\n  block,\n  context,\n}: StaticSelectElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ButtonElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/ButtonElement.tsx",
        "code": {
            "ButtonElement": "const ButtonElement = ({\nconst ButtonElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: ButtonElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ImageElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/ImageElement.tsx",
        "code": {
            "ImageElement": "const ImageElement = ({\nconst ImageElement = ({\n  block,\n  context,\n}: ImageElementProps): ReactElement | null => {"
        },
        "depth_rank": 8
    },
    {
        "file": "DatePickerElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/DatePickerElement.tsx",
        "code": {
            "DatePickerElement": "const DatePickerElement = ({\nconst DatePickerElement = ({\n  block,\n  context,\n}: DatePickerElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "OverflowElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/OverflowElement.tsx",
        "code": {
            "OverflowElement": "const OverflowElement = ({\nconst OverflowElement = ({\n  block,\n  context,\n}: OverflowElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "RadioButtonElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/RadioButtonElement.tsx",
        "code": {
            "RadioButtonElement": "const RadioButtonElement = ({\nconst RadioButtonElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: RadioButtonElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "MultiStaticSelectElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/MultiStaticSelectElement.tsx",
        "code": {
            "MultiStaticSelectElement": "const MultiStaticSelectElement = ({\nconst MultiStaticSelectElement = ({\n  block,\n  context,\n}: MultiStaticSelectElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ToggleSwitchElement.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/elements/ToggleSwitchElement.tsx",
        "code": {
            "ToggleSwitchElement": "const ToggleSwitchElement = ({\nconst ToggleSwitchElement = ({\n  block,\n  context,\n  surfaceRenderer,\n}: ToggleSwitchElementProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "CalloutBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/CalloutBlock.tsx",
        "code": {
            "CalloutBlock": "const CalloutBlock = ({\nconst CalloutBlock = ({\n  block,\n  surfaceRenderer,\n}: CalloutBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "SectionBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/SectionBlock.tsx",
        "code": {
            "SectionBlock": "const SectionBlock = ({\nconst SectionBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: SectionBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "PreviewBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/PreviewBlock.tsx",
        "code": {
            "PreviewBlock": "const PreviewBlock = ({\nconst PreviewBlock = ({\n  block,\n  surfaceRenderer,\n}: PreviewBlockProps): ReactElement => (\n  <Box>\n    <MessageGenericPreview>\n      {isPreviewBlockWithPreview(block) && block.preview?.dimensions && (\n        <MessageGenericPreviewCoverImage\n          width={block.preview.dimensions.width}"
        },
        "depth_rank": 8
    },
    {
        "file": "SectionBlock.Fields.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/SectionBlock.Fields.tsx",
        "code": {
            "Fields": "const breakpoints = {\nconst breakpoints = {\n  xs: 4,\n  sm: 4,\n  md: 4,\n  lg: 6,\n  xl: 6,\n} as const;\n} as const;\n\ntype FieldsProps = {\n  fields: readonly UiKit.TextObject[];\n  surfaceRenderer: UiKit.SurfaceRenderer<ReactElement>;\n};\n\nconst Fields = ({ fields, surfaceRenderer }: FieldsProps): ReactElement => (\nconst Fields = ({ fields, surfaceRenderer }: FieldsProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ImageBlock.styles.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ImageBlock.styles.tsx",
        "code": {
            "filterImageProps": "const filterImageProps = ({\nconst filterImageProps = ({\n  imageUrl: _imageUrl,\n  width: _width,\n  height: _height,\n  ...props\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "ActionsBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ActionsBlock.tsx",
        "code": {
            "ActionsBlock": "const ActionsBlock = ({\nconst ActionsBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ActionsBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "InputBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/InputBlock.tsx",
        "code": {
            "InputBlock": "const InputBlock = ({\nconst InputBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n  context,\n}: InputBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ImageBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ImageBlock.tsx",
        "code": {
            "ImageBlock": "const ImageBlock = ({\nconst ImageBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ImageBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ContextBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ContextBlock.tsx",
        "code": {
            "ContextBlock": "const ContextBlock = ({\nconst ContextBlock = ({\n  className,\n  block,\n  surfaceRenderer,\n}: ContextBlockProps): ReactElement => {"
        },
        "depth_rank": 8
    },
    {
        "file": "ContextBlock.Item.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ContextBlock.Item.tsx",
        "code": {
            "Item": "const Item = ({\nconst Item = ({\n  block: element,\n  surfaceRenderer: parser,\n  index,\n}: ItemProps): ReactElement | null => {"
        },
        "depth_rank": 8
    },
    {
        "file": "DividerBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/DividerBlock.tsx",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }: DividerBlockProps): ReactElement => (\nconst DividerBlock = ({ className }: DividerBlockProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "ActionsBlock.Action.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/ActionsBlock.Action.tsx",
        "code": {
            "Action": "const Action = ({\nconst Action = ({\n  element,\n  parser,\n  index,\n}: ActionProps): ReactElement | null => {"
        },
        "depth_rank": 8
    },
    {
        "file": "VideoConferenceBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/blocks/VideoConferenceBlock/VideoConferenceBlock.tsx",
        "code": {
            "VideoConferenceBlock": "const MAX_USERS = 3;\nconst MAX_USERS = 3;\n\nconst VideoConferenceBlock = ({\nconst VideoConferenceBlock = ({\n  block,\n}: VideoConferenceBlockProps): ReactElement => {"
        },
        "depth_rank": 9
    },
    {
        "file": "extractInitialStateFromLayout.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/utils/extractInitialStateFromLayout.ts",
        "code": {
            "reduceInitialValuesFromLayoutBlock": "const isActionableElement = (\nconst isActionableElement = (\n  element: UiKit.BlockElement | UiKit.TextObject\n): element is UiKit.ActionableElement =>\n  'actionId' in element && typeof element.actionId === 'string';\n\nconst reduceInitialValuesFromLayoutBlock = (\nconst reduceInitialValuesFromLayoutBlock = (\n  state: { [actionId: string]: Value },"
        },
        "depth_rank": 8
    },
    {
        "file": "getInitialValue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/utils/getInitialValue.ts",
        "code": {
            "hasInitialValue": "const hasInitialValue = (\nconst hasInitialValue = (\n  element: UiKit.ActionableElement\n): element is UiKit.ActionableElement & { initialValue: number | string } =>",
            "hasInitialTime": "const hasInitialTime = (\nconst hasInitialTime = (\n  element: UiKit.ActionableElement\n): element is UiKit.ActionableElement & { initialTime: string } =>",
            "hasInitialDate": "const hasInitialDate = (\nconst hasInitialDate = (\n  element: UiKit.ActionableElement\n): element is UiKit.ActionableElement & { initialDate: string } =>",
            "hasInitialOption": "const hasInitialOption = (\nconst hasInitialOption = (\n  element: UiKit.ActionableElement\n): element is UiKit.ActionableElement & { initialOption: UiKit.Option } =>",
            "hasInitialOptions": "const hasInitialOptions = (\nconst hasInitialOptions = (\n  element: UiKit.ActionableElement\n): element is UiKit.ActionableElement & { initialOptions: UiKit.Option[] } =>"
        },
        "depth_rank": 8
    },
    {
        "file": "Modal.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/src/stories/Modal.stories.tsx",
        "code": {
            "DemoModal": "const DemoModal = ({\nconst DemoModal = ({\n  children,\n  visible,\n}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/MessageSurface.d.ts",
        "code": {
            "const": "declare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;\ndeclare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ModalSurface.js",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }) => (_jsx(Surface, { type: 'modal', children: _jsx(Margins, { blockEnd: 16, children: children }) }));\nconst ModalSurface = ({ children }) => (_jsx(Surface, { type: 'modal', children: _jsx(Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualBarSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ContextualBarSurface.js",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ children, }) => (_jsx(Surface, { type: 'contextualBar', children: _jsx(Margins, { blockEnd: 16, children: children }) }));\nconst ContextualBarSurface = ({ children, }) => (_jsx(Surface, { type: 'contextualBar', children: _jsx(Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "BannerSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/BannerSurface.d.ts",
        "code": {
            "const": "declare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;\ndeclare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/MessageSurface.js",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }) => (_jsx(Surface, { type: 'message', children: _jsx(Margins, { blockEnd: 16, children: children }) }));\nconst MessageSurface = ({ children }) => (_jsx(Surface, { type: 'message', children: _jsx(Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "BannerSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/BannerSurface.js",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }) => (_jsx(Surface, { type: 'banner', children: _jsx(Margins, { block: 8, children: children }) }));\nconst BannerSurface = ({ children }) => (_jsx(Surface, { type: 'banner', children: _jsx(Margins, { block: 8, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ModalSurface.d.ts",
        "code": {
            "const": "declare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;\ndeclare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "FuselageSurfaceRenderer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/FuselageSurfaceRenderer.js",
        "code": {
            "textObjectRenderers": "const textObjectRenderers = {\nconst textObjectRenderers = {\n    plain_text: (textObject, index) => (_jsx(PlainTextElement, { textObject: textObject }, index)),"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualBarSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/surfaces/ContextualBarSurface.d.ts",
        "code": {
            "const": "declare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;\ndeclare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;\ndeclare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageElement.styles.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ImageElement.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterElementProps": "const filterElementProps = (_a) => {\nconst filterElementProps = (_a) => {\n    var { imageUrl: _imageUrl, size: _size } = _a, props = __rest(_a, [\"imageUrl\", \"size\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "CheckboxElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/CheckboxElement.d.ts",
        "code": {
            "const": "declare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;\ndeclare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "RadioButtonElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/RadioButtonElement.d.ts",
        "code": {
            "const": "declare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;\ndeclare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "TimePickerElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/TimePickerElement.d.ts",
        "code": {
            "const": "declare const TimePickerElement: ({ block, context, }: TimePickerElementProps) => ReactElement;\ndeclare const TimePickerElement: ({ block, context, }: TimePickerElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ToggleSwitchElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ToggleSwitchElement.d.ts",
        "code": {
            "const": "declare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;\ndeclare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "DatePickerElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/DatePickerElement.d.ts",
        "code": {
            "const": "declare const DatePickerElement: ({ block, context, }: DatePickerElementProps) => ReactElement;\ndeclare const DatePickerElement: ({ block, context, }: DatePickerElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ButtonElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/ButtonElement.d.ts",
        "code": {
            "const": "declare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;\ndeclare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "OverflowElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/elements/OverflowElement.d.ts",
        "code": {
            "const": "declare const OverflowElement: ({ block, context, }: OverflowElementProps) => ReactElement;\ndeclare const OverflowElement: ({ block, context, }: OverflowElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "PreviewBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/PreviewBlock.js",
        "code": {
            "PreviewBlock": "const PreviewBlock = ({ block, surfaceRenderer, }) => {\nconst PreviewBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return (_jsx(Box, { children: _jsxs(MessageGenericPreview, { children: [isPreviewBlockWithPreview(block) && ((_a = block.preview) === null || _a === void 0 ? void 0 : _a.dimensions) && (_jsx(MessageGenericPreviewCoverImage, { width: block.preview.dimensions.width, height: block.preview.dimensions.height, url: block.preview.url })), _jsxs(MessageGenericPreviewContent, { thumb: isPreviewBlockWithThumb(block) ? (_jsx(MessageGenericPreviewThumb, { children: _jsx(MessageGenericPreviewCoverImage, { height: 192, width: 368, url: block.thumb.url }) })) : undefined, children: [Array.isArray(block.title) ? (_jsx(MessageGenericPreviewTitle, { externalUrl: isPreviewBlockWithPreview(block) ? block.externalUrl : undefined, children: block.title.map((title) => surfaceRenderer.renderTextObject(title, 0, UiKit.BlockContext.NONE)) })) : null, Array.isArray(block.description) ? (_jsx(MessageGenericPreviewDescription, { clamp: true, children: block.description.map((description) => surfaceRenderer.renderTextObject(description, 0, UiKit.BlockContext.NONE)) })) : null, block.footer && (_jsx(MessageGenericPreviewFooter, { children: _jsx(ContextBlock, { block: block.footer, surfaceRenderer: surfaceRenderer, context: UiKit.BlockContext.BLOCK, index: 0 }) }))] })] }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "SectionBlock.Fields.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/SectionBlock.Fields.js",
        "code": {
            "Fields": "const breakpoints = {\nconst breakpoints = {\n    xs: 4,\n    sm: 4,\n    md: 4,\n    lg: 6,\n    xl: 6,\n};\nconst Fields = ({ fields, surfaceRenderer }) => (_jsx(Grid, { children: fields.map((field, i) => (_createElement(Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));\nconst Fields = ({ fields, surfaceRenderer }) => (_jsx(Grid, { children: fields.map((field, i) => (_createElement(Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "CalloutBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/CalloutBlock.d.ts",
        "code": {
            "const": "declare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;\ndeclare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "DividerBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/DividerBlock.js",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }) => (_jsx(Divider, { className: className, marginBlock: 24 }));\nconst DividerBlock = ({ className }) => (_jsx(Divider, { className: className, marginBlock: 24 }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionsBlock.Action.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ActionsBlock.Action.d.ts",
        "code": {
            "const": "declare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;\ndeclare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "SectionBlock.Fields.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/SectionBlock.Fields.d.ts",
        "code": {
            "const": "declare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;\ndeclare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextBlock.Item.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ContextBlock.Item.d.ts",
        "code": {
            "const": "declare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;\ndeclare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageBlock.styles.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/ImageBlock.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterImageProps": "const filterImageProps = (_a) => {\nconst filterImageProps = (_a) => {\n    var { imageUrl: _imageUrl, width: _width, height: _height } = _a, props = __rest(_a, [\"imageUrl\", \"width\", \"height\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "CalloutBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/esm/blocks/CalloutBlock.js",
        "code": {
            "CalloutBlock": "const CalloutBlock = ({ block, surfaceRenderer, }) => {\nconst CalloutBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return (_jsx(Callout, { type: block.variant, title: (_a = block.title) === null || _a === void 0 ? void 0 : _a.text, children: surfaceRenderer.renderTextObject(block.text, 0, UiKit.BlockContext.NONE) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "useUiKitState.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/hooks/useUiKitState.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/MessageSurface.d.ts",
        "code": {
            "const": "declare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;\ndeclare const MessageSurface: ({ children }: MessageSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualBarSurfaceRenderer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ContextualBarSurfaceRenderer.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ModalSurface.js",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'modal', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));\nconst ModalSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'modal', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualBarSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ContextualBarSurface.js",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ children, }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'contextualBar', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));\nconst ContextualBarSurface = ({ children, }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'contextualBar', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "BannerSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/BannerSurface.d.ts",
        "code": {
            "const": "declare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;\ndeclare const BannerSurface: ({ children }: BannerSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "Surface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/Surface.js",
        "code": {
            "Surface": "const Surface = ({ children, type }) => ((0, jsx_runtime_1.jsx)(SurfaceContext_1.SurfaceContext.Provider, { value: type, children: children }));\nconst Surface = ({ children, type }) => ((0, jsx_runtime_1.jsx)(SurfaceContext_1.SurfaceContext.Provider, { value: type, children: children }));"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/MessageSurface.js",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'message', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));\nconst MessageSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'message', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { blockEnd: 16, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "FuselageMessageSurfaceRenderer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/FuselageMessageSurfaceRenderer.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "BannerSurface.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/BannerSurface.js",
        "code": {
            "BannerSurface": "const BannerSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'banner', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { block: 8, children: children }) }));\nconst BannerSurface = ({ children }) => ((0, jsx_runtime_1.jsx)(Surface_1.Surface, { type: 'banner', children: (0, jsx_runtime_1.jsx)(fuselage_1.Margins, { block: 8, children: children }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ModalSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ModalSurface.d.ts",
        "code": {
            "const": "declare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;\ndeclare const ModalSurface: ({ children }: ModalSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "FuselageSurfaceRenderer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/FuselageSurfaceRenderer.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "textObjectRenderers": "const textObjectRenderers = {\nconst textObjectRenderers = {\n    plain_text: (textObject, index) => ((0, jsx_runtime_1.jsx)(PlainTextElement_1.default, { textObject: textObject }, index)),"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextualBarSurface.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/surfaces/ContextualBarSurface.d.ts",
        "code": {
            "const": "declare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;\ndeclare const ContextualBarSurface: ({ children, }: ContextualBarSurfaceProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ToggleSwitchElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ToggleSwitchElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.d.ts",
        "code": {
            "const": "declare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;\ndeclare const ImageElement: ({ block, context, }: ImageElementProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageElement.styles.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterElementProps": "const filterElementProps = (_a) => {\nconst filterElementProps = (_a) => {\n    var { imageUrl: _imageUrl, size: _size } = _a, props = __rest(_a, [\"imageUrl\", \"size\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "CheckboxElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/CheckboxElement.d.ts",
        "code": {
            "const": "declare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;\ndeclare const CheckboxElement: ({ block, context, surfaceRenderer, }: CheckboxElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "RadioButtonElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/RadioButtonElement.d.ts",
        "code": {
            "const": "declare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;\ndeclare const RadioButtonElement: ({ block, context, surfaceRenderer, }: RadioButtonElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "CheckboxElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/CheckboxElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "TimePickerElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/TimePickerElement.d.ts",
        "code": {
            "const": "declare const TimePickerElement: ({ block, context, }: TimePickerElementProps) => ReactElement;\ndeclare const TimePickerElement: ({ block, context, }: TimePickerElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ImageElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ToggleSwitchElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ToggleSwitchElement.d.ts",
        "code": {
            "const": "declare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;\ndeclare const ToggleSwitchElement: ({ block, context, surfaceRenderer, }: ToggleSwitchElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "DatePickerElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/DatePickerElement.d.ts",
        "code": {
            "const": "declare const DatePickerElement: ({ block, context, }: DatePickerElementProps) => ReactElement;\ndeclare const DatePickerElement: ({ block, context, }: DatePickerElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "RadioButtonElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/RadioButtonElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "LinearScaleElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/LinearScaleElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "TabElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/TabElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ButtonElement.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ButtonElement.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ButtonElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/ButtonElement.d.ts",
        "code": {
            "const": "declare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;\ndeclare const ButtonElement: ({ block, context, surfaceRenderer, }: ButtonElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "OverflowElement.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/elements/OverflowElement.d.ts",
        "code": {
            "const": "declare const OverflowElement: ({ block, context, }: OverflowElementProps) => ReactElement;\ndeclare const OverflowElement: ({ block, context, }: OverflowElementProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "PreviewBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/PreviewBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "PreviewBlock": "const PreviewBlock = ({ block, surfaceRenderer, }) => {\nconst PreviewBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return ((0, jsx_runtime_1.jsx)(fuselage_1.Box, { children: (0, jsx_runtime_1.jsxs)(fuselage_1.MessageGenericPreview, { children: [(0, ui_kit_1.isPreviewBlockWithPreview)(block) && ((_a = block.preview) === null || _a === void 0 ? void 0 : _a.dimensions) && ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewCoverImage, { width: block.preview.dimensions.width, height: block.preview.dimensions.height, url: block.preview.url })), (0, jsx_runtime_1.jsxs)(fuselage_1.MessageGenericPreviewContent, { thumb: (0, ui_kit_1.isPreviewBlockWithThumb)(block) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewThumb, { children: (0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewCoverImage, { height: 192, width: 368, url: block.thumb.url }) })) : undefined, children: [Array.isArray(block.title) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewTitle, { externalUrl: (0, ui_kit_1.isPreviewBlockWithPreview)(block) ? block.externalUrl : undefined, children: block.title.map((title) => surfaceRenderer.renderTextObject(title, 0, UiKit.BlockContext.NONE)) })) : null, Array.isArray(block.description) ? ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewDescription, { clamp: true, children: block.description.map((description) => surfaceRenderer.renderTextObject(description, 0, UiKit.BlockContext.NONE)) })) : null, block.footer && ((0, jsx_runtime_1.jsx)(fuselage_1.MessageGenericPreviewFooter, { children: (0, jsx_runtime_1.jsx)(ContextBlock_1.default, { block: block.footer, surfaceRenderer: surfaceRenderer, context: UiKit.BlockContext.BLOCK, index: 0 }) }))] })] }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "SectionBlock.Fields.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/SectionBlock.Fields.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "Fields": "const breakpoints = {\nconst breakpoints = {\n    xs: 4,\n    sm: 4,\n    md: 4,\n    lg: 6,\n    xl: 6,\n};\nconst Fields = ({ fields, surfaceRenderer }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Grid, { children: fields.map((field, i) => ((0, react_1.createElement)(fuselage_1.Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));\nconst Fields = ({ fields, surfaceRenderer }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Grid, { children: fields.map((field, i) => ((0, react_1.createElement)(fuselage_1.Grid.Item, Object.assign({}, breakpoints, { key: i }), surfaceRenderer.renderTextObject(field, 0, UiKit.BlockContext.NONE)))) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "CalloutBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/CalloutBlock.d.ts",
        "code": {
            "const": "declare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;\ndeclare const CalloutBlock: ({ block, surfaceRenderer, }: CalloutBlockProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "InputBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/InputBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "DividerBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/DividerBlock.js",
        "code": {
            "DividerBlock": "const DividerBlock = ({ className }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Divider, { className: className, marginBlock: 24 }));\nconst DividerBlock = ({ className }) => ((0, jsx_runtime_1.jsx)(fuselage_1.Divider, { className: className, marginBlock: 24 }));"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ImageBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionsBlock.Action.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.Action.d.ts",
        "code": {
            "const": "declare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;\ndeclare const Action: ({ element, parser, index, }: ActionProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "SectionBlock.Fields.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/SectionBlock.Fields.d.ts",
        "code": {
            "const": "declare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;\ndeclare const Fields: ({ fields, surfaceRenderer }: FieldsProps) => ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextBlock.Item.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ContextBlock.Item.d.ts",
        "code": {
            "const": "declare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;\ndeclare const Item: ({ block: element, surfaceRenderer: parser, index, }: ItemProps) => ReactElement | null;"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionsBlock.Action.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.Action.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ImageBlock.styles.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ImageBlock.styles.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "filterImageProps": "const filterImageProps = (_a) => {\nconst filterImageProps = (_a) => {\n    var { imageUrl: _imageUrl, width: _width, height: _height } = _a, props = __rest(_a, [\"imageUrl\", \"width\", \"height\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "ContextBlock.Item.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ContextBlock.Item.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "ActionsBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/ActionsBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 9
    },
    {
        "file": "CalloutBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/blocks/CalloutBlock.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });",
            "CalloutBlock": "const CalloutBlock = ({ block, surfaceRenderer, }) => {\nconst CalloutBlock = ({ block, surfaceRenderer, }) => {\n    var _a;\n    return ((0, jsx_runtime_1.jsx)(fuselage_1.Callout, { type: block.variant, title: (_a = block.title) === null || _a === void 0 ? void 0 : _a.text, children: surfaceRenderer.renderTextObject(block.text, 0, UiKit.BlockContext.NONE) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "UiKitComponent.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/utils/UiKitComponent.js",
        "code": {
            "UiKitComponent": "const UiKitComponent = ({ render, blocks, }) => render(blocks);\nconst UiKitComponent = ({ render, blocks, }) => render(blocks);"
        },
        "depth_rank": 9
    },
    {
        "file": "extractInitialStateFromLayout.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/fuselage-ui-kit/dist/cjs/utils/extractInitialStateFromLayout.js",
        "code": {
            "extractInitialStateFromLayout": "const isActionableElement = (element) => 'actionId' in element && typeof element.actionId === 'string';\nconst isActionableElement = (element) => 'actionId' in element && typeof element.actionId === 'string';\nconst reduceInitialValuesFromLayoutBlock = (state, block) => {\nconst reduceInitialValuesFromLayoutBlock = (state, block) => {\n    if ((0, hasElement_1.hasElement)(block)) {\n        if (isActionableElement(block.element)) {\n            state[block.element.actionId] = {\n                value: (0, getInitialValue_1.getInitialValue)(block.element),\n                blockId: block.blockId,\n            };\n        }\n    }\n    if ((0, hasElements_1.hasElements)(block)) {\n        for (const element of block.elements) {\n        for (const element of block.elements) {\n            if (isActionableElement(element)) {\n                state[element.actionId] = {\n                    value: (0, getInitialValue_1.getInitialValue)(element),\n                    blockId: block.blockId,\n                };\n            }\n        }\n    }\n    return state;\n};\nconst extractInitialStateFromLayout = (blocks) => blocks.reduce(reduceInitialValuesFromLayoutBlock, {});\nconst extractInitialStateFromLayout = (blocks) => blocks.reduce(reduceInitialValuesFromLayoutBlock, {});"
        },
        "depth_rank": 9
    },
    {
        "file": "ConnectionLine.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/FlowContainer/ConnectionLine.tsx",
        "code": {
            "ConnectionLine": "const ConnectionLine = ({\nconst ConnectionLine = ({\n  fromX,\n  fromY,\n  toX,\n  toY,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "Container.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Templates/Container/Container.tsx",
        "code": {
            "Container": "const Container = ({ templates }: { templates: templateType[] }) => (\nconst Container = ({ templates }: { templates: templateType[] }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "Payload.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Templates/Container/Payload.tsx",
        "code": {
            "Payload": "const Payload = ({\nconst Payload = ({\n  blocks,\n  surface,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "Section.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Templates/Container/Section.tsx",
        "code": {
            "Section": "const Section = ({\nconst Section = ({\n  template,\n  index,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "ProjectsThumbnail.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/HomeContainer/ProjectsList/ProjectsThumbnail.tsx",
        "code": {
            "ProjectsThumbnail": "const ProjectsThumbnail = ({\nconst ProjectsThumbnail = ({\n  id,\n  name: _name,\n  date,\n  blocks,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "parsePayload.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/CodeEditor/Parser/parsePayload.ts",
        "code": {
            "parsePayload": "const parsePayload = (\nconst parsePayload = (\n  head: { from: number; to: number },"
        },
        "depth_rank": 10
    },
    {
        "file": "PrototypeRender.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/PrototypeRender/PrototypeRender.tsx",
        "code": {
            "PrototypeRender": "const PrototypeRender = ({\nconst PrototypeRender = ({\n  blocks,\n  surface,\n  flowEdges,\n  activeActions,\n  onSelectAction,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "RenderPayload.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/RenderPayload/RenderPayload.tsx",
        "code": {
            "RenderPayload": "const RenderPayload = ({\nconst RenderPayload = ({\n  blocks,\n  surface = SurfaceOptions.Message,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "CreateNewScreenButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/ScreenThumbnail/CreateNewScreenButton.tsx",
        "code": {
            "CreateNewScreenButton": "const CreateNewScreenButton = ({\nconst CreateNewScreenButton = ({\n  size = '60px',\n  name = 'plus',\n  ...props\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "ScreenThumbnailWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/ScreenThumbnail/ScreenThumbnailWrapper.tsx",
        "code": {
            "ScreenThumbnailWrapper": "const ScreenThumbnailWrapper = ({\nconst ScreenThumbnailWrapper = ({\n  children,\n  onClick,\n  width = '120px',\n  height = '170px',\n  padding = '20px',\n  ...props\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "EditMenu.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/ScreenThumbnail/EditMenu/EditMenu.tsx",
        "code": {
            "EditMenu": "const EditMenu = ({\nconst EditMenu = ({\n  name,\n  date,\n  onChange,\n  onBlur,\n  onDuplicate,\n  onDelete,\n  labelProps,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "MessageSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/MessageSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }: { children: ReactNode }) => (\nconst MessageSurface = ({ children }: { children: ReactNode }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "SurfaceRender.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/SurfaceRender.tsx",
        "code": {
            "SurfaceRender": "const SurfaceRender = ({\nconst SurfaceRender = ({\n  type = SurfaceOptions.Message,\n  children,\n}: {"
        },
        "depth_rank": 11
    },
    {
        "file": "BannerSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/BannerSurface.tsx",
        "code": {
            "MessageSurface": "const MessageSurface = ({ children }: { children: ReactNode }) => (\nconst MessageSurface = ({ children }: { children: ReactNode }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ContextualBarSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/ContextualBarSurface.tsx",
        "code": {
            "ContextualBarSurface": "const ContextualBarSurface = ({ children }: { children: ReactNode }) => (\nconst ContextualBarSurface = ({ children }: { children: ReactNode }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "ModalSurface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Display/Surface/ModalSurface.tsx",
        "code": {
            "ModalSurface": "const ModalSurface = ({ children }: { children: ReactNode }) => (\nconst ModalSurface = ({ children }: { children: ReactNode }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "EditorPanel.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Preview/Editor/EditorPanel.tsx",
        "code": {
            "tabsItem": "const tabsItem = {\nconst tabsItem = {\n  [TabsItem.ActionBlock]: {\n    name: 'Action Block',\n    Container: ActionBlockEditor,\n  },\n  [TabsItem.ActionPreview]: {\n    name: 'Action Preview',\n    Container: ActionPreviewEditor,\n  },\n  [TabsItem.FlowDiagram]: {\n    name: 'Flow Diagram',\n    Container: FlowDiagram,\n  },\n  [TabsItem.Prototype]: { name: 'Prototype', Container: PrototypeContainer },"
        },
        "depth_rank": 10
    },
    {
        "file": "DraggableListItem.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Draggable/DraggableListItem.tsx",
        "code": {
            "DraggableListItem": "const DraggableListItem = ({\nconst DraggableListItem = ({\n  block,\n  surface,\n  index,\n}: DraggableListItemProps) => (\n  <Draggable draggableId={block.id} index={index}>"
        },
        "depth_rank": 9
    },
    {
        "file": "DraggableList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/Draggable/DraggableList.tsx",
        "code": {
            "DraggableList": "const DraggableList = React.memo(\nconst DraggableList = React.memo(\n  ({ blocks, surface, onDragEnd }: DraggableListProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Wrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/navMenu/Menu/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "ItemsIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/DropDown/ItemsIcon.tsx",
        "code": {
            "ItemsIcon": "const ItemsIcon = ({\nconst ItemsIcon = ({\n  layer,\n  lastNode,\n  hover,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/ToggleTabs/index.tsx",
        "code": {
            "ToggleTabs": "const ToggleTabs = ({\nconst ToggleTabs = ({\n  tabsItem,\n  onChange,\n  selectedTab,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "Line.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/NavBar/BurgerIcon/Line.tsx",
        "code": {
            "Line": "const Line = ({\nconst Line = ({\n  animated,\n  moved,\n}: {"
        },
        "depth_rank": 10
    },
    {
        "file": "Wrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/NavBar/BurgerIcon/Wrapper.tsx",
        "code": {
            "Wrapper": "const Wrapper = ({ children }: { children: ReactNode }): ReactElement => (\nconst Wrapper = ({ children }: { children: ReactNode }): ReactElement => ("
        },
        "depth_rank": 10
    },
    {
        "file": "ScreenThumbnail.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Components/CreateNewScreen/ScreenThumbnail.tsx",
        "code": {
            "ScreenThumbnail": "const ScreenThumbnail = ({\nconst ScreenThumbnail = ({\n  screen,\n  disableDelete,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "generateActionPreview.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Payload/actionPreview/generateActionPreview.ts",
        "code": {
            "generateActionPreview": "const generateActionPreview = ({\nconst generateActionPreview = ({\n  type,\n  data,\n  surface,\n  blocks,\n  user,\n}: {"
        },
        "depth_rank": 9
    },
    {
        "file": "Home.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/uikit-playground/src/Pages/Home.tsx",
        "code": {
            "Home": "const Home = () => {\nconst Home = () => {\n  return (\n    <Box display={'flex'} flexDirection={'column'} w=\"100%\" flexGrow={1}>"
        },
        "depth_rank": 8
    },
    {
        "file": "useRoute.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-contexts/src/hooks/useRoute.ts",
        "code": {
            "queryStringParameters": "\t\t\t\tconst search =\n\t\t\t\tconst search =\n\t\t\t\t\ttypeof queryStringParameters === 'function' ? queryStringParameters(router.getSearchParameters()) : queryStringParameters;\n\t\t\t\t\ttypeof queryStringParameters === 'function' ? queryStringParameters(router.getSearchParameters()) : queryStringParameters;\n\t\t\t\trouter.navigate({ name, params, search }, { replace: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "useSettingSetValue.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-contexts/src/hooks/useSettingSetValue.ts",
        "code": {
            "dispatch": "\tconst dispatch = useSettingsDispatch();\n\tconst dispatch = useSettingsDispatch();\n\treturn useCallback((value: T) => dispatch([{ _id, value }]), [dispatch, _id]);"
        },
        "depth_rank": 8
    },
    {
        "file": "useLogout.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-contexts/src/hooks/useLogout.ts",
        "code": {
            "router": "\tconst router = useRouter();\n\tconst router = useRouter();\n\tconst { logout } = useContext(UserContext);\n\tconst { logout } = useContext(UserContext);"
        },
        "depth_rank": 8
    },
    {
        "file": "useDeviceConstraints.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-contexts/src/hooks/useDeviceConstraints.ts",
        "code": {
            "selectedAudioInputDeviceId": "\tconst selectedAudioInputDeviceId = context.selectedAudioInputDevice?.id;\n\tconst selectedAudioInputDeviceId = context.selectedAudioInputDevice?.id;\n\treturn { audio: selectedAudioInputDeviceId === 'default' ? true : { deviceId: { exact: selectedAudioInputDeviceId } } };"
        },
        "depth_rank": 8
    },
    {
        "file": "useDocumentTitle.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/hooks/useDocumentTitle.spec.ts",
        "code": {
            "EXAMPLE_TITLE": "const DEFAULT_TITLE = 'Default Title';\nconst DEFAULT_TITLE = 'Default Title';\nconst EXAMPLE_TITLE = 'Example Title';\nconst EXAMPLE_TITLE = 'Example Title';\n\nit('should return the default title', () => {\n\tconst { result } = renderHook(() => useDocumentTitle(DEFAULT_TITLE));\n\tconst { result } = renderHook(() => useDocumentTitle(DEFAULT_TITLE));"
        },
        "depth_rank": 8
    },
    {
        "file": "useDocumentTitle.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/hooks/useDocumentTitle.ts",
        "code": {
            "useReactiveDocumentTitle": "const ee = new Emitter<{\nconst ee = new Emitter<{\n\tchange: void;\n}>();\n\nconst titles = new Set<{\nconst titles = new Set<{\n\ttitle?: string;\n\trefocus?: boolean;\n}>();\n\nconst useReactiveDocumentTitle = (): string =>\nconst useReactiveDocumentTitle = (): string =>\n\tuseSyncExternalStore(\n\t\tuseCallback((callback) => ee.on('change', callback), []),\n\t\t(): string =>\n\t\t\tArray.from(titles)\n\t\t\t\t.reverse()\n\t\t\t\t.map(({ title }) => title)",
            "useReactiveDocumentTitleKey": "const useReactiveDocumentTitleKey = (): string =>\nconst useReactiveDocumentTitleKey = (): string =>\n\tuseSyncExternalStore(\n\t\tuseCallback((callback) => ee.on('change', callback), []),\n\t\t(): string =>\n\t\t\tArray.from(titles)\n\t\t\t\t.filter(({ refocus }) => refocus)",
            "titleObj": "\t\tconst titleObj = {\n\t\tconst titleObj = {\n\t\t\ttitle: documentTitle,\n\t\t\trefocus,\n\t\t};\n\n\t\tif (titleObj.title) {\n\t\t\ttitles.add(titleObj);\n\t\t}\n\n\t\tee.emit('change');\n\n\t\treturn () => {\n\t\t\ttitles.delete(titleObj);\n\t\t\tee.emit('change');\n\t\t};\n\t}, [documentTitle, refocus]);\n\n\treturn { title: useReactiveDocumentTitle(), key: useReactiveDocumentTitleKey() };"
        },
        "depth_rank": 8
    },
    {
        "file": "useFeaturePreviewList.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/hooks/useFeaturePreviewList.ts",
        "code": {
            "userFeature": "\tconst mergedFeatures = enabledDefaultFeatures.map((feature) => {\n\tconst mergedFeatures = enabledDefaultFeatures.map((feature) => {\n\t\tconst userFeature = userFeaturesPreview?.find((userFeature) => userFeature.name === feature.name);\n\t\tconst userFeature = userFeaturesPreview?.find((userFeature) => userFeature.name === feature.name);\n\t\treturn { ...feature, ...userFeature };"
        },
        "depth_rank": 8
    },
    {
        "file": "CustomFieldsForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/CustomFieldsForm.tsx",
        "code": {
            "t": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst { errors } = useFormState({ control });\n\tconst { errors } = useFormState({ control });",
            "errorMessage": "\tconst error = get(errors, name);\n\tconst error = get(errors, name);\n\tconst errorMessage = useMemo(() => getErrorMessage(error), [error, getErrorMessage]);\n\tconst errorMessage = useMemo(() => getErrorMessage(error), [error, getErrorMessage]);\n\n\treturn (\n\t\t<Controller<T, any>\n\t\t\tname={name}"
        },
        "depth_rank": 8
    },
    {
        "file": "TextSeparator.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/TextSeparator.tsx",
        "code": {
            "TextSeparator": "const TextSeparator = ({ label, value }: TextSeparatorProps): ReactElement => (\nconst TextSeparator = ({ label, value }: TextSeparatorProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "Header.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/Header/Header.stories.tsx",
        "code": {
            "avatar": "} as const;\n} as const;\n\nconst avatar = <Avatar size='x40' url={avatarUrl} />;\nconst avatar = <Avatar size='x40' url={avatarUrl} />;",
            "icon": "const icon = { name: 'hash' } as const;\nconst icon = { name: 'hash' } as const;"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderToolbar.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/Header/HeaderToolbar/HeaderToolbar.tsx",
        "code": {
            "ref": "const HeaderToolbar = (props: ComponentProps<typeof ButtonGroup>) => {\nconst HeaderToolbar = (props: ComponentProps<typeof ButtonGroup>) => {\n\tconst ref = useRef(null);\n\tconst ref = useRef(null);\n\tconst { toolbarProps } = useToolbar(props, ref);\n\tconst { toolbarProps } = useToolbar(props, ref);"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderToolbarDivider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/Header/HeaderToolbar/HeaderToolbarDivider.tsx",
        "code": {
            "HeaderToolbarDivider": "const HeaderToolbarDivider = (): ReactElement => <Divider mi={4} vertical />;\nconst HeaderToolbarDivider = (): ReactElement => <Divider mi={4} vertical />;"
        },
        "depth_rank": 10
    },
    {
        "file": "MultiSelectCustomAnchor.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/MultiSelectCustom/MultiSelectCustomAnchor.tsx",
        "code": {
            "MultiSelectCustomAnchor": "const MultiSelectCustomAnchor = forwardRef<HTMLElement, MultiSelectCustomAnchorProps>(function MultiSelectCustomAnchor(\nconst MultiSelectCustomAnchor = forwardRef<HTMLElement, MultiSelectCustomAnchorProps>(function MultiSelectCustomAnchor(\n\t{ onClick, collapsed, selectedOptionsCount, selectedOptionsTitle, defaultTitle, maxCount, ...props },"
        },
        "depth_rank": 9
    },
    {
        "file": "MultiSelectCustomListWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/MultiSelectCustom/MultiSelectCustomListWrapper.tsx",
        "code": {
            "MultiSelectCustomListWrapper": "const MultiSelectCustomListWrapper = forwardRef<Element, ComponentProps<typeof Box>>(function MultiSelectCustomListWrapper(\nconst MultiSelectCustomListWrapper = forwardRef<Element, ComponentProps<typeof Box>>(function MultiSelectCustomListWrapper(\n\t{ children },"
        },
        "depth_rank": 9
    },
    {
        "file": "MultiSelectCustom.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/MultiSelectCustom/MultiSelectCustom.tsx",
        "code": {
            "count": "\tconst count = dropdownOptions.filter((option) => option.checked).length;\n\tconst count = dropdownOptions.filter((option) => option.checked).length;\n\n\treturn (\n\t\t<Box display='flex' flexGrow={1} position='relative'>"
        },
        "depth_rank": 9
    },
    {
        "file": "MultiSelectCustomList.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/MultiSelectCustom/MultiSelectCustomList.tsx",
        "code": {
            "MultiSelectCustomList": "const MultiSelectCustomList = ({\nconst MultiSelectCustomList = ({\n\toptions,\n\tonSelected,\n\tsearchBarText,\n}: {",
            "filteredOptions": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\tconst [text, setText] = useState('');\n\tconst [text, setText] = useState('');\n\n\tconst handleChange = useCallback((event) => setText(event.currentTarget.value), []);\n\tconst handleChange = useCallback((event) => setText(event.currentTarget.value), []);\n\n\tconst filteredOptions = useFilteredOptions(text, options);\n\tconst filteredOptions = useFilteredOptions(text, options);\n\n\treturn (\n\t\t<Tile overflow='auto' pb='x12' pi={0} elevation='2' w='full' bg='light' borderRadius='x2'>"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerCategoryWrapper.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerCategoryWrapper.tsx",
        "code": {
            "EmojiPickerCategoryWrapper": "const EmojiPickerCategoryWrapper = (props: ComponentProps<typeof Box>) => <Box {...props} display='flex' flexWrap='wrap' />;\nconst EmojiPickerCategoryWrapper = (props: ComponentProps<typeof Box>) => <Box {...props} display='flex' flexWrap='wrap' />;"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerNotFound.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerNotFound.tsx",
        "code": {
            "EmojiPickerNotFound": "const EmojiPickerNotFound = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerNotFound = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} display='flex' flexDirection='column' alignItems='center' fontScale='c1' mb={8} />"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerPreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerPreview.tsx",
        "code": {
            "previewEmojiClass": "const EmojiPickerPreview = ({ emoji, name, ...props }: { emoji: string; name: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\nconst EmojiPickerPreview = ({ emoji, name, ...props }: { emoji: string; name: string } & Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => {\n\tconst previewEmojiClass = css`\n\tconst previewEmojiClass = css`\n\t\tspan {\n\t\t\twidth: 40px;\n\t\t\theight: 40px;\n\t\t}\n\t`;\n\n\treturn (\n\t\t<Box {...props} display='flex' alignItems='center'>"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerHeader.tsx",
        "code": {
            "EmojiPickerHeader": "const EmojiPickerHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerHeader = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} display='flex' alignItems='center' pbs={12} pi={12} />"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerCategoryHeader.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerCategoryHeader.tsx",
        "code": {
            "EmojiPickerCategoryHeader": "const EmojiPickerCategoryHeader = (props: ComponentProps<typeof ButtonGroup>) => (\nconst EmojiPickerCategoryHeader = (props: ComponentProps<typeof ButtonGroup>) => (\n\t<Box mbs={12} mi={12}>"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerLoadMore.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerLoadMore.tsx",
        "code": {
            "EmojiPickerLoadMore": "const EmojiPickerLoadMore = (props: Omit<AllHTMLAttributes<HTMLAnchorElement>, 'style'>) => (\nconst EmojiPickerLoadMore = (props: Omit<AllHTMLAttributes<HTMLAnchorElement>, 'style'>) => (\n\t<Box display='flex' flexDirection='column' alignItems='center' mbe={8}>"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerListArea.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerListArea.tsx",
        "code": {
            "EmojiPickerListArea": "const EmojiPickerListArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\nconst EmojiPickerListArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>) => (\n\t<Box {...props} w='full' h='full' pis={12} overflow='hidden' />"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerContainer.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerContainer.tsx",
        "code": {
            "EmojiPickerContainer": "const EmojiPickerContainer = forwardRef<HTMLElement, Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>>(function EmojiPickerContainer(\nconst EmojiPickerContainer = forwardRef<HTMLElement, Omit<AllHTMLAttributes<HTMLDivElement>, 'is' | 'style'>>(function EmojiPickerContainer(\n\tprops,\n\tref,\n) {\n\treturn (\n\t\t<Box\n\t\t\t{...props}"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerPreviewArea.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/EmojiPicker/EmojiPickerPreviewArea.tsx",
        "code": {
            "EmojiPickerPreviewArea": "const EmojiPickerPreviewArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => (\nconst EmojiPickerPreviewArea = (props: Omit<AllHTMLAttributes<HTMLDivElement>, 'is'>) => (\n\t<Box\n\t\t{...props}"
        },
        "depth_rank": 9
    },
    {
        "file": "FeaturePreview.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/FeaturePreview/FeaturePreview.tsx",
        "code": {
            "toggledChildren": "\tconst featureToggleEnabled = useFeaturePreview(feature);\n\tconst featureToggleEnabled = useFeaturePreview(feature);\n\n\tconst toggledChildren = Children.map(children, (child) =>\n\tconst toggledChildren = Children.map(children, (child) =>\n\t\tcloneElement(child, {\n\t\t\tfeatureToggleEnabled,\n\t\t}),\n\t);\n\n\treturn <Suspense fallback={null}>{toggledChildren}</Suspense>;"
        },
        "depth_rank": 9
    },
    {
        "file": "Online.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/Online.tsx",
        "code": {
            "Online": "function Online(props: OnlineProps): ReactElement {\nfunction Online(props: OnlineProps): ReactElement {\n\treturn <UserStatus status='online' {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "Busy.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/Busy.tsx",
        "code": {
            "Busy": "function Busy(props: BusyProps): ReactElement {\nfunction Busy(props: BusyProps): ReactElement {\n\treturn <UserStatus status='busy' {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserStatus.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/UserStatus.stories.tsx",
        "code": {
            "status": "\tconst status = useAutoSequence(['online', 'away', 'busy', 'offline'] as const);\n\tconst status = useAutoSequence(['online', 'away', 'busy', 'offline'] as const);\n\n\treturn <UserStatus.UserStatus status={status} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "Offline.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/Offline.tsx",
        "code": {
            "Offline": "function Offline(props: OfflineProps): ReactElement {\nfunction Offline(props: OfflineProps): ReactElement {\n\treturn <UserStatus status='offline' {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserStatus.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/UserStatus.tsx",
        "code": {
            "size": "function UserStatus({ small, status, ...props }: UserStatusProps): ReactElement {\nfunction UserStatus({ small, status, ...props }: UserStatusProps): ReactElement {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst size = small ? 'small' : 'large';\n\tconst size = small ? 'small' : 'large';\n\n\tswitch (status) {\n\t\tcase 'online':\n\t\t\treturn <StatusBullet size={size} status={status} {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "Away.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/Away.tsx",
        "code": {
            "Away": "function Away(props: AwayProps): ReactElement {\nfunction Away(props: AwayProps): ReactElement {\n\treturn <UserStatus status='away' {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "Loading.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/src/components/UserStatus/Loading.tsx",
        "code": {
            "Loading": "function Loading(props: LoadingProps): ReactElement {\nfunction Loading(props: LoadingProps): ReactElement {\n\treturn <UserStatus {...props} />;"
        },
        "depth_rank": 9
    },
    {
        "file": "useDocumentTitle.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/hooks/useDocumentTitle.js",
        "code": {
            "useReactiveDocumentTitle": "const ee = new Emitter();\nconst ee = new Emitter();\nconst titles = new Set();\nconst titles = new Set();\nconst useReactiveDocumentTitle = () => useSyncExternalStore(useCallback((callback) => ee.on('change', callback), []), () => Array.from(titles)\nconst useReactiveDocumentTitle = () => useSyncExternalStore(useCallback((callback) => ee.on('change', callback), []), () => Array.from(titles)\n    .reverse()\n    .map(({ title }) => title)",
            "useReactiveDocumentTitleKey": "const useReactiveDocumentTitleKey = () => useSyncExternalStore(useCallback((callback) => ee.on('change', callback), []), () => Array.from(titles)\nconst useReactiveDocumentTitleKey = () => useSyncExternalStore(useCallback((callback) => ee.on('change', callback), []), () => Array.from(titles)\n    .filter(({ refocus }) => refocus)"
        },
        "depth_rank": 8
    },
    {
        "file": "ExternalLink.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/ExternalLink.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "CustomFieldsForm.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/CustomFieldsForm.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "TextSeparator.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/TextSeparator.d.ts",
        "code": {
            "const": "declare const TextSeparator: ({ label, value }: TextSeparatorProps) => ReactElement;\ndeclare const TextSeparator: ({ label, value }: TextSeparatorProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "PasswordVerifierItem.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/PasswordVerifier/PasswordVerifierItem.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderTitle.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTitle.js",
        "code": {
            "HeaderTitle": "const HeaderTitle = (props) => (_jsx(Box, Object.assign({ color: 'default', mi: 4, is: 'h1', fontScale: 'h4', withTruncatedText: true }, props)));\nconst HeaderTitle = (props) => (_jsx(Box, Object.assign({ color: 'default', mi: 4, is: 'h1', fontScale: 'h4', withTruncatedText: true }, props)));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderIcon.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderIcon.js",
        "code": {
            "HeaderIcon": "const HeaderIcon = ({ icon }) => icon && (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 'x18', overflow: 'hidden', justifyContent: 'center', children: isValidElement(icon) ? icon : _jsx(Icon, { color: 'default', size: 'x18', name: icon.name }) }));\nconst HeaderIcon = ({ icon }) => icon && (_jsx(Box, { display: 'flex', flexShrink: 0, alignItems: 'center', size: 'x18', overflow: 'hidden', justifyContent: 'center', children: isValidElement(icon) ? icon : _jsx(Icon, { color: 'default', size: 'x18', name: icon.name }) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderAvatar.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderAvatar.js",
        "code": {
            "HeaderAvatar": "const HeaderAvatar = (props) => _jsx(Box, Object.assign({ mi: 4, display: 'flex', alignItems: 'center' }, props));\nconst HeaderAvatar = (props) => _jsx(Box, Object.assign({ mi: 4, display: 'flex', alignItems: 'center' }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderContentRow.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderContentRow.js",
        "code": {
            "HeaderContentRow": "const HeaderContentRow = (props) => (_jsx(Box, Object.assign({ alignItems: 'center', flexShrink: 1, flexGrow: 1, display: 'flex' }, props)));\nconst HeaderContentRow = (props) => (_jsx(Box, Object.assign({ alignItems: 'center', flexShrink: 1, flexGrow: 1, display: 'flex' }, props)));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderContent.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderContent.js",
        "code": {
            "HeaderContent": "const HeaderContent = (props) => (_jsx(Box, Object.assign({ flexGrow: 1, width: 1, flexShrink: 1, mi: 4, display: 'flex', justifyContent: 'center', flexDirection: 'column' }, props)));\nconst HeaderContent = (props) => (_jsx(Box, Object.assign({ flexGrow: 1, width: 1, flexShrink: 1, mi: 4, display: 'flex', justifyContent: 'center', flexDirection: 'column' }, props)));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderSubtitle.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderSubtitle.js",
        "code": {
            "HeaderSubtitle": "const HeaderSubtitle = (props) => _jsx(Box, Object.assign({ color: 'hint', fontScale: 'p2', withTruncatedText: true }, props));\nconst HeaderSubtitle = (props) => _jsx(Box, Object.assign({ color: 'hint', fontScale: 'p2', withTruncatedText: true }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderState.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderState.js",
        "code": {
            "HeaderState": "const HeaderState = (props) => (props.onClick ? _jsx(IconButton, Object.assign({ mini: true }, props)) : _jsx(Icon, Object.assign({ size: 'x16', name: props.icon }, props)));\nconst HeaderState = (props) => (props.onClick ? _jsx(IconButton, Object.assign({ mini: true }, props)) : _jsx(Icon, Object.assign({ size: 'x16', name: props.icon }, props)));"
        },
        "depth_rank": 9
    },
    {
        "file": "HeaderToolbarDivider.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderToolbar/HeaderToolbarDivider.js",
        "code": {
            "HeaderToolbarDivider": "const HeaderToolbarDivider = () => _jsx(Divider, { mi: 4, vertical: true });\nconst HeaderToolbarDivider = () => _jsx(Divider, { mi: 4, vertical: true });"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderToolbarAction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderToolbar/HeaderToolbarAction.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderTag.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTag/HeaderTag.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "HeaderTag": "const HeaderTag = (_a) => {\nconst HeaderTag = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 10
    },
    {
        "file": "HeaderTagSkeleton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/Header/HeaderTag/HeaderTagSkeleton.js",
        "code": {
            "HeaderTagSkeleton": "const HeaderTagSkeleton = () => _jsx(Skeleton, { width: 'x48' });\nconst HeaderTagSkeleton = () => _jsx(Skeleton, { width: 'x48' });"
        },
        "depth_rank": 10
    },
    {
        "file": "MultiSelectCustomListWrapper.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/MultiSelectCustom/MultiSelectCustomListWrapper.js",
        "code": {
            "MultiSelectCustomListWrapper": "const MultiSelectCustomListWrapper = forwardRef(function MultiSelectCustomListWrapper({ children }, ref) {\nconst MultiSelectCustomListWrapper = forwardRef(function MultiSelectCustomListWrapper({ children }, ref) {\n    return (_jsx(Box, { ref: ref, zIndex: '2', w: 'full', position: 'absolute', mbs: 40, pbs: 4, children: children }));"
        },
        "depth_rank": 9
    },
    {
        "file": "MultiSelectCustomAnchor.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/MultiSelectCustom/MultiSelectCustomAnchor.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MultiSelectCustomAnchor": "const MultiSelectCustomAnchor = forwardRef(function MultiSelectCustomAnchor(_a, ref) {\nconst MultiSelectCustomAnchor = forwardRef(function MultiSelectCustomAnchor(_a, ref) {\n    var { onClick, collapsed, selectedOptionsCount, selectedOptionsTitle, defaultTitle, maxCount } = _a, props = __rest(_a, [\"onClick\", \"collapsed\", \"selectedOptionsCount\", \"selectedOptionsTitle\", \"defaultTitle\", \"maxCount\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerNotFound.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerNotFound.js",
        "code": {
            "EmojiPickerNotFound": "const EmojiPickerNotFound = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', flexDirection: 'column', alignItems: 'center', fontScale: 'c1', mb: 8 })));\nconst EmojiPickerNotFound = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', flexDirection: 'column', alignItems: 'center', fontScale: 'c1', mb: 8 })));"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerLoadMore.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerLoadMore.js",
        "code": {
            "EmojiPickerLoadMore": "const EmojiPickerLoadMore = (props) => (_jsx(Box, { display: 'flex', flexDirection: 'column', alignItems: 'center', mbe: 8, children: _jsx(Box, Object.assign({}, props, { is: 'a', fontScale: 'c1' })) }));\nconst EmojiPickerLoadMore = (props) => (_jsx(Box, { display: 'flex', flexDirection: 'column', alignItems: 'center', mbe: 8, children: _jsx(Box, Object.assign({}, props, { is: 'a', fontScale: 'c1' })) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerCategoryHeader.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerCategoryHeader.js",
        "code": {
            "EmojiPickerCategoryHeader": "const EmojiPickerCategoryHeader = (props) => (_jsx(Box, { mbs: 12, mi: 12, children: _jsx(ButtonGroup, Object.assign({ small: true, stretch: true }, props)) }));\nconst EmojiPickerCategoryHeader = (props) => (_jsx(Box, { mbs: 12, mi: 12, children: _jsx(ButtonGroup, Object.assign({ small: true, stretch: true }, props)) }));"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerPreview.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerPreview.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "EmojiPickerPreview": "const EmojiPickerPreview = (_a) => {\nconst EmojiPickerPreview = (_a) => {\n    var { emoji, name } = _a, props = __rest(_a, [\"emoji\", \"name\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerHeader.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerHeader.js",
        "code": {
            "EmojiPickerHeader": "const EmojiPickerHeader = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', alignItems: 'center', pbs: 12, pi: 12 })));\nconst EmojiPickerHeader = (props) => (_jsx(Box, Object.assign({}, props, { display: 'flex', alignItems: 'center', pbs: 12, pi: 12 })));"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerCategoryWrapper.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerCategoryWrapper.js",
        "code": {
            "EmojiPickerCategoryWrapper": "const EmojiPickerCategoryWrapper = (props) => _jsx(Box, Object.assign({}, props, { display: 'flex', flexWrap: 'wrap' }));\nconst EmojiPickerCategoryWrapper = (props) => _jsx(Box, Object.assign({}, props, { display: 'flex', flexWrap: 'wrap' }));"
        },
        "depth_rank": 9
    },
    {
        "file": "EmojiPickerListArea.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/EmojiPicker/EmojiPickerListArea.js",
        "code": {
            "EmojiPickerListArea": "const EmojiPickerListArea = (props) => (_jsx(Box, Object.assign({}, props, { w: 'full', h: 'full', pis: 12, overflow: 'hidden' })));\nconst EmojiPickerListArea = (props) => (_jsx(Box, Object.assign({}, props, { w: 'full', h: 'full', pis: 12, overflow: 'hidden' })));"
        },
        "depth_rank": 9
    },
    {
        "file": "Online.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/Online.js",
        "code": {
            "Online": "function Online(props) {\nfunction Online(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'online' }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "Busy.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/Busy.js",
        "code": {
            "Busy": "function Busy(props) {\nfunction Busy(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'busy' }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "Away.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/Away.js",
        "code": {
            "Away": "function Away(props) {\nfunction Away(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'away' }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "Offline.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/Offline.js",
        "code": {
            "Offline": "function Offline(props) {\nfunction Offline(props) {\n    return _jsx(UserStatus, Object.assign({ status: 'offline' }, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "Loading.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/Loading.js",
        "code": {
            "Loading": "function Loading(props) {\nfunction Loading(props) {\n    return _jsx(UserStatus, Object.assign({}, props));"
        },
        "depth_rank": 9
    },
    {
        "file": "UserStatus.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/UserStatus.d.ts",
        "code": {
            "function": "declare function UserStatus({ small, status, ...props }: UserStatusProps): ReactElement;\ndeclare function UserStatus({ small, status, ...props }: UserStatusProps): ReactElement;"
        },
        "depth_rank": 9
    },
    {
        "file": "UserStatus.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-client/dist/components/UserStatus/UserStatus.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "UserStatus": "function UserStatus(_a) {\nfunction UserStatus(_a) {\n    var { small, status } = _a, props = __rest(_a, [\"small\", \"status\"]);"
        },
        "depth_rank": 9
    },
    {
        "file": "MessageComposerToolbarActions.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerToolbarActions.tsx",
        "code": {
            "ref": "const MessageComposerToolbarActions = (props: ComponentProps<typeof ButtonGroup>): ReactElement => {\nconst MessageComposerToolbarActions = (props: ComponentProps<typeof ButtonGroup>): ReactElement => {\n\tconst ref = useRef(null);\n\tconst ref = useRef(null);\n\tconst { toolbarProps } = useToolbar(props, ref);\n\tconst { toolbarProps } = useToolbar(props, ref);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerIcon.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerIcon.tsx",
        "code": {
            "MessageComposerIcon": "const MessageComposerIcon = ({ name, ...props }: { name: Keys } & Omit<HTMLAttributes<HTMLElement>, 'is'>): ReactElement => (\nconst MessageComposerIcon = ({ name, ...props }: { name: Keys } & Omit<HTMLAttributes<HTMLElement>, 'is'>): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerAction.tsx",
        "code": {
            "MessageComposerAction": "const MessageComposerAction = (props: ComponentProps<typeof IconButton>): ReactElement => <IconButton small {...props} />;\nconst MessageComposerAction = (props: ComponentProps<typeof IconButton>): ReactElement => <IconButton small {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerSkeleton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerSkeleton.tsx",
        "code": {
            "MessageComposerSkeleton": "const MessageComposerSkeleton = (): ReactElement => (\nconst MessageComposerSkeleton = (): ReactElement => (\n\t<MessageComposer>\n\t\t<Box width='100%' display='flex' alignItems='center' height='x52' pi={12}>"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerHint.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerHint.tsx",
        "code": {
            "MessageComposerHint": "const MessageComposerHint = ({ icon, children, helperText }: MessageComposerHintProps): ReactElement => (\nconst MessageComposerHint = ({ icon, children, helperText }: MessageComposerHintProps): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerToolbarSubmit.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerToolbarSubmit.tsx",
        "code": {
            "MessageComposerToolbarSubmit": "const MessageComposerToolbarSubmit = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup small {...props} />;\nconst MessageComposerToolbarSubmit = (props: ComponentProps<typeof ButtonGroup>): ReactElement => <ButtonGroup small {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerActionsDivider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerActionsDivider.tsx",
        "code": {
            "MessageComposerActionsDivider": "const MessageComposerActionsDivider = ({ height = 'x20', ...props }: ComponentProps<typeof Divider>): ReactElement => (\nconst MessageComposerActionsDivider = ({ height = 'x20', ...props }: ComponentProps<typeof Divider>): ReactElement => ("
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerButton.tsx",
        "code": {
            "MessageComposerButton": "const MessageComposerButton = (props: ComponentProps<typeof Button>): ReactElement => <Button small {...props} />;\nconst MessageComposerButton = (props: ComponentProps<typeof Button>): ReactElement => <Button small {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerInput.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageComposer/MessageComposerInput.tsx",
        "code": {
            "MessageComposerInput": "const MessageComposerInput = forwardRef(function MessageComposerInput(\nconst MessageComposerInput = forwardRef(function MessageComposerInput(\n\tprops: MessageComposerInputProps,\n\tref: Ref<HTMLTextAreaElement>,\n): ReactElement {\n\treturn (\n\t\t<Box is='label' width='full' fontSize={0}>"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutDivider.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutDivider.tsx",
        "code": {
            "MessageFooterCalloutDivider": "const MessageFooterCalloutDivider = forwardRef<HTMLButtonElement>(function MessageFooterCalloutDivider(props, ref): ReactElement {\nconst MessageFooterCalloutDivider = forwardRef<HTMLButtonElement>(function MessageFooterCalloutDivider(props, ref): ReactElement {\n\treturn <Box is='hr' ref={ref} borderInlineStart='1px solid' mi={4} flexShrink={0} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutAction.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutAction.tsx",
        "code": {
            "MessageFooterCalloutAction": "const MessageFooterCalloutAction = forwardRef<HTMLButtonElement, ComponentProps<typeof Button>>(function MessageFooterCalloutAction(\nconst MessageFooterCalloutAction = forwardRef<HTMLButtonElement, ComponentProps<typeof Button>>(function MessageFooterCalloutAction(\n\tprops,\n\tref,\n): ReactElement {\n\treturn <Button mi={4} ref={ref} primary small flexShrink={0} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutContent.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCalloutContent.tsx",
        "code": {
            "MessageFooterCalloutContent": "const MessageFooterCalloutContent = forwardRef<\nconst MessageFooterCalloutContent = forwardRef<\n\tHTMLButtonElement,\n\t{\n\t\tchildren: ReactNode;\n\t}\n>(function MessageFooterCalloutContent(props, ref): ReactElement {\n>(function MessageFooterCalloutContent(props, ref): ReactElement {\n\treturn <Box mi={4} ref={ref} flexWrap='wrap' textAlign='center' color='default' flexGrow={1} flexShrink={1} {...props} />;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCallout.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/src/MessageFooterCallout/MessageFooterCallout.tsx",
        "code": {
            "MessageFooterCallout": "const MessageFooterCallout = forwardRef<\nconst MessageFooterCallout = forwardRef<\n\tHTMLElement,\n\tOmit<HTMLAttributes<HTMLElement>, 'is'> & {\n\t\tchildren: ReactNode;\n\t\tis?: React.ElementType<any>;\n\t\tvariant?: 'default' | 'error';\n\t\tdashed?: boolean;\n\t}\n>(function MessageFooterCallout({ dashed, ...props }, ref): ReactElement {\n>(function MessageFooterCallout({ dashed, ...props }, ref): ReactElement {\n\treturn (\n\t\t<Box\n\t\t\tref={ref}"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerActionsDivider.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerActionsDivider.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposerActionsDivider": "const MessageComposerActionsDivider = (_a) => {\nconst MessageComposerActionsDivider = (_a) => {\n    var { height = 'x20' } = _a, props = __rest(_a, [\"height\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerHint.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerHint.d.ts",
        "code": {
            "const": "declare const MessageComposerHint: ({ icon, children, helperText }: MessageComposerHintProps) => ReactElement;\ndeclare const MessageComposerHint: ({ icon, children, helperText }: MessageComposerHintProps) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerAction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerAction.js",
        "code": {
            "MessageComposerAction": "const MessageComposerAction = (props) => _jsx(IconButton, Object.assign({ small: true }, props));\nconst MessageComposerAction = (props) => _jsx(IconButton, Object.assign({ small: true }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerIcon.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerIcon.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposerIcon": "const MessageComposerIcon = (_a) => {\nconst MessageComposerIcon = (_a) => {\n    var { name } = _a, props = __rest(_a, [\"name\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerButton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerButton.js",
        "code": {
            "MessageComposerButton": "const MessageComposerButton = (props) => _jsx(Button, Object.assign({ small: true }, props));\nconst MessageComposerButton = (props) => _jsx(Button, Object.assign({ small: true }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposer.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposer.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageComposer": "const MessageComposer = forwardRef(function MessageComposer(_a, ref) {\nconst MessageComposer = forwardRef(function MessageComposer(_a, ref) {\n    var { variant } = _a, props = __rest(_a, [\"variant\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerActionsDivider.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerActionsDivider.d.ts",
        "code": {
            "const": "declare const MessageComposerActionsDivider: ({ height, ...props }: ComponentProps<typeof Divider>) => ReactElement;\ndeclare const MessageComposerActionsDivider: ({ height, ...props }: ComponentProps<typeof Divider>) => ReactElement;"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerToolbarSubmit.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerToolbarSubmit.js",
        "code": {
            "MessageComposerToolbarSubmit": "const MessageComposerToolbarSubmit = (props) => _jsx(ButtonGroup, Object.assign({ small: true }, props));\nconst MessageComposerToolbarSubmit = (props) => _jsx(ButtonGroup, Object.assign({ small: true }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageComposerSkeleton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageComposer/MessageComposerSkeleton.js",
        "code": {
            "MessageComposerSkeleton": "const MessageComposerSkeleton = () => (_jsxs(MessageComposer, { children: [_jsx(Box, { width: '100%', display: 'flex', alignItems: 'center', height: 'x52', pi: 12, children: _jsx(Skeleton, { width: '100%', height: 36 }) }), _jsx(MessageComposerToolbar, { height: 36 })] }));\nconst MessageComposerSkeleton = () => (_jsxs(MessageComposer, { children: [_jsx(Box, { width: '100%', display: 'flex', alignItems: 'center', height: 'x52', pi: 12, children: _jsx(Skeleton, { width: '100%', height: 36 }) }), _jsx(MessageComposerToolbar, { height: 36 })] }));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutDivider.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutDivider.js",
        "code": {
            "MessageFooterCalloutDivider": "const MessageFooterCalloutDivider = forwardRef(function MessageFooterCalloutDivider(props, ref) {\nconst MessageFooterCalloutDivider = forwardRef(function MessageFooterCalloutDivider(props, ref) {\n    return _jsx(Box, Object.assign({ is: 'hr', ref: ref, borderInlineStart: '1px solid', mi: 4, flexShrink: 0 }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutContent.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutContent.js",
        "code": {
            "MessageFooterCalloutContent": "const MessageFooterCalloutContent = forwardRef(function MessageFooterCalloutContent(props, ref) {\nconst MessageFooterCalloutContent = forwardRef(function MessageFooterCalloutContent(props, ref) {\n    return _jsx(Box, Object.assign({ mi: 4, ref: ref, flexWrap: 'wrap', textAlign: 'center', color: 'default', flexGrow: 1, flexShrink: 1 }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCallout.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCallout.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "MessageFooterCallout": "const MessageFooterCallout = forwardRef(function MessageFooterCallout(_a, ref) {\nconst MessageFooterCallout = forwardRef(function MessageFooterCallout(_a, ref) {\n    var { dashed } = _a, props = __rest(_a, [\"dashed\"]);"
        },
        "depth_rank": 8
    },
    {
        "file": "MessageFooterCalloutAction.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/ui-composer/dist/MessageFooterCallout/MessageFooterCalloutAction.js",
        "code": {
            "MessageFooterCalloutAction": "const MessageFooterCalloutAction = forwardRef(function MessageFooterCalloutAction(props, ref) {\nconst MessageFooterCalloutAction = forwardRef(function MessageFooterCalloutAction(props, ref) {\n    return _jsx(Button, Object.assign({ mi: 4, ref: ref, primary: true, small: true, flexShrink: 0 }, props));"
        },
        "depth_rank": 8
    },
    {
        "file": "RegistrationPageRouter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/RegistrationPageRouter.tsx",
        "code": {
            "defaultRouteSession": "\tconst defaultRouteSession = useSession('loginDefaultState') as LoginRoutes | undefined;\n\tconst defaultRouteSession = useSession('loginDefaultState') as LoginRoutes | undefined;\n\tconst [route, setLoginRoute] = useLoginRouter(defaultRouteSession || defaultRoute);\n\tconst [route, setLoginRoute] = useLoginRouter(defaultRouteSession || defaultRoute);\n\n\tif (route === 'guest') {\n\t\treturn (\n\t\t\t<RegisterTemplate>\n\t\t\t\t<GuestForm setLoginRoute={setLoginRoute} />"
        },
        "depth_rank": 7
    },
    {
        "file": "LoginServices.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/LoginServices.tsx",
        "code": {
            "LoginServices": "const LoginServices = ({\nconst LoginServices = ({\n\tdisabled,\n\tsetError,\n}: {",
            "showFormLogin": "\tconst services = useLoginServices();\n\tconst services = useLoginServices();\n\tconst showFormLogin = useSetting('Accounts_ShowFormLogin');\n\tconst showFormLogin = useSetting('Accounts_ShowFormLogin');\n\n\tif (services.length === 0) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{showFormLogin && <Divider mb={24} p={0} children={t('registration.component.form.divider')} />}"
        },
        "depth_rank": 7
    },
    {
        "file": "ResetPasswordForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/ResetPasswordForm.tsx",
        "code": {
            "forgotPasswordFormRef": "\tconst emailId = useUniqueId();\n\tconst emailId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\tconst forgotPasswordFormRef = useRef<HTMLElement>(null);\n\tconst forgotPasswordFormRef = useRef<HTMLElement>(null);\n\n\tuseDocumentTitle(t('registration.component.resetPassword'), false);\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors, isSubmitting },"
        },
        "depth_rank": 7
    },
    {
        "file": "CMSPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/CMSPage.tsx",
        "code": {
            "customBackground": "const CMSPage = ({ page }: CMSPageProps): ReactElement => {\nconst CMSPage = ({ page }: CMSPageProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst pageContent = useSetting(page) as string;\n\tconst pageContent = useSetting(page) as string;\n\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 7
    },
    {
        "file": "GuestForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/GuestForm.tsx",
        "code": {
            "GuestForm": "const GuestForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }) => {\nconst GuestForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 7
    },
    {
        "file": "LoginServicesButton.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/LoginServicesButton.tsx",
        "code": {
            "LoginServicesButton": "const LoginServicesButton = <T extends LoginService>({\nconst LoginServicesButton = <T extends LoginService>({\n\tbuttonLabelText,\n\ticon,\n\ttitle,\n\tservice,\n\tclassName,\n\tdisabled,\n\tsetError,\n\t...props\n}: T & {",
            "handler": "\tconst t = useTranslation();\n\tconst t = useTranslation();\n\tconst handler = useLoginWithService({ service, buttonLabelText, ...props });\n\tconst handler = useLoginWithService({ service, buttonLabelText, ...props });"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/RegisterForm.tsx",
        "code": {
            "dispatchToastMessage": "\tconst manuallyApproveNewUsersRequired = useSetting('Accounts_ManuallyApproveNewUsers');\n\tconst manuallyApproveNewUsersRequired = useSetting('Accounts_ManuallyApproveNewUsers');\n\n\tconst usernameOrEmailPlaceholder = String(useSetting('Accounts_EmailOrUsernamePlaceholder'));\n\tconst usernameOrEmailPlaceholder = String(useSetting('Accounts_EmailOrUsernamePlaceholder'));\n\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\n\tconst formLabelId = useUniqueId();\n\tconst formLabelId = useUniqueId();\n\tconst passwordVerifierId = useUniqueId();\n\tconst passwordVerifierId = useUniqueId();\n\tconst nameId = useUniqueId();\n\tconst nameId = useUniqueId();\n\tconst emailId = useUniqueId();\n\tconst emailId = useUniqueId();\n\tconst usernameId = useUniqueId();\n\tconst usernameId = useUniqueId();\n\tconst passwordId = useUniqueId();\n\tconst passwordId = useUniqueId();\n\tconst passwordConfirmationId = useUniqueId();\n\tconst passwordConfirmationId = useUniqueId();\n\tconst reasonId = useUniqueId();\n\tconst reasonId = useUniqueId();\n\n\tconst registerUser = useRegisterMethod();\n\tconst registerUser = useRegisterMethod();\n\tconst customFields = useAccountsCustomFields();\n\tconst customFields = useAccountsCustomFields();\n\n\tconst [serverError, setServerError] = useState<string | undefined>(undefined);\n\tconst [serverError, setServerError] = useState<string | undefined>(undefined);\n\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetError,\n\t\twatch,\n\t\tgetValues,\n\t\tclearErrors,\n\t\tcontrol,\n\t\tformState: { errors },",
            "handleRegister": "\tconst passwordIsValid = useValidatePassword(password);\n\tconst passwordIsValid = useValidatePassword(password);\n\n\tconst registerFormRef = useRef<HTMLElement>(null);\n\tconst registerFormRef = useRef<HTMLElement>(null);\n\n\tuseEffect(() => {\n\t\tif (registerFormRef.current) {\n\t\t\tregisterFormRef.current.focus();\n\t\t}\n\t}, []);\n\n\tconst handleRegister = async ({ password, passwordConfirmation: _, ...formData }: LoginRegisterPayload) => {\n\tconst handleRegister = async ({ password, passwordConfirmation: _, ...formData }: LoginRegisterPayload) => {\n\t\tregisterUser.mutate(\n\t\t\t{ pass: password, ...formData },"
        },
        "depth_rank": 7
    },
    {
        "file": "SecretRegisterInvalidForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/SecretRegisterInvalidForm.tsx",
        "code": {
            "t": "const SecretRegisterInvalidForm = (): ReactElement => {\nconst SecretRegisterInvalidForm = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<VerticalTemplate>\n\t\t\t<h2>{t('Invalid_secret_URL_message')}</h2>"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterFormDisabled.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/RegisterFormDisabled.tsx",
        "code": {
            "linkReplacementText": "\tconst linkReplacementText = String(useSetting('Accounts_RegistrationForm_LinkReplacementText'));\n\tconst linkReplacementText = String(useSetting('Accounts_RegistrationForm_LinkReplacementText'));\n\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 7
    },
    {
        "file": "LoginForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/LoginForm.tsx",
        "code": {
            "renderErrorOnSubmit": "\tconst usernameId = useUniqueId();\n\tconst usernameId = useUniqueId();\n\tconst passwordId = useUniqueId();\n\tconst passwordId = useUniqueId();\n\tconst loginFormRef = useRef<HTMLElement>(null);\n\tconst loginFormRef = useRef<HTMLElement>(null);\n\n\tuseEffect(() => {\n\t\tif (loginFormRef.current) {\n\t\t\tloginFormRef.current.focus();\n\t\t}\n\t}, [errorOnSubmit]);\n\n\tconst renderErrorOnSubmit = (error: LoginErrors) => {\n\tconst renderErrorOnSubmit = (error: LoginErrors) => {\n\t\tconst { type, i18n } = LOGIN_SUBMIT_ERRORS[error];\n\t\tconst { type, i18n } = LOGIN_SUBMIT_ERRORS[error];"
        },
        "depth_rank": 7
    },
    {
        "file": "SecretRegisterForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/SecretRegisterForm.tsx",
        "code": {
            "hash": "const SecretRegisterForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }): ReactElement => {\nconst SecretRegisterForm = ({ setLoginRoute }: { setLoginRoute: DispatchLoginRouter }): ReactElement => {\n\tconst hash = useRouteParameter('hash');\n\tconst hash = useRouteParameter('hash');\n\n\tconst { data: valid, isSuccess } = useCheckRegistrationSecret(hash);\n\tconst { data: valid, isSuccess } = useCheckRegistrationSecret(hash);"
        },
        "depth_rank": 7
    },
    {
        "file": "EmailConfirmationForm.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/EmailConfirmationForm.tsx",
        "code": {
            "sendEmail": "\tconst sendEmail = useLoginSendEmailConfirmation();\n\tconst sendEmail = useLoginSendEmailConfirmation();\n\n\treturn (\n\t\t<Form\n\t\t\tonSubmit={handleSubmit((data) => {\n\t\t\t\tif (sendEmail.isLoading) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsendEmail.mutate(data.email);\n\t\t\t})}\n\t\t>\n\t\t\t<Form.Header>\n\t\t\t\t<Form.Title>{t('registration.component.form.confirmation')}</Form.Title>"
        },
        "depth_rank": 7
    },
    {
        "file": "HorizontalTemplate.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/template/HorizontalTemplate.tsx",
        "code": {
            "customBackground": "const HorizontalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\nconst HorizontalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<HorizontalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 8
    },
    {
        "file": "VerticalTemplate.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/template/VerticalTemplate.tsx",
        "code": {
            "customBackground": "const VerticalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\nconst VerticalTemplate = ({ children }: { children: ReactNode }): ReactElement => {\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst hideLogo = useSetting<boolean>('Layout_Login_Hide_Logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customLogo = useAssetWithDarkModePath('logo');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\tconst customBackground = useAssetWithDarkModePath('background');\n\n\treturn (\n\t\t<VerticalWizardLayout\n\t\t\tbackground={customBackground}"
        },
        "depth_rank": 8
    },
    {
        "file": "useRegisterMethod.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/hooks/useRegisterMethod.ts",
        "code": {
            "result": "\tconst register = useEndpoint('POST', '/v1/users.register');\n\tconst register = useEndpoint('POST', '/v1/users.register');\n\tconst secret = useRouteParameter('hash');\n\tconst secret = useRouteParameter('hash');\n\n\tconst login = useLoginWithPassword();\n\tconst login = useLoginWithPassword();\n\n\treturn useMutation({\n\t\tmutationFn: async ({ ...props }: Parameters<typeof register>[0]): Promise<ReturnType<typeof register>> => {\n\t\t\tconst result = await register({ ...props, secret });\n\t\t\tconst result = await register({ ...props, secret });"
        },
        "depth_rank": 8
    },
    {
        "file": "ResetPasswordPage.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/ResetPassword/ResetPasswordPage.tsx",
        "code": {
            "changePasswordReason": "\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordPlaceholder = String(useSetting('Accounts_PasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\tconst passwordConfirmationPlaceholder = String(useSetting('Accounts_ConfirmPasswordPlaceholder'));\n\n\tconst router = useRouter();\n\tconst router = useRouter();\n\n\tconst changePasswordReason = getChangePasswordReason(user || {});\n\tconst changePasswordReason = getChangePasswordReason(user || {});",
            "loginWithToken": "\tconst loginWithToken = useLoginWithToken();\n\tconst loginWithToken = useLoginWithToken();\n\n\tconst {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tsetError,\n\t\tformState: { errors, isSubmitting },",
            "result": "\tconst password = watch('password');\n\tconst password = watch('password');\n\tconst passwordIsValid = useValidatePassword(password);\n\tconst passwordIsValid = useValidatePassword(password);\n\n\tuseEffect(() => {\n\t\tif (resetPasswordFormRef.current) {\n\t\t\tresetPasswordFormRef.current.focus();\n\t\t}\n\t}, []);\n\n\tconst handleResetPassword = async ({ password }: { password: string }) => {\n\tconst handleResetPassword = async ({ password }: { password: string }) => {\n\t\ttry {\n\t\t\tif (token) {\n\t\t\t\tconst result = await resetPassword(token, password);\n\t\t\t\tconst result = await resetPassword(token, password);\n\t\t\t\tawait loginWithToken(result.token);\n\t\t\t\trouter.navigate('/home');\n\t\t\t} else {",
            "_error": "\t\t\tconst _error = reason ?? error;\n\t\t\tconst _error = reason ?? error;\n\t\t\tsetError('password', { message: String(_error) });"
        },
        "depth_rank": 8
    },
    {
        "file": "LoginPoweredBy.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/components/LoginPoweredBy.tsx",
        "code": {
            "hidePoweredBy": "\tconst hidePoweredBy = useSetting<boolean>('Layout_Login_Hide_Powered_By');\n\tconst hidePoweredBy = useSetting<boolean>('Layout_Login_Hide_Powered_By');\n\tif (hidePoweredBy) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<Box mbe={18}>"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterTitle.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/components/RegisterTitle.tsx",
        "code": {
            "hideTitle": "\tconst siteName = useSetting<string>('Site_Name');\n\tconst siteName = useSetting<string>('Site_Name');\n\tconst hideTitle = useSetting<boolean>('Layout_Login_Hide_Title');\n\tconst hideTitle = useSetting<boolean>('Layout_Login_Hide_Title');\n\n\tif (hideTitle) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<span id='welcomeTitle'>\n\t\t\t<Trans i18nKey='registration.component.welcome'>Welcome to {siteName} workspace</Trans>"
        },
        "depth_rank": 8
    },
    {
        "file": "LoginSwitchLanguageFooter.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/components/LoginSwitchLanguageFooter.tsx",
        "code": {
            "useSuggestedLanguages": "const useSuggestedLanguages = ({\nconst useSuggestedLanguages = ({\n\tbrowserLanguage = normalizeLanguage(window.navigator.language ?? 'en'),\n}: {",
            "LoginSwitchLanguageFooter": "const LoginSwitchLanguageFooter = ({\nconst LoginSwitchLanguageFooter = ({\n\tbrowserLanguage = normalizeLanguage(window.navigator.language ?? 'en'),\n}: LoginSwitchLanguageFooterProps): ReactElement | null => {",
            "loadLanguage": "\tconst loadLanguage = useLoadLanguage();\n\tconst loadLanguage = useLoadLanguage();\n\tconst { suggestions } = useSuggestedLanguages({ browserLanguage });\n\tconst { suggestions } = useSuggestedLanguages({ browserLanguage });"
        },
        "depth_rank": 8
    },
    {
        "file": "LoginSwitchLanguageFooter.stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/src/components/LoginSwitchLanguageFooter.stories.tsx",
        "code": {
            "ExampleTranslationDecorator": "\t\t\tcreateElement(function ExampleTranslationDecorator() {\n\t\t\tcreateElement(function ExampleTranslationDecorator() {\n\t\t\t\tconst { t } = useTranslation();\n\t\t\t\tconst { t } = useTranslation();"
        },
        "depth_rank": 8
    },
    {
        "file": "RegisterForm.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/RegisterForm.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterTemplate.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/RegisterTemplate.d.ts",
        "code": {
            "const": "declare const RegisterTemplate: ({ children, ...props }: AllHTMLAttributes<HTMLElement>) => JSX.Element;\ndeclare const RegisterTemplate: ({ children, ...props }: AllHTMLAttributes<HTMLElement>) => JSX.Element;"
        },
        "depth_rank": 7
    },
    {
        "file": "LoginServicesButton.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/LoginServicesButton.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "LoginServicesButton": "const LoginServicesButton = (_a) => {\nconst LoginServicesButton = (_a) => {\n    var { buttonLabelText, icon, title, service, className, disabled, setError } = _a, props = __rest(_a, [\"buttonLabelText\", \"icon\", \"title\", \"service\", \"className\", \"disabled\", \"setError\"]);"
        },
        "depth_rank": 7
    },
    {
        "file": "RegisterTemplate.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/RegisterTemplate.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};",
            "RegisterTemplate": "const RegisterTemplate = (_a) => {\nconst RegisterTemplate = (_a) => {\n    var { children } = _a, props = __rest(_a, [\"children\"]);"
        },
        "depth_rank": 7
    },
    {
        "file": "CMSPage.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/CMSPage.d.ts",
        "code": {
            "const": "declare const CMSPage: ({ page }: CMSPageProps) => ReactElement;\ndeclare const CMSPage: ({ page }: CMSPageProps) => ReactElement;"
        },
        "depth_rank": 7
    },
    {
        "file": "useRegisterMethod.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/hooks/useRegisterMethod.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "LoginSwitchLanguageFooter.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/web-ui-registration/dist/components/LoginSwitchLanguageFooter.d.ts",
        "code": {
            "const": "declare const LoginSwitchLanguageFooter: ({ browserLanguage, }: LoginSwitchLanguageFooterProps) => ReactElement | null;\ndeclare const LoginSwitchLanguageFooter: ({ browserLanguage, }: LoginSwitchLanguageFooterProps) => ReactElement | null;"
        },
        "depth_rank": 8
    },
    {
        "file": "badge.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/favicon/src/badge.ts",
        "code": {
            "text": "\tconst text = getBadgeText(badge);\n\tconst text = getBadgeText(badge);\n\tconst { fontFamily, fontStyle, bgColor, textColor } = getBadgeStyle(badge);\n\tconst { fontFamily, fontStyle, bgColor, textColor } = getBadgeStyle(badge);"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/favicon/src/index.ts",
        "code": {
            "img": "\t\tconst link = document.createElement('link');\n\t\tconst link = document.createElement('link');\n\t\tlink.setAttribute('rel', 'icon');\n\t\tdocument.head.appendChild(link);\n\t\tfavicons.push(link);\n\t}\n\n\tfor (const favicon of favicons) {\n\tfor (const favicon of favicons) {\n\t\tfavicon.setAttribute('type', 'image/png');\n\t}\n\n\treturn favicons;\n};\n\nconst fetchFaviconImage = async (url: string | undefined) => {\nconst fetchFaviconImage = async (url: string | undefined) => {\n\tconst img = new Image();\n\tconst img = new Image();\n\n\tif (url) {\n\t\timg.crossOrigin = 'anonymous';\n\t\timg.src = url;\n\t} else {",
            "renderAndUpdate": "const renderAndUpdate = ({\nconst renderAndUpdate = ({\n\tbadge,\n\tcanvas,\n\tfavicons,\n\tcontext,\n\timg,\n}: {"
        },
        "depth_rank": 7
    },
    {
        "file": "api.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/api.ts",
        "code": {
            "function": "Livechat.rest.use(async function (request, next) {\nLivechat.rest.use(async function (request, next) {\n\ttry {\n\t\treturn await next(...request);\n\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "widget.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/widget.js",
        "code": {
            "log": "const log =\nconst log =\n\tprocess.env.NODE_ENV === 'development'\n\t\t? (...args) => window.console.log('%cwidget%c', 'color: red', 'color: initial', ...args)\n\t\t: () => {};",
            "WIDGET_MARGIN": "const WIDGET_OPEN_WIDTH = 365;\nconst WIDGET_OPEN_WIDTH = 365;\nconst WIDGET_OPEN_HEIGHT = 525;\nconst WIDGET_OPEN_HEIGHT = 525;\nconst WIDGET_MINIMIZED_WIDTH = 54;\nconst WIDGET_MINIMIZED_WIDTH = 54;\nconst WIDGET_MINIMIZED_HEIGHT = 54;\nconst WIDGET_MINIMIZED_HEIGHT = 54;\nconst WIDGET_MARGIN = 16;\nconst WIDGET_MARGIN = 16;\n\nwindow.RocketChat = window.RocketChat || { _: [] };",
            "config": "const config = {};\nconst config = {};"
        },
        "depth_rank": 7
    },
    {
        "file": "normalizeTransferHistoryMessage.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/helpers/normalizeTransferHistoryMessage.ts",
        "code": {
            "to": "\t\t\tconst to = transferredTo && (transferredTo.name || transferredTo.username);\n\t\t\tconst to = transferredTo && (transferredTo.name || transferredTo.username);\n\t\t\treturn t('from_transferred_the_chat_to_to', { from, to });"
        },
        "depth_rank": 8
    },
    {
        "file": "isActiveSession.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/helpers/isActiveSession.ts",
        "code": {
            "sessionId": "\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst { openSessionIds: [firstSessionId] = [] } = store.state;\n\tconst { openSessionIds: [firstSessionId] = [] } = store.state;"
        },
        "depth_rank": 8
    },
    {
        "file": "transcript.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/transcript.js",
        "code": {
            "promptTranscript": "const promptTranscript = async () => {\nconst promptTranscript = async () => {\n\tconst {\n\tconst {\n\t\tconfig: {\n\t\t\tmessages: { transcriptMessage },",
            "message": "\tconst message = transcriptMessage || i18next.t('would_you_like_a_copy_of_this_chat_emailed');\n\tconst message = transcriptMessage || i18next.t('would_you_like_a_copy_of_this_chat_emailed');\n\n\treturn ModalManager.confirm({\n\t\ttext: message,\n\t}).then((result) => {"
        },
        "depth_rank": 8
    },
    {
        "file": "hooks.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/hooks.js",
        "code": {
            "createOrUpdateGuest": "const createOrUpdateGuest = async (guest) => {\nconst createOrUpdateGuest = async (guest) => {\n\tconst { token } = guest;\n\tconst { token } = guest;",
            "updateIframeGuestData": "const updateIframeGuestData = (data) => {\nconst updateIframeGuestData = (data) => {\n\tconst {\n\tconst {\n\t\tiframe,\n\t\tiframe: { guest },",
            "guestData": "\tconst guestData = { token, ...data };\n\tconst guestData = { token, ...data };",
            "api": "const api = {\nconst api = {\n\tpageVisited(info) {\n\t\tif (info.change === 'url') {\n\t\t\tTriggers.processRequest(info);\n\t\t}\n\n\t\tconst { token, room } = store.state;\n\t\tconst { token, room } = store.state;",
            "department": "\t\tconst department = departments.find((dep) => dep._id === value || dep.name === value)?._id || '';\n\t\tconst department = departments.find((dep) => dep._id === value || dep.name === value)?._id || '';\n\n\t\tupdateIframeGuestData({ department });"
        },
        "depth_rank": 8
    },
    {
        "file": "api.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/api.ts",
        "code": {
            "estimatedWaitTime": "\tconst locale = await getDateFnsLocale();\n\tconst locale = await getDateFnsLocale();\n\tconst estimatedWaitTime =\n\tconst estimatedWaitTime =\n\t\testimatedWaitTimeSeconds && formatDistance(new Date().setSeconds(estimatedWaitTimeSeconds), new Date(), { locale });"
        },
        "depth_rank": 8
    },
    {
        "file": "threads.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/threads.js",
        "code": {
            "addParentMessage": "const addParentMessage = async (parentMessage) => {\nconst addParentMessage = async (parentMessage) => {\n\tconst { state } = store;\n\tconst { state } = store;",
            "findParentMessage": "const findParentMessage = async (tmid) => {\nconst findParentMessage = async (tmid) => {\n\tconst { state } = store;\n\tconst { state } = store;",
            "alert": "\t\t\tconst alert = { id: createToken(), children: reason, error: true, timeout: 5000 };\n\t\t\tconst alert = { id: createToken(), children: reason, error: true, timeout: 5000 };",
            "normalizeThreadMessage": "const normalizeThreadMessage = async (message) => {\nconst normalizeThreadMessage = async (message) => {\n\tconst { state } = store;\n\tconst { state } = store;"
        },
        "depth_rank": 8
    },
    {
        "file": "room.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/room.js",
        "code": {
            "alert": "\t\tconst alert = { id: createToken(), children: i18next.t('error_getting_call_alert'), error: true, timeout: 5000 };\n\t\tconst alert = { id: createToken(), children: i18next.t('error_getting_call_alert'), error: true, timeout: 5000 };",
            "doPlaySound": "const doPlaySound = async (message) => {\nconst doPlaySound = async (message) => {\n\tconst { sound, user } = store.state;\n\tconst { sound, user } = store.state;",
            "isAgentHidden": "const isAgentHidden = () => {\nconst isAgentHidden = () => {\n\tconst { config: { settings: { agentHiddenInfo } = {} } = {} } = store.state;\n\tconst { config: { settings: { agentHiddenInfo } = {} } = {} } = store.state;",
            "transformAgentInformationOnMessage": "const transformAgentInformationOnMessage = (message) => {\nconst transformAgentInformationOnMessage = (message) => {\n\tconst { user } = store.state;\n\tconst { user } = store.state;",
            "previousMessages": "\tconst previousMessages = getGreetingMessages(storedMessages);\n\tconst previousMessages = getGreetingMessages(storedMessages);\n\n\tawait store.setState({ loading: true });",
            "messages": "\tconst rawMessages = (await Livechat.loadMessages(rid)).concat(previousMessages);\n\tconst rawMessages = (await Livechat.loadMessages(rid)).concat(previousMessages);\n\tconst messages = (await normalizeMessages(rawMessages)).map(transformAgentInformationOnMessage);\n\tconst messages = (await normalizeMessages(rawMessages)).map(transformAgentInformationOnMessage);\n\n\tawait initRoom();\n\tawait store.setState({ messages: (messages || []).reverse(), noMoreMessages: false, loading: false });",
            "params": "\tconst params = {};\n\tconst params = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "uiKit.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/uiKit.js",
        "code": {
            "result": "\tconst triggerId = generateTriggerId(appId);\n\tconst triggerId = generateTriggerId(appId);\n\n\ttry {\n\t\tconst result = await Promise.race([\n\t\tconst result = await Promise.race([\n\t\t\tLivechat.sendUiInteraction(\n\t\t\t\t{\n\t\t\t\t\ttype,\n\t\t\t\t\tactionId,\n\t\t\t\t\trid,\n\t\t\t\t\tmid,\n\t\t\t\t\tviewId,\n\t\t\t\t\tcontainer,\n\t\t\t\t\ttriggerId,\n\t\t\t\t\tpayload,\n\t\t\t\t},\n\t\t\t\tappId,\n\t\t\t),\n\n\t\t\tnew Promise((_, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\treject(new Error(triggerId));\n\t\t\t\t}, TRIGGER_TIMEOUT);\n\t\t\t}),\n\t\t]);\n\n\t\tconst { type: interactionType, ...data } = result;\n\t\tconst { type: interactionType, ...data } = result;"
        },
        "depth_rank": 8
    },
    {
        "file": "main.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/main.js",
        "code": {
            "unreadMessages": "\tconst shouldMarkUnread = shouldMarkAsUnread();\n\tconst shouldMarkUnread = shouldMarkAsUnread();\n\tif (shouldMarkUnread) {\n\t\tconst unreadMessages = getUnreadMessages();\n\t\tconst unreadMessages = getUnreadMessages();\n\n\t\tif (unreadMessages.length > 0) {\n\t\t\tconst { alerts } = store.state;\n\t\t\tconst { alerts } = store.state;",
            "alertMessage": "\t\t\tconst lastReadMessage = getLastReadMessage();\n\t\t\tconst lastReadMessage = getLastReadMessage();\n\t\t\tconst alertMessage = i18next.t('count_new_messages_since_since', {\n\t\t\tconst alertMessage = i18next.t('count_new_messages_since_since', {\n\t\t\t\tcount: unreadMessages.length,\n\t\t\t\tval: new Date(lastReadMessage.ts),\n\t\t\t\tformatParams: {\n\t\t\t\t\tval: { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' },",
            "alert": "\t\t\tconst alert = { id: constants.unreadMessagesAlertId, children: alertMessage, success: true, timeout: 0 };\n\t\t\tconst alert = { id: constants.unreadMessagesAlertId, children: alertMessage, success: true, timeout: 0 };"
        },
        "depth_rank": 8
    },
    {
        "file": "triggers.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/triggers.js",
        "code": {
            "getAgent": "const agentCacheExpiry = 3600000;\nconst agentCacheExpiry = 3600000;\nlet agentPromise;\nconst getAgent = (triggerAction) => {\nconst getAgent = (triggerAction) => {\n\tif (agentPromise) {\n\t\treturn agentPromise;\n\t}\n\n\tagentPromise = new Promise(async (resolve, reject) => {\n\t\tconst { params } = triggerAction;\n\t\tconst { params } = triggerAction;"
        },
        "depth_rank": 8
    },
    {
        "file": "isBigEmoji.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/lib/emoji/isBigEmoji.ts",
        "code": {
            "emojiRanges": "const emojiRanges = [\nconst emojiRanges = [\n\temojiUnicode, // unicode emoji from https://www.regextester.com/106421\n\t':.{1,40}:', // custom emoji"
        },
        "depth_rank": 9
    },
    {
        "file": "container.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/GDPRAgreement/container.js",
        "code": {
            "GDPRConnector": "const GDPRConnector = ({ ref, t, ...props }) => (\nconst GDPRConnector = ({ ref, t, ...props }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/Register/index.tsx",
        "code": {
            "bottomRef": "\tconst topRef = useRef<HTMLDivElement>(null);\n\tconst topRef = useRef<HTMLDivElement>(null);\n\tconst bottomRef = useRef<HTMLDivElement>(null);\n\tconst bottomRef = useRef<HTMLDivElement>(null);\n\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tformState: { errors, isDirty, isValid, isSubmitting },",
            "onSubmit": "\tconst onSubmit = async ({\n\tconst onSubmit = async ({\n\t\tname,\n\t\temail,\n\t\tdepartment,\n\t\t...customFields\n\t}: {",
            "fields": "\t\tconst fields = {\n\t\tconst fields = {\n\t\t\tname,\n\t\t\temail,\n\t\t\t...(department && { department }),",
            "availableDepartments": "\tconst getDepartmentDefault = () => {\n\tconst getDepartmentDefault = () => {\n\t\tif (departments.some((dept) => dept._id === guestDepartment)) {\n\t\t\treturn guestDepartment;\n\t\t}\n\t};\n\n\tconst availableDepartments = departments.filter((dept) => dept.showOnRegistration);\n\tconst availableDepartments = departments.filter((dept) => dept.showOnRegistration);\n\n\tuseEffect(() => {\n\t\tif (user?._id) {\n\t\t\troute('/');\n\t\t}\n\t}, [user?._id]);\n\n\treturn (\n\t\t<Screen\n\t\t\ttheme={{\n\t\t\t\tcolor: customColor || color,\n\t\t\t\tfontColor: customFontColor,\n\t\t\t\ticonColor: customIconColor,\n\t\t\t\ttitle: customTitle,\n\t\t\t}}\n\t\t\ttitle={title || defaultTitle}"
        },
        "depth_rank": 9
    },
    {
        "file": "container.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/Chat/container.js",
        "code": {
            "visitor": "\t\tconst visitor = { token, ...guest };\n\t\tconst visitor = { token, ...guest };",
            "previousMessages": "\t\tconst previousMessages = getGreetingMessages(messages);\n\t\tconst previousMessages = getGreetingMessages(messages);\n\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\tawait dispatch({ loading: true });",
            "newRoom": "\t\t\tconst params = defaultRoomParams();\n\t\t\tconst params = defaultRoomParams();\n\t\t\tconst newRoom = await Livechat.room(params);\n\t\t\tconst newRoom = await Livechat.room(params);\n\t\t\tawait dispatch({ room: newRoom, messages: previousMessages, noMoreMessages: false });",
            "alert": "\t\t\tconst alert = { id: createToken(), children: i18n.t('error_removing_user_data'), error: true, timeout: 0 };\n\t\t\tconst alert = { id: createToken(), children: i18n.t('error_removing_user_data'), error: true, timeout: 0 };",
            "showDepartment": "\t\tconst showDepartment = departments.filter((dept) => dept.showOnRegistration).length > 0;\n\t\tconst showDepartment = departments.filter((dept) => dept.showOnRegistration).length > 0;\n\t\treturn nameFieldRegistrationForm || emailFieldRegistrationForm || showDepartment;\n\t};\n\n\tonRegisterUser = () => route('/register');\n\n\tshowOptionsMenu = () => this.canSwitchDepartment() || this.canFinishChat() || this.canRemoveUserData();\n\n\tasync handleConnectingAgentAlert(connecting, message) {\n\t\tconst { alerts: oldAlerts, dispatch, i18n } = this.props;\n\t\tconst { alerts: oldAlerts, dispatch, i18n } = this.props;",
            "message": "\t\tconst ts = new Date();\n\t\tconst ts = new Date();\n\t\tconst message = { _id: livechatQueueMessageId, msg, u, ts: ts.toISOString() };\n\t\tconst message = { _id: livechatQueueMessageId, msg, u, ts: ts.toISOString() };"
        },
        "depth_rank": 9
    },
    {
        "file": "connector.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/Chat/connector.tsx",
        "code": {
            "ChatConnector": "const ChatConnector = ({ ref, ...props }: ChatConnectorProps) => (\nconst ChatConnector = ({ ref, ...props }: ChatConnectorProps) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "component.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/TriggerMessage/component.js",
        "code": {
            "defaultTitle": "\t\tconst defaultTitle = t('messages');\n\t\tconst defaultTitle = t('messages');\n\t\tconst {\n\t\tconst {\n\t\t\ttheme: { color },"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/LeaveMessage/index.tsx",
        "code": {
            "LeaveMessage": "const LeaveMessage = ({ screenProps }: { screenProps: { [key: string]: unknown }; path: string }) => {\nconst LeaveMessage = ({ screenProps }: { screenProps: { [key: string]: unknown }; path: string }) => {\n\tconst {\n\tconst {\n\t\tconfig: {\n\t\t\tdepartments = [],\n\t\t\tmessages: { offlineMessage, offlineSuccessMessage, offlineUnavailableMessage },",
            "bottomRef": "\tconst topRef = useRef<HTMLDivElement>(null);\n\tconst topRef = useRef<HTMLDivElement>(null);\n\tconst bottomRef = useRef<HTMLDivElement>(null);\n\tconst bottomRef = useRef<HTMLDivElement>(null);\n\n\tconst {\n\tconst {\n\t\thandleSubmit,\n\t\tformState: { errors, isDirty, isValid, isSubmitting },",
            "customOfflineTitle": "\tconst customOfflineTitle = iframe?.theme?.offlineTitle;\n\tconst customOfflineTitle = iframe?.theme?.offlineTitle;\n\n\ttype FormValues = { name: string; email: string; department?: string; message: string };",
            "fields": "\tconst onSubmit = async ({ name, email, department, message }: FormValues) => {\n\tconst onSubmit = async ({ name, email, department, message }: FormValues) => {\n\t\tconst fields = {\n\t\tconst fields = {\n\t\t\tname,\n\t\t\temail,\n\t\t\t...(department && { department }),",
            "payload": "\t\t\tconst payload = parseOfflineMessage(fields) as FormValues & { host: string };\n\t\t\tconst payload = parseOfflineMessage(fields) as FormValues & { host: string };",
            "errorMessage": "\t\t\tconst errorMessage = (error as { error: string })?.error;\n\t\t\tconst errorMessage = (error as { error: string })?.error;",
            "alert": "\t\t\tconst alert = { id: createToken(), children: errorMessage, error: true, timeout: 5000 };\n\t\t\tconst alert = { id: createToken(), children: errorMessage, error: true, timeout: 5000 };",
            "defaultUnavailableMessage": "\tconst defaultTitle = t('leave_a_message');\n\tconst defaultTitle = t('leave_a_message');\n\tconst defaultMessage = t('we_are_not_online_right_now_please_leave_a_message');\n\tconst defaultMessage = t('we_are_not_online_right_now_please_leave_a_message');\n\tconst defaultUnavailableMessage = ''; // TODO\n\tconst defaultUnavailableMessage = ''; // TODO\n\n\treturn (\n\t\t<Screen\n\t\t\t{...screenProps}"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/SwitchDepartment/index.tsx",
        "code": {
            "SwitchDepartment": "const SwitchDepartment = ({ screenProps }: { screenProps: { [key: string]: unknown }; path: string }) => {\nconst SwitchDepartment = ({ screenProps }: { screenProps: { [key: string]: unknown }; path: string }) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "result": "\t\t\tconst result = await Livechat.transferChat({ rid, department });\n\t\t\tconst result = await Livechat.transferChat({ rid, department });"
        },
        "depth_rank": 9
    },
    {
        "file": "container.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/routes/ChatFinished/container.js",
        "code": {
            "ChatFinishedConnector": "const ChatFinishedConnector = ({ ref, t, ...props }) => (\nconst ChatFinishedConnector = ({ ref, t, ...props }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Surface.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/Surface.tsx",
        "code": {
            "Surface": "const SurfaceContext = createContext<SurfaceContextValue>({\nconst SurfaceContext = createContext<SurfaceContextValue>({\n\tdispatchAction: () => undefined,\n});\n\ntype SurfaceProps = {\n\tchildren: ComponentChildren;\n\tdispatchAction: (action: any) => void;\n};\n\nconst Surface = ({ children, dispatchAction }: SurfaceProps) => (\nconst Surface = ({ children, dispatchAction }: SurfaceProps) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "Block.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/Block.tsx",
        "code": {
            "Block": "const BlockContext = createContext({\nconst BlockContext = createContext({\n\tappId: null,\n\tblockId: null,\n});\n\ntype BlockProps = {\n\tappId?: string;\n\tblockId?: string;\n\tchildren: ComponentChildren;\n};\n\nconst Block = ({ appId, blockId, children }: BlockProps) => (\nconst Block = ({ appId, blockId, children }: BlockProps) => (",
            "perform": "\tconst dispatchAction = useDispatchAction();\n\tconst dispatchAction = useDispatchAction();\n\n\tconst [performing, setPerforming] = useState(false);\n\tconst [performing, setPerforming] = useState(false);\n\tconst mountedRef = useRef(true);\n\tconst mountedRef = useRef(true);\n\n\tuseEffect(\n\t\t() => () => {\n\t\t\tmountedRef.current = false;\n\t\t},\n\t\t[],\n\t);\n\n\tconst perform = useCallback(\n\tconst perform = useCallback(\n\t\tasync (payload = {}) => {\n\t\t\tsetPerforming(true);\n\n\t\t\ttry {\n\t\t\t\tawait dispatchAction({\n\t\t\t\t\tappId,\n\t\t\t\t\tactionId,\n\t\t\t\t\tpayload,\n\t\t\t\t});\n\t\t\t} finally {"
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/SectionBlock/index.tsx",
        "code": {
            "SectionBlock": "const SectionBlock = ({ appId, blockId, text, fields, accessory, parser }: SectionBlockProps) => (\nconst SectionBlock = ({ appId, blockId, text, fields, accessory, parser }: SectionBlockProps) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/DatePickerElement/index.tsx",
        "code": {
            "handleChange": "\tconst [performAction, performingAction] = usePerformAction(actionId);\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\n\tconst handleChange = useCallback(\n\tconst handleChange = useCallback(\n\t\tasync (event: ChangeEvent<HTMLInputElement>) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tif (confirm) {\n\t\t\t\t// TODO\n\t\t\t}\n\n\t\t\tawait performAction({\n\t\t\t\tinitialDate,\n\t\t\t\tselectedDate: event.currentTarget?.value,\n\t\t\t});\n\t\t},\n\t\t[confirm, initialDate, performAction],\n\t);\n\n\treturn (\n\t\t<DateInput\n\t\t\tvalue={initialDate}"
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/ActionsBlock/index.tsx",
        "code": {
            "ActionsBlock": "const ActionsBlock = ({ appId, blockId, elements, parser }: ActionsBlockProps) => {\nconst ActionsBlock = ({ appId, blockId, elements, parser }: ActionsBlockProps) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();",
            "handleMoreButtonClick": "\tconst isMoreButtonVisible = hiddenElementsCount > 0;\n\tconst isMoreButtonVisible = hiddenElementsCount > 0;\n\n\tconst handleMoreButtonClick = useCallback(() => {\n\tconst handleMoreButtonClick = useCallback(() => {\n\t\tsetCollapsed(false);\n\t}, []);\n\n\treturn (\n\t\t<Block appId={appId} blockId={blockId}>"
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/ButtonElement/index.tsx",
        "code": {
            "handleMouseUp": "const handleMouseUp = ({ currentTarget }: TargetedEvent<HTMLElement, MouseEvent>) => currentTarget.blur();\nconst handleMouseUp = ({ currentTarget }: TargetedEvent<HTMLElement, MouseEvent>) => currentTarget.blur();"
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/OverflowElement/index.tsx",
        "code": {
            "handleClick": "const OverflowElement = ({ actionId, confirm, options, parser }: OverflowElementProps) => {\nconst OverflowElement = ({ actionId, confirm, options, parser }: OverflowElementProps) => {\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\tconst [performAction, performingAction] = usePerformAction(actionId);\n\n\tconst handleClick = useCallback(\n\tconst handleClick = useCallback(\n\t\tasync (value: TargetedEvent<HTMLElement, MouseEvent>) => {\n\t\t\tawait performAction({ value });"
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/DividerBlock/index.tsx",
        "code": {
            "DividerBlock": "const DividerBlock = ({ appId, blockId }: DividerBlockProps) => (\nconst DividerBlock = ({ appId, blockId }: DividerBlockProps) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/ImageElement/index.tsx",
        "code": {
            "ImageElement": "const ImageElement = ({ imageUrl, altText, context }: ImageElementProps) => (\nconst ImageElement = ({ imageUrl, altText, context }: ImageElementProps) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/uiKit/message/ContextBlock/index.tsx",
        "code": {
            "ContextBlock": "const ContextBlock = ({ appId, blockId, elements, parser }: ContextBlockProps) => (\nconst ContextBlock = ({ appId, blockId, elements, parser }: ContextBlockProps) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Footer/index.tsx",
        "code": {
            "OptionsTrigger": "const OptionsTrigger = ({ pop }: { pop: () => void }) => {\nconst OptionsTrigger = ({ pop }: { pop: () => void }) => {\n\tconst { t } = useTranslation();\n\tconst { t } = useTranslation();"
        },
        "depth_rank": 9
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageList/index.js",
        "code": {
            "items": "\t\tconst items = [];\n\t\tconst items = [];\n\t\tconst { incomingCallAlert } = store.state;\n\t\tconst { incomingCallAlert } = store.state;",
            "showUnreadSeparator": "\t\t\tconst showUnreadSeparator = lastReadMessageId && nextMessage && lastReadMessageId === message._id;\n\t\t\tconst showUnreadSeparator = lastReadMessageId && nextMessage && lastReadMessageId === message._id;\n\t\t\tif (showUnreadSeparator) {\n\t\t\t\titems.push(<MessageSeparator key='unread' use='li' unread />);\n\t\t\t}\n\t\t}\n\n\t\tif (typingUsernames && typingUsernames.length) {\n\t\t\titems.push(<TypingIndicator key='typing' use='li' avatarResolver={avatarResolver} usernames={typingUsernames} />);"
        },
        "depth_rank": 10
    },
    {
        "file": "stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageBubble/stories.tsx",
        "code": {
            "text": "const text = loremIpsum({ count: 1, units: 'sentences' });\nconst text = loremIpsum({ count: 1, units: 'sentences' });"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageSeparator/index.js",
        "code": {
            "MessageSeparator": "const MessageSeparator = ({ date, unread, use: Element = 'div', className, style = {}, t }) => (\nconst MessageSeparator = ({ date, unread, use: Element = 'div', className, style = {}, t }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageBlocks/index.js",
        "code": {
            "dispatchAction": "const MessageBlocks = ({ blocks = [], mid = undefined, rid = undefined }) => {\nconst MessageBlocks = ({ blocks = [], mid = undefined, rid = undefined }) => {\n\tconst dispatchAction = useCallback(\n\tconst dispatchAction = useCallback(\n\t\t({ appId, actionId, payload }) =>"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/VideoAttachment/index.js",
        "code": {
            "VideoAttachment": "const VideoAttachment = ({ url, className, t, ...messageBubbleProps }) => (\nconst VideoAttachment = ({ url, className, t, ...messageBubbleProps }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/FileAttachmentIcon/index.js",
        "code": {
            "Icon": "\tconst extension = url ? url.split('.').pop() : null;\n\tconst extension = url ? url.split('.').pop() : null;\n\n\tconst Icon =\n\tconst Icon =\n\t\t(/pdf/i.test(extension) && PDFIcon) ||\n\t\t(/doc|docx|rtf|txt|odt|pages|log/i.test(extension) && DocIcon) ||\n\t\t(/ppt|pptx|pps/i.test(extension) && PPTIcon) ||\n\t\t(/xls|xlsx|csv/i.test(extension) && SheetIcon) ||\n\t\t(/zip|rar|7z|gz/i.test(extension) && ZipIcon) ||\n\t\tFileIcon;\n\treturn <Icon width={32} />;"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/AudioAttachment/index.js",
        "code": {
            "AudioAttachment": "const AudioAttachment = ({ url, className, t, ...messageBubbleProps }) => (\nconst AudioAttachment = ({ url, className, t, ...messageBubbleProps }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "markdown.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageText/markdown.js",
        "code": {
            "relAttrIndex": "const md = new MarkdownIt({\nconst md = new MarkdownIt({\n\thtml: true,\n\tbreaks: true,\n\tlinkify: true,\n\ttypographer: true,\n});\n\nconst defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\nconst defaultRender = md.renderer.rules.link_open || ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\nmd.renderer.rules.link_open = (tokens, idx, options, env, self) => {\n\tconst targetAttrIndex = tokens[idx].attrIndex('target');\n\tconst targetAttrIndex = tokens[idx].attrIndex('target');\n\tconst relAttrIndex = tokens[idx].attrIndex('rel');\n\tconst relAttrIndex = tokens[idx].attrIndex('rel');\n\n\tif (targetAttrIndex < 0) {\n\t\ttokens[idx].attrPush(['target', '_blank']);\n\t} else {"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/Message/index.js",
        "code": {
            "renderContent": "} from '../constants';\n} from '../constants';\n\nconst renderContent = ({ text, system, quoted, me, blocks, attachments, attachmentResolver, mid, rid }) =>\nconst renderContent = ({ text, system, quoted, me, blocks, attachments, attachmentResolver, mid, rid }) =>",
            "time": "const resolveWebRTCEndCallMessage = ({ webRtcCallEndTs, ts, t }) => {\nconst resolveWebRTCEndCallMessage = ({ webRtcCallEndTs, ts, t }) => {\n\tconst callEndTime = resolveDate(webRtcCallEndTs);\n\tconst callEndTime = resolveDate(webRtcCallEndTs);\n\tconst callStartTime = resolveDate(ts);\n\tconst callStartTime = resolveDate(ts);\n\tconst callDuration = formatDistance(callEndTime, callStartTime);\n\tconst callDuration = formatDistance(callEndTime, callStartTime);\n\tconst time = format(callEndTime, isToday(callEndTime) ? 'HH:mm' : 'dddd HH:mm');\n\tconst time = format(callEndTime, isToday(callEndTime) ? 'HH:mm' : 'dddd HH:mm');\n\treturn t('call_end_time', { time, callDuration });",
            "getSystemMessageText": "const getSystemMessageText = ({ type, conversationFinishedMessage, transferData, u, webRtcCallEndTs, ts }, t) =>\nconst getSystemMessageText = ({ type, conversationFinishedMessage, transferData, u, webRtcCallEndTs, ts }, t) =>",
            "Message": "const Message = ({ avatarResolver, attachmentResolver = getAttachmentUrl, use, me, compact, className, style = {}, t, ...message }) => (\nconst Message = ({ avatarResolver, attachmentResolver = getAttachmentUrl, use, me, compact, className, style = {}, t, ...message }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/Message/stories.tsx",
        "code": {
            "defaultMessage": "} from '../constants';\n} from '../constants';\n\nconst defaultMessage = loremIpsum({ count: 1, units: 'sentences' });\nconst defaultMessage = loremIpsum({ count: 1, units: 'sentences' });",
            "defaultMessageExtra": "const defaultMessageExtra = loremIpsum({ count: 1, units: 'sentences' });\nconst defaultMessageExtra = loremIpsum({ count: 1, units: 'sentences' });"
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Messages/MessageTime/index.js",
        "code": {
            "timestamp": "const parseDate = (ts, t) => {\nconst parseDate = (ts, t) => {\n\tconst timestamp = new Date(ts).toISOString();\n\tconst timestamp = new Date(ts).toISOString();\n\treturn t('message_time', {\n\t\tval: new Date(timestamp),\n\t\tformatParams: {\n\t\t\tval: isToday(parseISO(timestamp)) ? { hour: 'numeric', minute: 'numeric' } : { day: 'numeric', hour: 'numeric', minute: 'numeric' },",
            "MessageTime": "const MessageTime = ({ ts, normal, inverted, className, style = {}, t }) => (\nconst MessageTime = ({ ts, normal, inverted, className, style = {}, t }) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Tooltip/index.js",
        "code": {
            "triggerBounds": "\t\tconst triggerBounds = event.target.getBoundingClientRect();\n\t\tconst triggerBounds = event.target.getBoundingClientRect();\n\t\tthis.setState({\n\t\t\ttooltip: (\n\t\t\t\t<Tooltip floating placement={placement} triggerBounds={triggerBounds}>",
            "TooltipConnection": "\tconst TooltipConnection = ({ tooltip, ...props }) => <Tooltip.Trigger content={tooltip}>{component(props)}</Tooltip.Trigger>;\n\tconst TooltipConnection = ({ tooltip, ...props }) => <Tooltip.Trigger content={tooltip}>{component(props)}</Tooltip.Trigger>;"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/App/index.tsx",
        "code": {
            "AppConnector": "const AppConnector = () => (\nconst AppConnector = () => (\n\t<div id='app'>\n\t\t<StoreProvider>\n\t\t\t<StoreConsumer>\n\t\t\t\t{({ config, user, triggered, gdpr, sound, undocked, minimized = true, expanded = false, alerts, modal, dispatch, iframe }) => (\n\t\t\t\t\t<App\n\t\t\t\t\t\tconfig={config}"
        },
        "depth_rank": 9
    },
    {
        "file": "App.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/App/App.tsx",
        "code": {
            "dispatchRestore": "\t\tconst dispatchRestore = () => dispatch({ minimized: false, undocked: false });\n\t\tconst dispatchRestore = () => dispatch({ minimized: false, undocked: false });",
            "dispatchEvent": "\t\tconst dispatchEvent = () => {\n\t\tconst dispatchEvent = () => {\n\t\t\tdispatchRestore();\n\t\t\tstore.off('storageSynced', dispatchEvent);\n\t\t};\n\t\tif (undocked) {\n\t\t\tstore.on('storageSynced', dispatchEvent);\n\t\t} else {",
            "poppedOut": "\t\tconst poppedOut = parse(window.location.search).mode === 'popout';\n\t\tconst poppedOut = parse(window.location.search).mode === 'popout';\n\t\tthis.setState({ poppedOut });"
        },
        "depth_rank": 9
    },
    {
        "file": "stories.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/FilesDropTarget/stories.tsx",
        "code": {
            "DummyContent": "const DummyContent = () => (\nconst DummyContent = () => (\n\t<div\n\t\tstyle={{\n\t\t\tdisplay: 'flex',\n\t\t\twidth: '100vw',\n\t\t\theight: '100vh',\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\t\t\tflexDirection: 'column',\n\t\t}}\n\t>\n\t\tDrop files here\n\t\t<span style={{ border: '1px solid', padding: '1rem', margin: '1rem' }}>Or into this span</span>",
            "inputRef": "const inputRef = createRef();\nconst inputRef = createRef();\nTriggeringBrowseAction.args = {\n\tchildren: (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\twidth: '100vw',\n\t\t\t\theight: '100vh',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\tflexDirection: 'column',\n\t\t\t}}\n\t\t>\n\t\t\t<Button onClick={() => inputRef.current.browse()}>Browse</Button>"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Alert/index.tsx",
        "code": {
            "Alert": "const Alert = ({\nconst Alert = ({\n\tid,\n\tonDismiss,\n\tsuccess,\n\twarning,\n\terror,\n\tcolor,\n\thideCloseButton = false,\n\tclassName,\n\tstyle = {},",
            "handleDismiss": "\tconst handleDismiss = useCallback(() => {\n\tconst handleDismiss = useCallback(() => {\n\t\tonDismiss?.(id);\n\t}, [id, onDismiss]);\n\n\tuseEffect(() => {\n\t\tlet dismissTimeout: ReturnType<typeof setTimeout> | undefined;\n\t\tif (Number.isFinite(timeout) && timeout > 0) {\n\t\t\tdismissTimeout = setTimeout(handleDismiss, timeout);\n\t\t}\n\t\treturn () => clearTimeout(dismissTimeout);\n\t}, [handleDismiss, timeout]);\n\n\treturn (\n\t\t<div\n\t\t\trole='alert'\n\t\t\tclassName={createClassName(styles, 'alert', { success, warning, error }, [className])}"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Composer/index.tsx",
        "code": {
            "texts": "\t\tconst items = Array.from(event.dataTransfer.items);\n\t\tconst items = Array.from(event.dataTransfer.items);\n\n\t\tconst files = items.filter((item) => item.kind === 'file' && /^image\\//.test(item.type)).map((item) => item.getAsFile());\n\t\tconst files = items.filter((item) => item.kind === 'file' && /^image\\//.test(item.type)).map((item) => item.getAsFile());\n\t\tif (files.length) {\n\t\t\tonUpload?.(files);\n\t\t\treturn;\n\t\t}\n\n\t\tconst texts = await Promise.all(\n\t\tconst texts = await Promise.all(\n\t\t\titems\n\t\t\t\t.filter((item) => item.kind === 'string' && /^text\\/plain/.test(item.type))\n\t\t\t\t.map((item) => new Promise<string>((resolve) => item.getAsString(resolve))),\n\t\t);\n\t\ttexts.forEach((text) => this.pasteText(parse(text)));\n\t};\n\n\thandleClick = () => {\n\t\tconst { handleEmojiClick } = this.props;\n\t\tconst { handleEmojiClick } = this.props;",
            "preCaretTextRange": "\t\t\tconst preCaretTextRange = doc.body.createTextRange?.();\n\t\t\tconst preCaretTextRange = doc.body.createTextRange?.();\n\t\t\tpreCaretTextRange?.moveToElementText?.(element);\n\t\t\tpreCaretTextRange?.setEndPoint?.('EndToEnd', textRange);\n\t\t\treturn preCaretTextRange?.text?.length ?? 0;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\thandleInputLock(locked: boolean) {\n\t\tthis.setState({ inputLock: locked });"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Form/SelectInput/index.tsx",
        "code": {
            "SelectOptions": "\tconst [internalValue, setInternalValue] = useState(value);\n\tconst [internalValue, setInternalValue] = useState(value);\n\n\tconst SelectOptions = Array.from(options).map(({ value, label }, key) => (\n\tconst SelectOptions = Array.from(options).map(({ value, label }, key) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Form/TextInput/index.tsx",
        "code": {
            "TextInput": "const TextInput = ({ name, value, placeholder, disabled, small, error, onChange, onInput, className, style = {}, ref }: TextInputProps) => (\nconst TextInput = ({ name, value, placeholder, disabled, small, error, onChange, onInput, className, style = {}, ref }: TextInputProps) => ("
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Form/FormScrollShadow/index.tsx",
        "code": {
            "observer": "\t\tconst observer = new IntersectionObserver(callback, {\n\t\tconst observer = new IntersectionObserver(callback, {\n\t\t\troot: document.getElementById('scrollShadow'),\n\t\t\trootMargin: '0px',\n\t\t\tthreshold: 0.1,\n\t\t});\n\t\tif (topRef.current) {\n\t\t\tobserver.observe(topRef.current);\n\t\t}\n\t\tif (bottomRef.current) {\n\t\t\tobserver.observe(bottomRef.current);\n\t\t}\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t};\n\t}, [bottomRef, topRef]);\n\n\treturn (\n\t\t<div id='scrollShadow' className={createClassName(styles, 'scrollShadow', { atTop, atBottom })}>"
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Form/DateInput/index.tsx",
        "code": {
            "DateInput": "const DateInput = ({\nconst DateInput = ({\n\tname,\n\tvalue,\n\tplaceholder,\n\tdisabled,\n\tsmall,\n\terror,\n\tonChange,\n\tonInput,\n\tonBlur,\n\tclassName,\n\tstyle = {},"
        },
        "depth_rank": 10
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/MarkdownBlock/index.tsx",
        "code": {
            "MarkdownBlock": "const MarkdownBlock = ({ text, emoticons }: { text: string; emoticons?: boolean }) => {\nconst MarkdownBlock = ({ text, emoticons }: { text: string; emoticons?: boolean }) => {\n\treturn (\n\t\t<Suspense fallback={<div>loading...</div>}>"
        },
        "depth_rank": 9
    },
    {
        "file": "manager.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Modal/manager.js",
        "code": {
            "handleButton": "\t\t\tconst handleButton = () => () => {\n\t\t\tconst handleButton = () => () => {\n\t\t\t\tstore.setState({ modal: null });"
        },
        "depth_rank": 9
    },
    {
        "file": "CallNotification.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Calls/CallNotification.tsx",
        "code": {
            "callInNewTab": "const CallNotification = ({ callProvider, callerUsername, url, dispatch, time, rid, callId, t }: CallNotificationProps) => {\nconst CallNotification = ({ callProvider, callerUsername, url, dispatch, time, rid, callId, t }: CallNotificationProps) => {\n\tconst [show, setShow] = useState(true);\n\tconst [show, setShow] = useState(true);\n\n\tconst callInNewTab = async () => {\n\tconst callInNewTab = async () => {\n\t\tconst { token } = store.state;\n\t\tconst { token } = store.state;",
            "declineClick": "\tconst declineClick = async () => {\n\tconst declineClick = async () => {\n\t\tawait Livechat.updateCallStatus(CallStatus.DECLINED, rid, callId);\n\t\tawait Livechat.notifyCallDeclined(rid);\n\t\tdispatch({\n\t\t\tincomingCallAlert: null,\n\t\t\tongoingCall: {\n\t\t\t\tcallStatus: CallStatus.DECLINED,\n\t\t\t\ttime: { time },"
        },
        "depth_rank": 9
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Popover/index.js",
        "code": {
            "PopoverOverlay": "const PopoverContext = createContext();\nconst PopoverContext = createContext();\n\nconst PopoverOverlay = ({ children, className, visible, ...props }) => (\nconst PopoverOverlay = ({ children, className, visible, ...props }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Screen/index.js",
        "code": {
            "ChatButton": "const ChatButton = ({ text, minimized, badge, onClick, triggered = false, agent }) => (\nconst ChatButton = ({ text, minimized, badge, onClick, triggered = false, agent }) => ("
        },
        "depth_rank": 9
    },
    {
        "file": "Header.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/components/Screen/Header.tsx",
        "code": {
            "ScreenHeader": "const ScreenHeader = ({\nconst ScreenHeader = ({\n\talerts,\n\tagent,\n\tnotificationsEnabled,\n\tminimized,\n\texpanded,\n\twindowed,\n\tonDismissAlert,\n\tonEnableNotifications,\n\tonDisableNotifications,\n\tonMinimize,\n\tonRestore,\n\tonOpenWindow,\n\tqueueInfo,\n\ttitle,\n}: screenHeaderProps) => {",
            "headerTitle": "\tconst headerTitle = () => {\n\tconst headerTitle = () => {\n\t\tif (agent?.name) {\n\t\t\treturn agent.name;\n\t\t}\n\n\t\tif (queueInfo?.spot && queueInfo.spot > 0) {\n\t\t\treturn t('waiting_queue');\n\t\t}\n\n\t\treturn title;\n\t};\n\n\treturn (\n\t\t<Header\n\t\t\tref={headerRef}"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/store/index.tsx",
        "code": {
            "sessionId": "\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst sessionId = sessionStorage.getItem('sessionId');\n\tconst { openSessionIds = [] } = store.state;\n\tconst { openSessionIds = [] } = store.state;"
        },
        "depth_rank": 8
    },
    {
        "file": "Store.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/livechat/src/store/Store.ts",
        "code": {
            "getLocalStorage": "function getLocalStorage() {\nfunction getLocalStorage() {\n\ttry {\n\t\treturn window.localStorage;\n\t} catch (_) {",
            "stored": "\t\tconst emitter = mitt();\n\t\tconst emitter = mitt();\n\t\tthis.all = emitter.all;\n\t\tthis.on = emitter.on;\n\t\tthis.off = emitter.off;\n\t\tthis.emit = emitter.emit;\n\n\t\tthis.localStorageKey = localStorageKey;\n\t\tthis.dontPersist = dontPersist;\n\n\t\tlet storedState;\n\n\t\ttry {\n\t\t\tconst stored = localStorage.getItem(this.localStorageKey);\n\t\t\tconst stored = localStorage.getItem(this.localStorageKey);\n\t\t\tstoredState = stored ? JSON.parse(stored) : {};",
            "persistable": "\t\t\tconst storedState = JSON.parse(e.newValue);\n\t\t\tconst storedState = JSON.parse(e.newValue);\n\t\t\tthis.setStoredState(storedState);\n\t\t\tthis.emit('storageSynced');\n\t\t});\n\t}\n\n\tget state() {\n\t\treturn this._state;\n\t}\n\n\tpersist() {\n\t\tconst persistable = { ...this._state };\n\t\tconst persistable = { ...this._state };",
            "prevState": "\t\tconst prevState = this._state;\n\t\tconst prevState = this._state;\n\n\t\tconst nonPeristable: Record<string, unknown> = {};\n\t\tconst nonPeristable: Record<string, unknown> = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "omnichannel.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/omnichannel.ts",
        "code": {
            "GETLivechatRoomsParamsSchema": "const GETLivechatRoomsParamsSchema = {\nconst GETLivechatRoomsParamsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tcount: {\n\t\t\ttype: 'number',\n\t\t\tnullable: true,\n\t\t},\n\t\toffset: {\n\t\t\ttype: 'number',\n\t\t\tnullable: true,\n\t\t},\n\t\tsort: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tquery: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tfields: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tcreatedAt: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tcustomFields: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tclosedAt: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tagents: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t\tnullable: true,\n\t\t},\n\t\troomName: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tdepartmentId: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\topen: {\n\t\t\tanyOf: [\n\t\t\t\t{ type: 'string', nullable: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "customSounds.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/customSounds.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype CustomSoundsList = PaginatedRequest<{ query: string }>;"
        },
        "depth_rank": 8
    },
    {
        "file": "statistics.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/statistics.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype StatisticsProps = { refresh?: 'true' | 'false' };"
        },
        "depth_rank": 8
    },
    {
        "file": "permissions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/permissions.ts",
        "code": {
            "permissionUpdatePropsSchema": "const permissionUpdatePropsSchema = {\nconst permissionUpdatePropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tpermissions: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\t_id: { type: 'string' },"
        },
        "depth_rank": 8
    },
    {
        "file": "users.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype UsersInfo = { userId?: IUser['_id']; username?: IUser['username'] };"
        },
        "depth_rank": 8
    },
    {
        "file": "roles.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/roles.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype RoleDeleteProps = { roleId: IRole['_id'] };"
        },
        "depth_rank": 8
    },
    {
        "file": "customUserStatus.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/customUserStatus.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype CustomUserStatusListProps = PaginatedRequest<{ query: string }>;"
        },
        "depth_rank": 8
    },
    {
        "file": "email-inbox.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/email-inbox.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype EmailInboxListProps = PaginatedRequest<{ query?: string }>;"
        },
        "depth_rank": 8
    },
    {
        "file": "chat.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/chat.ts",
        "code": {
            "ChatPostMessageSchema": "const ChatPostMessageSchema = {\nconst ChatPostMessageSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\troomId: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{ type: 'string' },"
        },
        "depth_rank": 8
    },
    {
        "file": "auth.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/auth.ts",
        "code": {
            "loginPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\n\nconst loginPropsSchema = {\nconst loginPropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuser: { type: 'object', nullable: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "rooms.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/rooms.ts",
        "code": {
            "ajv": "const ajv = new Ajv({\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\ntype RoomsAutoCompleteChannelAndPrivateProps = { selector: string };"
        },
        "depth_rank": 8
    },
    {
        "file": "AutotranslateSaveSettingsParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/autotranslate/AutotranslateSaveSettingsParamsPOST.ts",
        "code": {
            "AutotranslateSaveSettingsParamsPostSchema": "const AutotranslateSaveSettingsParamsPostSchema = {\nconst AutotranslateSaveSettingsParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\troomId: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tfield: {\n\t\t\tenum: ['autoTranslate', 'autoTranslateLanguage'],\n\t\t},\n\t\tvalue: {\n\t\t\tanyOf: [{ type: 'boolean' }, { type: 'string' }],"
        },
        "depth_rank": 9
    },
    {
        "file": "GetImportProgressParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/GetImportProgressParamsGET.ts",
        "code": {
            "GetImportProgressParamsGETSchema": "const GetImportProgressParamsGETSchema = {\nconst GetImportProgressParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetImportFileDataParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/GetImportFileDataParamsGET.ts",
        "code": {
            "GetImportFileDataParamsGETSchema": "const GetImportFileDataParamsGETSchema = {\nconst GetImportFileDataParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "DownloadPendingFilesParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/DownloadPendingFilesParamsPOST.ts",
        "code": {
            "DownloadPendingFilesParamsPOSTSchema": "const DownloadPendingFilesParamsPOSTSchema = {\nconst DownloadPendingFilesParamsPOSTSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "DownloadPendingAvatarsParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/DownloadPendingAvatarsParamsPOST.ts",
        "code": {
            "DownloadPendingAvatarsParamsPOSTSchema": "const DownloadPendingAvatarsParamsPOSTSchema = {\nconst DownloadPendingAvatarsParamsPOSTSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "StartImportParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/StartImportParamsPOST.ts",
        "code": {
            "StartImportParamsPostSchema": "const StartImportParamsPostSchema = {\nconst StartImportParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tinput: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tusers: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tuser_id: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ImportersListParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/ImportersListParamsGET.ts",
        "code": {
            "ImportersListParamsGETSchema": "const ImportersListParamsGETSchema = {\nconst ImportersListParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetLatestImportOperationsParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/GetLatestImportOperationsParamsGET.ts",
        "code": {
            "GetLatestImportOperationsParamsGETSchema": "const GetLatestImportOperationsParamsGETSchema = {\nconst GetLatestImportOperationsParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetCurrentImportOperationParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/GetCurrentImportOperationParamsGET.ts",
        "code": {
            "GetCurrentImportOperationParamsGETSchema": "const GetCurrentImportOperationParamsGETSchema = {\nconst GetCurrentImportOperationParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "ImportAddUsersParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/import/ImportAddUsersParamsPOST.ts",
        "code": {
            "ImportAddUsersParamsPostSchema": "const ImportAddUsersParamsPostSchema = {\nconst ImportAddUsersParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tusers: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tproperties: {\n\t\t\t\t\tusername: { type: 'string', nullable: true },"
        },
        "depth_rank": 9
    },
    {
        "file": "IntegrationsHistoryProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/integrations/IntegrationsHistoryProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "integrationsHistorySchema": "const integrationsHistorySchema = {\nconst integrationsHistorySchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tid: { type: 'string', nullable: false, minLength: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersSetPreferenceParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UsersSetPreferenceParamsPOST.ts",
        "code": {
            "UsersSetPreferencesParamsPostSchema": "const UsersSetPreferencesParamsPostSchema = {\nconst UsersSetPreferencesParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuserId: {\n\t\t\ttype: 'string',\n\t\t\tnullable: true,\n\t\t},\n\t\tdata: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tnewRoomNotification: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tnewMessageNotification: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tclockMode: {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tuseEmojis: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tconvertAsciiEmoji: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\talsoSendThreadToChannel: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['default', 'always', 'never'],\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsaveMobileBandwidth: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tcollapseMediaByDefault: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tautoImageLoad: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\temailNotificationMode: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tunreadAlert: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tnotificationsSoundVolume: {\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdesktopNotifications: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tpushNotifications: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tenableAutoAway: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thighlights: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tshowThreadsInMainChannel: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdesktopNotificationRequireInteraction: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideUsernames: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideRoles: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdisplayAvatars: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\thideFlexTab: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsendOnEnter: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tlanguage: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarShowFavorites: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarShowUnread: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarSortby: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarViewMode: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarDisplayAvatar: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tsidebarGroupByType: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tmuteFocusedConversations: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tnullable: true,\n\t\t\t\t},\n\t\t\t\tdontAskAgainList: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\taction: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UserCreateParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UserCreateParamsPOST.ts",
        "code": {
            "userCreateParamsPostSchema": "const userCreateParamsPostSchema = {\nconst userCreateParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\temail: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UserSetActiveStatusParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UserSetActiveStatusParamsPOST.ts",
        "code": {
            "UserCreateParamsPostSchema": "const UserCreateParamsPostSchema = {\nconst UserCreateParamsPostSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tuserId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersGetAvatarSuggestionParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UsersGetAvatarSuggestionParamsGET.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "UsersGetAvatarSuggestionParamsGETSchema": "const UsersGetAvatarSuggestionParamsGETSchema = {\nconst UsersGetAvatarSuggestionParamsGETSchema = {\n\ttype: 'object',\n\tproperties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersSendConfirmationEmailParamsPOST.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UsersSendConfirmationEmailParamsPOST.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersCheckUsernameAvailabilityParamsGET.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/users/UsersCheckUsernameAvailabilityParamsGET.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsGetAllUserMentionsByChannelProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsGetAllUserMentionsByChannelProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsModeratorsProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsModeratorsProps.ts",
        "code": {
            "channelsModeratorsPropsSchema": "const channelsModeratorsPropsSchema = {\nconst channelsModeratorsPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\troomId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsListProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsListProps.ts",
        "code": {
            "channelsListPropsSchema": "const channelsListPropsSchema = {};\nconst channelsListPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsConvertToTeamProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsConvertToTeamProps.ts",
        "code": {
            "channelsConvertToTeamPropsSchema": "const channelsConvertToTeamPropsSchema = {\nconst channelsConvertToTeamPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tchannelId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsImagesProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsImagesProps.ts",
        "code": {
            "channelsImagesPropsSchema": "const channelsImagesPropsSchema = {};\nconst channelsImagesPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsHistoryProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsHistoryProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsMessagesProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsMessagesProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsSetReadOnlyProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/channels/ChannelsSetReadOnlyProps.ts",
        "code": {
            "channelsSetReadOnlyPropsSchema": "const channelsSetReadOnlyPropsSchema = {\nconst channelsSetReadOnlyPropsSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\troomId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "DmMembersProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/dm/DmMembersProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "DmMessagesProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/dm/DmMessagesProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "DmFileProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/dm/DmFileProps.ts",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "FederationVerifyMatrixIdProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/federation/FederationVerifyMatrixIdProps.ts",
        "code": {
            "FederationVerifyMatrixIdPropsSchema": "const FederationVerifyMatrixIdPropsSchema = {\nconst FederationVerifyMatrixIdPropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tmatrixIds: {\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsCreateProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsCreateProps.ts",
        "code": {
            "GroupsCreatePropsSchema": "const GroupsCreatePropsSchema = {\nconst GroupsCreatePropsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tname: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tmembers: {\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsMembersProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsMembersProps.ts",
        "code": {
            "GroupsMembersPropsSchema": "const GroupsMembersPropsSchema = withGroupBaseProperties({\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\n\toffset: {\n\t\ttype: 'number',\n\t\tnullable: true,\n\t},\n\tcount: {\n\t\ttype: 'number',\n\t\tnullable: true,\n\t},\n\tfilter: {\n\t\ttype: 'string',\n\t\tnullable: true,\n\t},\n\tstatus: {\n\t\ttype: 'array',\n\t\titems: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsListProps.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/src/v1/groups/GroupsListProps.ts",
        "code": {
            "groupsListPropsSchema": "const groupsListPropsSchema = {};\nconst groupsListPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "chat.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/chat.js",
        "code": {
            "ChatPostMessageSchema": "const ChatPostMessageSchema = {\nconst ChatPostMessageSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                roomId: {\n                    oneOf: [\n                        { type: 'string' },"
        },
        "depth_rank": 8
    },
    {
        "file": "auth.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/auth.js",
        "code": {
            "loginPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst loginPropsSchema = {\nconst loginPropsSchema = {\n    type: 'object',\n    properties: {\n        user: { type: 'object', nullable: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "permissions.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/permissions.js",
        "code": {
            "permissionUpdatePropsSchema": "const permissionUpdatePropsSchema = {\nconst permissionUpdatePropsSchema = {\n    type: 'object',\n    properties: {\n        permissions: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    _id: { type: 'string' },"
        },
        "depth_rank": 8
    },
    {
        "file": "omnichannel.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/omnichannel.js",
        "code": {
            "GETLivechatRoomsParamsSchema": "const GETLivechatRoomsParamsSchema = {\nconst GETLivechatRoomsParamsSchema = {\n    type: 'object',\n    properties: {\n        count: {\n            type: 'number',\n            nullable: true,\n        },\n        offset: {\n            type: 'number',\n            nullable: true,\n        },\n        sort: {\n            type: 'string',\n            nullable: true,\n        },\n        query: {\n            type: 'string',\n            nullable: true,\n        },\n        fields: {\n            type: 'string',\n            nullable: true,\n        },\n        createdAt: {\n            type: 'string',\n            nullable: true,\n        },\n        customFields: {\n            type: 'string',\n            nullable: true,\n        },\n        closedAt: {\n            type: 'string',\n            nullable: true,\n        },\n        agents: {\n            type: 'array',\n            items: {\n                type: 'string',\n            },\n            nullable: true,\n        },\n        roomName: {\n            type: 'string',\n            nullable: true,\n        },\n        departmentId: {\n            type: 'string',\n            nullable: true,\n        },\n        open: {\n            anyOf: [\n                { type: 'string', nullable: true },"
        },
        "depth_rank": 8
    },
    {
        "file": "AutotranslateSaveSettingsParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/autotranslate/AutotranslateSaveSettingsParamsPOST.js",
        "code": {
            "AutotranslateSaveSettingsParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst AutotranslateSaveSettingsParamsPostSchema = {\nconst AutotranslateSaveSettingsParamsPostSchema = {\n    type: 'object',\n    properties: {\n        roomId: {\n            type: 'string',\n        },\n        field: {\n            enum: ['autoTranslate', 'autoTranslateLanguage'],\n        },\n        value: {\n            anyOf: [{ type: 'boolean' }, { type: 'string' }],"
        },
        "depth_rank": 9
    },
    {
        "file": "DownloadPendingFilesParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/DownloadPendingFilesParamsPOST.js",
        "code": {
            "DownloadPendingFilesParamsPOSTSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst DownloadPendingFilesParamsPOSTSchema = {\nconst DownloadPendingFilesParamsPOSTSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "ImportAddUsersParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/ImportAddUsersParamsPOST.js",
        "code": {
            "ImportAddUsersParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst ImportAddUsersParamsPostSchema = {\nconst ImportAddUsersParamsPostSchema = {\n    type: 'object',\n    properties: {\n        users: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    username: { type: 'string', nullable: true },"
        },
        "depth_rank": 9
    },
    {
        "file": "ImportersListParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/ImportersListParamsGET.js",
        "code": {
            "ImportersListParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst ImportersListParamsGETSchema = {\nconst ImportersListParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "DownloadPendingAvatarsParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/DownloadPendingAvatarsParamsPOST.js",
        "code": {
            "DownloadPendingAvatarsParamsPOSTSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst DownloadPendingAvatarsParamsPOSTSchema = {\nconst DownloadPendingAvatarsParamsPOSTSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "StartImportParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/StartImportParamsPOST.js",
        "code": {
            "StartImportParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst StartImportParamsPostSchema = {\nconst StartImportParamsPostSchema = {\n    type: 'object',\n    properties: {\n        input: {\n            type: 'object',\n            properties: {\n                users: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            user_id: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GetImportFileDataParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/GetImportFileDataParamsGET.js",
        "code": {
            "GetImportFileDataParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetImportFileDataParamsGETSchema = {\nconst GetImportFileDataParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetImportProgressParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/GetImportProgressParamsGET.js",
        "code": {
            "GetImportProgressParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetImportProgressParamsGETSchema = {\nconst GetImportProgressParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetLatestImportOperationsParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/GetLatestImportOperationsParamsGET.js",
        "code": {
            "GetLatestImportOperationsParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetLatestImportOperationsParamsGETSchema = {\nconst GetLatestImportOperationsParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "GetCurrentImportOperationParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/import/GetCurrentImportOperationParamsGET.js",
        "code": {
            "GetCurrentImportOperationParamsGETSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GetCurrentImportOperationParamsGETSchema = {\nconst GetCurrentImportOperationParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "IntegrationsHistoryProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/integrations/IntegrationsHistoryProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "integrationsHistorySchema": "const integrationsHistorySchema = {\nconst integrationsHistorySchema = {\n    type: 'object',\n    properties: {\n        id: { type: 'string', nullable: false, minLength: 1 },"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersGetAvatarSuggestionParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UsersGetAvatarSuggestionParamsGET.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });",
            "UsersGetAvatarSuggestionParamsGETSchema": "const UsersGetAvatarSuggestionParamsGETSchema = {\nconst UsersGetAvatarSuggestionParamsGETSchema = {\n    type: 'object',\n    properties: {},"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersSendConfirmationEmailParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UsersSendConfirmationEmailParamsPOST.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersSetPreferenceParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UsersSetPreferenceParamsPOST.js",
        "code": {
            "UsersSetPreferencesParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst UsersSetPreferencesParamsPostSchema = {\nconst UsersSetPreferencesParamsPostSchema = {\n    type: 'object',\n    properties: {\n        userId: {\n            type: 'string',\n            nullable: true,\n        },\n        data: {\n            type: 'object',\n            properties: {\n                newRoomNotification: {\n                    type: 'string',\n                    nullable: true,\n                },\n                newMessageNotification: {\n                    type: 'string',\n                    nullable: true,\n                },\n                clockMode: {\n                    type: 'number',\n                    nullable: true,\n                },\n                useEmojis: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                convertAsciiEmoji: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                alsoSendThreadToChannel: {\n                    type: 'string',\n                    enum: ['default', 'always', 'never'],\n                    nullable: true,\n                },\n                saveMobileBandwidth: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                collapseMediaByDefault: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                autoImageLoad: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                emailNotificationMode: {\n                    type: 'string',\n                    nullable: true,\n                },\n                unreadAlert: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                notificationsSoundVolume: {\n                    type: 'number',\n                    nullable: true,\n                },\n                desktopNotifications: {\n                    type: 'string',\n                    nullable: true,\n                },\n                pushNotifications: {\n                    type: 'string',\n                    nullable: true,\n                },\n                enableAutoAway: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                highlights: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                    },\n                    nullable: true,\n                },\n                showThreadsInMainChannel: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                desktopNotificationRequireInteraction: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideUsernames: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideRoles: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                displayAvatars: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                hideFlexTab: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sendOnEnter: {\n                    type: 'string',\n                    nullable: true,\n                },\n                language: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarShowFavorites: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarShowUnread: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarSortby: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarViewMode: {\n                    type: 'string',\n                    nullable: true,\n                },\n                sidebarDisplayAvatar: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                sidebarGroupByType: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                muteFocusedConversations: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                dontAskAgainList: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            action: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UserSetActiveStatusParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UserSetActiveStatusParamsPOST.js",
        "code": {
            "UserCreateParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst UserCreateParamsPostSchema = {\nconst UserCreateParamsPostSchema = {\n    type: 'object',\n    properties: {\n        userId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UserCreateParamsPOST.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UserCreateParamsPOST.js",
        "code": {
            "userCreateParamsPostSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst userCreateParamsPostSchema = {\nconst userCreateParamsPostSchema = {\n    type: 'object',\n    properties: {\n        email: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "UsersCheckUsernameAvailabilityParamsGET.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/users/UsersCheckUsernameAvailabilityParamsGET.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsGetAllUserMentionsByChannelProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsGetAllUserMentionsByChannelProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsSetReadOnlyProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsSetReadOnlyProps.js",
        "code": {
            "channelsSetReadOnlyPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsSetReadOnlyPropsSchema = {\nconst channelsSetReadOnlyPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                roomId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsListProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsListProps.js",
        "code": {
            "channelsListPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst channelsListPropsSchema = {};\nconst channelsListPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsMessagesProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsMessagesProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsConvertToTeamProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsConvertToTeamProps.js",
        "code": {
            "channelsConvertToTeamPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsConvertToTeamPropsSchema = {\nconst channelsConvertToTeamPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                channelId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsModeratorsProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsModeratorsProps.js",
        "code": {
            "channelsModeratorsPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst channelsModeratorsPropsSchema = {\nconst channelsModeratorsPropsSchema = {\n    oneOf: [\n        {\n            type: 'object',\n            properties: {\n                roomId: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsImagesProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsImagesProps.js",
        "code": {
            "channelsImagesPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst channelsImagesPropsSchema = {};\nconst channelsImagesPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "ChannelsHistoryProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/channels/ChannelsHistoryProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "DmMessagesProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/dm/DmMessagesProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "DmFileProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/dm/DmFileProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "DmMembersProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/dm/DmMembersProps.js",
        "code": {
            "ajv": "const ajv = new Ajv({ coerceTypes: true });\nconst ajv = new Ajv({ coerceTypes: true });"
        },
        "depth_rank": 9
    },
    {
        "file": "FederationVerifyMatrixIdProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/federation/FederationVerifyMatrixIdProps.js",
        "code": {
            "FederationVerifyMatrixIdPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst FederationVerifyMatrixIdPropsSchema = {\nconst FederationVerifyMatrixIdPropsSchema = {\n    type: 'object',\n    properties: {\n        matrixIds: {\n            type: 'array',\n            items: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "VideoConfListProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/videoConference/VideoConfListProps.js",
        "code": {
            "videoConfListPropsSchema": "const ajv = new Ajv();\nconst ajv = new Ajv();\nconst videoConfListPropsSchema = {\nconst videoConfListPropsSchema = {\n    type: 'object',\n    properties: {\n        roomId: {\n            type: 'string',\n            nullable: false,\n        },\n        offset: { type: 'number', nullable: true },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsMembersProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsMembersProps.js",
        "code": {
            "GroupsMembersPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\nconst GroupsMembersPropsSchema = withGroupBaseProperties({\n    offset: {\n        type: 'number',\n        nullable: true,\n    },\n    count: {\n        type: 'number',\n        nullable: true,\n    },\n    filter: {\n        type: 'string',\n        nullable: true,\n    },\n    status: {\n        type: 'array',\n        items: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsCreateProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsCreateProps.js",
        "code": {
            "GroupsCreatePropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst GroupsCreatePropsSchema = {\nconst GroupsCreatePropsSchema = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n        },\n        members: {\n            type: 'array',\n            items: { type: 'string' },"
        },
        "depth_rank": 9
    },
    {
        "file": "GroupsListProps.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/rest-typings/dist/v1/groups/GroupsListProps.js",
        "code": {
            "groupsListPropsSchema": "const ajv = new Ajv({\nconst ajv = new Ajv({\n    coerceTypes: true,\n});\nconst groupsListPropsSchema = {};\nconst groupsListPropsSchema = {};"
        },
        "depth_rank": 9
    },
    {
        "file": "LocalBroker.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/core-services/src/LocalBroker.ts",
        "code": {
            "instances": "\t\tconst instances = await InstanceStatus.find({}, { projection: { _id: 1 } }).toArray();\n\t\tconst instances = await InstanceStatus.find({}, { projection: { _id: 1 } }).toArray();"
        },
        "depth_rank": 7
    },
    {
        "file": "proxify.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/core-services/dist/lib/proxify.js",
        "code": {
            "proxifyWithWait": "function proxifyWithWait(namespace) {\nfunction proxifyWithWait(namespace) {\n    return new Proxy({}, handler(namespace, true));",
            "proxify": "function proxify(namespace) {\nfunction proxify(namespace) {\n    return new Proxy({}, handler(namespace, false));"
        },
        "depth_rank": 8
    },
    {
        "file": "LocalBroker.test.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/core-services/tests/LocalBroker.test.ts",
        "code": {
            "instance": "\t\t\tconst testListener = jest.fn();\n\t\t\tconst testListener = jest.fn();\n\t\t\tconst testListener2 = jest.fn();\n\t\t\tconst testListener2 = jest.fn();\n\t\t\tconst test2Listener = jest.fn();\n\t\t\tconst test2Listener = jest.fn();\n\t\t\tinstance.onEvent('test' as any, testListener);\n\t\t\tinstance.onEvent('test' as any, testListener2);\n\t\t\tinstance.onEvent('test2' as any, test2Listener);\n\n\t\t\tconst broker = new LocalBroker();\n\t\t\tconst broker = new LocalBroker();\n\t\t\tbroker.createService(instance);\n\t\t\tbroker.broadcast('test' as any, 'test');\n\t\t\tbroker.broadcast('test2' as any, 'test2');\n\n\t\t\texpect(testListener).toBeCalledWith('test');\n\t\t\texpect(testListener2).toBeCalledWith('test');\n\t\t\texpect(test2Listener).toBeCalledWith('test2');\n\t\t});\n\n\t\tit('should NOT call any instance event anymore after the service being destroyed', () => {\n\t\t\tconst instance = new (class extends ServiceClass {})();\n\t\t\tconst instance = new (class extends ServiceClass {})();"
        },
        "depth_rank": 7
    },
    {
        "file": "ServiceClass.test.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/core-services/tests/ServiceClass.test.ts",
        "code": {
            "instance": "\t\t\tconst instance = new (class extends ServiceClass {})();\n\t\t\tconst instance = new (class extends ServiceClass {})();",
            "listener1": "\t\t\tconst listener1 = () => {};\n\t\t\tconst listener1 = () => {};",
            "listener2": "\t\t\tconst listener2 = () => {};\n\t\t\tconst listener2 = () => {};",
            "listener3": "\t\t\tconst listener3 = () => {};\n\t\t\tconst listener3 = () => {};"
        },
        "depth_rank": 7
    },
    {
        "file": "parsers.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/server-fetch/src/parsers.ts",
        "code": {
            "headers": "\tconst headers = (options.headers as { [k: string]: string }) ?? {};\n\tconst headers = (options.headers as { [k: string]: string }) ?? {};"
        },
        "depth_rank": 7
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/server-fetch/src/index.ts",
        "code": {
            "timeoutId": "function getTimeout(timeout?: number) {\nfunction getTimeout(timeout?: number) {\n\tconst controller = new AbortController();\n\tconst controller = new AbortController();\n\tconst timeoutId = setTimeout(() => controller.abort(), timeout ?? 20000);\n\tconst timeoutId = setTimeout(() => controller.abort(), timeout ?? 20000);\n\n\treturn { controller, timeoutId };",
            "agent": "\tconst agent = getFetchAgent(input, allowSelfSignedCerts);\n\tconst agent = getFetchAgent(input, allowSelfSignedCerts);\n\tconst { controller, timeoutId } = getTimeout(options?.timeout);\n\tconst { controller, timeoutId } = getTimeout(options?.timeout);"
        },
        "depth_rank": 7
    },
    {
        "file": "wrapExceptions.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/tools/src/wrapExceptions.ts",
        "code": {
            "value": "\tconst doSuppress = (errorWrapper?: (error: any) => void) => {\n\tconst doSuppress = (errorWrapper?: (error: any) => void) => {\n\t\ttry {\n\t\t\tconst value = getter();\n\t\t\tconst value = getter();\n\t\t\tif (isPromise(value)) {\n\t\t\t\treturn value.catch((error) => errorWrapper?.(error));\n\t\t\t}\n\n\t\t\treturn value;\n\t\t} catch (error) {"
        },
        "depth_rank": 7
    },
    {
        "file": "pick.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/tools/dist/pick.js",
        "code": {
            "pick": "function pick(object, ...attributes) {\nfunction pick(object, ...attributes) {\n    return {\n        ...attributes.reduce((data, key) => ({\n            ...data,\n            ...(key in object ? { [key]: object[key] } : {}),"
        },
        "depth_rank": 7
    },
    {
        "file": "startPatchRelease.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/release-action/src/startPatchRelease.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\tawait checkoutBranch(baseRef);\n\n\t// get version from main package\n\tconst { version, name: mainPkgName } = await readPackageJson(mainPackagePath);\n\tconst { version, name: mainPkgName } = await readPackageJson(mainPackagePath);"
        },
        "depth_rank": 7
    },
    {
        "file": "publishRelease.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/release-action/src/publishRelease.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\t// TODO do this only if publishing to npm\n\tawait createNpmFile();\n\n\tif (baseRef) {\n\t\tawait checkoutBranch(baseRef);\n\t}\n\n\tconst { version: currentVersion } = await readPackageJson(cwd);\n\tconst { version: currentVersion } = await readPackageJson(cwd);"
        },
        "depth_rank": 7
    },
    {
        "file": "fixWorkspaceVersionsBeforePublish.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/release-action/src/fixWorkspaceVersionsBeforePublish.ts",
        "code": {
            "dependencies": "\tconst workspaceVersions = new Map();\n\tconst workspaceVersions = new Map();\n\tfor await (const workspace of workspaces) {\n\tfor await (const workspace of workspaces) {\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tworkspaceVersions.set(workspace.name, packageJson.version);\n\t}\n\n\t// Replace any `workspace:^` version ranges with the actual version.\n\tfor await (const workspace of workspaces) {\n\tfor await (const workspace of workspaces) {\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\t\tconst packageJson = await readPackageJson(workspace.location);\n\n\t\tfor (const dependencyType of DEPENDENCY_TYPES) {\n\t\tfor (const dependencyType of DEPENDENCY_TYPES) {\n\t\t\tconst dependencies = Object.keys(packageJson[dependencyType] ?? {});\n\t\t\tconst dependencies = Object.keys(packageJson[dependencyType] ?? {});"
        },
        "depth_rank": 7
    },
    {
        "file": "updatePRDescription.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/release-action/src/updatePRDescription.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\t// generate change logs from changesets\n\tawait exec('yarn', ['changeset', 'version']);\n\n\t// get version from main package\n\tconst { version: newVersion } = await readPackageJson(mainPackagePath);\n\tconst { version: newVersion } = await readPackageJson(mainPackagePath);",
            "result": "\tconst result = await octokit.rest.pulls.get({\n\tconst result = await octokit.rest.pulls.get({\n\t\tpull_number: github.context.issue.number,\n\t\tbody: releaseBody,\n\t\t...github.context.repo,\n\t});\n\n\tconst { body: originalBody = '' } = result.data;\n\tconst { body: originalBody = '' } = result.data;"
        },
        "depth_rank": 7
    },
    {
        "file": "bumpNextVersion.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/release-action/src/bumpNextVersion.ts",
        "code": {
            "octokit": "\tconst octokit = setupOctokit(githubToken);\n\tconst octokit = setupOctokit(githubToken);\n\n\t// TODO do this only if publishing to npm\n\tawait createNpmFile();\n\n\t// TODO need to check if there is any change to 'main package', if not, there is no need to enter rc\n\t// and instead a normal release of the other packages should be done\n\n\tconst { version: currentVersion } = await readPackageJson(cwd);\n\tconst { version: currentVersion } = await readPackageJson(cwd);"
        },
        "depth_rank": 7
    },
    {
        "file": "MockedAppRootBuilder.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/mock-providers/src/MockedAppRootBuilder.tsx",
        "code": {
            "outerFn": "\t\tconst innerFn = this.server.callEndpoint;\n\t\tconst innerFn = this.server.callEndpoint;\n\n\t\tconst outerFn = <TMethod extends Method, TPathPattern extends PathPattern>(args: {\n\t\tconst outerFn = <TMethod extends Method, TPathPattern extends PathPattern>(args: {\n\t\t\tmethod: TMethod;\n\t\t\tpathPattern: TPathPattern;\n\t\t\tkeys: UrlParams<TPathPattern>;\n\t\t\tparams: OperationParams<TMethod, TPathPattern>;\n\t\t}): Promise<Serialized<OperationResult<TMethod, TPathPattern>>> => {",
            "queryClient": "\t\tconst innerFn = this.authorization.queryRole;\n\t\tconst innerFn = this.authorization.queryRole;\n\n\t\tconst outerFn = (\n\t\tconst outerFn = (\n\t\t\tinnerRole: string | ObjectId,\n\t\t\tinnerScope?: string | undefined,\n\t\t\tinnerIgnoreSubscriptions?: boolean | undefined,\n\t\t): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => boolean] => {\n\t\t\tif (innerRole === role) {\n\t\t\t\treturn [() => () => undefined, () => true];\n\t\t\t}\n\n\t\t\treturn innerFn(innerRole, innerScope, innerIgnoreSubscriptions);\n\t\t};\n\n\t\tthis.authorization.queryRole = outerFn;\n\n\t\treturn this;\n\t}\n\n\twithSetting(id: string, value: SettingValue): this {\n\t\tconst setting = {\n\t\tconst setting = {\n\t\t\t_id: id,\n\t\t\tvalue,\n\t\t} as ISetting;\n\n\t\tconst innerFn = this.settings.querySetting;\n\t\tconst innerFn = this.settings.querySetting;\n\n\t\tconst outerFn = (\n\t\tconst outerFn = (\n\t\t\tinnerSetting: string,\n\t\t): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => ISetting | undefined] => {\n\t\t\tif (innerSetting === id) {\n\t\t\t\treturn [() => () => undefined, () => setting];\n\t\t\t}\n\n\t\t\treturn innerFn(innerSetting);\n\t\t};\n\n\t\tthis.settings.querySetting = outerFn;\n\n\t\treturn this;\n\t}\n\n\twithUserPreference(id: string | ObjectId, value: unknown): this {\n\t\tconst innerFn = this.user.queryPreference;\n\t\tconst innerFn = this.user.queryPreference;\n\n\t\tconst outerFn = <T,>(\n\t\tconst outerFn = <T,>(\n\t\t\tkey: string | ObjectId,\n\t\t\tdefaultValue?: T | undefined,\n\t\t): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => T | undefined] => {\n\t\t\tif (key === id) {\n\t\t\t\treturn [() => () => undefined, () => value as T];\n\t\t\t}\n\n\t\t\treturn innerFn(key, defaultValue);\n\t\t};\n\n\t\tthis.user.queryPreference = outerFn;\n\n\t\treturn this;\n\t}\n\n\tprivate i18n = createInstance(\n\t\t{\n\t\t\t// debug: true,\n\t\t\tlng: 'en',\n\t\t\tfallbackLng: 'en',\n\t\t\tns: ['core'],\n\t\t\tnsSeparator: '.',\n\t\t\tpartialBundledLanguages: true,\n\t\t\tdefaultNS: 'core',\n\t\t\tinterpolation: {\n\t\t\t\tescapeValue: false,\n\t\t\t},\n\t\t\tinitImmediate: false,\n\t\t},\n\t\t() => undefined,\n\t).use(initReactI18next);\n\n\twithTranslations(lng: string, ns: string, resources: Record<string, string>): this {\n\t\tconst addResources = () => {\n\t\tconst addResources = () => {\n\t\t\tthis.i18n.addResources(lng, ns, resources);\n\t\t\tfor (const [key, value] of Object.entries(resources)) {\n\t\t\tfor (const [key, value] of Object.entries(resources)) {\n\t\t\t\tthis.i18n.addResource(lng, ns, key, value);\n\t\t\t}\n\t\t};\n\n\t\tif (this.i18n.isInitialized) {\n\t\t\taddResources();\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.i18n.on('initialized', addResources);\n\t\treturn this;\n\t}\n\n\tbuild(): WrapperComponent<{ children: ReactNode }> {\n\t\tconst queryClient = new QueryClient({\n\t\tconst queryClient = new QueryClient({\n\t\t\tdefaultOptions: {\n\t\t\t\tqueries: { retry: false },",
            "reduceTranslation": "\t\tconst reduceTranslation = (translation?: ContextType<typeof TranslationContext>): ContextType<typeof TranslationContext> => {\n\t\tconst reduceTranslation = (translation?: ContextType<typeof TranslationContext>): ContextType<typeof TranslationContext> => {\n\t\t\treturn {\n\t\t\t\t...translation,\n\t\t\t\tlanguage: i18n.isInitialized ? i18n.language : 'en',\n\t\t\t\tlanguages: [\n\t\t\t\t\t{\n\t\t\t\t\t\ten: 'Default',\n\t\t\t\t\t\tname: i18n.isInitialized ? i18n.t('Default') : 'Default',\n\t\t\t\t\t\togName: i18n.isInitialized ? i18n.t('Default') : 'Default',\n\t\t\t\t\t\tkey: '',\n\t\t\t\t\t},\n\t\t\t\t\t...(i18n.isInitialized\n\t\t\t\t\t\t? [...new Set([...i18n.languages, ...languages])].map((key) => ({\n\t\t\t\t\t\t\t\ten: key,\n\t\t\t\t\t\t\t\tname: new Intl.DisplayNames([key], { type: 'language' }).of(key) ?? key,",
            "function": "\t\treturn function MockedAppRoot({ children }) {\n\t\treturn function MockedAppRoot({ children }) {\n\t\t\tconst [translation, updateTranslation] = useReducer(reduceTranslation, undefined, () => reduceTranslation());\n\t\t\tconst [translation, updateTranslation] = useReducer(reduceTranslation, undefined, () => reduceTranslation());\n\n\t\t\tuseEffect(() => {\n\t\t\t\ti18n.on('initialized', updateTranslation);\n\t\t\t\ti18n.on('languageChanged', updateTranslation);\n\n\t\t\t\treturn () => {\n\t\t\t\t\ti18n.off('initialized', updateTranslation);\n\t\t\t\t\ti18n.off('languageChanged', updateTranslation);\n\t\t\t\t};\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<QueryClientProvider client={queryClient}>"
        },
        "depth_rank": 7
    },
    {
        "file": "MockedUserContext.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/mock-providers/src/MockedUserContext.tsx",
        "code": {
            "createUserContextValue": "const userContextValue: ContextType<typeof UserContext> = {\nconst userContextValue: ContextType<typeof UserContext> = {\n\tuserId: 'john.doe',\n\tuser: {\n\t\t_id: 'john.doe',\n\t\tusername: 'john.doe',\n\t\tname: 'John Doe',\n\t\tcreatedAt: new Date(),\n\t\tactive: true,\n\t\t_updatedAt: new Date(),\n\t\troles: ['admin'],\n\t\ttype: 'user',\n\t},\n\tqueryPreference: (<T,>(pref: string, defaultValue: T) => [\n\t\t() => () => undefined,\n\t\t() => (typeof pref === 'string' ? undefined : defaultValue),\n\t]) as any,\n\tquerySubscriptions: () => [() => () => undefined, () => []],\n\tquerySubscription: () => [() => () => undefined, () => undefined],\n\tqueryRoom: () => [() => () => undefined, () => undefined],\n\n\tlogout: () => Promise.resolve(),\n};\n\nconst createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => {\nconst createUserContextValue = ({ userPreferences }: { userPreferences?: Record<string, unknown> }): ContextType<typeof UserContext> => {\n\treturn {\n\t\t...userContextValue,\n\t\t...(userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id as unknown as string] as any] }),"
        },
        "depth_rank": 7
    },
    {
        "file": "MockedSettingsContext.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/mock-providers/src/MockedSettingsContext.tsx",
        "code": {
            "cache": "const settingContextValue: ContextType<typeof SettingsContext> = {\nconst settingContextValue: ContextType<typeof SettingsContext> = {\n\thasPrivateAccess: true,\n\tisLoading: false,\n\tquerySetting: (_id: string) => [() => () => undefined, () => undefined],\n\tquerySettings: () => [() => () => undefined, () => []],\n\tdispatch: async () => undefined,\n};\n\nconst createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\nconst createSettingContextValue = ({ settings }: { settings?: Record<string, ISetting['value']> }): ContextType<typeof SettingsContext> => {\n\tconst cache = new Map<string, ISetting['value']>();\n\tconst cache = new Map<string, ISetting['value']>();\n\n\treturn {\n\t\t...settingContextValue,\n\t\t...(settings && {\n\t\t\tquerySetting: (_id: string) => [\n\t\t\t\t() => () => undefined,\n\t\t\t\t() => {\n\t\t\t\t\tif (cache.has(_id)) {\n\t\t\t\t\t\treturn cache.get(_id) as any;\n\t\t\t\t\t}\n\t\t\t\t\tcache.set(_id, { value: settings[_id] } as any);"
        },
        "depth_rank": 7
    },
    {
        "file": "MockedUserContext.js",
        "path": "/home/giri/gsoc/Rocket.Chat/packages/mock-providers/dist/MockedUserContext.js",
        "code": {
            "createUserContextValue": "const userContextValue = {\nconst userContextValue = {\n    userId: 'john.doe',\n    user: {\n        _id: 'john.doe',\n        username: 'john.doe',\n        name: 'John Doe',\n        createdAt: new Date(),\n        active: true,\n        _updatedAt: new Date(),\n        roles: ['admin'],\n        type: 'user',\n    },\n    queryPreference: ((pref, defaultValue) => [\n        () => () => undefined,\n        () => (typeof pref === 'string' ? undefined : defaultValue),\n    ]),\n    querySubscriptions: () => [() => () => undefined, () => []],\n    querySubscription: () => [() => () => undefined, () => undefined],\n    queryRoom: () => [() => () => undefined, () => undefined],\n    logout: () => Promise.resolve(),\n};\nconst createUserContextValue = ({ userPreferences }) => {\nconst createUserContextValue = ({ userPreferences }) => {\n    return Object.assign(Object.assign({}, userContextValue), (userPreferences && { queryPreference: (id) => [() => () => undefined, () => userPreferences[id]] }));"
        },
        "depth_rank": 7
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/stream-hub-service/src/service.ts",
        "code": {
            "watcher": "\tconst watcher = new DatabaseWatcher({ db, logger: Logger });\n\tconst watcher = new DatabaseWatcher({ db, logger: Logger });",
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\n\t\t\t\tif (watcher.isLastDocDelayed()) {\n\t\t\t\t\tthrow new Error('No real time data received recently');\n\t\t\t\t}\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "Client.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/ddp-streamer/src/Client.ts",
        "code": {
            "packet": "\t\t\tconst packet = server.parse(payload, isBinary);\n\t\t\tconst packet = server.parse(payload, isBinary);\n\t\t\tthis.emit('message', packet);\n\t\t\tif (this.wait) {\n\t\t\t\treturn new Promise((resolve) => this.once(DDP_EVENTS.LOGGED, () => resolve(this.process(packet.msg, packet))));\n\t\t\t}\n\t\t\tthis.process(packet.msg, packet);\n\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "configureServer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/ddp-streamer/src/configureServer.ts",
        "code": {
            "fn": "const loginServiceConfigurationCollection = 'meteor_accounts_loginServiceConfiguration';\nconst loginServiceConfigurationCollection = 'meteor_accounts_loginServiceConfiguration';\nconst loginServiceConfigurationPublication = 'meteor.loginServiceConfiguration';\nconst loginServiceConfigurationPublication = 'meteor.loginServiceConfiguration';\nconst loginServices = new Map<string, any>();\nconst loginServices = new Map<string, any>();\n\nMeteorService.getLoginServiceConfiguration()\n\t.then((records = []) => records.forEach((record) => loginServices.set(record._id, record)))\n\t.catch((err) => console.error('DDPStreamer not able to retrieve login services configuration', err));\n\nserver.publish(loginServiceConfigurationPublication, async function () {\nserver.publish(loginServiceConfigurationPublication, async function () {\n\tloginServices.forEach((record) => this.added(loginServiceConfigurationCollection, record._id, record));\n\n\tconst fn = (action: string, record: any): void => {\n\tconst fn = (action: string, record: any): void => {\n\t\tswitch (action) {\n\t\t\tcase 'added':\n\t\t\tcase 'changed':\n\t\t\t\tloginServices.set(record._id, record);\n\t\t\t\tthis[action](loginServiceConfigurationCollection, record._id, record);\n\t\t\t\tbreak;\n\t\t\tcase 'removed':\n\t\t\t\tloginServices.delete(record._id);\n\t\t\t\tthis[action](loginServiceConfigurationCollection, record._id);\n\t\t}\n\t};\n\n\tevents.on(loginServiceConfigurationPublication, fn);\n\n\tthis.onStop(() => {\n\t\tevents.removeListener(loginServiceConfigurationPublication, fn);\n\t});\n\n\tthis.ready();\n});\n\nconst autoUpdateCollection = 'meteor_autoupdate_clientVersions';\nconst autoUpdateCollection = 'meteor_autoupdate_clientVersions';\nserver.publish(autoUpdateCollection, function () {\nserver.publish(autoUpdateCollection, function () {\n\tAutoupdate.getVersions().forEach((version, arch) => {\n\t\tthis.added(autoUpdateCollection, arch, version);\n\t});\n\n\tconst fn = (record: any): void => {\n\tconst fn = (record: any): void => {\n\t\tconst { _id, ...version } = record;\n\t\tconst { _id, ...version } = record;",
            "result": "\t\t\tconst result = await Account.login({ resume, user, password });\n\t\t\tconst result = await Account.login({ resume, user, password });"
        },
        "depth_rank": 8
    },
    {
        "file": "Streamer.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/ddp-streamer/src/Streamer.ts",
        "code": {
            "frame": "\t\t\t\t\tconst frame = data[subscription.client.meteorClient ? 'meteor' : 'normal'];\n\t\t\t\t\tconst frame = data[subscription.client.meteorClient ? 'meteor' : 'normal'];\n\n\t\t\t\t\tsubscription.client.ws._sender.sendFrame(frame, (err: unknown) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} catch (error: any) {"
        },
        "depth_rank": 8
    },
    {
        "file": "Server.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/ddp-streamer/src/Server.ts",
        "code": {
            "handleInternalException": "const handleInternalException = (err: unknown, msg: string): MeteorError => {\nconst handleInternalException = (err: unknown, msg: string): MeteorError => {\n\tif (err instanceof MeteorError) {\n\t\treturn err;\n\t}\n\n\t// default errors are logged to the console and redacted from the client\n\t// TODO switch to using the logger (ideally broker.logger)\n\tlogger.error({ msg, err });",
            "result": "\t\t\tconst result = await fn.apply(client, packet.params);\n\t\t\tconst result = await fn.apply(client, packet.params);\n\t\t\treturn this.result(client, packet, result);\n\t\t} catch (err: unknown) {",
            "end": "\t\t\tconst end = this.metrics?.timer('rocketchat_subscription', { subscription: packet.name });\n\t\t\tconst end = this.metrics?.timer('rocketchat_subscription', { subscription: packet.name });",
            "publication": "\t\t\tconst publication = new Publication(client, packet, this);\n\t\t\tconst publication = new Publication(client, packet, this);\n\t\t\tconst [eventName, options] = packet.params;\n\t\t\tconst [eventName, options] = packet.params;\n\t\t\tawait fn.call(publication, eventName, options);\n\n\t\t\tend?.();\n\t\t} catch (err: unknown) {"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/presence-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/omnichannel-transcript/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/queue-worker/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "Account.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/account-service/src/Account.ts",
        "code": {
            "expiry": "\t\tconst expiry = await Settings.findOne({ _id: 'Accounts_LoginExpiration' }, { projection: { value: 1 } });\n\t\tconst expiry = await Settings.findOne({ _id: 'Accounts_LoginExpiration' }, { projection: { value: 1 } });"
        },
        "depth_rank": 8
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/account-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "loginViaUsername.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/account-service/src/lib/loginViaUsername.ts",
        "code": {
            "user": "\tconst user = await Users.findOne<IUser>({ username }, { projection: { 'services.password.bcrypt': 1 } });\n\tconst user = await Users.findOne<IUser>({ username }, { projection: { 'services.password.bcrypt': 1 } });"
        },
        "depth_rank": 9
    },
    {
        "file": "loginViaResume.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/account-service/src/lib/loginViaResume.ts",
        "code": {
            "tokenExpires": "\tconst token = user.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\tconst token = user.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\n\tconst tokenExpires = token && 'when' in token && _tokenExpiration(token.when, loginExpiration);\n\tconst tokenExpires = token && 'when' in token && _tokenExpiration(token.when, loginExpiration);\n\tif (tokenExpires && new Date() >= tokenExpires) {\n\t\tthrow new MeteorError(403, 'Your session has expired. Please log in again.');\n\t}\n\n\treturn {\n\t\tuid: user._id,\n\t\ttoken: resume,\n\t\thashedToken,\n\t\ttype: 'resume',\n\t\t...(tokenExpires && { tokenExpires }),"
        },
        "depth_rank": 9
    },
    {
        "file": "utils.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/account-service/src/lib/utils.ts",
        "code": {
            "hashedStampedToken": "\tconst hashedStampedToken = Object.keys(stampedToken).reduce(\n\tconst hashedStampedToken = Object.keys(stampedToken).reduce(\n\t\t(prev, key) => (key === 'token' ? prev : { ...prev, [key]: stampedToken[key] }),"
        },
        "depth_rank": 9
    },
    {
        "file": "service.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/apps/authorization-service/src/service.ts",
        "code": {
            "async": "\t\t.get('/health', async function (_req, res) {\n\t\t.get('/health', async function (_req, res) {\n\t\t\ttry {\n\t\t\t\tawait api.nodeList();\n\t\t\t\tres.end('ok');\n\t\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "Presence.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/presence/src/Presence.ts",
        "code": {
            "affectedUsers": "\t\tconst affectedUsers = await UsersSessions.findByOtherInstanceIds(ids, { projection: { _id: 1 } }).toArray();\n\t\tconst affectedUsers = await UsersSessions.findByOtherInstanceIds(ids, { projection: { _id: 1 } }).toArray();",
            "ids": "\t\tconst nodes = (await this.api?.nodeList()) || [];\n\t\tconst nodes = (await this.api?.nodeList()) || [];\n\n\t\tconst ids = nodes.filter((node) => node.available).map(({ id }) => id);\n\t\tconst ids = nodes.filter((node) => node.available).map(({ id }) => id);",
            "userSessions": "\t\tconst userSessions = (await UsersSessions.findOneById(uid)) || { connections: [] };\n\t\tconst userSessions = (await UsersSessions.findOneById(uid)) || { connections: [] };",
            "user": "\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | 'roles' | 'status'>>(uid, {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'username' | 'roles' | 'status'>>(uid, {\n\t\t\tprojection: { username: 1, roles: 1, status: 1 },",
            "result": "\t\tconst result = await Users.updateStatusById(uid, {\n\t\tconst result = await Users.updateStatusById(uid, {\n\t\t\tstatus,\n\t\t\tstatusConnection,\n\t\t});\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tthis.broadcast({ _id: uid, username: user.username, status, statusText: user.statusText, roles: user.roles }, user.status);"
        },
        "depth_rank": 8
    },
    {
        "file": "ClientStream.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/src/ClientStream.ts",
        "code": {
            "payload": "\t\tconst payload = this.ddp.call(method, params);\n\t\tconst payload = this.ddp.call(method, params);\n\t\treturn Object.assign(\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis.apply({\n\t\t\t\t\tpayload,\n\t\t\t\t\toptions,\n\t\t\t\t\tcallback: (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "RocketchatSDKLegacy.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/src/legacy/RocketchatSDKLegacy.ts",
        "code": {
            "self": "\t\tconst self = this;\n\t\tconst self = this;\n\t\treturn {\n\t\t\tcreate(username: string): Promise<Serialized<OperationResult<'POST', '/v1/im.create'>>> {\n\t\t\t\treturn self.rest.post('/v1/im.create', { username });"
        },
        "depth_rank": 9
    },
    {
        "file": "LivechatClientImpl.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/src/livechat/LivechatClientImpl.ts",
        "code": {
            "result": "\t\tconst result = await this.rest.get('/v1/livechat/room', { ...params, token: this.token });\n\t\tconst result = await this.rest.get('/v1/livechat/room', { ...params, token: this.token });",
            "isRoomObject": "\t\tfunction isRoomObject(\n\t\tfunction isRoomObject(\n\t\t\troom: Serialized<IOmnichannelRoom> | { room: Serialized<IOmnichannelRoom> },",
            "rest": "\t\tconst subscriptions = Array.from(this.client.subscriptions.keys());\n\t\tconst subscriptions = Array.from(this.client.subscriptions.keys());\n\t\treturn Promise.all(subscriptions.map((subscription) => this.client.unsubscribe(subscription)));\n\t}\n\n\tstatic create(url: string, retryOptions = { retryCount: 3, retryTime: 10000 }): LivechatClientImpl {\n\t\t// TODO: Decide what to do with the EJSON objects\n\t\tconst ddp = new DDPDispatcher();\n\t\tconst ddp = new DDPDispatcher();\n\n\t\tconst connection = ConnectionImpl.create(url, WebSocket, ddp, retryOptions);\n\t\tconst connection = ConnectionImpl.create(url, WebSocket, ddp, retryOptions);\n\n\t\tconst stream = new ClientStreamImpl(ddp, ddp);\n\t\tconst stream = new ClientStreamImpl(ddp, ddp);\n\n\t\tconst account = new AccountImpl(stream);\n\t\tconst account = new AccountImpl(stream);\n\n\t\tconst timeoutControl = TimeoutControl.create(ddp, connection);\n\t\tconst timeoutControl = TimeoutControl.create(ddp, connection);\n\n\t\tconst rest = new RestClient({ baseUrl: url.replace(/^ws/, 'http') });\n\t\tconst rest = new RestClient({ baseUrl: url.replace(/^ws/, 'http') });"
        },
        "depth_rank": 9
    },
    {
        "file": "DDPDispatcher.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/DDPDispatcher.spec.ts",
        "code": {
            "test2": "const ddp = new MinimalDDPClient();\nconst ddp = new MinimalDDPClient();\n\nit('should create a block properly', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst test = ddp.call('test');\n\tconst test = ddp.call('test');\n\n\tddpDispatcher.wait(test);\n\texpect(ddpDispatcher.queue).toEqual([\n\t\t{\n\t\t\twait: true,\n\t\t\titems: [test],\n\t\t},\n\t]);\n});\n\nit('should push an item to the block properly', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst test1 = ddp.call('test1');\n\tconst test1 = ddp.call('test1');\n\tconst test2 = ddp.call('test2');\n\tconst test2 = ddp.call('test2');\n\tddpDispatcher.wait(test1);\n\tddpDispatcher.dispatch(test2);\n\texpect(ddpDispatcher.queue).toEqual([\n\t\t{\n\t\t\twait: true,\n\t\t\titems: [test1],\n\t\t},\n\t\t{\n\t\t\twait: false,\n\t\t\titems: [test2],\n\t\t},\n\t]);\n});\n\nit('should not keep in the queue if the method doesnt wait', () => {\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\n\tconst blockToRemove = ddp.call('test1');\n\tconst blockToRemove = ddp.call('test1');\n\tconst test2 = ddp.call('test2');\n\tconst test2 = ddp.call('test2');\n\n\tddpDispatcher.dispatch(blockToRemove, { wait: true });",
            "block3": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\tddpDispatcher.on('send', fn);\n\n\tddpDispatcher.dispatch(ddp.call('test1'));\n\n\texpect(fn).toBeCalledTimes(1);\n});\n\nit('should send the next blocks if the outstanding block was completed', () => {\n\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst ddpDispatcher = new DDPDispatcher();\n\tconst ddpDispatcher = new DDPDispatcher();\n\tddpDispatcher.on('send', fn);\n\n\tconst block1 = ddp.call('block1');\n\tconst block1 = ddp.call('block1');\n\n\tconst block2 = ddp.call('block2');\n\tconst block2 = ddp.call('block2');\n\n\tconst block3 = ddp.call('test2');\n\tconst block3 = ddp.call('test2');\n\n\tddpDispatcher.dispatch(block1, { wait: true });"
        },
        "depth_rank": 8
    },
    {
        "file": "Connection.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/Connection.spec.ts",
        "code": {
            "connection": "\tconst client = new MinimalDDPClient();\n\tconst client = new MinimalDDPClient();\n\tconst connection = ConnectionImpl.create('ws://localhost:1234', globalThis.WebSocket, client, { retryCount: 0, retryTime: 0 });\n\tconst connection = ConnectionImpl.create('ws://localhost:1234', globalThis.WebSocket, client, { retryCount: 0, retryTime: 0 });"
        },
        "depth_rank": 8
    },
    {
        "file": "wrapOnceEventIntoPromise.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/wrapOnceEventIntoPromise.spec.ts",
        "code": {
            "promise": "\tconst emitter = new Emitter();\n\tconst emitter = new Emitter();\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\n\temitter.emit('test', 'test');\n\n\tconst result = await promise;\n\tconst result = await promise;\n\n\texpect(result).toBe('test');\n});\n\nit('should reject', async () => {\n\tconst emitter = new Emitter();\n\tconst emitter = new Emitter();\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\tconst promise = wrapOnceEventIntoPromise(emitter, 'test');\n\n\temitter.emit('test', { error: 'test' });"
        },
        "depth_rank": 8
    },
    {
        "file": "ClientStream.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/ClientStream.spec.ts",
        "code": {
            "call": "\t\tconst callback = jest.fn();\n\t\tconst callback = jest.fn();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\n\t\tconst id = client.call('test', callback);\n\t\tconst id = client.call('test', callback);\n\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\tresult: ['arg1', 'arg2'],\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\t\texpect(callback).toBeCalledTimes(1);\n\t\texpect(callback).toBeCalledWith(null, ['arg1', 'arg2']);\n\t});\n\n\tit('should be able to handle errors thrown by the method call', async () => {\n\t\tconst callback = jest.fn();\n\t\tconst callback = jest.fn();\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst id = client.call('test', callback);\n\t\tconst id = client.call('test', callback);\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\terror: {\n\t\t\t\t\terror: 400,\n\t\t\t\t\treason: 'Bad Request',\n\t\t\t\t\tmessage: 'Bad Request [400]',\n\t\t\t\t\terrorType: 'Meteor.Error',\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\t\texpect(callback).toBeCalledTimes(1);\n\t\texpect(callback).toBeCalledWith({\n\t\t\terror: 400,\n\t\t\treason: 'Bad Request',\n\t\t\tmessage: 'Bad Request [400]',\n\t\t\terrorType: 'Meteor.Error',\n\t\t});\n\t});\n\n\tit('should be able to callAsync a method and receive a result', async () => {\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst promise = client.callAsync('test');\n\t\tconst promise = client.callAsync('test');\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\tresult: ['arg1', 'arg2'],\n\t\t\t\tid: promise.id,\n\t\t\t}),\n\t\t);\n\n\t\tconst result = await promise;\n\t\tconst result = await promise;\n\t\texpect(result).toEqual(['arg1', 'arg2']);\n\t});\n\n\tit('should be able to callAsync a method and receive an error', async () => {\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst ws = new MinimalDDPClient(() => undefined);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst promise = client.callAsync('test');\n\t\tconst promise = client.callAsync('test');\n\t\tws.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'result',\n\t\t\t\terror: {\n\t\t\t\t\terror: 400,\n\t\t\t\t\treason: 'Bad Request',\n\t\t\t\t\tmessage: 'Bad Request [400]',\n\t\t\t\t\terrorType: 'Meteor.Error',\n\t\t\t\t},\n\t\t\t\tid: promise.id,\n\t\t\t}),\n\t\t);\n\n\t\tawait expect(promise).rejects.toEqual({\n\t\t\terror: 400,\n\t\t\treason: 'Bad Request',\n\t\t\tmessage: 'Bad Request [400]',\n\t\t\terrorType: 'Meteor.Error',\n\t\t});\n\t});\n\n\tit('should only call the further methods after the previous one has been resolved respecting the wait option', async () => {\n\t\tconst fn = jest.fn();\n\t\tconst fn = jest.fn();\n\t\tconst dispatch = jest.fn();\n\t\tconst dispatch = jest.fn();\n\n\t\tconst ws = new DDPDispatcher();\n\t\tconst ws = new DDPDispatcher();\n\t\tconst client = new ClientStreamImpl(ws);\n\t\tconst client = new ClientStreamImpl(ws);\n\n\t\tclient.dispatcher.on('send', dispatch);\n\n\t\tconst call = client.callWithOptions('wait 1', { wait: true }, fn);\n\t\tconst call = client.callWithOptions('wait 1', { wait: true }, fn);",
            "call2": "\t\tconst callNoWait = client.call('no wait', fn);\n\t\tconst callNoWait = client.call('no wait', fn);\n\n\t\texpect(client.dispatcher.queue.length).toBe(2);\n\n\t\tconst call2 = client.callWithOptions('wait 2', { wait: true }, fn);\n\t\tconst call2 = client.callWithOptions('wait 2', { wait: true }, fn);"
        },
        "depth_rank": 8
    },
    {
        "file": "Account.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/Account.spec.ts",
        "code": {
            "cb": "\t\tconst cb = jest.fn();\n\t\tconst cb = jest.fn();\n\t\tsdk.account.once('uid', cb);\n\n\t\tawait handleMethod(server, 'logout', [], JSON.stringify(messageResult), sdk.account.logout());\n\n\t\texpect(cb).toHaveBeenCalledTimes(1);\n\n\t\tconst { user } = sdk.account;\n\t\tconst { user } = sdk.account;"
        },
        "depth_rank": 8
    },
    {
        "file": "DDPSDK.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/DDPSDK.spec.ts",
        "code": {
            "loginFn": "\tconst loginFn = jest.fn((token: string) => loginWithToken.apply(sdk.account, [token]));\n\tconst loginFn = jest.fn((token: string) => loginWithToken.apply(sdk.account, [token]));\n\tsdk.account.loginWithToken = loginFn;\n\n\tawait handleMethod(server, 'login', [{ resume: 'token' }], JSON.stringify(messageResult), sdk.account.loginWithToken('token'));"
        },
        "depth_rank": 8
    },
    {
        "file": "MinimalDDPClient.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/MinimalDDPClient.spec.ts",
        "code": {
            "client": "\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.once('message', handlerCallback);\n\t\tclient.once('send', senderCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ping',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ping',\n\t\t});\n\n\t\texpect(senderCallback).toBeCalledTimes(1);\n\t\texpect(senderCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t});\n\t});\n\n\tit('should reply with pong if id is provided', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\t\tconst senderCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.on('message', handlerCallback);\n\t\tclient.on('send', senderCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ping',\n\t\t\t\tid: '123',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ping',\n\t\t\tid: '123',\n\t\t});\n\n\t\texpect(senderCallback).toBeCalledTimes(1);\n\t\texpect(senderCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t\tid: '123',\n\t\t});\n\t});\n\n\tit('should emit \"pong\" event if pong is received', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tclient.once('pong', handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'pong',\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'pong',\n\t\t});\n\t});\n});\n\ndescribe('subscription mechanism', () => {\n\tit('should emit \"ready\" event after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\t});\n\n\tit('should emit \"nosub\" event if something goes wrong', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'nosub',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'nosub',\n\t\t\tid,\n\t\t});\n\t});\n\n\tit('should emit \"nosub\" event after unsubscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst nosubCallback = jest.fn();\n\t\tconst nosubCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient();\n\t\tconst client = new MinimalDDPClient();\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onPublish(id, handlerCallback);\n\t\tclient.onNoSub(id, nosubCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.unsubscribe(id);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'nosub',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(nosubCallback).toBeCalledTimes(1);\n\t\texpect(nosubCallback).toBeCalledWith({\n\t\t\tmsg: 'nosub',\n\t\t\tid,\n\t\t});\n\t});\n});\n\ndescribe('subscription added/changed/removed mechanism', () => {\n\tit('should receive \"added\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'added',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t\tfields: {\n\t\t\t\t\ttest: 'test',\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'added',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t\tfields: {\n\t\t\t\ttest: 'test',\n\t\t\t},\n\t\t});\n\t});\n\n\tit('should receive \"changed\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'changed',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t\tfields: {\n\t\t\t\t\ttest: 'test',\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'changed',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t\tfields: {\n\t\t\t\ttest: 'test',\n\t\t\t},\n\t\t});\n\t});\n\n\tit('should receive \"removed\" events after subscribe', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection('test', handlerCallback);\n\n\t\tclient.onPublish(id, readyCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'removed',\n\t\t\t\tcollection: 'test',\n\t\t\t\tid,\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(readyCallback).toBeCalledWith({\n\t\t\tmsg: 'ready',\n\t\t\tsubs: [id],\n\t\t});\n\n\t\texpect(handlerCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledWith({\n\t\t\tmsg: 'removed',\n\t\t\tcollection: 'test',\n\t\t\tid,\n\t\t});\n\t});\n});\n\ndescribe('subscription updated mechanism', () => {\n\tit('should receive \"updated\" events after subscribe and before ready', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst readyCallback = jest.fn();\n\t\tconst updatedCallback = jest.fn();\n\t\tconst updatedCallback = jest.fn();\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst id = client.subscribe('test');\n\t\tconst id = client.subscribe('test');\n\n\t\tclient.onCollection(id, handlerCallback);\n\t\tclient.onPublish(id, readyCallback);\n\t\tclient.onUpdate(id, updatedCallback);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'ready',\n\t\t\t\tsubs: [id],\n\t\t\t}),\n\t\t);\n\n\t\tclient.handleMessage(\n\t\t\tJSON.stringify({\n\t\t\t\tmsg: 'updated',\n\t\t\t\tmethods: [id],\n\t\t\t}),\n\t\t);\n\n\t\texpect(readyCallback).toBeCalledTimes(1);\n\t\texpect(handlerCallback).toBeCalledTimes(0);\n\t\texpect(updatedCallback).toBeCalledTimes(1);\n\t\texpect(updatedCallback).toBeCalledWith({\n\t\t\tmsg: 'updated',\n\t\t\tmethods: [id],\n\t\t});\n\t});\n});\n\ndescribe('method mechanism', () => {\n\tit('should emit \"result\" event after method call', () => {\n\t\tconst handlerCallback = jest.fn();\n\t\tconst handlerCallback = jest.fn();\n\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\t\tconst client = new MinimalDDPClient(() => undefined);\n\n\t\tconst { id } = client.call('test');\n\t\tconst { id } = client.call('test');"
        },
        "depth_rank": 8
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ddp-client/__tests__/helpers/index.ts",
        "code": {
            "acceptConnection": "const acceptConnection = async (server: WS) => {\nconst acceptConnection = async (server: WS) => {\n\tawait server.nextMessage.then(async (message) => {\n\t\tawait expect(message).toBe('{\"msg\":\"connect\",\"version\":\"1\",\"support\":[\"1\",\"pre2\",\"pre1\"]}');",
            "suggestedVersion": "\tconst suggestedVersion = '1';\n\tconst suggestedVersion = '1';\n\n\treturn Promise.all([\n\t\tserver.nextMessage.then((message) => {\n\t\t\texpect(message).toBe('{\"msg\":\"connect\",\"version\":\"1\",\"support\":[\"1\",\"pre2\",\"pre1\"]}');"
        },
        "depth_rank": 9
    },
    {
        "file": "index.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/index.tsx",
        "code": {
            "timeValue": "\tconst agentValue = header.agent?.name || header.agent?.username || t('Not_assigned');\n\tconst agentValue = header.agent?.name || header.agent?.username || t('Not_assigned');\n\tconst customerValue = header.visitor?.name || header.visitor?.username;\n\tconst customerValue = header.visitor?.name || header.visitor?.username;\n\tconst dateValue = header.date;\n\tconst dateValue = header.date;\n\tconst timeValue = header.time;\n\tconst timeValue = header.time;\n\n\treturn (\n\t\t<Document>\n\t\t\t<Page size='A4' style={styles.page}>"
        },
        "depth_rank": 10
    },
    {
        "file": "Quotes.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/components/Quotes.tsx",
        "code": {
            "Quote": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tbackgroundColor: colors.n100,\n\t\tborderWidth: 1,\n\t\tborderColor: colors.n250,\n\t\tborderLeftColor: colors.n600,\n\t\tpadding: 16,\n\t\tborderTopWidth: 1,\n\t\tborderBottomWidth: 1,\n\t},\n\tquoteMessage: {\n\t\tmarginTop: 6,\n\t\tfontSize: fontScales.p2.fontSize,\n\t},\n});\n\nconst Quote = ({ quote, children, index }: { quote: QuoteType; children: JSX.Element | null; index: number }) => (\nconst Quote = ({ quote, children, index }: { quote: QuoteType; children: JSX.Element | null; index: number }) => ("
        },
        "depth_rank": 11
    },
    {
        "file": "Files.spec.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/components/Files.spec.tsx",
        "code": {
            "fileName": "\t\tconst invalidText = getByText('invalid');\n\t\tconst invalidText = getByText('invalid');\n\t\tconst fileName = getByText(invalidFile.name);\n\t\tconst fileName = getByText(invalidFile.name);\n\n\t\texpect(invalidText).toBeInTheDocument();\n\t\texpect(fileName).toBeInTheDocument();\n\t});\n\n\tit('should renders file name and image when buffer is not null', () => {\n\t\tconst { getByRole, getByText } = render(<Files files={[validFile]} invalidMessage='' />);\n\t\tconst { getByRole, getByText } = render(<Files files={[validFile]} invalidMessage='' />);"
        },
        "depth_rank": 11
    },
    {
        "file": "BoldSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/BoldSpan.tsx",
        "code": {
            "BoldSpan": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\tbold: {\n\t\tfontWeight: 700,\n\t},\n});\n\ntype MessageBlock =\n\t| MessageParser.Emoji\n\t| MessageParser.ChannelMention\n\t| MessageParser.UserMention\n\t| MessageParser.Link\n\t| MessageParser.MarkupExcluding<MessageParser.Bold>\n\t| MessageParser.InlineCode;\n\ntype BoldSpanProps = {\n\tchildren: MessageBlock[];\n};\n\nconst BoldSpan = ({ children }: BoldSpanProps) => (\nconst BoldSpan = ({ children }: BoldSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 12
    },
    {
        "file": "StrikeSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/StrikeSpan.tsx",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }: StrikeSpanProps) => (\nconst StrikeSpan = ({ children }: StrikeSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 12
    },
    {
        "file": "LinkSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/LinkSpan.tsx",
        "code": {
            "labelElements": "const LinkSpan = ({ label }: LinkSpanProps): ReactElement => {\nconst LinkSpan = ({ label }: LinkSpanProps): ReactElement => {\n\tconst children = useMemo(() => {\n\tconst children = useMemo(() => {\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\t\tconst labelArray = Array.isArray(label) ? label : [label];\n\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\tconst labelElements = labelArray.map((child, index) => {\n\t\t\tswitch (child.type) {\n\t\t\t\tcase 'PLAIN_TEXT':\n\t\t\t\t\treturn <Text key={index}>{child.value.trim()}</Text>;"
        },
        "depth_rank": 12
    },
    {
        "file": "InlineElements.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/InlineElements.tsx",
        "code": {
            "InlineElements": "const InlineElements = ({ children }: InlineElementsProps) => (\nconst InlineElements = ({ children }: InlineElementsProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "ItalicSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/ItalicSpan.tsx",
        "code": {
            "ItalicSpan": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\titalic: {\n\t\tfontStyle: 'italic',\n\t},\n});\n\ntype MessageBlock =\n\t| MessageParser.Emoji\n\t| MessageParser.ChannelMention\n\t| MessageParser.UserMention\n\t| MessageParser.Link\n\t| MessageParser.MarkupExcluding<MessageParser.Italic>\n\t| MessageParser.InlineCode;\n\ntype ItalicSpanProps = {\n\tchildren: MessageBlock[];\n};\n\nconst ItalicSpan = ({ children }: ItalicSpanProps) => (\nconst ItalicSpan = ({ children }: ItalicSpanProps) => (",
            "renderBlockComponent": "const renderBlockComponent = (child: MessageBlock, index: number) => {\nconst renderBlockComponent = (child: MessageBlock, index: number) => {\n\tswitch (child.type) {\n\t\tcase 'LINK':\n\t\t\treturn <LinkSpan key={index} label={Array.isArray(child.value.label) ? child.value.label : [child.value.label]} />;"
        },
        "depth_rank": 12
    },
    {
        "file": "CodeSpan.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/elements/CodeSpan.tsx",
        "code": {
            "CodeSpan": "const CodeSpan = ({ code }: CodeSpanProps) => (\nconst CodeSpan = ({ code }: CodeSpanProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "OrderedListBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/OrderedListBlock.tsx",
        "code": {
            "OrderedListBlock": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tmarginTop: 4,\n\t},\n\tlist: {\n\t\tflexDirection: 'row',\n\t},\n\tnumber: {\n\t\tfontWeight: 700,\n\t\tmarginHorizontal: 4,\n\t},\n});\n\ntype OrderedListBlockProps = {\n\titems: MessageParser.ListItem[];\n};\n\nconst OrderedListBlock = ({ items }: OrderedListBlockProps) => (\nconst OrderedListBlock = ({ items }: OrderedListBlockProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "CodeBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/CodeBlock.tsx",
        "code": {
            "CodeBlock": "const CodeBlock = ({ lines }: CodeBlockProps): ReactElement => (\nconst CodeBlock = ({ lines }: CodeBlockProps): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "UnorderedListBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/UnorderedListBlock.tsx",
        "code": {
            "UnorderedListBlock": "const styles = StyleSheet.create({\nconst styles = StyleSheet.create({\n\twrapper: {\n\t\tmarginTop: 4,\n\t},\n\tlist: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t},\n\tbullet: {\n\t\tmarginHorizontal: 4,\n\t},\n});\n\ntype UnorderedListBlockProps = {\n\titems: MessageParser.ListItem[];\n};\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps) => (\nconst UnorderedListBlock = ({ items }: UnorderedListBlockProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "BigEmojiBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/BigEmojiBlock.tsx",
        "code": {
            "BigEmojiBlock": "const BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => (\nconst BigEmojiBlock = ({ emoji }: BigEmojiBlockProps): ReactElement => ("
        },
        "depth_rank": 12
    },
    {
        "file": "ParagraphBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/ParagraphBlock.tsx",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ items }: ParagraphBlockProps) => (\nconst ParagraphBlock = ({ items }: ParagraphBlockProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "HeadingBlock.tsx",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/templates/ChatTranscript/markup/blocks/HeadingBlock.tsx",
        "code": {
            "Header": "const Header = ({ items = [], level = 1 }: HeadingBlockProps) => (\nconst Header = ({ items = [], level = 1 }: HeadingBlockProps) => ("
        },
        "depth_rank": 12
    },
    {
        "file": "ChatTranscript.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/src/strategies/ChatTranscript.spec.ts",
        "code": {
            "data": "\t\tconst result = chatTranscript.parseTemplateData(data);\n\t\tconst result = chatTranscript.parseTemplateData(data);\n\t\texpect(result.t('transcript')).toEqual('Transcript');\n\t\texpect(result.t('visitor')).toEqual('Visitor');\n\t\texpect(result.t('agent')).toEqual('Agent');\n\t\texpect(result.t('date')).toEqual('Date');\n\t\texpect(result.t('time')).toEqual('Time');\n\t});\n\n\tit('should throws an error if translation not found', () => {\n\t\tconst data = { ...validData, translations: translationsData.translations };\n\t\tconst data = { ...validData, translations: translationsData.translations };"
        },
        "depth_rank": 9
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/index.js",
        "code": {
            "__setModuleDefault": "var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatTranscript.stories.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/ChatTranscript.stories.d.ts",
        "code": {
            "const": "declare const _default: ComponentMeta<({ header, messages, t }: ChatTranscriptData) => JSX.Element>;\ndeclare const _default: ComponentMeta<({ header, messages, t }: ChatTranscriptData) => JSX.Element>;"
        },
        "depth_rank": 10
    },
    {
        "file": "ChatTranscript.stories.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/ChatTranscript.stories.js",
        "code": {
            "ChatTranscriptPDFTemplate": "const data = new ChatTranscript_1.ChatTranscript().parseTemplateData(ChatTranscript_fixtures_1.exampleData);\nconst data = new ChatTranscript_1.ChatTranscript().parseTemplateData(ChatTranscript_fixtures_1.exampleData);\nconst ChatTranscriptPDFTemplate = () => ((0, jsx_runtime_1.jsx)(renderer_1.PDFViewer, { width: '100%', height: '800', children: (0, jsx_runtime_1.jsx)(_1.ChatTranscriptPDF, { ...data }) }));\nconst ChatTranscriptPDFTemplate = () => ((0, jsx_runtime_1.jsx)(renderer_1.PDFViewer, { width: '100%', height: '800', children: (0, jsx_runtime_1.jsx)(_1.ChatTranscriptPDF, { ...data }) }));"
        },
        "depth_rank": 10
    },
    {
        "file": "Quotes.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/Quotes.js",
        "code": {
            "Quotes": "const Quotes = ({ quotes }) => quotes.reduceRight((lastQuote, quote, index) => ((0, jsx_runtime_1.jsx)(Quote, { quote: quote, index: index, children: lastQuote })), null);\nconst Quotes = ({ quotes }) => quotes.reduceRight((lastQuote, quote, index) => ((0, jsx_runtime_1.jsx)(Quote, { quote: quote, index: index, children: lastQuote })), null);"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageList.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/MessageList.js",
        "code": {
            "MessageList": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginBottom: 16,\n        paddingHorizontal: 32,\n    },\n    message: {\n        marginTop: 1,\n        fontSize: typography_json_1.fontScales.p2.fontSize,\n    },\n});\nconst MessageList = ({ messages, invalidFileMessage }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: messages.map((message, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [message.divider && (0, jsx_runtime_1.jsx)(Divider_1.Divider, { divider: message.divider }), (0, jsx_runtime_1.jsx)(MessageHeader_1.MessageHeader, { name: message.u.name || message.u.username, time: message.ts }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.message, children: message.md ? (0, jsx_runtime_1.jsx)(markup_1.Markup, { tokens: message.md }) : (0, jsx_runtime_1.jsx)(renderer_1.Text, { children: message.msg }) }), message.quotes && (0, jsx_runtime_1.jsx)(Quotes_1.Quotes, { quotes: message.quotes }), message.files && (0, jsx_runtime_1.jsx)(Files_1.Files, { files: message.files, invalidMessage: invalidFileMessage })] }, index))) }));\nconst MessageList = ({ messages, invalidFileMessage }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: messages.map((message, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [message.divider && (0, jsx_runtime_1.jsx)(Divider_1.Divider, { divider: message.divider }), (0, jsx_runtime_1.jsx)(MessageHeader_1.MessageHeader, { name: message.u.name || message.u.username, time: message.ts }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.message, children: message.md ? (0, jsx_runtime_1.jsx)(markup_1.Markup, { tokens: message.md }) : (0, jsx_runtime_1.jsx)(renderer_1.Text, { children: message.msg }) }), message.quotes && (0, jsx_runtime_1.jsx)(Quotes_1.Quotes, { quotes: message.quotes }), message.files && (0, jsx_runtime_1.jsx)(Files_1.Files, { files: message.files, invalidMessage: invalidFileMessage })] }, index))) }));"
        },
        "depth_rank": 11
    },
    {
        "file": "MessageHeader.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/MessageHeader.js",
        "code": {
            "MessageHeader": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    header: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    name: {\n        fontSize: typography_json_1.fontScales.p2b.fontSize,\n        fontWeight: typography_json_1.fontScales.p2b.fontWeight,\n        color: colors_json_1.default.n900,\n    },\n    time: {\n        fontSize: typography_json_1.fontScales.c1.fontSize,\n        marginLeft: 4,\n    },\n});\nconst MessageHeader = ({ name, time, light }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.header, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.name, children: name }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: { ...styles.time, color: light ? colors_json_1.default.n600 : colors_json_1.default.n700 }, children: time })] }));\nconst MessageHeader = ({ name, time, light }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.header, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.name, children: name }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: { ...styles.time, color: light ? colors_json_1.default.n600 : colors_json_1.default.n700 }, children: time })] }));"
        },
        "depth_rank": 11
    },
    {
        "file": "Divider.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/components/Divider.js",
        "code": {
            "Divider": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingVertical: 12,\n        fontSize: 12,\n        fontWeight: 700,\n    },\n    line: {\n        flex: 1,\n        height: 2,\n        backgroundColor: colors_json_1.default.n200,\n    },\n    text: {\n        paddingHorizontal: 8,\n    },\n});\nconst Divider = ({ divider }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.text, children: divider }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line })] }));\nconst Divider = ({ divider }) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.wrapper, wrap: false, children: [(0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line }), (0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.text, children: divider }), (0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.line })] }));"
        },
        "depth_rank": 11
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/index.js",
        "code": {
            "Markup": "const Markup = ({ tokens }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: tokens.map((child, index) => {\nconst Markup = ({ tokens }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: tokens.map((child, index) => {\n        switch (child.type) {\n            case 'PARAGRAPH':\n                return (0, jsx_runtime_1.jsx)(ParagraphBlock_1.default, { items: child.value }, index);"
        },
        "depth_rank": 11
    },
    {
        "file": "LinkSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/LinkSpan.d.ts",
        "code": {
            "const": "declare const LinkSpan: ({ label }: LinkSpanProps) => ReactElement;\ndeclare const LinkSpan: ({ label }: LinkSpanProps) => ReactElement;"
        },
        "depth_rank": 12
    },
    {
        "file": "InlineElements.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/InlineElements.d.ts",
        "code": {
            "const": "declare const InlineElements: ({ children }: InlineElementsProps) => JSX.Element;\ndeclare const InlineElements: ({ children }: InlineElementsProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "CodeSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/CodeSpan.d.ts",
        "code": {
            "const": "declare const CodeSpan: ({ code }: CodeSpanProps) => JSX.Element;\ndeclare const CodeSpan: ({ code }: CodeSpanProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "StrikeSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/StrikeSpan.js",
        "code": {
            "StrikeSpan": "const StrikeSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst StrikeSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'ITALIC' || child.type === 'BOLD') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.strike, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 12
    },
    {
        "file": "ItalicSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/ItalicSpan.js",
        "code": {
            "ItalicSpan": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    italic: {\n        fontStyle: 'italic',\n    },\n});\nconst ItalicSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst ItalicSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'STRIKE' || child.type === 'BOLD') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.italic, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 12
    },
    {
        "file": "StrikeSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/StrikeSpan.d.ts",
        "code": {
            "const": "declare const StrikeSpan: ({ children }: StrikeSpanProps) => JSX.Element;\ndeclare const StrikeSpan: ({ children }: StrikeSpanProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "InlineElements.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/InlineElements.js",
        "code": {
            "InlineElements": "const InlineElements = ({ children }) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { children: children.map((child, index) => {\nconst InlineElements = ({ children }) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { children: children.map((child, index) => {\n        switch (child.type) {\n            case 'BOLD':\n                return (0, jsx_runtime_1.jsx)(BoldSpan_1.default, { children: child.value }, index);"
        },
        "depth_rank": 12
    },
    {
        "file": "ItalicSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/ItalicSpan.d.ts",
        "code": {
            "const": "declare const ItalicSpan: ({ children }: ItalicSpanProps) => JSX.Element;\ndeclare const ItalicSpan: ({ children }: ItalicSpanProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "BoldSpan.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/BoldSpan.d.ts",
        "code": {
            "const": "declare const BoldSpan: ({ children }: BoldSpanProps) => JSX.Element;\ndeclare const BoldSpan: ({ children }: BoldSpanProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "BoldSpan.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/elements/BoldSpan.js",
        "code": {
            "BoldSpan": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    bold: {\n        fontWeight: 700,\n    },\n});\nconst BoldSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\nconst BoldSpan = ({ children }) => ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children.map((child, index) => {\n        if (child.type === 'LINK' || child.type === 'PLAIN_TEXT' || child.type === 'ITALIC' || child.type === 'STRIKE') {\n            return ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.bold, children: renderBlockComponent(child, index) }, index));",
            "renderBlockComponent": "const renderBlockComponent = (child, index) => {\nconst renderBlockComponent = (child, index) => {\n    switch (child.type) {\n        case 'LINK':\n            return (0, jsx_runtime_1.jsx)(LinkSpan_1.default, { label: Array.isArray(child.value.label) ? child.value.label : [child.value.label] }, index);"
        },
        "depth_rank": 12
    },
    {
        "file": "HeadingBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/HeadingBlock.d.ts",
        "code": {
            "const": "declare const Header: ({ items, level }: HeadingBlockProps) => JSX.Element;\ndeclare const Header: ({ items, level }: HeadingBlockProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "CodeBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/CodeBlock.js",
        "code": {
            "CodeBlock": "const CodeBlock = ({ lines }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: { ...CodeSpan_1.codeStyles.wrapper, padding: 8 }, children: lines.map((line, index) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { style: CodeSpan_1.codeStyles.code, children: line.value?.value || ' ' }, index))) }));\nconst CodeBlock = ({ lines }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: { ...CodeSpan_1.codeStyles.wrapper, padding: 8 }, children: lines.map((line, index) => ((0, jsx_runtime_1.jsx)(renderer_1.Text, { style: CodeSpan_1.codeStyles.code, children: line.value?.value || ' ' }, index))) }));"
        },
        "depth_rank": 12
    },
    {
        "file": "ParagraphBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/ParagraphBlock.js",
        "code": {
            "ParagraphBlock": "const ParagraphBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: items }) }));\nconst ParagraphBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { children: (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: items }) }));"
        },
        "depth_rank": 12
    },
    {
        "file": "OrderedListBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/OrderedListBlock.d.ts",
        "code": {
            "const": "declare const OrderedListBlock: ({ items }: OrderedListBlockProps) => JSX.Element;\ndeclare const OrderedListBlock: ({ items }: OrderedListBlockProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "UnorderedListBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/UnorderedListBlock.js",
        "code": {
            "UnorderedListBlock": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginTop: 4,\n    },\n    list: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    bullet: {\n        marginHorizontal: 4,\n    },\n});\nconst UnorderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.list, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.bullet, children: \"\\u2022\" }), (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));\nconst UnorderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.View, { style: styles.list, children: [(0, jsx_runtime_1.jsx)(renderer_1.Text, { style: styles.bullet, children: \"\\u2022\" }), (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));"
        },
        "depth_rank": 12
    },
    {
        "file": "UnorderedListBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/UnorderedListBlock.d.ts",
        "code": {
            "const": "declare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => JSX.Element;\ndeclare const UnorderedListBlock: ({ items }: UnorderedListBlockProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "ParagraphBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/ParagraphBlock.d.ts",
        "code": {
            "const": "declare const ParagraphBlock: ({ items }: ParagraphBlockProps) => JSX.Element;\ndeclare const ParagraphBlock: ({ items }: ParagraphBlockProps) => JSX.Element;"
        },
        "depth_rank": 12
    },
    {
        "file": "BigEmojiBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/BigEmojiBlock.d.ts",
        "code": {
            "const": "declare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;\ndeclare const BigEmojiBlock: ({ emoji }: BigEmojiBlockProps) => ReactElement;"
        },
        "depth_rank": 12
    },
    {
        "file": "CodeBlock.d.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/CodeBlock.d.ts",
        "code": {
            "const": "declare const CodeBlock: ({ lines }: CodeBlockProps) => ReactElement;\ndeclare const CodeBlock: ({ lines }: CodeBlockProps) => ReactElement;"
        },
        "depth_rank": 12
    },
    {
        "file": "OrderedListBlock.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/pdf-worker/dist/templates/ChatTranscript/markup/blocks/OrderedListBlock.js",
        "code": {
            "OrderedListBlock": "const styles = renderer_1.StyleSheet.create({\nconst styles = renderer_1.StyleSheet.create({\n    wrapper: {\n        marginTop: 4,\n    },\n    list: {\n        flexDirection: 'row',\n    },\n    number: {\n        fontWeight: 700,\n        marginHorizontal: 4,\n    },\n});\nconst OrderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value, number }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.list, children: [(0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.number, children: [number, \".\"] }), \" \", (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));\nconst OrderedListBlock = ({ items }) => ((0, jsx_runtime_1.jsx)(renderer_1.View, { style: styles.wrapper, children: items.map(({ value, number }, index) => ((0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.list, children: [(0, jsx_runtime_1.jsxs)(renderer_1.Text, { style: styles.number, children: [number, \".\"] }), \" \", (0, jsx_runtime_1.jsx)(InlineElements_1.default, { children: value })] }, index))) }));"
        },
        "depth_rank": 12
    },
    {
        "file": "index.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/api-client/src/index.ts",
        "code": {
            "response": "\t\tconst response = await this.send(endpoint, 'DELETE', options ?? {});\n\t\tconst response = await this.send(endpoint, 'DELETE', options ?? {});"
        },
        "depth_rank": 8
    },
    {
        "file": "2fahandling.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/api-client/__tests__/2fahandling.spec.ts",
        "code": {
            "client": "\tconst fn = jest.fn();\n\tconst fn = jest.fn();\n\n\tconst client = new RestClient({\n\tconst client = new RestClient({\n\t\tbaseUrl: 'https://example.com',\n\t});\n\n\tclient.handleTwoFactorChallenge((e) => {\n\t\tfn(e);\n\n\t\tthrow new Error('foo');\n\t});\n\n\tawait expect(client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' })).rejects.toThrow(",
            "result": "\tconst result = await client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' });\n\tconst result = await client.post('/v1/login', { user: 'foo', username: 'foo', email: 'foo', password: 'foo', code: 'foo' });"
        },
        "depth_rank": 8
    },
    {
        "file": "index.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/api-client/dist/index.js",
        "code": {
            "__rest": "var __rest = (this && this.__rest) || function (s, e) {\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};"
        },
        "depth_rank": 8
    },
    {
        "file": "license.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/src/license.ts",
        "code": {
            "hadValidLicense": "\t\tconst hadValidLicense = this.hasValidLicense();\n\t\tconst hadValidLicense = this.hasValidLicense();\n\t\tthis.clearLicenseData();\n\n\t\ttry {\n\t\t\tthis._unmodifiedLicense = originalLicense || newLicense;\n\t\t\tthis._license = newLicense;\n\n\t\t\tthis._lockedLicense = encryptedLicense;\n\t\t\tawait this.validateLicense({ isNewLicense });",
            "modulesChanged": "\t\tconst modulesChanged = replaceModules.call(\n\t\tconst modulesChanged = replaceModules.call(\n\t\t\tthis,\n\t\t\tmodulesToEnable.map(({ module }) => module),",
            "decrypted": "\t\t\tconst decrypted = JSON.parse(await decrypt(encryptedLicense));\n\t\t\tconst decrypted = JSON.parse(await decrypt(encryptedLicense));\n\n\t\t\tlogger.debug({ msg: 'license', decrypted });",
            "fresh": "\t\t\t\tconst fresh = license\n\t\t\t\tconst fresh = license\n\t\t\t\t\t? isBehaviorsInResult(\n\t\t\t\t\t\t\tawait validateLicenseLimits.call(this, license, {\n\t\t\t\t\t\t\t\tbehaviors: ['prevent_action'],\n\t\t\t\t\t\t\t\tlimits: [limit],\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t['prevent_action'],\n\t\t\t\t\t  )\n\t\t\t\t\t: isBehaviorsInResult(await validateDefaultLimits.call(this, { behaviors: ['prevent_action'], limits: [limit] }), [",
            "currentState": "\t\tconst validationResult = await runValidation.call(this, license, options);\n\t\tconst validationResult = await runValidation.call(this, license, options);\n\n\t\tconst shouldPreventAction = isBehaviorsInResult(validationResult, ['prevent_action']);\n\t\tconst shouldPreventAction = isBehaviorsInResult(validationResult, ['prevent_action']);\n\n\t\t// extra values should not call events since they are not actually reaching the limit just checking if they would\n\t\tif (extraCount) {\n\t\t\treturn shouldPreventAction;\n\t\t}\n\n\t\t// check if any of the behaviors that should trigger a sync changed\n\t\tif (\n\t\t\t(['invalidate_license', 'disable_modules', 'start_fair_policy'] as const).some((behavior) => {\n\t\t\t(['invalidate_license', 'disable_modules', 'start_fair_policy'] as const).some((behavior) => {\n\t\t\t\tconst hasChanged = this.consolidateBehaviorState(action, behavior, isBehaviorsInResult(validationResult, [behavior]));\n\t\t\t\tconst hasChanged = this.consolidateBehaviorState(action, behavior, isBehaviorsInResult(validationResult, [behavior]));\n\t\t\t\tif (hasChanged && behavior === 'start_fair_policy') {\n\t\t\t\t\tthis.triggerBehaviorEventsToggled([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbehavior: 'start_fair_policy',\n\t\t\t\t\t\t\treason: 'limit',\n\t\t\t\t\t\t\tlimit: action,\n\t\t\t\t\t\t},\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\treturn hasChanged;\n\t\t\t})\n\t\t) {\n\t\t\tawait this.revalidateLicense();\n\t\t}\n\n\t\tconst eventsToEmit = shouldPreventAction\n\t\tconst eventsToEmit = shouldPreventAction\n\t\t\t? filterBehaviorsResult(validationResult, ['prevent_action'])\n\t\t\t: [\n\t\t\t\t\t{\n\t\t\t\t\t\tbehavior: 'allow_action',\n\t\t\t\t\t\tmodules: [],\n\t\t\t\t\t\treason: 'limit',\n\t\t\t\t\t\tlimit: action,\n\t\t\t\t\t} as BehaviorWithContext,\n\t\t\t  ];\n\n\t\tif (this.consolidateBehaviorState(action, 'prevent_action', shouldPreventAction)) {\n\t\t\tthis.triggerBehaviorEventsToggled(eventsToEmit);\n\t\t}\n\n\t\tthis.triggerBehaviorEvents(eventsToEmit);\n\n\t\treturn shouldPreventAction;\n\t}\n\n\tprivate consolidateBehaviorState<T extends LicenseLimitKind>(action: T, behavior: LicenseBehavior, triggered: boolean): boolean {\n\t\t// check if the behavior changed\n\t\tconst state = this.states.get(behavior) ?? new Map<LicenseLimitKind, boolean>();\n\t\tconst state = this.states.get(behavior) ?? new Map<LicenseLimitKind, boolean>();\n\n\t\tconst currentState = state.get(action) ?? false;\n\t\tconst currentState = state.get(action) ?? false;\n\n\t\tif (currentState === triggered) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// if it changed, update the state\n\t\tstate.set(action, triggered);\n\n\t\tthis.states.set(behavior, state);\n\t\treturn true;\n\t}\n\n\tpublic async getInfo({\n\t\tlimits: includeLimits,\n\t\tcurrentValues: loadCurrentValues,\n\t\tlicense: includeLicense,\n\t}: {"
        },
        "depth_rank": 8
    },
    {
        "file": "MockedLicenseBuilder.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/src/MockedLicenseBuilder.ts",
        "code": {
            "rule": "\t\tconst starts = date.toISOString();\n\t\tconst starts = date.toISOString();\n\n\t\tconst rule = this.validation.validPeriods.find((period) => period.invalidBehavior === 'invalidate_license');\n\t\tconst rule = this.validation.validPeriods.find((period) => period.invalidBehavior === 'invalidate_license');\n\n\t\tif (rule) {\n\t\t\trule.validFrom = starts;\n\t\t} else {"
        },
        "depth_rank": 8
    },
    {
        "file": "license.spec.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/src/license.spec.ts",
        "code": {
            "licenseManager": "\t\t\tconst licenseManager = new LicenseImp();\n\t\t\tconst licenseManager = new LicenseImp();\n\n\t\t\tlicenseManager.setLicenseLimitCounter('privateApps', () => 0);\n\t\t\tlicenseManager.setLicenseLimitCounter('marketplaceApps', () => 0);\n\n\t\t\texpect(\n\t\t\t\t(\n\t\t\t\t\tawait licenseManager.getInfo({\n\t\t\t\t\t\tlimits: true,\n\t\t\t\t\t\tcurrentValues: false,\n\t\t\t\t\t\tlicense: false,\n\t\t\t\t\t})\n\t\t\t\t).limits,\n\t\t\t).toMatchObject({\n\t\t\t\tprivateApps: { max: 3 },"
        },
        "depth_rank": 8
    },
    {
        "file": "validateLimits.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/src/validation/validateLimits.ts",
        "code": {
            "limitList": "\tconst limitKeys = (Object.keys(limits) as LicenseLimitKind[]).filter((limit) => isLimitAllowed(limit, options));\n\tconst limitKeys = (Object.keys(limits) as LicenseLimitKind[]).filter((limit) => isLimitAllowed(limit, options));\n\treturn (\n\t\tawait Promise.all(\n\t\t\tlimitKeys.map(async (limitKey) => {\n\t\t\t\t// Filter the limit list before running any query in the database so we don't end up loading some value we won't use.\n\t\t\t\tconst limitList = limits[limitKey]?.filter(({ behavior, max }) => max >= 0 && isBehaviorAllowed(behavior, options));\n\t\t\t\tconst limitList = limits[limitKey]?.filter(({ behavior, max }) => max >= 0 && isBehaviorAllowed(behavior, options));"
        },
        "depth_rank": 9
    },
    {
        "file": "getModulesToDisable.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/src/validation/getModulesToDisable.ts",
        "code": {
            "filterValidationResult": "const filterValidationResult = (result: BehaviorWithContext[], expectedBehavior: LicenseBehavior) =>\nconst filterValidationResult = (result: BehaviorWithContext[], expectedBehavior: LicenseBehavior) =>\n\tresult.filter(({ behavior }) => behavior === expectedBehavior) as BehaviorWithContext[];"
        },
        "depth_rank": 9
    },
    {
        "file": "emitter.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/dist/events/emitter.js",
        "code": {
            "moduleValidated": "function moduleValidated(module) {\nfunction moduleValidated(module) {\n    try {\n        this.emit('module', { module, valid: true });",
            "moduleRemoved": "function moduleRemoved(module) {\nfunction moduleRemoved(module) {\n    try {\n        this.emit('module', { module, valid: false });",
            "licenseValidated": "function licenseValidated() {\nfunction licenseValidated() {\n    try {\n        this.emit('validate');\n    }\n    catch (error) {\n        logger_1.logger.error({ msg: 'Error running license validated event', error });",
            "licenseInvalidated": "function licenseInvalidated() {\nfunction licenseInvalidated() {\n    try {\n        this.emit('invalidate');\n    }\n    catch (error) {\n        logger_1.logger.error({ msg: 'Error running license invalidated event', error });"
        },
        "depth_rank": 9
    },
    {
        "file": "convertToV3.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/dist/v2/convertToV3.js",
        "code": {
            "convertToV3": "const convertToV3 = (v2) => {\nconst convertToV3 = (v2) => {\n    return {\n        version: '3.0',\n        information: {\n            autoRenew: false,\n            ...((v2.meta?.trialEnd || v2.expiry) && { visualExpiration: new Date(Date.parse(v2.meta?.trialEnd || v2.expiry)).toISOString() }),"
        },
        "depth_rank": 9
    },
    {
        "file": "filterBehaviorsResult.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/dist/validation/filterBehaviorsResult.js",
        "code": {
            "filterBehaviorsResult": "const filterBehaviorsResult = (result, expectedBehaviors) => result.filter(({ behavior }) => expectedBehaviors.includes(behavior));\nconst filterBehaviorsResult = (result, expectedBehaviors) => result.filter(({ behavior }) => expectedBehaviors.includes(behavior));"
        },
        "depth_rank": 9
    },
    {
        "file": "isBehaviorsInResult.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/dist/validation/isBehaviorsInResult.js",
        "code": {
            "isBehaviorsInResult": "const isBehaviorsInResult = (result, expectedBehaviors) => result.some(({ behavior }) => expectedBehaviors.includes(behavior));\nconst isBehaviorsInResult = (result, expectedBehaviors) => result.some(({ behavior }) => expectedBehaviors.includes(behavior));"
        },
        "depth_rank": 9
    },
    {
        "file": "getModulesToDisable.js",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/license/dist/validation/getModulesToDisable.js",
        "code": {
            "filterValidationResult": "const filterValidationResult = (result, expectedBehavior) => result.filter(({ behavior }) => behavior === expectedBehavior);\nconst filterValidationResult = (result, expectedBehavior) => result.filter(({ behavior }) => behavior === expectedBehavior);",
            "getModulesToDisable": "const getModulesToDisable = (validationResult) => {\nconst getModulesToDisable = (validationResult) => {\n    return [\n        ...new Set([\n            ...filterValidationResult(validationResult, 'disable_modules')\n                .map(({ modules }) => modules || [])"
        },
        "depth_rank": 9
    },
    {
        "file": "OmnichannelTranscript.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/omnichannel-services/src/OmnichannelTranscript.ts",
        "code": {
            "isPromiseRejectedResult": "const isPromiseRejectedResult = (result: any): result is PromiseRejectedResult => result.status === 'rejected';\nconst isPromiseRejectedResult = (result: any): result is PromiseRejectedResult => result.status === 'rejected';\n\ntype WorkDetails = {\n\trid: IRoom['_id'];\n\tuserId: IUser['_id'];\n};\n\ntype WorkDetailsWithSource = WorkDetails & {\n\tfrom: string;\n};\n\ntype Quote = { name: string; ts?: Date; md: Root };",
            "reportingTimezone": "\t\tconst reportingTimezone = await settingsService.get('Default_Timezone_For_Reporting');\n\t\tconst reportingTimezone = await settingsService.get('Default_Timezone_For_Reporting');\n\n\t\tswitch (reportingTimezone) {\n\t\t\tcase 'custom':\n\t\t\t\treturn settingsService.get<string>('Default_Custom_Timezone');\n\t\t\tcase 'user':\n\t\t\t\tif (user?.utcOffset) {\n\t\t\t\t\treturn guessTimezoneFromOffset(user.utcOffset);\n\t\t\t\t}\n\t\t\t\treturn guessTimezone();\n\t\t\tdefault:\n\t\t\t\treturn guessTimezone();\n\t\t}\n\t}\n\n\tprivate getMessagesFromRoom({ rid }: { rid: string }): Promise<IMessage[]> {\n\t\t// Closing message should not appear :)\n\t\treturn Messages.findLivechatMessagesWithoutClosing(rid, {\n\t\t\tsort: { ts: 1 },",
            "This": "\t\t// This will prevent the usage of timeouts on the tests of this functionality :)\n\t\t// This will prevent the usage of timeouts on the tests of this functionality :)\n\t\tif (process.env.TEST_MODE) {\n\t\t\tawait this.workOnPdf({ details: { ...details, from: this.name } });",
            "fileBuffer": "\t\t\t\tconst fileBuffer = await uploadService.getFileBuffer({ file: uploadedFile });\n\t\t\t\tconst fileBuffer = await uploadService.getFileBuffer({ file: uploadedFile });",
            "messages": "\t\t\tconst messages = await this.getMessagesFromRoom({ rid: room._id });\n\t\t\tconst messages = await this.getMessagesFromRoom({ rid: room._id });",
            "visitor": "\t\t\tconst visitor =\n\t\t\tconst visitor =\n\t\t\t\troom.v &&\n\t\t\t\t(await LivechatVisitors.findOneEnabledById(room.v._id, { projection: { _id: 1, name: 1, username: 1, visitorEmails: 1 } }));",
            "agent": "\t\t\tconst agent =\n\t\t\tconst agent =\n\t\t\t\troom.servedBy && (await Users.findOneAgentById(room.servedBy._id, { projection: { _id: 1, name: 1, username: 1, utcOffset: 1 } }));",
            "data": "\t\t\tconst messagesData = await this.getMessagesData(messages);\n\t\t\tconst messagesData = await this.getMessagesData(messages);\n\n\t\t\tconst [siteName, dateFormat, timeAndDateFormat, timezone, translations] = await Promise.all([\n\t\t\tconst [siteName, dateFormat, timeAndDateFormat, timezone, translations] = await Promise.all([\n\t\t\t\tsettingsService.get<string>('Site_Name'),\n\t\t\t\tsettingsService.get<string>('Message_DateFormat'),\n\t\t\t\tsettingsService.get<string>('Message_TimeAndDateFormat'),\n\t\t\t\tthis.getTimezone(agent),\n\t\t\t\tthis.getTranslations(),\n\t\t\t]);\n\t\t\tconst data = {\n\t\t\tconst data = {\n\t\t\t\tvisitor,\n\t\t\t\tagent,\n\t\t\t\tclosedAt: room.closedAt,\n\t\t\t\tsiteName,\n\t\t\t\tmessages: messagesData,\n\t\t\t\tdateFormat,\n\t\t\t\ttimeAndDateFormat,\n\t\t\t\ttimezone,\n\t\t\t\ttranslations,\n\t\t\t};\n\n\t\t\tawait this.doRender({ data, details });",
            "stream": "\t\tconst transcriptText = await translationService.translateToServerLanguage('Transcript');\n\t\tconst transcriptText = await translationService.translateToServerLanguage('Transcript');\n\n\t\tconst stream = await this.worker.renderToStream({ data });\n\t\tconst stream = await this.worker.renderToStream({ data });",
            "e": "\t\t\tconst result = await Promise.allSettled([\n\t\t\tconst result = await Promise.allSettled([\n\t\t\t\tuploadService.sendFileMessage({\n\t\t\t\t\troomId: details.rid,\n\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\tfile,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t// Translate from service\n\t\t\t\t\t\tmsg: await translationService.translateToServerLanguage('pdf_success_message'),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\t// Send the file to the user who requested it, so they can download it\n\t\t\t\tuploadService.sendFileMessage({\n\t\t\t\t\troomId: rid,\n\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\tfile,\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t// Translate from service\n\t\t\t\t\t\tmsg: await translationService.translate('pdf_success_message', user),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t]);\n\t\t\tconst e = result.find((r) => isPromiseRejectedResult(r));\n\t\t\tconst e = result.find((r) => isPromiseRejectedResult(r));\n\t\t\tif (e && isPromiseRejectedResult(e)) {\n\t\t\t\tthrow e.reason;\n\t\t\t}\n\t\t} catch (err) {"
        },
        "depth_rank": 8
    },
    {
        "file": "useThemeMode.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ui-theming/src/hooks/useThemeMode.ts",
        "code": {
            "saveUserPreferences": "\tconst themeMode = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\tconst themeMode = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst [updaters] = useState(\n\tconst [updaters] = useState(\n\t\t(): Record<ThemeMode, () => void> => ({\n\t\t\t'light': () => saveUserPreferences({ data: { themeAppearence: 'light' } }),"
        },
        "depth_rank": 9
    },
    {
        "file": "useLayoutVariables.ts",
        "path": "/home/giri/gsoc/Rocket.Chat/ee/packages/ui-theming/src/hooks/useLayoutVariables.ts",
        "code": {
            "setting": "\tconst setting = String(useSetting('Layout_Fuselage_Palette') || '{}');\n\tconst setting = String(useSetting('Layout_Fuselage_Palette') || '{}');"
        },
        "depth_rank": 9
    }
]